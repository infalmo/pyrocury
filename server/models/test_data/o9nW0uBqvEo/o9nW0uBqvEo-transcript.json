[{"text": "The following content is\nprovided under a Creative", "start": 0.79, "duration": 2.4}, {"text": "Commons license.", "start": 3.19, "duration": 1.54}, {"text": "Your support will help\nMIT OpenCourseWare", "start": 4.73, "duration": 2.3}, {"text": "continue to offer high quality\neducational resources for free.", "start": 7.03, "duration": 4.36}, {"text": "To make a donation or\nview additional materials", "start": 11.39, "duration": 2.6}, {"text": "from hundreds of\nMIT courses, visit", "start": 13.99, "duration": 2.46}, {"text": "MITOpenCourseWare@ocw.mit.edu.", "start": 16.45, "duration": 2.03}, {"text": "PROFESSOR: OK, folks.", "start": 24.84, "duration": 2.71}, {"text": "Welcome back.", "start": 27.55, "duration": 1.38}, {"text": "Hope you had a nice long\nweekend with no classes.", "start": 28.93, "duration": 2.07}, {"text": "You got caught up on all\nthose problem sets that", "start": 31.0, "duration": 2.0}, {"text": "have been sneaking up on you.", "start": 33.0, "duration": 1.55}, {"text": "You enjoyed watching\nthe Patriots and Tom", "start": 34.55, "duration": 1.99}, {"text": "Brady come back.", "start": 36.54, "duration": 0.78}, {"text": "Oh, sorry, I'm\nshowing my local bias.", "start": 37.32, "duration": 3.4}, {"text": "Before we talk\nabout today's topic,", "start": 40.72, "duration": 3.31}, {"text": "I want to take a second\nto set the stage.", "start": 44.03, "duration": 1.91}, {"text": "And I want you to stop and\nthink about what you've", "start": 45.94, "duration": 2.5}, {"text": "seen so far in this course.", "start": 48.44, "duration": 1.882}, {"text": "We're coming up on the\nend of the first section", "start": 50.322, "duration": 1.958}, {"text": "of the course.", "start": 52.28, "duration": 0.84}, {"text": "And you've already seen a lot.", "start": 53.12, "duration": 1.98}, {"text": "You've certainly learned about\nfundamentals of computation.", "start": 55.1, "duration": 3.02}, {"text": "You've seen different\nkinds of data structures,", "start": 58.12, "duration": 2.64}, {"text": "both mutable and immutable, so\ntuples and lists, dictionaries,", "start": 60.76, "duration": 3.42}, {"text": "different ways of\npulling things together.", "start": 64.18, "duration": 2.97}, {"text": "You've seen a\nrange of algorithms", "start": 67.15, "duration": 1.38}, {"text": "from simple linear code\nto loops, fors and whiles.", "start": 68.53, "duration": 4.2}, {"text": "You've seen\niterative algorithms.", "start": 72.73, "duration": 1.65}, {"text": "You've seen\nrecursive algorithms.", "start": 74.38, "duration": 1.77}, {"text": "You've seen classes\nof algorithms.", "start": 76.15, "duration": 3.48}, {"text": "Divide and conquer.", "start": 79.63, "duration": 1.65}, {"text": "Greedy algorithms.", "start": 81.28, "duration": 1.35}, {"text": "Bisection search.", "start": 82.63, "duration": 1.86}, {"text": "A range of things.", "start": 84.49, "duration": 0.78}, {"text": "And then most recently,\nyou start pulling things", "start": 85.27, "duration": 2.25}, {"text": "together with classes--\na way to group together", "start": 87.52, "duration": 2.91}, {"text": "data that belongs together along\nwith methods or procedures that", "start": 90.43, "duration": 4.14}, {"text": "are designed to\nmanipulate that data.", "start": 94.57, "duration": 2.55}, {"text": "So you've had actually\na fairly good coverage", "start": 97.12, "duration": 2.4}, {"text": "already of a lot of the\nfundamentals of computation.", "start": 99.52, "duration": 3.661}, {"text": "And you're starting\nto get geared up", "start": 103.181, "duration": 1.499}, {"text": "to be able to tackle a pretty\ninteresting range of problems.", "start": 104.68, "duration": 4.5}, {"text": "Today and Monday,\nwe're going to take", "start": 109.18, "duration": 2.7}, {"text": "a little bit of a different\nlook at computation.", "start": 111.88, "duration": 2.4}, {"text": "Because now that you've got\nthe tools to start building up", "start": 114.28, "duration": 3.0}, {"text": "your own personal\narmamentarium of tools,", "start": 117.28, "duration": 4.11}, {"text": "we'd like to ask a couple\nof important questions.", "start": 121.39, "duration": 2.94}, {"text": "The primary one of which is how\nefficient are my algorithms?", "start": 124.33, "duration": 5.51}, {"text": "And by efficiency, we'll see it\nrefers both to space and time,", "start": 129.84, "duration": 3.22}, {"text": "but primarily to time.", "start": 133.06, "duration": 1.55}, {"text": "And we'd like to know both how\nfast are my algorithms going", "start": 134.61, "duration": 3.85}, {"text": "to run and how could I reason\nabout past performance.", "start": 138.46, "duration": 3.311}, {"text": "And that's what we're going\nto do with today's topics.", "start": 141.771, "duration": 2.249}, {"text": "We're going to talk\nabout orders of growth.", "start": 144.02, "duration": 2.0}, {"text": "We'll define what that\nmeans in a few minutes.", "start": 146.02, "duration": 1.96}, {"text": "We're going to talk about what's\ncalled the big O notation.", "start": 147.98, "duration": 2.99}, {"text": "And we're going to begin to\nexplore different classes", "start": 150.97, "duration": 2.76}, {"text": "of algorithms.", "start": 153.73, "duration": 2.43}, {"text": "Before we do that though,\nlet's talk about why.", "start": 156.16, "duration": 3.525}, {"text": "And I want to suggest to you\nthere are two reasons this", "start": 159.685, "duration": 4.055}, {"text": "is important to be considering.", "start": 163.74, "duration": 3.49}, {"text": "First question is how could\nwe reason about an algorithm", "start": 167.23, "duration": 2.7}, {"text": "something you write in order\nto predict how much time is", "start": 169.93, "duration": 4.02}, {"text": "it going to need to solve a\nproblem of a particular size?", "start": 173.95, "duration": 3.97}, {"text": "I might be testing my code\non small scale examples.", "start": 177.92, "duration": 3.04}, {"text": "And I want to know if I'd run\nit on a really big one, how", "start": 180.96, "duration": 2.43}, {"text": "long is it going to take?", "start": 183.39, "duration": 1.041}, {"text": "Can I predict that?", "start": 184.431, "duration": 1.509}, {"text": "Can I make guesses\nabout how much time", "start": 185.94, "duration": 3.09}, {"text": "I'm going to need to\nsolve this problem?", "start": 189.03, "duration": 2.14}, {"text": "Especially if it's\nin a real world", "start": 191.17, "duration": 1.58}, {"text": "circumstance where time\nis going to be crucial.", "start": 192.75, "duration": 3.37}, {"text": "Equally important is\ngoing the other direction.", "start": 196.12, "duration": 3.99}, {"text": "We want you to begin to\nreason about the algorithms", "start": 200.11, "duration": 3.27}, {"text": "you write to be\nable to say how do", "start": 203.38, "duration": 2.1}, {"text": "certain choices in a design\nof an algorithm influence", "start": 205.48, "duration": 4.56}, {"text": "how much time it's\ngoing to take.", "start": 210.04, "duration": 2.01}, {"text": "If I choose to do\nthis recursively,", "start": 212.05, "duration": 1.552}, {"text": "is that going to be\ndifferent than iteratively?", "start": 213.602, "duration": 1.958}, {"text": "If I choose to do this with a\nparticular kind of structure", "start": 215.56, "duration": 3.06}, {"text": "in my algorithm, what does\nthat say about the amount", "start": 218.62, "duration": 3.27}, {"text": "of time I'm going to need?", "start": 221.89, "duration": 1.35}, {"text": "And you're going to see\nthere's a nice association", "start": 223.24, "duration": 2.52}, {"text": "between classes of algorithms\nand the interior structure", "start": 225.76, "duration": 3.15}, {"text": "of them.", "start": 228.91, "duration": 1.14}, {"text": "And in particular, we want to\nask some fundamental questions.", "start": 230.05, "duration": 4.53}, {"text": "Are there fundamental\nlimits to how much time", "start": 234.58, "duration": 3.179}, {"text": "it's going to take to\nsolve a particular problem,", "start": 237.759, "duration": 2.041}, {"text": "no matter what kind of\nalgorithm I design around this?", "start": 239.8, "duration": 2.849}, {"text": "And we'll see that there\nare some nice challenges", "start": 242.649, "duration": 2.041}, {"text": "about that.", "start": 244.69, "duration": 1.26}, {"text": "So that's what we're going\nto do over the next two days.", "start": 245.95, "duration": 3.43}, {"text": "Before we do though, let's\nmaybe ask the obvious question--", "start": 249.38, "duration": 2.47}, {"text": "why should we care?", "start": 251.85, "duration": 2.36}, {"text": "Could be on a quiz,\nmight matter to you.", "start": 254.21, "duration": 3.9}, {"text": "Better choice is because it\nactually makes a difference.", "start": 258.11, "duration": 4.52}, {"text": "And I say that because it\nmay not be as obvious to you", "start": 262.63, "duration": 2.47}, {"text": "as it was in an\nearlier generation.", "start": 265.1, "duration": 1.56}, {"text": "So people with my gray hair\nor what's left of my gray hair", "start": 266.66, "duration": 2.73}, {"text": "like to tell stories.", "start": 269.39, "duration": 1.81}, {"text": "I'll make it short.", "start": 271.2, "duration": 2.26}, {"text": "But I started programming\n41 years ago-- no,", "start": 273.46, "duration": 4.24}, {"text": "sorry, 45 years\nago-- on punch cards.", "start": 277.7, "duration": 2.841}, {"text": "You don't know what those are\nunless you've been to a museum", "start": 280.541, "duration": 2.499}, {"text": "on a machine that\nfilled a half a room", "start": 283.04, "duration": 2.4}, {"text": "and that took about\nfive minutes to execute", "start": 285.44, "duration": 2.31}, {"text": "what you can do in a fraction\nof a second on your phone.", "start": 287.75, "duration": 3.22}, {"text": "Right.", "start": 290.97, "duration": 0.5}, {"text": "This is to tell you're\nliving in a great time, not", "start": 291.47, "duration": 2.19}, {"text": "independent of what's going\nto happen on November 8th.", "start": 293.66, "duration": 3.66}, {"text": "All right.", "start": 297.32, "duration": 0.5}, {"text": "We'll stay away from those\ntopics as well, won't we?", "start": 297.82, "duration": 3.04}, {"text": "My point is yeah,\nI tell old stories.", "start": 300.86, "duration": 2.37}, {"text": "I'm an old guy.", "start": 303.23, "duration": 1.302}, {"text": "But you might argue\nlook, computers", "start": 304.532, "duration": 1.458}, {"text": "are getting so much faster.", "start": 305.99, "duration": 1.41}, {"text": "Does it really matter?", "start": 307.4, "duration": 1.08}, {"text": "And I want to say to you--\nmaybe it's obvious to you--", "start": 308.48, "duration": 2.25}, {"text": "yes, absolutely it does.", "start": 310.73, "duration": 2.31}, {"text": "Because in conjunction with\nus getting faster computers,", "start": 313.04, "duration": 3.15}, {"text": "we're increasing the\nsizes of the problems.", "start": 316.19, "duration": 1.8}, {"text": "The data sets we want to\nanalyze are getting massive.", "start": 317.99, "duration": 3.8}, {"text": "And I'll give you an example.", "start": 321.79, "duration": 2.04}, {"text": "I just pulled this off\nof Google, of course.", "start": 323.83, "duration": 3.16}, {"text": "In 2014-- I don't have\nmore recent numbers--", "start": 326.99, "duration": 2.25}, {"text": "Google served-- I think I\nhave that number right--", "start": 329.24, "duration": 2.67}, {"text": "30 trillion pages on the web.", "start": 331.91, "duration": 5.2}, {"text": "It's either 30 trillionaire\nor 30 quadrillion.", "start": 337.11, "duration": 2.43}, {"text": "I can't count that\nmany zeros there.", "start": 339.54, "duration": 1.83}, {"text": "It covered 100 million\ngigabytes of data.", "start": 341.37, "duration": 4.216}, {"text": "And I suggest to you if you want\nto find a piece of information", "start": 345.586, "duration": 2.624}, {"text": "on the web, can you write a\nsimple little search algorithm", "start": 348.21, "duration": 3.192}, {"text": "that's going to sequentially\ngo through all the pages", "start": 351.402, "duration": 2.208}, {"text": "and find anything in any\nreasonable amount of time?", "start": 353.61, "duration": 3.48}, {"text": "Probably not.", "start": 357.09, "duration": 0.73}, {"text": "Right?", "start": 357.82, "duration": 0.5}, {"text": "It's just growing way too fast.", "start": 358.32, "duration": 2.52}, {"text": "This, by the way, is of course,\nwhy Google makes a lot of money", "start": 360.84, "duration": 3.03}, {"text": "off of their map\nreduced algorithm", "start": 363.87, "duration": 2.61}, {"text": "for searching the web,\nwritten by the way,", "start": 366.48, "duration": 2.28}, {"text": "or co-written by an MIT grad\nand the parent of a current MIT", "start": 368.76, "duration": 3.78}, {"text": "student.", "start": 372.54, "duration": 0.5}, {"text": "So there's a nice\nhook in there, not", "start": 373.04, "duration": 1.57}, {"text": "that Google pays MIT royalties\nfor that wonderful thing,", "start": 374.61, "duration": 2.43}, {"text": "by the way.", "start": 377.04, "duration": 1.45}, {"text": "All right.", "start": 378.49, "duration": 0.74}, {"text": "Bad jokes aside, searching\nGoogle-- ton of time.", "start": 379.23, "duration": 3.84}, {"text": "Searching a genomics\ndata set-- ton of time.", "start": 383.07, "duration": 3.52}, {"text": "The data sets are\ngrowing so fast.", "start": 386.59, "duration": 2.51}, {"text": "You're working for\nthe US government.", "start": 389.1, "duration": 1.65}, {"text": "You want to track terrorists\nusing image surveillance", "start": 390.75, "duration": 3.21}, {"text": "from around the world,\ngrowing incredibly rapidly.", "start": 393.96, "duration": 3.18}, {"text": "Pick a problem.", "start": 397.14, "duration": 0.82}, {"text": "The data sets grow\nso quickly that even", "start": 397.96, "duration": 3.14}, {"text": "if the computers\nspeed up, you still", "start": 401.1, "duration": 1.65}, {"text": "need to think about how to\ncome up with efficient ways", "start": 402.75, "duration": 2.94}, {"text": "to solve those problems.", "start": 405.69, "duration": 1.99}, {"text": "So I want to suggest\nto you while sometimes", "start": 407.68, "duration": 2.33}, {"text": "simple solutions are great,\nthey are the easy ones to rate--", "start": 410.01, "duration": 2.56}, {"text": "too write.", "start": 412.57, "duration": 0.56}, {"text": "Sorry.", "start": 413.13, "duration": 0.78}, {"text": "At times, you need to\nbe more sophisticated.", "start": 413.91, "duration": 2.16}, {"text": "Therefore, we want\nto reason about", "start": 416.07, "duration": 2.94}, {"text": "how do we measure\nefficiency and how do we", "start": 419.01, "duration": 2.43}, {"text": "relate algorithm design\nchoices to the cost that's", "start": 421.44, "duration": 3.9}, {"text": "going to be associated with it?", "start": 425.34, "duration": 2.83}, {"text": "OK.", "start": 428.17, "duration": 1.499}, {"text": "Even when we do that,\nwe've got a choice to make.", "start": 429.669, "duration": 2.041}, {"text": "Because we could talk about\nboth efficiency in terms of time", "start": 431.71, "duration": 4.14}, {"text": "or in terms of space,\nmeaning how much storage", "start": 435.85, "duration": 2.85}, {"text": "do I have inside the computer?", "start": 438.7, "duration": 2.22}, {"text": "And the reason\nthat's relevant is", "start": 440.92, "duration": 1.47}, {"text": "there's actually in many cases\na trade-off between those two.", "start": 442.39, "duration": 3.565}, {"text": "And you've actually seen an\nexample, which you may or may", "start": 445.955, "duration": 2.375}, {"text": "not remember.", "start": 448.33, "duration": 1.5}, {"text": "You may recall when we\nintroduced dictionaries,", "start": 449.83, "duration": 1.98}, {"text": "I showed you a\nvariation where you", "start": 451.81, "duration": 1.74}, {"text": "could compute Fibonacci\nusing the dictionary to keep", "start": 453.55, "duration": 3.51}, {"text": "track of intermediate values.", "start": 457.06, "duration": 2.7}, {"text": "And we'll see in next week\nthat it actually tremendously", "start": 459.76, "duration": 2.37}, {"text": "reduces the time complexity.", "start": 462.13, "duration": 1.83}, {"text": "That's called a trade-off,\nin the sense that sometimes I", "start": 463.96, "duration": 2.37}, {"text": "can pre-compute\nportions of the answer,", "start": 466.33, "duration": 3.38}, {"text": "store them away,\nso that when I've", "start": 469.71, "duration": 1.51}, {"text": "tried to a bigger\nversion of the answer", "start": 471.22, "duration": 1.624}, {"text": "I can just look\nup those portions.", "start": 472.844, "duration": 2.066}, {"text": "So there's going to\nbe a trade-off here.", "start": 474.91, "duration": 1.98}, {"text": "We're going to\nfocus, for purposes", "start": 476.89, "duration": 2.13}, {"text": "of this lecture and the next\none, on time efficiency.", "start": 479.02, "duration": 2.89}, {"text": "How much time is it going\nto take our algorithms", "start": 481.91, "duration": 2.0}, {"text": "to solve a problem?", "start": 483.91, "duration": 3.15}, {"text": "OK.", "start": 487.06, "duration": 1.552}, {"text": "What are the challenges\nin doing that before we", "start": 488.612, "duration": 1.958}, {"text": "look at the actual tools?", "start": 490.57, "duration": 1.14}, {"text": "And in fact, this is going\nto lead into the tools.", "start": 491.71, "duration": 3.52}, {"text": "The first one is even if\nI've decided on an algorithm,", "start": 495.23, "duration": 4.26}, {"text": "there are lots of ways\nto implement that.", "start": 499.49, "duration": 2.44}, {"text": "A while loop and a for loop\nmight have slightly different", "start": 501.93, "duration": 2.64}, {"text": "behavior.", "start": 504.57, "duration": 1.08}, {"text": "I could choose to do it\nwith temporary variables", "start": 505.65, "duration": 2.52}, {"text": "or using direct substitution.", "start": 508.17, "duration": 1.36}, {"text": "There's lots of little choices.", "start": 509.53, "duration": 1.76}, {"text": "So an algorithm\ncould be implemented", "start": 511.29, "duration": 1.65}, {"text": "many different ways.", "start": 512.94, "duration": 1.27}, {"text": "How do I measure the actual\nefficiency of the algorithm?", "start": 514.21, "duration": 3.969}, {"text": "Second one is I might,\nfor a given problem,", "start": 518.179, "duration": 2.551}, {"text": "have different\nchoices of algorithm.", "start": 520.73, "duration": 2.73}, {"text": "A recursive solution\nversus an iterative one.", "start": 523.46, "duration": 3.03}, {"text": "Using divide and conquer\nversus straightforward search.", "start": 526.49, "duration": 3.072}, {"text": "We're going to see\nsome examples of that.", "start": 529.562, "duration": 1.708}, {"text": "So I've got to somehow\nseparate those pieces out.", "start": 531.27, "duration": 3.05}, {"text": "And in particular, I'd\nlike to separate out", "start": 534.32, "duration": 2.16}, {"text": "the choice of implementation\nfrom the choice of algorithm.", "start": 536.48, "duration": 3.63}, {"text": "I want to measure how\nhard is the algorithm,", "start": 540.11, "duration": 1.9}, {"text": "not can I come up\nwith a slightly more", "start": 542.01, "duration": 2.42}, {"text": "efficient way of coming\nup with an implementation.", "start": 544.43, "duration": 4.22}, {"text": "So here are three\nways I might do it.", "start": 548.65, "duration": 2.3}, {"text": "And we're going to look at\neach one of them very briefly.", "start": 550.95, "duration": 2.82}, {"text": "The obvious one is we could\nbe scientists-- time it.", "start": 553.77, "duration": 3.98}, {"text": "Write the code, run a bunch\nof test case, run a timer,", "start": 557.75, "duration": 2.64}, {"text": "use that to try and come up with\na way of estimating efficiency.", "start": 560.39, "duration": 4.77}, {"text": "We'll see some\nchallenges with that.", "start": 565.16, "duration": 2.45}, {"text": "Slightly more abstractly,\nwe could count operations.", "start": 567.61, "duration": 4.98}, {"text": "We could say here are the set\nof fundamental operations--", "start": 572.59, "duration": 2.67}, {"text": "mathematical operations,\ncomparisons, setting values,", "start": 575.26, "duration": 3.63}, {"text": "retrieving values.", "start": 578.89, "duration": 1.59}, {"text": "And simply say how many\nof those operations", "start": 580.48, "duration": 2.28}, {"text": "do I use in my\nalgorithm as a function", "start": 582.76, "duration": 2.46}, {"text": "of the size of the input?", "start": 585.22, "duration": 1.71}, {"text": "And that could be used to\ngive us a sense of efficiency.", "start": 586.93, "duration": 3.56}, {"text": "We're going to see both of\nthose are flawed somewhat more", "start": 590.49, "duration": 2.99}, {"text": "in the first case\nthan the second one.", "start": 593.48, "duration": 2.09}, {"text": "And so we're going to\nabstract that second one", "start": 595.57, "duration": 2.15}, {"text": "to a more abstract\nnotion of something", "start": 597.72, "duration": 1.8}, {"text": "we call an order of growth.", "start": 599.52, "duration": 2.24}, {"text": "And I'll come back to that\nin a couple of minutes.", "start": 601.76, "duration": 3.21}, {"text": "This is the one we're\ngoing to focus on.", "start": 604.97, "duration": 2.35}, {"text": "It's one that computer\nscientists use.", "start": 607.32, "duration": 1.745}, {"text": "It leads to what we\ncall complexity classes.", "start": 609.065, "duration": 2.115}, {"text": "So order of growth\nor big O notation", "start": 611.18, "duration": 2.25}, {"text": "is a way of\nabstractly describing", "start": 613.43, "duration": 2.76}, {"text": "the behavior of an\nalgorithm, and especially", "start": 616.19, "duration": 2.43}, {"text": "the equivalences of\ndifferent algorithms.", "start": 618.62, "duration": 3.26}, {"text": "But let's look at those.", "start": 621.88, "duration": 1.42}, {"text": "Timing.", "start": 623.3, "duration": 2.197}, {"text": "Python provides a timer for you.", "start": 625.497, "duration": 1.333}, {"text": "You could import\nthe time module.", "start": 626.83, "duration": 1.941}, {"text": "And then you can call, as\nyou can see right down here.", "start": 628.771, "duration": 2.249}, {"text": "I might have defined a really\nsimple little function--", "start": 631.02, "duration": 2.8}, {"text": "convert Celsius to Fahrenheit.", "start": 633.82, "duration": 2.1}, {"text": "And in particular, I could\ninvoke the clock method", "start": 635.92, "duration": 3.21}, {"text": "from the time module.", "start": 639.13, "duration": 2.37}, {"text": "And what that does\nis it gives me", "start": 641.5, "duration": 1.38}, {"text": "a number as the number of some\nfractions of a second currently", "start": 642.88, "duration": 3.16}, {"text": "there.", "start": 646.04, "duration": 0.83}, {"text": "Having done that I\ncould call the function.", "start": 646.87, "duration": 2.41}, {"text": "And then I could call the clock\nagain, and take the difference", "start": 649.28, "duration": 2.99}, {"text": "to tell me how much time\nit took to execute this.", "start": 652.27, "duration": 2.36}, {"text": "It's going to be a\ntiny amount of time.", "start": 654.63, "duration": 1.99}, {"text": "And then I could certainly\nprint out some statistics.", "start": 656.62, "duration": 3.402}, {"text": "I could do that\nover a large number", "start": 660.022, "duration": 1.458}, {"text": "of runs-- different\nsizes of the input--", "start": 661.48, "duration": 2.22}, {"text": "and come up with a sense of\nhow much time does it take.", "start": 663.7, "duration": 4.77}, {"text": "Here's the problem with that.", "start": 668.47, "duration": 2.29}, {"text": "Not a bad idea.", "start": 670.76, "duration": 1.82}, {"text": "But again, my goal is\nto evaluate algorithms.", "start": 672.58, "duration": 3.34}, {"text": "Do different algorithms\nhave different amounts", "start": 675.92, "duration": 1.92}, {"text": "of time associated with them?", "start": 677.84, "duration": 2.226}, {"text": "The good news is is that\nif I measure running time,", "start": 680.066, "duration": 2.124}, {"text": "it will certainly vary\nas the algorithm changes.", "start": 682.19, "duration": 3.45}, {"text": "Just what I want to measure.", "start": 685.64, "duration": 1.41}, {"text": "Sorry.", "start": 687.05, "duration": 1.59}, {"text": "But one of the problems\nis that it will also", "start": 688.64, "duration": 2.25}, {"text": "vary as a function of\nthe implementation.", "start": 690.89, "duration": 3.44}, {"text": "Right?", "start": 694.33, "duration": 0.5}, {"text": "If I use a loop that's got a\ncouple of more steps inside", "start": 694.83, "duration": 2.43}, {"text": "of it in one algorithm\nthan another,", "start": 697.26, "duration": 1.501}, {"text": "it's going to change the time.", "start": 698.761, "duration": 1.249}, {"text": "And I don't really care\nabout that difference.", "start": 700.01, "duration": 2.08}, {"text": "So I'm confounding or conflating\nimplementation influence", "start": 702.09, "duration": 3.6}, {"text": "on time with algorithm\ninfluence on time.", "start": 705.69, "duration": 3.84}, {"text": "Not so good.", "start": 709.53, "duration": 1.92}, {"text": "Worse, timing will\ndepend on the computer.", "start": 711.45, "duration": 4.44}, {"text": "My Mac here is pretty old.", "start": 715.89, "duration": 1.249}, {"text": "Well, at least for\ncomputer versions.", "start": 717.139, "duration": 1.541}, {"text": "It's about five years old.", "start": 718.68, "duration": 1.14}, {"text": "I'm sure some of you have\nmuch more recent Macs", "start": 719.82, "duration": 2.55}, {"text": "or other kinds of machines.", "start": 722.37, "duration": 1.825}, {"text": "Your speeds may be\ndifferent from mine.", "start": 724.195, "duration": 1.625}, {"text": "That's not going to help me\nin trying to measure this.", "start": 725.82, "duration": 2.67}, {"text": "And even if I could measure\nit on small sized problems,", "start": 728.49, "duration": 3.24}, {"text": "it doesn't necessarily\npredict what", "start": 731.73, "duration": 1.98}, {"text": "happens when I go to a\nreally large sized problems,", "start": 733.71, "duration": 2.64}, {"text": "because of issues\nlike the time it", "start": 736.35, "duration": 1.65}, {"text": "takes to get things\nout of memory", "start": 738.0, "duration": 2.34}, {"text": "and bring them back\nin to the computer.", "start": 740.34, "duration": 2.5}, {"text": "So what it says is\nthat timing does", "start": 742.84, "duration": 3.44}, {"text": "vary based on what\nI'd like to measure,", "start": 746.28, "duration": 2.37}, {"text": "but it varies on a\nlot of other factors.", "start": 748.65, "duration": 1.87}, {"text": "And it's really not\nall that valuable.", "start": 750.52, "duration": 3.11}, {"text": "OK.", "start": 753.63, "duration": 0.6}, {"text": "Got rid of the first one.", "start": 754.23, "duration": 2.035}, {"text": "Let's abstract that.", "start": 756.265, "duration": 3.055}, {"text": "By abstract, I'm going to\nmake the following assumption.", "start": 759.32, "duration": 2.41}, {"text": "I'm going to identify a set\nof primitive operations.", "start": 761.73, "duration": 4.296}, {"text": "Kind of get to\nsay what they are,", "start": 766.026, "duration": 1.374}, {"text": "but the obvious\none is to say what", "start": 767.4, "duration": 1.416}, {"text": "does the machine do\nfor me automatically.", "start": 768.816, "duration": 2.634}, {"text": "That would be things\nlike arithmetic", "start": 771.45, "duration": 2.04}, {"text": "or mathematical operations,\nmultiplication, division,", "start": 773.49, "duration": 3.45}, {"text": "subtraction,\ncomparisons, something", "start": 776.94, "duration": 3.552}, {"text": "equal to another thing,\nsomething greater than,", "start": 780.492, "duration": 1.958}, {"text": "something less\nthan, assignments,", "start": 782.45, "duration": 3.17}, {"text": "set a name to a value,\nand retrieval from memory.", "start": 785.62, "duration": 3.57}, {"text": "I'm going to assume that\nall of these operations", "start": 789.19, "duration": 3.39}, {"text": "take about the same amount\nof time inside my machine.", "start": 792.58, "duration": 4.184}, {"text": "Nice thing here\nis then it doesn't", "start": 796.764, "duration": 1.416}, {"text": "matter which machine I'm using.", "start": 798.18, "duration": 1.291}, {"text": "I'm measuring how long\ndoes the algorithm take", "start": 799.471, "duration": 2.399}, {"text": "by counting how many\noperations of this type", "start": 801.87, "duration": 3.33}, {"text": "are done inside\nof the algorithm.", "start": 805.2, "duration": 2.93}, {"text": "And I'm going to use\nthat count to come up", "start": 808.13, "duration": 1.75}, {"text": "with a number of\noperations executed", "start": 809.88, "duration": 1.77}, {"text": "as a function of the\nsize of the input.", "start": 811.65, "duration": 2.346}, {"text": "And if I'm lucky,\nthat'll give me", "start": 813.996, "duration": 1.374}, {"text": "a sense of what's the\nefficiency of the algorithm.", "start": 815.37, "duration": 3.4}, {"text": "So this one's pretty boring.", "start": 818.77, "duration": 2.14}, {"text": "It's got three steps.", "start": 820.91, "duration": 1.01}, {"text": "Right?", "start": 821.92, "duration": 0.5}, {"text": "A multiplication, a division,\nand an addition-- four,", "start": 822.42, "duration": 2.35}, {"text": "if you count the return.", "start": 824.77, "duration": 1.8}, {"text": "But if I had a little\nthing here that added up", "start": 826.57, "duration": 2.01}, {"text": "the integers from\n0 up to x, I've", "start": 828.58, "duration": 3.071}, {"text": "got a little loop inside here.", "start": 831.651, "duration": 1.249}, {"text": "And I could count operations.", "start": 832.9, "duration": 2.25}, {"text": "So in this case, it's just,\nas I said, three operations.", "start": 835.15, "duration": 2.4}, {"text": "Here, I've got one operation.", "start": 837.55, "duration": 3.5}, {"text": "I'm doing an assignment.", "start": 841.05, "duration": 2.22}, {"text": "And then inside\nhere, in essence,", "start": 843.27, "duration": 2.28}, {"text": "there's one operation to set i\nto a value from that iterator.", "start": 845.55, "duration": 5.08}, {"text": "Initially, it's going to be 0.", "start": 850.63, "duration": 1.25}, {"text": "And then it's going to be 1.", "start": 851.88, "duration": 1.166}, {"text": "And you get the idea.", "start": 853.046, "duration": 1.794}, {"text": "And here, that's\nactually two operations.", "start": 854.84, "duration": 4.66}, {"text": "It's nice Python shorthand.", "start": 859.5, "duration": 1.306}, {"text": "But what is that operation?", "start": 860.806, "duration": 1.124}, {"text": "It says take the value of\ntotal and the value of i,", "start": 861.93, "duration": 2.88}, {"text": "add them together--\nit's one operation--", "start": 864.81, "duration": 2.04}, {"text": "and then set that value,\nor rather, set the name", "start": 866.85, "duration": 3.18}, {"text": "total to that new value.", "start": 870.03, "duration": 1.18}, {"text": "So a second operation.", "start": 871.21, "duration": 1.37}, {"text": "So you can see in here,\nI've got three operations.", "start": 872.58, "duration": 3.52}, {"text": "And what else do I have?", "start": 876.1, "duration": 1.29}, {"text": "Well, I'm going to go\nthrough this loop x times.", "start": 877.39, "duration": 4.14}, {"text": "Right?", "start": 881.53, "duration": 0.5}, {"text": "I do it for i equals 0.", "start": 882.03, "duration": 1.32}, {"text": "And therefore, i\nequal 1, and so on.", "start": 883.35, "duration": 1.5}, {"text": "So I'm going to run\nthrough that loop x times.", "start": 884.85, "duration": 3.63}, {"text": "And if I put that together, I\nget a nice little expression.", "start": 888.48, "duration": 5.73}, {"text": "1 plus 3x.", "start": 894.21, "duration": 2.534}, {"text": "Actually, I probably\ncheated here.", "start": 896.744, "duration": 1.416}, {"text": "I shouldn't say cheated.", "start": 898.16, "duration": 0.66}, {"text": "I probably should have\ncounted the return", "start": 898.82, "duration": 1.708}, {"text": "as one more operation, so that\nwould be 1 plus 3x plus 1,", "start": 900.528, "duration": 3.152}, {"text": "or 3x plus 2 operations.", "start": 903.68, "duration": 3.8}, {"text": "Why should you care?", "start": 907.48, "duration": 2.077}, {"text": "It's a little closer\nto what I'd like.", "start": 909.557, "duration": 1.583}, {"text": "Because now I've\ngot an expression", "start": 911.14, "duration": 1.62}, {"text": "that tells me something\nabout how much time", "start": 912.76, "duration": 2.4}, {"text": "is this going to take as I\nchange the size of the problem.", "start": 915.16, "duration": 5.02}, {"text": "If x is equal to 10, it's\ngoing to take me 32 operations.", "start": 920.18, "duration": 2.88}, {"text": "If x is equal to\n100, 302 operations.", "start": 923.06, "duration": 2.73}, {"text": "If x is equal to 1,000,\n3,002 operations.", "start": 925.79, "duration": 3.271}, {"text": "And if I wanted the\nactual time, I'd", "start": 929.061, "duration": 1.499}, {"text": "just multiply that by whatever\nthat constant amount of time", "start": 930.56, "duration": 2.834}, {"text": "is for each operation.", "start": 933.394, "duration": 0.916}, {"text": "I've got a good\nestimate of that.", "start": 934.31, "duration": 3.11}, {"text": "Sounds pretty good.", "start": 937.42, "duration": 1.81}, {"text": "Not quite what we\nwant, but it's close.", "start": 939.23, "duration": 3.83}, {"text": "So if I was counting operations,\nwhat could I say about it?", "start": 943.06, "duration": 3.13}, {"text": "First of all, it certainly\ndepends on the algorithm.", "start": 946.19, "duration": 3.74}, {"text": "That's great.", "start": 949.93, "duration": 1.32}, {"text": "Number of operations is\ngoing to directly relate", "start": 951.25, "duration": 2.31}, {"text": "to the algorithm I'm\ntrying to measure,", "start": 953.56, "duration": 1.68}, {"text": "which is what I'm after.", "start": 955.24, "duration": 2.31}, {"text": "Unfortunately, it still\ndepends a little bit", "start": 957.55, "duration": 3.51}, {"text": "on the implementation.", "start": 961.06, "duration": 1.872}, {"text": "Let me show you\nwhat I mean by that", "start": 962.932, "duration": 1.458}, {"text": "by backing up for a second.", "start": 964.39, "duration": 3.49}, {"text": "Suppose I were to change this\nfor loop to a while loop.", "start": 967.88, "duration": 4.58}, {"text": "I'll set i equal to 0\noutside of the loop.", "start": 972.46, "duration": 2.32}, {"text": "And then while i is\nless than x plus 1,", "start": 974.78, "duration": 4.15}, {"text": "I'll do the things\ninside of that.", "start": 978.93, "duration": 1.98}, {"text": "That would actually\nadd one more operation", "start": 980.91, "duration": 2.59}, {"text": "inside the loop, because I\nboth have to set the value of i", "start": 983.5, "duration": 4.63}, {"text": "and I have to test\nthe value of i,", "start": 988.13, "duration": 2.52}, {"text": "as well as doing the other\noperations down here.", "start": 990.65, "duration": 3.06}, {"text": "And so rather than getting 3x\nplus 1, I would get 4x plus 1.", "start": 993.71, "duration": 5.05}, {"text": "Eh.", "start": 998.76, "duration": 1.375}, {"text": "As the government says,\nwhat's the difference", "start": 1000.135, "duration": 1.875}, {"text": "between three and for\nwhen you're talking", "start": 1002.01, "duration": 1.71}, {"text": "about really big numbers?", "start": 1003.72, "duration": 2.48}, {"text": "Problem is in terms of\ncounting, it does depend.", "start": 1006.2, "duration": 3.02}, {"text": "And I want to get rid\nof that in a second,", "start": 1009.22, "duration": 1.75}, {"text": "so it still depends a little\nbit on the implementation.", "start": 1010.97, "duration": 2.4}, {"text": "I remind you, I\nwanted to measure", "start": 1013.37, "duration": 2.37}, {"text": "impact of the algorithm.", "start": 1015.74, "duration": 2.221}, {"text": "But the other good\nnews is the count", "start": 1017.961, "duration": 1.669}, {"text": "is independent of which\ncomputer I run on.", "start": 1019.63, "duration": 3.07}, {"text": "As long as all my computers\ncome with the same set", "start": 1022.7, "duration": 2.48}, {"text": "of basic operations,\nI don't care", "start": 1025.18, "duration": 2.159}, {"text": "what the time of my\ncomputer is versus yours", "start": 1027.339, "duration": 2.071}, {"text": "to do those operations\non measuring", "start": 1029.41, "duration": 2.429}, {"text": "how much time it would take.", "start": 1031.839, "duration": 2.082}, {"text": "And I should say,\nby the way, one", "start": 1033.921, "duration": 1.438}, {"text": "of the reasons I want\nto do it is last to know", "start": 1035.359, "duration": 1.916}, {"text": "is it going to take 37.42\nfemtoseconds or not,", "start": 1037.275, "duration": 3.334}, {"text": "but rather to say if\nthis algorithm has", "start": 1040.609, "duration": 1.951}, {"text": "a particular behavior, if I\ndouble the size of the input,", "start": 1042.56, "duration": 4.14}, {"text": "does that double the\namount of time I need?", "start": 1046.7, "duration": 1.89}, {"text": "Does that quadruple the\namount of time I need?", "start": 1048.59, "duration": 1.92}, {"text": "Does it increase it\nby a factor of 10?", "start": 1050.51, "duration": 2.46}, {"text": "And here, what matters isn't\nthe speed of the computer.", "start": 1052.97, "duration": 3.7}, {"text": "It's the number of operations.", "start": 1056.67, "duration": 2.88}, {"text": "The last one I'm not going\nto really worry about.", "start": 1059.55, "duration": 2.07}, {"text": "But we'd have to\nreally think about what", "start": 1061.62, "duration": 1.98}, {"text": "are the operations\nwe want to count.", "start": 1063.6, "duration": 2.7}, {"text": "I made an assumption\nthat the amount", "start": 1066.3, "duration": 2.01}, {"text": "of time it takes to retrieve\nsomething from memory", "start": 1068.31, "duration": 2.13}, {"text": "is the same as\nthe amount of time", "start": 1070.44, "duration": 1.374}, {"text": "it takes to do a\nnumerical computation.", "start": 1071.814, "duration": 2.196}, {"text": "That may not be accurate.", "start": 1074.01, "duration": 1.77}, {"text": "But this one could\nprobably be dealt", "start": 1075.78, "duration": 1.59}, {"text": "with by just agreeing on what\nare the common operations", "start": 1077.37, "duration": 2.64}, {"text": "and then doing the measurement.", "start": 1080.01, "duration": 2.32}, {"text": "So this is closer.", "start": 1082.33, "duration": 2.31}, {"text": "Excuse me.", "start": 1084.64, "duration": 0.76}, {"text": "And certainly, that count\nvaries for different inputs.", "start": 1085.4, "duration": 3.44}, {"text": "And we can use it to come\nup with a relationship", "start": 1088.84, "duration": 2.25}, {"text": "between the inputs\nand the count.", "start": 1091.09, "duration": 2.6}, {"text": "And for the most part, it\nreflects the algorithm, not", "start": 1093.69, "duration": 2.95}, {"text": "the implementation.", "start": 1096.64, "duration": 1.384}, {"text": "But it's still got that\nlast piece left there,", "start": 1098.024, "duration": 1.916}, {"text": "so I need to get rid\nof the last piece.", "start": 1099.94, "duration": 2.77}, {"text": "So what can we say here?", "start": 1102.71, "duration": 1.0}, {"text": "Timing and counting do evaluate\nor reflect implementations?", "start": 1103.71, "duration": 4.05}, {"text": "I don't want that.", "start": 1107.76, "duration": 0.75}, {"text": "Timing also evaluates\nthe machines.", "start": 1108.51, "duration": 2.97}, {"text": "What I want to do is just\nevaluate the algorithm.", "start": 1111.48, "duration": 3.31}, {"text": "And especially, I want to\nunderstand how does it scale?", "start": 1114.79, "duration": 3.69}, {"text": "I'm going to say what I said\na few minutes ago again.", "start": 1118.48, "duration": 2.7}, {"text": "If I were to take\nan algorithm, and I", "start": 1121.18, "duration": 2.55}, {"text": "say I know what its\ncomplexity is, my question is", "start": 1123.73, "duration": 3.18}, {"text": "if I double the\nsize of the input,", "start": 1126.91, "duration": 2.657}, {"text": "what does that say to the speed?", "start": 1129.567, "duration": 1.333}, {"text": "Because that's going to tell me\nsomething about the algorithm.", "start": 1130.9, "duration": 1.65}, {"text": "I want to say what\nhappens when I scale it?", "start": 1132.55, "duration": 1.75}, {"text": "And in particular, I\nwant to relate that", "start": 1134.3, "duration": 1.666}, {"text": "to the size of the input.", "start": 1135.966, "duration": 2.879}, {"text": "So here's what\nwe're going to do.", "start": 1138.845, "duration": 1.375}, {"text": "We're going to introduce\norders of growth.", "start": 1140.22, "duration": 1.75}, {"text": "It's a wonderful tool\nin computer science.", "start": 1141.97, "duration": 1.976}, {"text": "And what we're going to\nfocus on is that idea", "start": 1143.946, "duration": 1.874}, {"text": "of counting operations.", "start": 1145.82, "duration": 2.16}, {"text": "But we're not going to worry\nabout small variations,", "start": 1147.98, "duration": 3.12}, {"text": "whether it's three or four\nsteps inside of the loop.", "start": 1151.1, "duration": 2.167}, {"text": "We're going to show that\nthat doesn't matter.", "start": 1153.267, "duration": 1.874}, {"text": "And if you think about my\nstatement of does it double", "start": 1155.141, "duration": 2.439}, {"text": "in terms of size or speed\nor not-- or I'm sorry-- time", "start": 1157.58, "duration": 2.67}, {"text": "or not, whether it goes from\nthree to six or four to eight,", "start": 1160.25, "duration": 3.84}, {"text": "it's still a doubling.", "start": 1164.09, "duration": 1.01}, {"text": "So I don't care about\nthose pieces inside.", "start": 1165.1, "duration": 3.07}, {"text": "I'm going to focus\non what happens", "start": 1168.17, "duration": 1.56}, {"text": "when the size of the problem\ngets arbitrarily large.", "start": 1169.73, "duration": 4.27}, {"text": "I don't care about\ncounting things from 0", "start": 1174.0, "duration": 1.71}, {"text": "up to x when x is 10 or 20.", "start": 1175.71, "duration": 1.59}, {"text": "What happens when\nit's a million?", "start": 1177.3, "duration": 1.65}, {"text": "100 million?", "start": 1178.95, "duration": 1.24}, {"text": "What's the asymptotic\nbehavior of this?", "start": 1180.19, "duration": 2.42}, {"text": "And I want to relate\nthat time needed", "start": 1182.61, "duration": 2.58}, {"text": "against the size of the\ninput, so I can make", "start": 1185.19, "duration": 2.46}, {"text": "that comparison I suggested.", "start": 1187.65, "duration": 2.72}, {"text": "OK.", "start": 1190.37, "duration": 0.5}, {"text": "So to do that, we've got\nto do a couple of things.", "start": 1190.87, "duration": 2.41}, {"text": "We have to decide what\nare we going to measure?", "start": 1193.28, "duration": 2.01}, {"text": "And then we have to\nthink about how do we", "start": 1195.29, "duration": 1.708}, {"text": "count without worrying about\nimplementation details.", "start": 1196.998, "duration": 3.752}, {"text": "So we're going to\nexpress efficiency", "start": 1200.75, "duration": 2.36}, {"text": "in terms of size of input.", "start": 1203.11, "duration": 2.46}, {"text": "And usually, this is\ngoing to be obvious.", "start": 1205.57, "duration": 2.62}, {"text": "If I've got a procedure that\ntakes one argument that's", "start": 1208.19, "duration": 4.12}, {"text": "an integer, the\nsize of the integer", "start": 1212.31, "duration": 1.917}, {"text": "is the thing I'm going\nto measure things in.", "start": 1214.227, "duration": 1.833}, {"text": "If I double the size\nof that integer,", "start": 1216.06, "duration": 1.86}, {"text": "what happens to the computation?", "start": 1217.92, "duration": 2.35}, {"text": "If I'm computing\nsomething over a list,", "start": 1220.27, "duration": 2.43}, {"text": "typically the length\nof the list is", "start": 1222.7, "duration": 2.43}, {"text": "going to be the thing I'm\ngoing to use to characterize", "start": 1225.13, "duration": 2.55}, {"text": "the size of the problem.", "start": 1227.68, "duration": 1.98}, {"text": "If I've got-- and we'll see this\nin a second-- a function that", "start": 1229.66, "duration": 2.7}, {"text": "takes more than\none argument, I get", "start": 1232.36, "duration": 2.13}, {"text": "to decide what's the\nparameter I want to use.", "start": 1234.49, "duration": 2.01}, {"text": "If I'm searching to see is\nthis element in that list,", "start": 1236.5, "duration": 2.571}, {"text": "typically, I'm going\nto worry about what's", "start": 1239.071, "duration": 1.749}, {"text": "the size of the list, not\nwhat's the size of the element.", "start": 1240.82, "duration": 3.09}, {"text": "But we have to specify what\nis that we're measuring.", "start": 1243.91, "duration": 2.225}, {"text": "And we're going to see examples\nof that in just a second.", "start": 1246.135, "duration": 2.375}, {"text": "OK.", "start": 1251.5, "duration": 1.49}, {"text": "So now, we start thinking\nabout that sounds great.", "start": 1252.99, "duration": 3.45}, {"text": "Certainly fun computing\nsomething numeric.", "start": 1256.44, "duration": 2.49}, {"text": "Sum of integers from 0 up to x.", "start": 1258.93, "duration": 1.905}, {"text": "It's kind of obvious x is\nthe size of my problem.", "start": 1260.835, "duration": 2.449}, {"text": "How many steps does it take?", "start": 1263.284, "duration": 1.166}, {"text": "I can count that.", "start": 1264.45, "duration": 1.72}, {"text": "But in some cases, the\namount of time the code takes", "start": 1266.17, "duration": 2.85}, {"text": "is going to depend on the input.", "start": 1269.02, "duration": 3.01}, {"text": "So let's take this little\npiece of code here.", "start": 1272.03, "duration": 2.63}, {"text": "And I do hope by now, even\nthough we flash up code,", "start": 1274.66, "duration": 2.721}, {"text": "you're already beginning to\nrecognize what does it do.", "start": 1277.381, "duration": 2.249}, {"text": "Not the least of which, by\nthe clever name that we chose.", "start": 1279.63, "duration": 3.97}, {"text": "But this is obviously\njust a little function.", "start": 1283.6, "duration": 2.1}, {"text": "It runs through a loop--\nsorry, a for loop that takes i", "start": 1285.7, "duration": 3.78}, {"text": "for each element in\na list L. And it's", "start": 1289.48, "duration": 2.61}, {"text": "checking to see is i equal\nto the element I've provided.", "start": 1292.09, "duration": 3.432}, {"text": "And when it is, I'm\ngoing to return true.", "start": 1295.522, "duration": 1.708}, {"text": "If I get all the way through\nthe loop and I didn't find it,", "start": 1297.23, "duration": 2.63}, {"text": "I'm going to return false.", "start": 1299.86, "duration": 1.083}, {"text": "It's just saying is\ne in my input list L?", "start": 1300.943, "duration": 4.787}, {"text": "How many steps is\nthis going to take?", "start": 1305.73, "duration": 3.049}, {"text": "Well, we can certainly count\nthe number of steps in the loop.", "start": 1308.779, "duration": 2.541}, {"text": "Right?", "start": 1311.32, "duration": 0.5}, {"text": "We've got a set i.", "start": 1311.82, "duration": 0.95}, {"text": "We've got to compare i\nand potentially we've", "start": 1312.77, "duration": 2.37}, {"text": "got to return.", "start": 1315.14, "duration": 0.65}, {"text": "So there's at most three\nsteps inside the loop.", "start": 1315.79, "duration": 3.532}, {"text": "But depends on how\nlucky I'm feeling.", "start": 1319.322, "duration": 3.748}, {"text": "Right?", "start": 1323.07, "duration": 1.787}, {"text": "If e happens to be the\nfirst element in the list--", "start": 1324.857, "duration": 2.083}, {"text": "it goes through the\nloop once-- I'm done.", "start": 1326.94, "duration": 2.1}, {"text": "Great.", "start": 1329.04, "duration": 2.39}, {"text": "I'm not always that lucky.", "start": 1331.43, "duration": 2.27}, {"text": "If e is not in the\nlist, then it will", "start": 1333.7, "duration": 2.72}, {"text": "go through this\nentire loop until it", "start": 1336.42, "duration": 1.95}, {"text": "gets all the way through\nthe elements of L", "start": 1338.37, "duration": 2.4}, {"text": "before saying false.", "start": 1340.77, "duration": 2.24}, {"text": "So this-- sort of a\nbest case scenario.", "start": 1343.01, "duration": 3.73}, {"text": "This is the worst case scenario.", "start": 1346.74, "duration": 2.262}, {"text": "Again, if I'm assigned and say\nwell, let's run some trials.", "start": 1349.002, "duration": 2.468}, {"text": "Let's do a bunch of examples\nand see how many steps", "start": 1351.47, "duration": 2.239}, {"text": "does it go through.", "start": 1353.709, "duration": 0.791}, {"text": "And that would be\nthe average case.", "start": 1354.5, "duration": 1.86}, {"text": "On average, I'm likely to\nlook at half the elements", "start": 1356.36, "duration": 3.24}, {"text": "in the list before I find it.", "start": 1359.6, "duration": 2.571}, {"text": "Right?", "start": 1362.171, "duration": 0.499}, {"text": "If I'm lucky, it's early on.", "start": 1362.67, "duration": 1.166}, {"text": "If I'm not so lucky,\nit's later on.", "start": 1363.836, "duration": 2.234}, {"text": "Which one do I use?", "start": 1366.07, "duration": 2.05}, {"text": "Well, we're going to\nfocus on this one.", "start": 1368.12, "duration": 4.09}, {"text": "Because that gives you an upper\nbound on the amount of time", "start": 1372.21, "duration": 2.659}, {"text": "it's going to take.", "start": 1374.869, "duration": 0.791}, {"text": "What happens in the\nworst case scenario?", "start": 1375.66, "duration": 3.24}, {"text": "We will find at times\nit's valuable to look", "start": 1378.9, "duration": 2.46}, {"text": "at the average case to give\nus a rough sense of what's", "start": 1381.36, "duration": 2.4}, {"text": "going to happen on average.", "start": 1383.76, "duration": 1.959}, {"text": "But usually, when we\ntalk about complexity,", "start": 1385.719, "duration": 1.791}, {"text": "we're going to focus on\nthe worst case behavior.", "start": 1387.51, "duration": 4.329}, {"text": "So to say it in a little\nbit different way,", "start": 1391.839, "duration": 1.791}, {"text": "let's go back to my example.", "start": 1393.63, "duration": 1.166}, {"text": "Suppose you gave it a\nlist L of some length.", "start": 1394.796, "duration": 2.824}, {"text": "Length of L, you can call\nthat len if you like.", "start": 1397.62, "duration": 2.43}, {"text": "Then my best case would be\nthe minimum running type.", "start": 1400.05, "duration": 4.045}, {"text": "And in this case, it will be for\nthe first element in the list.", "start": 1404.095, "duration": 2.625}, {"text": "And notice in that case,\nthe number of steps I take", "start": 1406.72, "duration": 3.48}, {"text": "would be independent of the\nlength of L. That's great.", "start": 1410.2, "duration": 2.576}, {"text": "It doesn't matter\nhow long the list is.", "start": 1412.776, "duration": 1.624}, {"text": "If I'm always going to find\nthe first element, I'm done.", "start": 1414.4, "duration": 3.46}, {"text": "The average case\nwould be the average", "start": 1417.86, "duration": 2.01}, {"text": "over the number of\nsteps I take, depending", "start": 1419.87, "duration": 2.687}, {"text": "on the length of the list.", "start": 1422.557, "duration": 1.083}, {"text": "It's going to grow linearly\nwith the length of the list.", "start": 1423.64, "duration": 2.333}, {"text": "It's a good practical measure.", "start": 1425.973, "duration": 1.877}, {"text": "But the one I want to focus\non will be the worst case.", "start": 1427.85, "duration": 4.55}, {"text": "And here, the amount\nof time as we're", "start": 1432.4, "duration": 1.882}, {"text": "going to see in a\ncouple of slides,", "start": 1434.282, "duration": 1.458}, {"text": "is linear in the\nsize of the problem.", "start": 1435.74, "duration": 3.92}, {"text": "Meaning if I double the length\nof the list in the worst case,", "start": 1439.66, "duration": 4.89}, {"text": "it's going to take\nme twice as much time", "start": 1444.55, "duration": 2.67}, {"text": "to find that it's not there.", "start": 1447.22, "duration": 1.92}, {"text": "If I increase the length in\nthe list by a factor of 10,", "start": 1449.14, "duration": 2.684}, {"text": "in the worst case,\nit's going to take me", "start": 1451.824, "duration": 1.666}, {"text": "10 times as much time as\nit did in the earlier case", "start": 1453.49, "duration": 2.82}, {"text": "to find out that the\nproblem's not there.", "start": 1456.31, "duration": 2.01}, {"text": "And that linear relationship\nis what I want to capture.", "start": 1458.32, "duration": 4.85}, {"text": "So I'm going to focus on that.", "start": 1463.17, "duration": 1.4}, {"text": "What's the worst case behavior?", "start": 1464.57, "duration": 2.367}, {"text": "And we're about ready to start\ntalking about orders of growth,", "start": 1466.937, "duration": 2.583}, {"text": "but here then is\nwhat orders of growth", "start": 1469.52, "duration": 1.86}, {"text": "are going to provide for me.", "start": 1471.38, "duration": 1.166}, {"text": "I want to evaluate\nefficiency, particularly when", "start": 1472.546, "duration": 3.844}, {"text": "the input is very large.", "start": 1476.39, "duration": 1.08}, {"text": "What happens when I\nreally scale this up?", "start": 1477.47, "duration": 2.436}, {"text": "I want to express the growth\nof the program's runtime", "start": 1479.906, "duration": 4.354}, {"text": "as that input grows.", "start": 1484.26, "duration": 2.19}, {"text": "Not the exact runtime, but\nthat notion of if I doubled it,", "start": 1486.45, "duration": 4.38}, {"text": "how much longer does it take?", "start": 1490.83, "duration": 1.23}, {"text": "What's the relationship\nbetween increasing", "start": 1492.06, "duration": 2.25}, {"text": "the size of the input\nand the increase", "start": 1494.31, "duration": 2.31}, {"text": "in the amount of time\nit takes to solve it?", "start": 1496.62, "duration": 3.02}, {"text": "We're going to put an\nupper bound on that growth.", "start": 1499.64, "duration": 3.249}, {"text": "And if you haven't\nseen this in math,", "start": 1502.889, "duration": 1.541}, {"text": "it basically says I want to\ncome up with a description that", "start": 1504.43, "duration": 3.4}, {"text": "is at least as big as--\nsorry-- as big as or bigger", "start": 1507.83, "duration": 4.02}, {"text": "than the actual amount of\ntime it's going to take.", "start": 1511.85, "duration": 3.667}, {"text": "And I'm going to not\nworry about being precise.", "start": 1515.517, "duration": 1.958}, {"text": "We're going to talk about the\norder of rather than exact.", "start": 1517.475, "duration": 3.295}, {"text": "I don't need to know to the\nfemtosecond how long this", "start": 1520.77, "duration": 2.57}, {"text": "is going to take, or to exactly\none operation how long this", "start": 1523.34, "duration": 2.725}, {"text": "is going to take.", "start": 1526.065, "duration": 0.815}, {"text": "But I want to say things like\nthis is going to grow linearly.", "start": 1526.88, "duration": 4.177}, {"text": "I double the size of the input,\nit doubles the amount of time.", "start": 1531.057, "duration": 2.583}, {"text": "Or this is going to\ngrow quadratically.", "start": 1533.64, "duration": 2.11}, {"text": "I double the size\nof the input, it's", "start": 1535.75, "duration": 2.0}, {"text": "going to take four times\nas much time to solve it.", "start": 1537.75, "duration": 3.0}, {"text": "Or if I'm really lucky, this is\ngoing to have constant growth.", "start": 1540.75, "duration": 3.006}, {"text": "No matter how I\nchange the input,", "start": 1543.756, "duration": 1.374}, {"text": "it's not going to\ntake any more time.", "start": 1545.13, "duration": 2.46}, {"text": "To do that, we're going\nto look at the largest", "start": 1547.59, "duration": 2.23}, {"text": "factors in the runtime.", "start": 1549.82, "duration": 1.14}, {"text": "Which piece of the program\ntakes the most time?", "start": 1550.96, "duration": 2.904}, {"text": "And so in orders\nof growth, we are", "start": 1553.864, "duration": 1.416}, {"text": "going to look for\nas tight as possible", "start": 1555.28, "duration": 2.49}, {"text": "an upper bound on the growth\nas a function of the size", "start": 1557.77, "duration": 2.88}, {"text": "of the input in the worst case.", "start": 1560.65, "duration": 3.08}, {"text": "Nice long definition.", "start": 1563.73, "duration": 3.8}, {"text": "Almost ready to look\nat some examples.", "start": 1567.53, "duration": 1.72}, {"text": "So here's the notation\nwe're going to use.", "start": 1569.25, "duration": 2.41}, {"text": "It's called Big O notation.", "start": 1571.66, "duration": 1.759}, {"text": "I have to admit-- and\nJohn's not here today", "start": 1573.419, "duration": 1.791}, {"text": "to remind me the history--\nI think it comes because we", "start": 1575.21, "duration": 2.25}, {"text": "used Omicron-- God knows why.", "start": 1577.46, "duration": 2.07}, {"text": "Sounds like something\nfrom Futurama.", "start": 1579.53, "duration": 2.16}, {"text": "But we used Omicron as\nour symbol to define this.", "start": 1581.69, "duration": 4.462}, {"text": "I'm having such good luck\nwith bad jokes today.", "start": 1586.152, "duration": 1.958}, {"text": "You're not even wincing when\nI throw those things out.", "start": 1588.11, "duration": 2.295}, {"text": "But that's OK.", "start": 1590.405, "duration": 1.335}, {"text": "It's called Big O notation.", "start": 1591.74, "duration": 1.304}, {"text": "We're going to use it.", "start": 1593.044, "duration": 0.916}, {"text": "We're going to describe\nthe rules of it.", "start": 1593.96, "duration": 1.32}, {"text": "Is this the tradition of it?", "start": 1595.28, "duration": 1.41}, {"text": "It describes the worst\ncase, because it's often", "start": 1596.69, "duration": 2.34}, {"text": "the bottleneck we're after.", "start": 1599.03, "duration": 1.279}, {"text": "And as we said, it's\ngoing to express", "start": 1600.309, "duration": 1.541}, {"text": "the growth of the program\nrelative to the input size.", "start": 1601.85, "duration": 4.618}, {"text": "OK.", "start": 1606.468, "duration": 0.984}, {"text": "Let's see how we go\nfrom counting operations", "start": 1607.452, "duration": 2.618}, {"text": "to getting to orders of growth.", "start": 1610.07, "duration": 1.72}, {"text": "Then we're going to define some\nexamples of ordered growth.", "start": 1611.79, "duration": 2.458}, {"text": "And we're going to start\nlooking at algorithms.", "start": 1614.248, "duration": 2.232}, {"text": "Here's a piece of code\nyou've seen before.", "start": 1616.48, "duration": 1.75}, {"text": "Again, hopefully, you\nrecognize or can see", "start": 1618.23, "duration": 1.92}, {"text": "fairly quickly what it's doing.", "start": 1620.15, "duration": 2.19}, {"text": "Computing factorials\nthe iterative way.", "start": 1622.34, "duration": 1.77}, {"text": "Basically, remember\nn factorial is", "start": 1624.11, "duration": 1.82}, {"text": "n times n minus 1 times n\nminus 2 all the way down to 1.", "start": 1625.93, "duration": 3.13}, {"text": "Hopefully, assuming n is\na non-negative integer.", "start": 1629.06, "duration": 3.3}, {"text": "Here, we're going to set up\nan internal variable called", "start": 1632.36, "duration": 2.52}, {"text": "answer.", "start": 1634.88, "duration": 1.08}, {"text": "And then we're just\ngoing to run over a loop.", "start": 1635.96, "duration": 1.95}, {"text": "As long as n is\nbigger than 1, we're", "start": 1637.91, "duration": 1.65}, {"text": "going to multiply answer by\nn, store it back into answer,", "start": 1639.56, "duration": 3.08}, {"text": "decrease n by 1.", "start": 1642.64, "duration": 1.09}, {"text": "We'll keep doing that until\nwe get out of the loop.", "start": 1643.73, "duration": 2.4}, {"text": "And we're going\nto return answer.", "start": 1646.13, "duration": 2.72}, {"text": "We'll start by counting steps.", "start": 1648.85, "duration": 1.26}, {"text": "And that's, by the way, just to\nremind you that in fact, there", "start": 1652.587, "duration": 2.583}, {"text": "are two steps here.", "start": 1655.17, "duration": 0.58}, {"text": "So what do I have?", "start": 1655.75, "duration": 0.75}, {"text": "I've got one step up there.", "start": 1656.5, "duration": 1.57}, {"text": "Set answer to one.", "start": 1658.07, "duration": 2.0}, {"text": "I'm setting up n-- sorry,\nI'm not setting up n.", "start": 1660.07, "duration": 3.6}, {"text": "I'm going to test n.", "start": 1663.67, "duration": 1.65}, {"text": "And then I'm going\nto do two steps here,", "start": 1665.32, "duration": 2.326}, {"text": "because I got a multiply answer\nby n and then set it to answer.", "start": 1667.646, "duration": 2.624}, {"text": "And now similarly, we've\ngot two steps there", "start": 1670.27, "duration": 1.833}, {"text": "because I'm subtracting 1 from\nn and then setting it to n.", "start": 1672.103, "duration": 3.597}, {"text": "So I've got 2 plus 4 plus\nthe test, which is 5.", "start": 1675.7, "duration": 5.78}, {"text": "I've got 1 outside here.", "start": 1681.48, "duration": 1.45}, {"text": "I got 1 outside there.", "start": 1682.93, "duration": 1.14}, {"text": "And I'm going to go\nthrough this loop n times.", "start": 1684.07, "duration": 3.67}, {"text": "So I would suggest that if\nI count the number of steps,", "start": 1687.74, "duration": 2.39}, {"text": "it's 1 plus 5n plus 1.", "start": 1690.13, "duration": 3.18}, {"text": "Sort of what we did before.", "start": 1697.33, "duration": 2.12}, {"text": "5n plus 2 is the total number\nof steps that I use here.", "start": 1699.45, "duration": 4.35}, {"text": "But now, I'm interested in\nwhat's the worst case behavior?", "start": 1703.8, "duration": 2.47}, {"text": "Well, in this case, it is\nthe worst case behavior", "start": 1706.27, "duration": 2.041}, {"text": "because it doesn't have\ndecisions anywhere in here.", "start": 1708.311, "duration": 2.469}, {"text": "But I just want to know what's\nthe asymptotic complexity?", "start": 1710.78, "duration": 3.98}, {"text": "And I'm going to\nsay-- oh, sorry-- that", "start": 1714.76, "duration": 2.642}, {"text": "is to say I could do\nthis different ways.", "start": 1717.402, "duration": 1.708}, {"text": "I could have done this\nwith two steps like that.", "start": 1719.11, "duration": 2.13}, {"text": "That would have made it\nnot just 1 plus 5n plus 1.", "start": 1721.24, "duration": 2.49}, {"text": "It would have made\nit 1 plus 6n plus 1", "start": 1723.73, "duration": 2.28}, {"text": "because I've got an extra step.", "start": 1726.01, "duration": 2.62}, {"text": "I put that up because\nI want to remind you", "start": 1728.63, "duration": 2.02}, {"text": "I don't care about\nimplementation differences.", "start": 1730.65, "duration": 3.96}, {"text": "And so I want to\nknow what captures", "start": 1734.61, "duration": 3.03}, {"text": "both of those behaviors.", "start": 1737.64, "duration": 1.8}, {"text": "And in Big O notation,\nI say that's order n.", "start": 1739.44, "duration": 5.1}, {"text": "Grows linearly.", "start": 1744.54, "duration": 1.747}, {"text": "So I'm going to keep\ndoing this to you", "start": 1746.287, "duration": 1.583}, {"text": "until you really do wince at me.", "start": 1747.87, "duration": 1.83}, {"text": "If I were to double\nthe size of n,", "start": 1749.7, "duration": 3.51}, {"text": "whether I use this\nversion or that version,", "start": 1753.21, "duration": 2.85}, {"text": "the amount of time\nthe number of steps", "start": 1756.06, "duration": 1.97}, {"text": "is basically going to double.", "start": 1758.03, "duration": 2.316}, {"text": "Now you say, wait a minute.", "start": 1760.346, "duration": 1.124}, {"text": "5n plus 2-- if n\nis 10 that's 52.", "start": 1761.47, "duration": 4.85}, {"text": "And if n is 20, that's 102.", "start": 1766.32, "duration": 2.3}, {"text": "That's not quite doubling it.", "start": 1768.62, "duration": 1.23}, {"text": "And you're right.", "start": 1769.85, "duration": 1.225}, {"text": "But remember, we\nreally care about this", "start": 1771.075, "duration": 1.625}, {"text": "in the asymptotic case.", "start": 1772.7, "duration": 1.05}, {"text": "When n gets really big,\nthose extra little pieces", "start": 1773.75, "duration": 2.28}, {"text": "don't matter.", "start": 1776.03, "duration": 1.2}, {"text": "And so what we're\ngoing to do is we're", "start": 1777.23, "duration": 1.77}, {"text": "going to ignore the\nadditive constants", "start": 1779.0, "duration": 3.32}, {"text": "and we're going to ignore the\nmultiplicative constants when", "start": 1782.32, "duration": 3.05}, {"text": "we talk about orders of growth.", "start": 1785.37, "duration": 3.26}, {"text": "So what does o of n measure?", "start": 1788.63, "duration": 2.444}, {"text": "Well, we're just\nsummarizing here.", "start": 1791.074, "duration": 1.416}, {"text": "We want to describe how much\ntime is needed to compute", "start": 1792.49, "duration": 2.306}, {"text": "or how does the amount\nof time, rather,", "start": 1794.796, "duration": 1.624}, {"text": "needed to computer\nproblem growth", "start": 1796.42, "duration": 2.0}, {"text": "as the size of the\nproblem itself grows.", "start": 1798.42, "duration": 2.71}, {"text": "So we want an\nexpression that counts", "start": 1801.13, "duration": 2.46}, {"text": "that asymptotic behavior.", "start": 1803.59, "duration": 1.844}, {"text": "And we're going to focus as a\nconsequence on the term that", "start": 1805.434, "duration": 2.416}, {"text": "grows most rapidly.", "start": 1807.85, "duration": 3.34}, {"text": "So here are some examples.", "start": 1811.19, "duration": 2.119}, {"text": "And I know if you're\nfollowing along,", "start": 1813.309, "duration": 1.541}, {"text": "you can already see\nthe answers here.", "start": 1814.85, "duration": 1.22}, {"text": "But we're going to\ndo this to simply", "start": 1816.07, "duration": 1.5}, {"text": "give you a sense of that.", "start": 1817.57, "duration": 1.44}, {"text": "If I'm counting\noperations and I come up", "start": 1819.01, "duration": 2.34}, {"text": "with an expression\nthat has n squared", "start": 1821.35, "duration": 2.46}, {"text": "plus 2n plus 2 operations,\nthat expression I say", "start": 1823.81, "duration": 5.07}, {"text": "is order n squared.", "start": 1828.88, "duration": 2.86}, {"text": "The 2 and the 2n don't matter.", "start": 1831.74, "duration": 1.98}, {"text": "And think about what happens\nif you make n really big.", "start": 1833.72, "duration": 2.73}, {"text": "n squared is much more\ndominant than the other terms.", "start": 1836.45, "duration": 3.06}, {"text": "We say that's order n squared.", "start": 1839.51, "duration": 3.08}, {"text": "Even this expression we\nsay is order n squared.", "start": 1842.59, "duration": 4.87}, {"text": "So in this case, for\nlower values of n,", "start": 1847.46, "duration": 2.23}, {"text": "this term is going to\nbe the big one in terms", "start": 1849.69, "duration": 2.059}, {"text": "of number of steps.", "start": 1851.749, "duration": 0.791}, {"text": "I have no idea how I wrote\nsuch an inefficient algorithm", "start": 1852.54, "duration": 3.54}, {"text": "that it took 100,000\nsteps to do something.", "start": 1856.08, "duration": 1.89}, {"text": "But if I had that expression\nfor smaller values of n,", "start": 1857.97, "duration": 3.18}, {"text": "this matters a lot.", "start": 1861.15, "duration": 1.44}, {"text": "This is a really big number.", "start": 1862.59, "duration": 2.137}, {"text": "But when I'm interested\nin the growth,", "start": 1864.727, "duration": 1.583}, {"text": "then that's the\nterm that dominates.", "start": 1866.31, "duration": 2.7}, {"text": "And you see the idea or\nbegin to see the idea here", "start": 1869.01, "duration": 2.19}, {"text": "that when I have-- sorry,\nlet me go back there--", "start": 1871.2, "duration": 2.1}, {"text": "when I have expressions, if\nit's a polynomial expression,", "start": 1873.3, "duration": 4.52}, {"text": "it's the highest order term.", "start": 1877.82, "duration": 1.42}, {"text": "It's the term that\ncaptures the complexity.", "start": 1879.24, "duration": 1.85}, {"text": "Both of these are quadratic.", "start": 1881.09, "duration": 2.84}, {"text": "This term is order n, because\nn grows faster than log of n.", "start": 1883.93, "duration": 7.78}, {"text": "This funky looking\nterm, even though that", "start": 1891.71, "duration": 1.71}, {"text": "looks like the big\nnumber there and it", "start": 1893.42, "duration": 1.77}, {"text": "is a big number, that expression\nwe see is order n log n.", "start": 1895.19, "duration": 5.34}, {"text": "Because again, if\nI plot out as how", "start": 1900.53, "duration": 1.89}, {"text": "this changes as I\nmake n really large,", "start": 1902.42, "duration": 2.25}, {"text": "this term eventually takes\nover as the dominant term.", "start": 1904.67, "duration": 4.11}, {"text": "What about that one?", "start": 1908.78, "duration": 2.27}, {"text": "What's the big term there?", "start": 1911.05, "duration": 2.29}, {"text": "How many people think\nit's n to the 30th?", "start": 1913.34, "duration": 3.19}, {"text": "Show of hands.", "start": 1916.53, "duration": 2.03}, {"text": "How many people think\nit's 3 to the n?", "start": 1918.56, "duration": 2.03}, {"text": "Show of hands.", "start": 1920.59, "duration": 1.46}, {"text": "Thank you.", "start": 1922.05, "duration": 0.5}, {"text": "You're following along.", "start": 1922.55, "duration": 0.958}, {"text": "You're also paying attention.", "start": 1923.508, "duration": 1.372}, {"text": "How many people think I\nshould stop asking questions?", "start": 1924.88, "duration": 2.208}, {"text": "No show of hands.", "start": 1927.088, "duration": 0.712}, {"text": "All right.", "start": 1927.8, "duration": 1.4}, {"text": "But you're right.", "start": 1929.2, "duration": 1.59}, {"text": "Exponentials are much\nworse than powers.", "start": 1930.79, "duration": 4.055}, {"text": "Even something\nlike this-- again,", "start": 1934.845, "duration": 1.375}, {"text": "it's going to take a big value\nof n before it gets there,", "start": 1936.22, "duration": 2.374}, {"text": "but it does get there.", "start": 1938.594, "duration": 1.706}, {"text": "And that, by the\nway, is important,", "start": 1940.3, "duration": 1.55}, {"text": "because we're going to\nsee later on in the term", "start": 1941.85, "duration": 1.62}, {"text": "that there are\nsome problems where", "start": 1943.47, "duration": 1.416}, {"text": "it's believed that all of the\nsolutions are exponential.", "start": 1944.886, "duration": 4.524}, {"text": "And that's a pain,\nbecause it says", "start": 1949.41, "duration": 1.53}, {"text": "it's always going to be\nexpensive to compute.", "start": 1950.94, "duration": 1.875}, {"text": "So that's how we're going to\nreason about these things.", "start": 1952.815, "duration": 3.885}, {"text": "And to see it visually,\nhere are the differences", "start": 1956.7, "duration": 2.88}, {"text": "between those different classes.", "start": 1959.58, "duration": 2.434}, {"text": "Something that's constant--\nthe amount of time", "start": 1962.014, "duration": 1.916}, {"text": "doesn't change as I change\nthe size of the input.", "start": 1963.93, "duration": 3.28}, {"text": "Something that linear\ngrows as a straight line,", "start": 1967.21, "duration": 2.25}, {"text": "as you would expect.", "start": 1969.46, "duration": 1.53}, {"text": "Nice behavior.", "start": 1970.99, "duration": 0.63}, {"text": "Quadratic starts to\ngrow more quickly.", "start": 1971.62, "duration": 3.52}, {"text": "The log is always\nbetter than linear", "start": 1975.14, "duration": 1.79}, {"text": "because it slows down\nas we increase the size.", "start": 1976.93, "duration": 4.37}, {"text": "n log n or log linear\nis a funky term,", "start": 1981.3, "duration": 2.56}, {"text": "but we're going to see it's\na very common complexity", "start": 1983.86, "duration": 2.91}, {"text": "for really valuable algorithms\nin computer science.", "start": 1986.77, "duration": 3.06}, {"text": "And it has a nice behavior,\nsort of between the linear", "start": 1989.83, "duration": 3.01}, {"text": "and the quadratic.", "start": 1992.84, "duration": 1.39}, {"text": "And exponential blows up.", "start": 1994.23, "duration": 2.336}, {"text": "Just to remind you\nof that-- well,", "start": 1996.566, "duration": 1.854}, {"text": "sorry-- let me show\nyou how we're going", "start": 1998.42, "duration": 1.625}, {"text": "to do the reasoning about this.", "start": 2000.045, "duration": 2.435}, {"text": "So here's how we're\ngoing to reason about it.", "start": 2002.48, "duration": 2.634}, {"text": "We've already seen\nsome code where", "start": 2005.114, "duration": 1.416}, {"text": "I started working through this\nprocess of counting operations.", "start": 2006.53, "duration": 3.72}, {"text": "Here are the tools\nI want you to use.", "start": 2010.25, "duration": 1.77}, {"text": "Given a piece of\ncode, you're going", "start": 2012.02, "duration": 2.07}, {"text": "to reason about each\nchunk of code separately.", "start": 2014.09, "duration": 3.57}, {"text": "If you've got sequential\npieces of code,", "start": 2017.66, "duration": 4.306}, {"text": "then the rules are called\nthe law of addition", "start": 2021.966, "duration": 1.874}, {"text": "for order of growth is\nthat the order of growth", "start": 2023.84, "duration": 3.69}, {"text": "of the combination\nis the combination", "start": 2027.53, "duration": 2.55}, {"text": "of the order of the growth.", "start": 2030.08, "duration": 2.3}, {"text": "Say that quickly 10 times.", "start": 2032.38, "duration": 1.96}, {"text": "But let's look at\nan example of that.", "start": 2034.34, "duration": 1.79}, {"text": "Here are two loops.", "start": 2036.13, "duration": 2.07}, {"text": "You've already seen\nexamples of how", "start": 2038.2, "duration": 1.894}, {"text": "to reason about those loops.", "start": 2040.094, "duration": 1.166}, {"text": "For this one, it's\nlinear in the size of n.", "start": 2041.26, "duration": 4.264}, {"text": "I'm going to go through the loop\nn times doing a constant amount", "start": 2045.524, "duration": 2.666}, {"text": "of things each time around.", "start": 2048.19, "duration": 1.299}, {"text": "But what I just\nshowed, that's order n.", "start": 2049.489, "duration": 2.9}, {"text": "This one-- again, I'm doing\njust a constant number of things", "start": 2052.389, "duration": 2.881}, {"text": "inside the loop-- but\nnotice, that it's n squared.", "start": 2055.27, "duration": 5.11}, {"text": "So that's order n squared.", "start": 2060.38, "duration": 2.98}, {"text": "n times n.", "start": 2063.36, "duration": 1.51}, {"text": "The combination is I have to do\nthis work and then that work.", "start": 2064.87, "duration": 2.849}, {"text": "So I write that as saying that\nis order of n plus order of n", "start": 2067.719, "duration": 4.131}, {"text": "squared.", "start": 2071.85, "duration": 1.41}, {"text": "But by this up here,\nthat is the same", "start": 2073.26, "duration": 2.25}, {"text": "as saying what's the order of\ngrowth of n plus n squared.", "start": 2075.51, "duration": 3.669}, {"text": "Oh yeah.", "start": 2079.179, "duration": 0.5}, {"text": "We just saw that.", "start": 2079.679, "duration": 1.381}, {"text": "Says it's n squared.", "start": 2081.06, "duration": 2.09}, {"text": "So addition or the\nlaw of addition", "start": 2083.15, "duration": 1.644}, {"text": "let's be reasonable\nabout the fact", "start": 2084.794, "duration": 1.416}, {"text": "that this will be an\norder n squared algorithm.", "start": 2086.21, "duration": 3.929}, {"text": "Second one I'm going\nto use is called", "start": 2090.139, "duration": 2.171}, {"text": "the law of multiplication.", "start": 2092.31, "duration": 2.2}, {"text": "And this says when I have nested\nstatements or nested loops,", "start": 2094.51, "duration": 6.75}, {"text": "I need to reason about those.", "start": 2101.26, "duration": 1.88}, {"text": "And in that case, what I want\nto argue-- or not argue-- state", "start": 2103.14, "duration": 3.27}, {"text": "is that the order of growth\nhere is a multiplication.", "start": 2106.41, "duration": 3.24}, {"text": "That is, when I\nhave nested things,", "start": 2109.65, "duration": 1.616}, {"text": "I figure out what's\nthe order of growth", "start": 2111.266, "duration": 1.624}, {"text": "of the inner part, what's the\norder growth of the outer part,", "start": 2112.89, "duration": 3.19}, {"text": "and I'm going to multiply--\nbleh, try again-- I'm", "start": 2116.08, "duration": 2.81}, {"text": "going to multiply together\nthose orders of growth,", "start": 2118.89, "duration": 3.16}, {"text": "get the overall order of growth.", "start": 2122.05, "duration": 2.1}, {"text": "If you think about\nit, it makes sense.", "start": 2124.15, "duration": 1.97}, {"text": "Look at my little example here.", "start": 2126.12, "duration": 1.59}, {"text": "It's a trivial little example.", "start": 2127.71, "duration": 1.25}, {"text": "But I'm looping for\ni from 0 up to n.", "start": 2128.96, "duration": 4.15}, {"text": "For every value of i, I'm\nlooping for j from 0 up to n.", "start": 2133.11, "duration": 3.36}, {"text": "And then I'm printing\nout A. I'm the Fonz.", "start": 2136.47, "duration": 2.78}, {"text": "I'm saying heyyy a lot.", "start": 2139.25, "duration": 2.62}, {"text": "Oh, come on.", "start": 2141.87, "duration": 0.5}, {"text": "At least throw something,\nI mean, when it's that bad.", "start": 2142.37, "duration": 2.208}, {"text": "Right?", "start": 2144.578, "duration": 0.601}, {"text": "Want to make sure\nyou're still awake.", "start": 2145.179, "duration": 1.541}, {"text": "OK.", "start": 2146.72, "duration": 0.21}, {"text": "You get the idea.", "start": 2146.93, "duration": 0.72}, {"text": "But what I want to show you here\nis notice the order of growth.", "start": 2147.65, "duration": 4.71}, {"text": "That's order n.", "start": 2152.36, "duration": 2.04}, {"text": "Right?", "start": 2154.4, "duration": 0.84}, {"text": "I'm doing that n times.", "start": 2155.24, "duration": 2.1}, {"text": "But I'm doing that\nfor each value of i.", "start": 2157.34, "duration": 2.31}, {"text": "The outer piece here\nloops also n times.", "start": 2159.65, "duration": 3.45}, {"text": "For each value of i, I'm\ndoing order n things.", "start": 2163.1, "duration": 2.33}, {"text": "So I'm doing order of n\ntimes order of n steps.", "start": 2165.43, "duration": 5.34}, {"text": "And by that law, that is\nthe same order of n times", "start": 2170.77, "duration": 3.16}, {"text": "n or n squared.", "start": 2173.93, "duration": 2.17}, {"text": "So this is a\nquadratic expression.", "start": 2176.1, "duration": 3.749}, {"text": "You're going to see that a lot.", "start": 2179.849, "duration": 1.291}, {"text": "Nested loops typically\nhave that kind of behavior.", "start": 2181.14, "duration": 4.45}, {"text": "Not always, but typically\nhave that kind of behavior.", "start": 2185.59, "duration": 3.527}, {"text": "So what you're going\nto see is there's", "start": 2189.117, "duration": 1.583}, {"text": "a set of complexity classes.", "start": 2190.7, "duration": 1.41}, {"text": "And we're about to\nstart filling these in.", "start": 2192.11, "duration": 2.85}, {"text": "Order one is constant.", "start": 2194.96, "duration": 2.85}, {"text": "Says amount of time it\ntakes doesn't depend", "start": 2197.81, "duration": 1.98}, {"text": "on the size of the problem.", "start": 2199.79, "duration": 2.38}, {"text": "These are really\nrare that you get.", "start": 2202.17, "duration": 1.91}, {"text": "They tend to be trivial pieces\nof code, but they're valuable.", "start": 2204.08, "duration": 3.25}, {"text": "Log n reflects\nlogarithmic runtime.", "start": 2207.33, "duration": 2.977}, {"text": "You can sort of read\nthe rest of them.", "start": 2210.307, "duration": 1.583}, {"text": "These are the kinds of things\nthat we're going to deal with.", "start": 2211.89, "duration": 2.5}, {"text": "We are going to see examples\nhere, here, and here.", "start": 2214.39, "duration": 4.104}, {"text": "And later on, we're going\nto come back and see", "start": 2218.494, "duration": 1.916}, {"text": "these, which are really\nnice examples to have.", "start": 2220.41, "duration": 3.25}, {"text": "Just to remind you why\nthese orders of growth", "start": 2223.66, "duration": 2.072}, {"text": "matter-- sorry, that's\njust reminding you", "start": 2225.732, "duration": 1.708}, {"text": "what they look like.", "start": 2227.44, "duration": 0.833}, {"text": "We've already done that.", "start": 2228.273, "duration": 2.767}, {"text": "Here is the difference\nbetween constant log,", "start": 2231.04, "duration": 2.74}, {"text": "linear, log linear\nsquared, and exponential.", "start": 2233.78, "duration": 4.16}, {"text": "When n is equal to 10,\n100, 1,000 or a million.", "start": 2237.94, "duration": 5.58}, {"text": "I know you know this, but I want\nto drive home the difference.", "start": 2243.52, "duration": 3.15}, {"text": "Something that's constant\nis wonderful, no matter", "start": 2246.67, "duration": 2.52}, {"text": "how big the problem is.", "start": 2249.19, "duration": 0.96}, {"text": "Takes the same amount of time.", "start": 2250.15, "duration": 1.77}, {"text": "Something that is\nlog is pretty nice.", "start": 2251.92, "duration": 2.79}, {"text": "Increase the size of\nthe problem by 10,", "start": 2254.71, "duration": 2.13}, {"text": "it increases by a factor of 2.", "start": 2256.84, "duration": 3.03}, {"text": "From another 10,\nit only increases", "start": 2259.87, "duration": 1.44}, {"text": "by a factor of another 50%.", "start": 2261.31, "duration": 1.98}, {"text": "It only increases a little bit.", "start": 2263.29, "duration": 1.62}, {"text": "That's a gorgeous kind\nof problem to have.", "start": 2264.91, "duration": 2.24}, {"text": "Linear-- not so bad.", "start": 2267.15, "duration": 1.42}, {"text": "I go from 10 to 100\nto 1,000 to a million.", "start": 2268.57, "duration": 3.0}, {"text": "You can see log linear\nis not bad either.", "start": 2271.57, "duration": 2.81}, {"text": "Right?", "start": 2274.38, "duration": 0.87}, {"text": "A factor of 10 increase here\nis only a factor of 20 increase", "start": 2275.25, "duration": 3.35}, {"text": "there.", "start": 2278.6, "duration": 0.5}, {"text": "A factor of 10 increase there\nis only a factor of 30 increase", "start": 2279.1, "duration": 4.45}, {"text": "there.", "start": 2283.55, "duration": 0.5}, {"text": "So log linear doesn't\ngrow that badly.", "start": 2284.05, "duration": 3.4}, {"text": "But look at the difference\nbetween n squared and 2", "start": 2287.45, "duration": 2.44}, {"text": "to the n.", "start": 2289.89, "duration": 1.406}, {"text": "I actually did think\nof printing this out.", "start": 2291.296, "duration": 2.164}, {"text": "By the way, Python\nwill compute this.", "start": 2293.46, "duration": 1.86}, {"text": "But it was taken pages\nand pages and pages.", "start": 2295.32, "duration": 2.04}, {"text": "I didn't want to do it.", "start": 2297.36, "duration": 1.17}, {"text": "You get the point.", "start": 2298.53, "duration": 1.89}, {"text": "Exponential-- always much worse.", "start": 2300.42, "duration": 2.31}, {"text": "Always much worse than\na quadratic or a power", "start": 2302.73, "duration": 4.05}, {"text": "expression.", "start": 2306.78, "duration": 0.84}, {"text": "And you really see\nthe difference here.", "start": 2307.62, "duration": 3.48}, {"text": "All right.", "start": 2311.1, "duration": 1.5}, {"text": "The reason I put this up is\nas you design algorithms,", "start": 2312.6, "duration": 2.97}, {"text": "your goal is to be as high up\nin this listing as you can.", "start": 2315.57, "duration": 5.799}, {"text": "The closer you are to\nthe top of this list,", "start": 2321.369, "duration": 1.791}, {"text": "the better off you are.", "start": 2323.16, "duration": 1.56}, {"text": "If you have a solution\nthat's down here,", "start": 2324.72, "duration": 3.18}, {"text": "bring a sleeping\nbag and some coffee.", "start": 2327.9, "duration": 1.65}, {"text": "You're going to be\nthere for a while.", "start": 2329.55, "duration": 1.14}, {"text": "Right?", "start": 2330.69, "duration": 0.6}, {"text": "You really want to try\nand avoid that if you can.", "start": 2331.29, "duration": 2.94}, {"text": "So now what we want to do,\nboth for the rest of today", "start": 2334.23, "duration": 3.55}, {"text": "in the last 15 minutes\nand then next week,", "start": 2337.78, "duration": 4.12}, {"text": "is start identifying\ncommon algorithms", "start": 2341.9, "duration": 4.3}, {"text": "and what is their complexity.", "start": 2346.2, "duration": 1.791}, {"text": "As I said to you way\nback at the beginning", "start": 2347.991, "duration": 1.749}, {"text": "of this lecture, which\nI'm sure you remember,", "start": 2349.74, "duration": 1.44}, {"text": "it's not just to be able\nto identify the complexity.", "start": 2351.18, "duration": 2.58}, {"text": "I want you to see\nhow choices algorithm", "start": 2353.76, "duration": 3.57}, {"text": "design are going to\nlead to particular kinds", "start": 2357.33, "duration": 2.79}, {"text": "of consequences in terms of\nwhat this is going to cost you.", "start": 2360.12, "duration": 2.85}, {"text": "That's your goal here.", "start": 2362.97, "duration": 2.03}, {"text": "All right.", "start": 2365.0, "duration": 1.11}, {"text": "We've already seen\nsome examples.", "start": 2366.11, "duration": 1.39}, {"text": "I'm going to do one more here.", "start": 2367.5, "duration": 1.25}, {"text": "But simple iterative\nloop algorithms", "start": 2368.75, "duration": 1.92}, {"text": "are typically linear.", "start": 2370.67, "duration": 3.09}, {"text": "Here's another\nversion of searching.", "start": 2373.76, "duration": 2.07}, {"text": "Imagine I'll have\nan unsorted list.", "start": 2375.83, "duration": 2.22}, {"text": "Arbitrary order.", "start": 2378.05, "duration": 1.29}, {"text": "Here's another way of\ndoing the linear search.", "start": 2379.34, "duration": 2.04}, {"text": "Looks a little bit faster.", "start": 2381.38, "duration": 1.92}, {"text": "I'm going to set a flag\ninitially to false.", "start": 2383.3, "duration": 3.51}, {"text": "And then I'm going\nto loop for i from 0", "start": 2386.81, "duration": 2.82}, {"text": "up to the length of L.\nI'm going to use that", "start": 2389.63, "duration": 2.7}, {"text": "to index into the list, pull\nout each element of the list", "start": 2392.33, "duration": 2.97}, {"text": "in turn, and check to see is\nit the thing I'm looking for.", "start": 2395.3, "duration": 3.21}, {"text": "As soon as I find it, I'm\ngoing to send-- sorry--", "start": 2398.51, "duration": 3.27}, {"text": "set the flag to true.", "start": 2401.78, "duration": 2.87}, {"text": "OK?", "start": 2404.65, "duration": 0.79}, {"text": "So that when I return out of the\nloop, I can just return found.", "start": 2405.44, "duration": 2.91}, {"text": "And if I found it to be\ntrue, if I never found it,", "start": 2408.35, "duration": 2.85}, {"text": "found will still be\nfalse and I'll return it.", "start": 2411.2, "duration": 3.41}, {"text": "We could count the\noperations here,", "start": 2414.61, "duration": 1.71}, {"text": "but you've already seen\nexamples of doing that.", "start": 2416.32, "duration": 2.97}, {"text": "This is linear,\nbecause I'm looping", "start": 2419.29, "duration": 3.98}, {"text": "n times if n is the length\nof the list over there.", "start": 2423.27, "duration": 2.95}, {"text": "And the number of things I do\ninside the loop is constant.", "start": 2426.22, "duration": 3.86}, {"text": "Now, you might\nsay, wait a minute.", "start": 2430.08, "duration": 2.28}, {"text": "This is really brain\ndamaged, or if you're", "start": 2432.36, "duration": 1.75}, {"text": "being more politically correct,\ncomputationally challenged.", "start": 2434.11, "duration": 3.281}, {"text": "OK?", "start": 2437.391, "duration": 0.499}, {"text": "In the sense of\nonce I've found it,", "start": 2437.89, "duration": 2.83}, {"text": "why bother looking at\nthe rest of the list?", "start": 2440.72, "duration": 2.39}, {"text": "So in fact, I could just\nreturn true right here.", "start": 2443.11, "duration": 5.05}, {"text": "Does that change the order\nof growth of this algorithm?", "start": 2448.16, "duration": 4.042}, {"text": "No.", "start": 2452.202, "duration": 1.968}, {"text": "Changes the average time.", "start": 2454.17, "duration": 2.01}, {"text": "I'm going to stop faster.", "start": 2456.18, "duration": 1.86}, {"text": "But remember the order\nof growth captures", "start": 2458.04, "duration": 2.22}, {"text": "what's the worst case behavior.", "start": 2460.26, "duration": 1.56}, {"text": "And the worst case\nbehavior is the elements", "start": 2461.82, "duration": 2.197}, {"text": "not in the list I got\nto look at everything.", "start": 2464.017, "duration": 1.833}, {"text": "So this will be an example\nof a linear algorithm.", "start": 2465.85, "duration": 4.13}, {"text": "And you can see, I'm\nlooping length of L times", "start": 2469.98, "duration": 2.76}, {"text": "over the loop inside of there.", "start": 2472.74, "duration": 1.75}, {"text": "It's taking the\norder one to test it.", "start": 2474.49, "duration": 2.57}, {"text": "So it's order n.", "start": 2477.06, "duration": 2.775}, {"text": "And if I were to actually count\nit, there's the expression.", "start": 2479.835, "duration": 2.535}, {"text": "It's 1 plus 4n plus 1, which\nis 4n plus 2, which by my rule", "start": 2482.37, "duration": 3.54}, {"text": "says I don't care about\nthe additive constant.", "start": 2485.91, "duration": 2.37}, {"text": "I only care about\nthe dominant term.", "start": 2488.28, "duration": 1.78}, {"text": "And I don't care about that\nmultiplicative constant.", "start": 2490.06, "duration": 2.59}, {"text": "It's order n.", "start": 2492.65, "duration": 2.6}, {"text": "An example of a template\nyou're going to see a lot.", "start": 2495.25, "duration": 3.54}, {"text": "Now, order n where n is\nthe length of the list", "start": 2498.79, "duration": 4.516}, {"text": "and I need to specify that.", "start": 2503.306, "duration": 1.124}, {"text": "That's the thing I'm after.", "start": 2504.43, "duration": 2.43}, {"text": "If you think about\nit, I cheated.", "start": 2506.86, "duration": 2.06}, {"text": "Sorry-- I never cheat.", "start": 2508.92, "duration": 1.1}, {"text": "I'm tenure.", "start": 2510.02, "duration": 0.51}, {"text": "I never cheat.", "start": 2510.53, "duration": 0.81}, {"text": "I just mislead you badly.", "start": 2511.34, "duration": 1.445}, {"text": "Not a chance.", "start": 2515.3, "duration": 2.41}, {"text": "How do I know that accessing\nan element of the list", "start": 2517.71, "duration": 4.54}, {"text": "takes constant time?", "start": 2522.25, "duration": 1.68}, {"text": "I made an assumption about that.", "start": 2523.93, "duration": 2.6}, {"text": "And this is a reasonable\nthing to ask about-- both", "start": 2526.53, "duration": 2.92}, {"text": "what am I assuming about\nthe constant operations", "start": 2529.45, "duration": 2.5}, {"text": "and how do I know\nthat's actually true?", "start": 2531.95, "duration": 2.299}, {"text": "Well, it gives me a chance\nto point out something", "start": 2534.249, "duration": 2.041}, {"text": "that Python does\nvery effectively.", "start": 2536.29, "duration": 1.62}, {"text": "Not all languages do.", "start": 2537.91, "duration": 1.962}, {"text": "But think about a list.", "start": 2539.872, "duration": 0.958}, {"text": "Suppose I've got a list\nthat's all integers.", "start": 2540.83, "duration": 1.88}, {"text": "I'm going to need\nsome amount of memory", "start": 2542.71, "duration": 1.68}, {"text": "to represent each integer.", "start": 2544.39, "duration": 2.02}, {"text": "So if a byte is 8 bits, I might\nreserve 4 bytes or 32 bits", "start": 2546.41, "duration": 4.19}, {"text": "to cover any reasonable\nsized integer.", "start": 2550.6, "duration": 3.06}, {"text": "When I represent a list, I\ncould simply have each of them", "start": 2553.66, "duration": 2.79}, {"text": "in turn.", "start": 2556.45, "duration": 0.55}, {"text": "So what do I need to know?", "start": 2557.0, "duration": 1.85}, {"text": "I'm going to allocate\nout a particular length--", "start": 2558.85, "duration": 2.13}, {"text": "say 4 bytes, 32 bits, 32\nsequential elements of memory", "start": 2560.98, "duration": 3.96}, {"text": "to represent each integer.", "start": 2564.94, "duration": 1.92}, {"text": "And then I just\nneed to know where's", "start": 2566.86, "duration": 2.934}, {"text": "the first part of\nthe list, what's", "start": 2569.794, "duration": 1.416}, {"text": "the address and memory of\nthe first part of the list.", "start": 2571.21, "duration": 2.208}, {"text": "And to get to the\ni-th element, I take", "start": 2573.418, "duration": 2.022}, {"text": "that base plus 4 bytes times i.", "start": 2575.44, "duration": 4.49}, {"text": "And I can go straight\nto this point", "start": 2579.93, "duration": 2.26}, {"text": "without having to\nwalk down the list.", "start": 2582.19, "duration": 2.49}, {"text": "That's nice.", "start": 2584.68, "duration": 1.07}, {"text": "OK?", "start": 2585.75, "duration": 0.82}, {"text": "It says, in fact, I can get\nto any element of memory--", "start": 2586.57, "duration": 3.09}, {"text": "I'm sorry-- any element of\nthe list in constant time.", "start": 2589.66, "duration": 5.261}, {"text": "OK.", "start": 2594.921, "duration": 0.499}, {"text": "Now, what if the things I'm\nrepresenting aren't integers?", "start": 2595.42, "duration": 2.32}, {"text": "They're arbitrary\nthings and they take up", "start": 2597.74, "duration": 1.708}, {"text": "a big chunk of space.", "start": 2599.448, "duration": 2.372}, {"text": "Well, if the list\nis heterogeneous,", "start": 2601.82, "duration": 1.89}, {"text": "we use a nice technique\ncalled indirection.", "start": 2603.71, "duration": 2.81}, {"text": "And that simply says\nwe, again, have a list.", "start": 2606.52, "duration": 2.41}, {"text": "We know the address\nof this point.", "start": 2608.93, "duration": 1.68}, {"text": "We know the address there for\nthe i-th element of this list.", "start": 2610.61, "duration": 3.12}, {"text": "But inside of here, we don't\nstore the actual value.", "start": 2613.73, "duration": 4.275}, {"text": "We store a pointer to\nwhere it is in memory.", "start": 2618.005, "duration": 2.902}, {"text": "Just what these\nthings are indicating.", "start": 2620.907, "duration": 1.583}, {"text": "So they can be arbitrary size.", "start": 2622.49, "duration": 2.25}, {"text": "But again, I can get to any\nelement in constant time, which", "start": 2624.74, "duration": 2.76}, {"text": "is exactly what I want.", "start": 2627.5, "duration": 2.23}, {"text": "So that's great.", "start": 2629.73, "duration": 2.82}, {"text": "OK.", "start": 2632.55, "duration": 0.8}, {"text": "Now, suppose I tell you\nthat the list is sorted.", "start": 2633.35, "duration": 2.38}, {"text": "It's in increasing order.", "start": 2635.73, "duration": 2.02}, {"text": "I can be more clever\nabout my algorithm.", "start": 2637.75, "duration": 2.44}, {"text": "Because now, as I\nloop through it,", "start": 2640.19, "duration": 1.53}, {"text": "I can say if it's the thing I'm\nlooking for, just return true.", "start": 2641.72, "duration": 3.96}, {"text": "If the element of the list\nis bigger than the thing", "start": 2645.68, "duration": 3.33}, {"text": "I'm looking for, I'm done.", "start": 2649.01, "duration": 1.785}, {"text": "I don't need to look at\nthe rest of the list,", "start": 2650.795, "duration": 1.875}, {"text": "because I know it can't be there\nbecause it's ordered or sorted.", "start": 2652.67, "duration": 2.67}, {"text": "I can just return false.", "start": 2655.34, "duration": 1.43}, {"text": "If I get all the way through\nthe loop, I can return false.", "start": 2656.77, "duration": 2.965}, {"text": "So I only have to look\nuntil I get to a point", "start": 2659.735, "duration": 1.875}, {"text": "where the thing in\nthe list is bigger", "start": 2661.61, "duration": 1.541}, {"text": "than what I'm looking for.", "start": 2663.151, "duration": 1.421}, {"text": "It's the order of growth here.", "start": 2664.572, "duration": 2.608}, {"text": "Again, the average time\nbehavior will be faster.", "start": 2667.18, "duration": 4.49}, {"text": "But the order of\ngrowth is I've got", "start": 2671.67, "duration": 1.65}, {"text": "to do order of\nlength of the list", "start": 2673.32, "duration": 1.65}, {"text": "to go through the loop,\norder of one to do the test,", "start": 2674.97, "duration": 3.75}, {"text": "and in the worst\ncase, again, I still", "start": 2678.72, "duration": 1.71}, {"text": "have to go through\nthe entire list.", "start": 2680.43, "duration": 2.324}, {"text": "So the order of growth\nhere is the same.", "start": 2682.754, "duration": 1.666}, {"text": "It is, again, linear in\nthe length of the list,", "start": 2684.42, "duration": 3.36}, {"text": "even though the runtime\nwill be different depending", "start": 2687.78, "duration": 2.17}, {"text": "whether it's sorted or not.", "start": 2689.95, "duration": 2.792}, {"text": "I want you to hold\non to that idea,", "start": 2692.742, "duration": 1.458}, {"text": "because we're going to come\nback to the sorted list", "start": 2694.2, "duration": 2.16}, {"text": "next week to see\nthat there actually", "start": 2696.36, "duration": 1.5}, {"text": "are much more efficient ways\nto use the fact that a list is", "start": 2697.86, "duration": 2.99}, {"text": "sorted to do the search.", "start": 2700.85, "duration": 2.11}, {"text": "But both of these versions\nsame order growth, order n.", "start": 2702.96, "duration": 4.75}, {"text": "OK.", "start": 2707.71, "duration": 1.11}, {"text": "So lurching through a\nlist-- right, sorry--", "start": 2708.82, "duration": 2.31}, {"text": "searching through\na list in sequence", "start": 2711.13, "duration": 2.4}, {"text": "is linear because of that loop.", "start": 2713.53, "duration": 2.58}, {"text": "There are other things\nthat have a similar flavor.", "start": 2716.11, "duration": 2.1}, {"text": "And I'm going to\ndo these quickly", "start": 2718.21, "duration": 1.375}, {"text": "to get to the last example.", "start": 2719.585, "duration": 1.785}, {"text": "Imagine I give you a string of\ncharacters that are all soon", "start": 2721.37, "duration": 3.89}, {"text": "to be composed of\ndecimal digits.", "start": 2725.26, "duration": 1.5}, {"text": "I just want to add them all up.", "start": 2726.76, "duration": 1.95}, {"text": "This is also linear,\nbecause there's the loop.", "start": 2728.71, "duration": 2.754}, {"text": "I'm going to loop over the\ncharacters in the string.", "start": 2731.464, "duration": 2.166}, {"text": "I'm going to cast\nthem into integers,", "start": 2733.63, "duration": 2.1}, {"text": "add them in, and\nreturn the value.", "start": 2735.73, "duration": 1.89}, {"text": "This is linear in the\nlength of the input s.", "start": 2737.62, "duration": 6.11}, {"text": "Notice the pattern.", "start": 2743.73, "duration": 1.26}, {"text": "That loop-- that\nin-iterative loop--", "start": 2744.99, "duration": 1.537}, {"text": "it's got that linear\nbehavior, because", "start": 2746.527, "duration": 1.583}, {"text": "inside of the loop\nconstant number of things", "start": 2748.11, "duration": 1.833}, {"text": "that I'm executing.", "start": 2749.943, "duration": 2.437}, {"text": "We already looked at fact iter.", "start": 2752.38, "duration": 1.38}, {"text": "Same idea.", "start": 2753.76, "duration": 1.809}, {"text": "There's the loop I'm going to\ndo that n times inside the loop", "start": 2755.569, "duration": 2.541}, {"text": "a constant amount of things.", "start": 2758.11, "duration": 2.27}, {"text": "So looping around it is order n.", "start": 2760.38, "duration": 2.4}, {"text": "There's the actual expression.", "start": 2762.78, "duration": 1.29}, {"text": "But again, the pattern\nI want you to see here", "start": 2764.07, "duration": 2.1}, {"text": "is that this is order n.", "start": 2766.17, "duration": 3.45}, {"text": "OK.", "start": 2769.62, "duration": 1.98}, {"text": "Last example for today.", "start": 2771.6, "duration": 1.65}, {"text": "I know you're all secretly\nlooking at your watches.", "start": 2773.25, "duration": 4.22}, {"text": "Standard loops,\ntypically linear.", "start": 2777.47, "duration": 2.87}, {"text": "What about nested loops?", "start": 2780.34, "duration": 1.48}, {"text": "What about loops that\nhave loops inside of them?", "start": 2781.82, "duration": 2.49}, {"text": "How long do they take?", "start": 2784.31, "duration": 1.96}, {"text": "I want to show you a\ncouple of examples.", "start": 2786.27, "duration": 2.56}, {"text": "And mostly, I want to show\nyou how to reason about them.", "start": 2788.83, "duration": 3.99}, {"text": "Suppose I gave you two\nlists composed of integers,", "start": 2792.82, "duration": 3.26}, {"text": "and I want to know\nis the first list", "start": 2796.08, "duration": 1.93}, {"text": "a subset of the second list.", "start": 2798.01, "duration": 3.121}, {"text": "Codes in the handbook, by the\nway, if you want to go run it.", "start": 2801.131, "duration": 2.499}, {"text": "But basically, the\nsimple idea would", "start": 2803.63, "duration": 1.74}, {"text": "be I'm going to loop over every\nelement in the first list.", "start": 2805.37, "duration": 3.595}, {"text": "And for each one\nof those, I want", "start": 2808.965, "duration": 1.375}, {"text": "to say is it in the second list?", "start": 2810.34, "duration": 2.022}, {"text": "So I'll use the\nsame kind of trick.", "start": 2812.362, "duration": 1.458}, {"text": "I'll set up a flag\nthat's initially false.", "start": 2813.82, "duration": 2.49}, {"text": "And then I'm going to loop over\neverything in the second list.", "start": 2816.31, "duration": 3.24}, {"text": "And if that thing is equal\nto the thing I'm looking for,", "start": 2819.55, "duration": 3.8}, {"text": "I'll set match to true and\nbreak out of the loop--", "start": 2823.35, "duration": 2.4}, {"text": "the inner loop.", "start": 2825.75, "duration": 1.537}, {"text": "If I get all the way\nthrough the second list", "start": 2827.287, "duration": 1.833}, {"text": "and I haven't\nfound the thing I'm", "start": 2829.12, "duration": 1.375}, {"text": "looking for, when I break\nout or come out of this loop,", "start": 2830.495, "duration": 3.665}, {"text": "matched in that case, will still\nbe false and all return false.", "start": 2834.16, "duration": 4.26}, {"text": "But if up here, I found\nsomething that matched,", "start": 2838.42, "duration": 2.13}, {"text": "match would be true.", "start": 2840.55, "duration": 0.85}, {"text": "I break out of it.", "start": 2841.4, "duration": 1.16}, {"text": "It's not false.", "start": 2842.56, "duration": 1.2}, {"text": "Therefore, a return true.", "start": 2843.76, "duration": 3.904}, {"text": "I want you look at the code.", "start": 2847.664, "duration": 1.166}, {"text": "You should be able\nto look at this", "start": 2848.83, "duration": 1.416}, {"text": "and realize what it's doing.", "start": 2850.246, "duration": 1.756}, {"text": "For each element\nin the first list,", "start": 2852.002, "duration": 1.458}, {"text": "I walk through the second list\nto say is that element there.", "start": 2853.46, "duration": 2.64}, {"text": "And if it is, I return true.", "start": 2856.1, "duration": 1.55}, {"text": "If that's true for all of the\nelements in the first list,", "start": 2857.65, "duration": 2.5}, {"text": "I return true overall.", "start": 2860.15, "duration": 2.78}, {"text": "OK.", "start": 2862.93, "duration": 1.284}, {"text": "Order of growth.", "start": 2864.214, "duration": 0.666}, {"text": "Outer loop-- this loop\nI'm going to execute", "start": 2867.79, "duration": 3.5}, {"text": "the length of L1 times.", "start": 2871.29, "duration": 1.9}, {"text": "Right?", "start": 2873.19, "duration": 0.5}, {"text": "I've got to walk\ndown that first list.", "start": 2873.69, "duration": 2.26}, {"text": "If I call that n, it's\ngoing to take that n", "start": 2875.95, "duration": 1.82}, {"text": "times over the outer loop.", "start": 2877.77, "duration": 2.99}, {"text": "But what about n here?", "start": 2880.76, "duration": 2.42}, {"text": "All of the earlier examples,\nwe had a constant number", "start": 2883.18, "duration": 3.12}, {"text": "of operations\ninside of the loop.", "start": 2886.3, "duration": 2.85}, {"text": "Here, we don't.", "start": 2889.15, "duration": 0.63}, {"text": "We've got another loop that's\nlooping over in principle", "start": 2889.78, "duration": 4.2}, {"text": "all the elements\nof the second list.", "start": 2893.98, "duration": 3.24}, {"text": "So in each iteration is going\nto execute the inner loop up", "start": 2897.22, "duration": 3.09}, {"text": "to length of L2 times, where\ninside of this inner loop", "start": 2900.31, "duration": 3.93}, {"text": "there is a constant\nnumber of operations.", "start": 2904.24, "duration": 3.67}, {"text": "Ah, nice.", "start": 2907.91, "duration": 2.16}, {"text": "That's the multiplicative\nlaw of orders of growth.", "start": 2910.07, "duration": 2.73}, {"text": "It says if this is\norder length L1.", "start": 2912.8, "duration": 2.509}, {"text": "And we're going to\ndo that then order", "start": 2915.309, "duration": 1.541}, {"text": "length of L2 times, the\norder of growth is a product.", "start": 2916.85, "duration": 5.091}, {"text": "And the most common or\nthe worst case behavior", "start": 2921.941, "duration": 2.319}, {"text": "is going to be when the\nlists are of the same length", "start": 2924.26, "duration": 2.78}, {"text": "and none of the elements\nof L1 are in L2.", "start": 2927.04, "duration": 2.91}, {"text": "And in that case, we're\ngoing to get something that's", "start": 2929.95, "duration": 2.73}, {"text": "order n squared\nquadratic, where n", "start": 2932.68, "duration": 3.48}, {"text": "is the length of the list in\nterms of number of operations.", "start": 2936.16, "duration": 4.74}, {"text": "I don't really\ncare about subsets.", "start": 2940.9, "duration": 2.38}, {"text": "I've got one more example.", "start": 2943.28, "duration": 1.95}, {"text": "We could similarly\ndo intersection.", "start": 2945.23, "duration": 2.5}, {"text": "If I wanted to say what is\nthe intersection of two lists?", "start": 2947.73, "duration": 2.71}, {"text": "What elements are on\nboth list 1 and list 2?", "start": 2950.44, "duration": 2.94}, {"text": "Same basic idea.", "start": 2953.38, "duration": 1.44}, {"text": "Here, I've got a\npair of nested loops.", "start": 2954.82, "duration": 2.41}, {"text": "I'm looping over\neverything in L1.", "start": 2957.23, "duration": 1.91}, {"text": "For that, I'm looping\nover everything in L2.", "start": 2959.14, "duration": 2.91}, {"text": "And if they are the same,\nI'm going to put that", "start": 2962.05, "duration": 2.88}, {"text": "into a temporary variable.", "start": 2964.93, "duration": 2.69}, {"text": "Once I've done that, I\nneed to clean things up.", "start": 2967.62, "duration": 1.976}, {"text": "So I'm going to write\nanother loop that", "start": 2969.596, "duration": 1.624}, {"text": "sets up an internal variable\nand then runs through everything", "start": 2971.22, "duration": 2.85}, {"text": "in the list I\naccumulated, making sure", "start": 2974.07, "duration": 2.34}, {"text": "that it's not already there.", "start": 2976.41, "duration": 1.664}, {"text": "And as long as it isn't, I'm\ngoing to put it in the result", "start": 2978.074, "duration": 2.416}, {"text": "and return it.", "start": 2980.49, "duration": 2.09}, {"text": "I did it quickly.", "start": 2982.58, "duration": 0.8}, {"text": "You can look through it.", "start": 2983.38, "duration": 0.82}, {"text": "You'll see it does\nthe right thing.", "start": 2984.2, "duration": 1.458}, {"text": "What I want it to see is\nwhat's the order of growth.", "start": 2985.658, "duration": 2.482}, {"text": "I need to look at this piece.", "start": 2988.14, "duration": 1.69}, {"text": "Then I need to\nlook at that piece.", "start": 2989.83, "duration": 2.01}, {"text": "This piece-- well, it's order\nlength L1 to do the outer loop.", "start": 2991.84, "duration": 6.4}, {"text": "For each version of\ne1, I've got to do", "start": 2998.24, "duration": 2.88}, {"text": "order of length L2 things\ninside to accumulate them.", "start": 3001.12, "duration": 3.96}, {"text": "So that's quadratic.", "start": 3005.08, "duration": 3.32}, {"text": "What about the second loop?", "start": 3008.4, "duration": 2.01}, {"text": "Well, this one is a\nlittle more subtle.", "start": 3010.41, "duration": 2.19}, {"text": "I'm only looping over temp,\nwhich is at most going", "start": 3012.6, "duration": 4.83}, {"text": "to be length L1 long.", "start": 3017.43, "duration": 3.003}, {"text": "But I'm checking to see\nis that element in a list?", "start": 3020.433, "duration": 7.297}, {"text": "And it depends on\nthe implementation.", "start": 3027.73, "duration": 1.67}, {"text": "But typically, that's\ngoing to take up", "start": 3029.4, "duration": 1.632}, {"text": "to the length of\nthe list to do it.", "start": 3031.032, "duration": 1.458}, {"text": "I got to look to see\nis it there or not.", "start": 3032.49, "duration": 2.1}, {"text": "And so that inner\nloop if we assume", "start": 3034.59, "duration": 2.34}, {"text": "the lists are the\nsame size is also", "start": 3036.93, "duration": 1.92}, {"text": "going to take potentially\nup to length L1 steps.", "start": 3038.85, "duration": 3.43}, {"text": "And so this is,\nagain, quadratic.", "start": 3042.28, "duration": 2.894}, {"text": "It's actually two\nquadratics-- one", "start": 3045.174, "duration": 1.416}, {"text": "for the first nested loop,\none for the second one,", "start": 3046.59, "duration": 2.97}, {"text": "because there's an implicit\nsecond loop right there.", "start": 3049.56, "duration": 3.12}, {"text": "But overall, it's quadratic.", "start": 3052.68, "duration": 3.64}, {"text": "So what you see\nin general-- this", "start": 3056.32, "duration": 2.31}, {"text": "is a really dumb way\nto compute n squared.", "start": 3058.63, "duration": 2.8}, {"text": "When you have nested\nloops, typically, it's", "start": 3061.43, "duration": 2.3}, {"text": "going to be quadratic behavior.", "start": 3063.73, "duration": 2.37}, {"text": "And so what we've\ndone then is we've", "start": 3066.1, "duration": 1.66}, {"text": "started to build up examples.", "start": 3067.76, "duration": 2.28}, {"text": "We've now seen simple looping\nmechanisms, simple iterative", "start": 3070.04, "duration": 2.76}, {"text": "mechanisms, nested loops.", "start": 3072.8, "duration": 1.68}, {"text": "They tend to naturally give\nrise to linear and quadratic", "start": 3074.48, "duration": 3.39}, {"text": "complexity.", "start": 3077.87, "duration": 0.999}, {"text": "And next time, we're\ngoing to start looking", "start": 3078.869, "duration": 1.791}, {"text": "at more interesting classes.", "start": 3080.66, "duration": 2.01}, {"text": "And we'll see you next time.", "start": 3082.67, "duration": 2.483}]