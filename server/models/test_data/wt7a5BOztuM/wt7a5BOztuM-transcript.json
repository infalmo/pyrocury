[{"text": "The following content is\nprovided under a Creative", "start": 1.55, "duration": 2.37}, {"text": "Commons license.", "start": 3.92, "duration": 1.39}, {"text": "Your support will help\nMIT Open Courseware", "start": 5.31, "duration": 2.21}, {"text": "continue to offer high quality\neducational resources for free.", "start": 7.52, "duration": 4.09}, {"text": "To make a donation or to\nview additional materials", "start": 11.61, "duration": 2.57}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseware", "start": 14.18, "duration": 3.424}, {"text": "at ocw.mit.edu.", "start": 17.604, "duration": 0.936}, {"text": "JULIAN SHUN: Good\nafternoon, everyone.", "start": 22.21, "duration": 2.05}, {"text": "So today, we have\nTB Schardl here.", "start": 24.26, "duration": 2.96}, {"text": "He's going to give us the\nlecture on C to assembly.", "start": 27.22, "duration": 3.69}, {"text": "So TB's a research\nscientist here at MIT", "start": 30.91, "duration": 3.78}, {"text": "working with Charles Leiserson.", "start": 34.69, "duration": 1.47}, {"text": "He also taught this\nclass with me last year,", "start": 36.16, "duration": 3.75}, {"text": "and he got one of the best\nratings ever for this class.", "start": 39.91, "duration": 3.81}, {"text": "So I'm really looking\nforward to his lecture.", "start": 43.72, "duration": 4.71}, {"text": "TAO SCHARDL: All right, great.", "start": 48.43, "duration": 2.25}, {"text": "So thank you for the\nintroduction, Julian.", "start": 50.68, "duration": 3.91}, {"text": "So I hear you just submitted\nthe beta for project 1.", "start": 54.59, "duration": 4.16}, {"text": "Hopefully, that\nwent pretty well.", "start": 58.75, "duration": 2.82}, {"text": "How many of you slept\nin the last 24 hours?", "start": 61.57, "duration": 4.36}, {"text": "OK, good.", "start": 65.93, "duration": 0.65}, {"text": "All right, so it\nwent pretty well.", "start": 66.58, "duration": 2.27}, {"text": "That sounds great.", "start": 68.85, "duration": 2.39}, {"text": "Yeah, so today, we're going to\nbe talking about C to assembly.", "start": 71.24, "duration": 4.23}, {"text": "And this is really\na continuation", "start": 75.47, "duration": 1.79}, {"text": "from the topic of\nlast lecture, where", "start": 77.26, "duration": 1.95}, {"text": "you saw computer architecture,\nif I understand correctly.", "start": 79.21, "duration": 2.67}, {"text": "Is that right?", "start": 81.88, "duration": 0.99}, {"text": "You looked at computer\narchitecture, x86-64 assembly,", "start": 82.87, "duration": 4.82}, {"text": "that sort of thing.", "start": 87.69, "duration": 1.63}, {"text": "So how many of you walked away\nfrom that lecture thinking, oh", "start": 89.32, "duration": 2.88}, {"text": "yeah, x86-64 assembly,\nthis is easy?", "start": 92.2, "duration": 3.84}, {"text": "This is totally intuitive.", "start": 96.04, "duration": 1.28}, {"text": "Everything makes perfect sense.", "start": 97.32, "duration": 1.76}, {"text": "There's no weirdness\ngoing on here whatsoever.", "start": 99.08, "duration": 3.72}, {"text": "How many of you walked\naway not thinking that?", "start": 102.8, "duration": 4.095}, {"text": "Thinking that perhaps this\nis a little bit strange,", "start": 106.895, "duration": 2.125}, {"text": "this whole assembly language.", "start": 109.02, "duration": 1.23}, {"text": "Yeah, I'm really in\nthe later cab. x86 is", "start": 110.25, "duration": 2.88}, {"text": "kind of a strange beast.", "start": 113.13, "duration": 2.07}, {"text": "There are things in\nthere that make no sense.", "start": 115.2, "duration": 2.49}, {"text": "Quad word has 8 bytes.", "start": 117.69, "duration": 2.16}, {"text": "P stands for integer,\nthat sort of thing.", "start": 119.85, "duration": 3.09}, {"text": "So when we move on to the\ntopic of seeing how C code gets", "start": 126.74, "duration": 4.39}, {"text": "translated into assembly,\nwe're translating", "start": 131.13, "duration": 2.22}, {"text": "into something that's\nalready pretty complicated.", "start": 133.35, "duration": 3.787}, {"text": "And the translation\nitself isn't going", "start": 137.137, "duration": 1.583}, {"text": "to be that straightforward.", "start": 138.72, "duration": 1.98}, {"text": "So we're going to have to find\na way to work through that.", "start": 140.7, "duration": 3.48}, {"text": "And I'll outline the\nstrategy that we'll", "start": 144.18, "duration": 2.07}, {"text": "be using in the start\nof this presentation.", "start": 146.25, "duration": 4.197}, {"text": "But first, let's quickly review.", "start": 150.447, "duration": 1.333}, {"text": "Why do we care about\nlooking at assembly?", "start": 151.78, "duration": 2.1}, {"text": "You should have seen this\nslide from the last lecture.", "start": 153.88, "duration": 3.74}, {"text": "But essentially, assembly is\na more precise representation", "start": 157.62, "duration": 4.59}, {"text": "of the program than\nthe C code itself.", "start": 162.21, "duration": 2.54}, {"text": "And if you look at\nthe assembly, that", "start": 164.75, "duration": 1.67}, {"text": "can reveal details about the\nprogram that are not obvious", "start": 166.42, "duration": 3.72}, {"text": "when you just look at\nthe C code directly.", "start": 170.14, "duration": 2.97}, {"text": "There are implicit things\ngoing on in the C code,", "start": 173.11, "duration": 2.76}, {"text": "such as type cast or\nthe usage of registers", "start": 175.87, "duration": 3.54}, {"text": "versus memory on the machine.", "start": 179.41, "duration": 1.98}, {"text": "And those can have\nperformance implications.", "start": 181.39, "duration": 2.23}, {"text": "So it's valuable to take a look\nat the assembly code directly.", "start": 183.62, "duration": 4.13}, {"text": "It can also reveal what\nthe compiler did or did not", "start": 187.75, "duration": 3.09}, {"text": "do when it tried to\noptimize the program.", "start": 190.84, "duration": 2.97}, {"text": "For example, you may have\nwritten a division operation", "start": 193.81, "duration": 2.475}, {"text": "or a multiply operation.", "start": 196.285, "duration": 1.905}, {"text": "But somehow, the\ncompiler figured out", "start": 198.19, "duration": 2.37}, {"text": "that it didn't really\nneed to do a divide", "start": 200.56, "duration": 1.89}, {"text": "or multiply to implement\nthat operation.", "start": 202.45, "duration": 2.22}, {"text": "It could implement it more\nquickly using simpler, faster", "start": 204.67, "duration": 3.75}, {"text": "operations, like addition\nand subtraction or shift.", "start": 208.42, "duration": 3.69}, {"text": "And you would be\nable to see that", "start": 212.11, "duration": 1.38}, {"text": "from looking at the assembly.", "start": 213.49, "duration": 2.94}, {"text": "Bugs can also arise\nonly at a low level.", "start": 216.43, "duration": 2.55}, {"text": "For example, there may be a\nbug in the program that only", "start": 218.98, "duration": 3.42}, {"text": "creates unexpected behavior when\nyou optimize the code at 03.", "start": 222.4, "duration": 6.39}, {"text": "So that means, when you're\ndebugging and with that OG", "start": 228.79, "duration": 2.52}, {"text": "or -01, you wouldn't see\nany unusual behaviors.", "start": 231.31, "duration": 3.3}, {"text": "But when you crank up\nthe optimization level,", "start": 234.61, "duration": 1.95}, {"text": "suddenly, things\nstart to fall apart.", "start": 236.56, "duration": 3.3}, {"text": "Because the C code\nitself didn't change,", "start": 239.86, "duration": 1.71}, {"text": "it can be hard to\nspot those bugs.", "start": 241.57, "duration": 2.22}, {"text": "Looking at the assembly can\nhelp out in that regard.", "start": 243.79, "duration": 4.01}, {"text": "And when worse comes\nto worse, if you really", "start": 247.8, "duration": 2.25}, {"text": "want to make your\ncode fast, it is", "start": 250.05, "duration": 1.74}, {"text": "possible to modify the\nassembly code by hand.", "start": 251.79, "duration": 3.875}, {"text": "One of my favorite uses of\nlooking at the assembly,", "start": 255.665, "duration": 2.125}, {"text": "though, is actually\nreverse engineering.", "start": 257.79, "duration": 2.729}, {"text": "If you can read the\nassembly for some code,", "start": 260.519, "duration": 3.101}, {"text": "you can actually decipher\nwhat that program does,", "start": 263.62, "duration": 2.99}, {"text": "even when you only have access\nto the binary of that program,", "start": 266.61, "duration": 3.96}, {"text": "which is kind of a cool thing.", "start": 270.57, "duration": 2.16}, {"text": "It takes some practice to\nread assembly at that level.", "start": 272.73, "duration": 3.45}, {"text": "One trick that some of us in\nProfessor Leiserson's research", "start": 276.18, "duration": 4.74}, {"text": "group have used\nin the past to say", "start": 280.92, "duration": 2.428}, {"text": "figure out what Intel's\nMath Kernel Library", "start": 283.348, "duration": 1.792}, {"text": "is doing to multiply matrices.", "start": 285.14, "duration": 1.375}, {"text": "Now, as I mentioned before,\nat the end of last lecture,", "start": 289.6, "duration": 2.84}, {"text": "you saw some computer\narchitecture.", "start": 292.44, "duration": 2.67}, {"text": "And you saw the basics\nof x86-64 assembly,", "start": 295.11, "duration": 4.68}, {"text": "including all the stuff,\nlike the instructions,", "start": 299.79, "duration": 2.49}, {"text": "the registers, the various data\ntypes, memory addressing modes,", "start": 302.28, "duration": 4.41}, {"text": "the RFLAGS registered with\nthose condition codes,", "start": 306.69, "duration": 3.102}, {"text": "and that sort of thing.", "start": 309.792, "duration": 0.958}, {"text": "And today, we want to talk about\nhow C code gets implemented", "start": 310.75, "duration": 3.56}, {"text": "in that assembly language.", "start": 314.31, "duration": 2.76}, {"text": "OK, well, if we consider\nhow C code becomes assembly", "start": 317.07, "duration": 4.71}, {"text": "and what that process\nactually looks like,", "start": 321.78, "duration": 2.8}, {"text": "we know that there is\na compiler involved.", "start": 324.58, "duration": 2.09}, {"text": "And the compiler is a\npretty sophisticated piece", "start": 326.67, "duration": 2.1}, {"text": "of software.", "start": 328.77, "duration": 0.987}, {"text": "And, frankly, the\ncompiler has a lot of work", "start": 329.757, "duration": 1.833}, {"text": "to do in order to translate\na C program into assembly.", "start": 331.59, "duration": 4.71}, {"text": "For example, it has to choose\nwhat assembly instructions are", "start": 336.3, "duration": 3.06}, {"text": "going to be used to\nimplement those C operations.", "start": 339.36, "duration": 3.15}, {"text": "It has to implement C\nconditionals and loops--", "start": 342.51, "duration": 2.22}, {"text": "those if, then, elses and\nthose for and why loops--", "start": 344.73, "duration": 4.08}, {"text": "into jumps and branches.", "start": 348.81, "duration": 2.34}, {"text": "It has to choose registers\nand memory locations", "start": 351.15, "duration": 2.34}, {"text": "to store all of the\ndata in the program.", "start": 353.49, "duration": 3.75}, {"text": "It may have to move data among\nthe registers and the memory", "start": 357.24, "duration": 2.58}, {"text": "locations in order to satisfy\nvarious data dependencies.", "start": 359.82, "duration": 3.72}, {"text": "It has to coordinate all\nthe function calls that", "start": 363.54, "duration": 2.28}, {"text": "happen when subroutine A calls\nB and calls C, and then returns,", "start": 365.82, "duration": 3.72}, {"text": "and so on and so forth.", "start": 369.54, "duration": 1.89}, {"text": "And on top of that,\nthese days, we", "start": 371.43, "duration": 2.07}, {"text": "expect our compiler\nto try really", "start": 373.5, "duration": 1.86}, {"text": "hard to make that code fast.", "start": 375.36, "duration": 2.37}, {"text": "So that's a lot of work\nthat the compiler has to do.", "start": 377.73, "duration": 2.83}, {"text": "And as a result,\nif we take a look", "start": 380.56, "duration": 2.42}, {"text": "at the assembly for any\narbitrary piece of C code,", "start": 382.98, "duration": 3.57}, {"text": "the mapping from that\nC code to the assembly", "start": 386.55, "duration": 3.99}, {"text": "is not exactly\nobvious, which makes", "start": 390.54, "duration": 4.41}, {"text": "it hard to execute this\nparticular lecture and hard to,", "start": 394.95, "duration": 4.95}, {"text": "in general, read the binary or\nthe assembly for some program", "start": 399.9, "duration": 3.9}, {"text": "and figure out what's\nreally going on.", "start": 403.8, "duration": 3.177}, {"text": "So what we're going to do today\nto understand this translation", "start": 406.977, "duration": 2.583}, {"text": "process is we're going\nto take a look at how", "start": 409.56, "duration": 3.75}, {"text": "that compiler actually\nreasons about translating", "start": 413.31, "duration": 3.18}, {"text": "C code into assembly.", "start": 416.49, "duration": 2.07}, {"text": "Now this is not\na compiler class.", "start": 418.56, "duration": 1.74}, {"text": "6172 is not a class you\ntake if you want to learn", "start": 420.3, "duration": 3.36}, {"text": "how to build a compiler.", "start": 423.66, "duration": 1.432}, {"text": "And you're not going to\nneed to know everything", "start": 425.092, "duration": 1.958}, {"text": "about a compiler to\nfollow today's lecture.", "start": 427.05, "duration": 4.35}, {"text": "But what we will see is\njust a little bit about", "start": 431.4, "duration": 3.45}, {"text": "how the compiler\nunderstands a program", "start": 434.85, "duration": 3.12}, {"text": "and, later on, how the compiler\ncan translate that program", "start": 437.97, "duration": 4.32}, {"text": "into assembly code.", "start": 442.29, "duration": 2.58}, {"text": "Now when a compiler\ncompiles a program,", "start": 444.87, "duration": 3.06}, {"text": "it does so through a\nsequence of stages, which", "start": 447.93, "duration": 2.31}, {"text": "are illustrated on this slide.", "start": 450.24, "duration": 1.72}, {"text": "Starting from the C code, it\nfirst pre-processes that code,", "start": 451.96, "duration": 3.47}, {"text": "dealing with all the macros.", "start": 455.43, "duration": 2.82}, {"text": "And that produces a\npre-process source.", "start": 458.25, "duration": 3.06}, {"text": "Then the compiler will\ntranslate that source code", "start": 461.31, "duration": 2.28}, {"text": "into an intermediate\nrepresentation.", "start": 463.59, "duration": 2.43}, {"text": "For the client compiler\nthat you're using,", "start": 466.02, "duration": 1.98}, {"text": "that intermediate representation\nis called LLVM IR.", "start": 468.0, "duration": 3.45}, {"text": "LLVM being the name of\nthe underlying compiler,", "start": 471.45, "duration": 2.31}, {"text": "and IR being the creative\nname for the intermediate", "start": 473.76, "duration": 3.75}, {"text": "representation.", "start": 477.51, "duration": 2.67}, {"text": "That LLVM IR is really a\nsort of pseudo-assembly.", "start": 480.18, "duration": 3.84}, {"text": "It's kind of like\nassembly, but as we'll see,", "start": 484.02, "duration": 4.11}, {"text": "it's actually a lot simpler\nthan x86-64 assembly.", "start": 488.13, "duration": 3.92}, {"text": "And that's why we'll use it\nto understand this translation", "start": 492.05, "duration": 2.95}, {"text": "process.", "start": 495.0, "duration": 2.133}, {"text": "Now it turns out\nthat the compiler", "start": 497.133, "duration": 1.417}, {"text": "does a whole lot of work on that\nintermediate representation.", "start": 498.55, "duration": 3.54}, {"text": "We're not going to\nworry about that today.", "start": 502.09, "duration": 2.56}, {"text": "We'll just skip to the\nend of this pipeline", "start": 504.65, "duration": 1.85}, {"text": "when the compiler translates\nLLVM IR into assembly code.", "start": 506.5, "duration": 6.45}, {"text": "Now the nice thing about\ntaking a look at the LLVM IR", "start": 512.95, "duration": 2.219}, {"text": "is that If you're\ncurious, you can actually", "start": 515.169, "duration": 2.161}, {"text": "follow along with the compiler.", "start": 517.33, "duration": 1.979}, {"text": "It is possible to ask\nclang to compile your code", "start": 519.309, "duration": 3.661}, {"text": "and give you the LLVM IR\nrather than the assembly.", "start": 522.97, "duration": 3.66}, {"text": "And the flags to do that\nare somewhat familiar.", "start": 526.63, "duration": 3.45}, {"text": "Rather than passing the dash s\nflag, which, hopefully, you've", "start": 530.08, "duration": 2.73}, {"text": "already seen, that will\ntranslate C code directly", "start": 532.81, "duration": 3.12}, {"text": "into assembly.", "start": 535.93, "duration": 1.18}, {"text": "If you pass dash\ns dash omit LLVM,", "start": 537.11, "duration": 2.55}, {"text": "that will produce the LLVM IR.", "start": 539.66, "duration": 1.25}, {"text": "You can also ask clang to\ntranslate LLVM IR itself", "start": 543.63, "duration": 3.36}, {"text": "directly into assembly\ncode, and that process", "start": 546.99, "duration": 3.337}, {"text": "is pretty straightforward.", "start": 550.327, "duration": 1.083}, {"text": "You just use the dash\nS flag once again.", "start": 551.41, "duration": 2.12}, {"text": "So this is the outline\nof today's lecture.", "start": 556.06, "duration": 1.86}, {"text": "First, we're going to start\nwith a simple primer on LLVM IR.", "start": 557.92, "duration": 3.45}, {"text": "I know that LLVM IR sounds\nlike another language.", "start": 561.37, "duration": 2.97}, {"text": "Oh, gosh, we have to\nlearn another language.", "start": 564.34, "duration": 2.22}, {"text": "But don't worry.", "start": 566.56, "duration": 0.72}, {"text": "This primer, I would say, is\nsimpler than the x86-64 primer.", "start": 567.28, "duration": 4.8}, {"text": "Based on the slides,\nfor x86-64, that primer", "start": 572.08, "duration": 3.03}, {"text": "was 20-some slides long.", "start": 575.11, "duration": 2.52}, {"text": "This primer is six slides, so\nmaybe a little over a quarter.", "start": 577.63, "duration": 6.03}, {"text": "Then we'll take a look at how\nthe various constructs in the C", "start": 583.66, "duration": 3.09}, {"text": "programming language get\ntranslated into LLVM IR,", "start": 586.75, "duration": 3.03}, {"text": "including straight line code,\nC functions, conditionals--", "start": 589.78, "duration": 3.93}, {"text": "in other words, if, then, else--", "start": 593.71, "duration": 1.5}, {"text": "loops.", "start": 595.21, "duration": 0.895}, {"text": "And we'll conclude that section\nwith just a brief mention", "start": 596.105, "duration": 2.375}, {"text": "of LLVM IR attributes.", "start": 598.48, "duration": 2.18}, {"text": "And finally, we'll take a\nlook at how LLVM IR gets", "start": 600.66, "duration": 2.44}, {"text": "translated into assembly.", "start": 603.1, "duration": 2.58}, {"text": "And for that,\nwe'll have to focus", "start": 605.68, "duration": 1.68}, {"text": "on what's called the Linux\nx86-64 calling convention.", "start": 607.36, "duration": 5.018}, {"text": "And we'll conclude with\na case study, where", "start": 612.378, "duration": 1.792}, {"text": "we see how this whole process\nworks on a very simple code", "start": 614.17, "duration": 4.17}, {"text": "to compute Fibonacci numbers.", "start": 618.34, "duration": 1.735}, {"text": "Any questions so far?", "start": 620.075, "duration": 0.875}, {"text": "All right, let's get started.", "start": 624.75, "duration": 2.23}, {"text": "Brief primer on LLVM IR--", "start": 626.98, "duration": 3.03}, {"text": "so I've shown this in smaller\nfont on some previous slides,", "start": 630.01, "duration": 3.46}, {"text": "but here is a snippet\nof LLVM IR code.", "start": 633.47, "duration": 2.96}, {"text": "In particular, this\nis one function", "start": 636.43, "duration": 1.53}, {"text": "within an LLVM IR file.", "start": 637.96, "duration": 3.09}, {"text": "And just from\nlooking at this code,", "start": 641.05, "duration": 2.38}, {"text": "we can see a couple of the\nbasic components of LLVM IR.", "start": 643.43, "duration": 2.795}, {"text": "In LLVM IR, we have functions.", "start": 648.73, "duration": 2.55}, {"text": "That's how code is organized\ninto these chunks--", "start": 651.28, "duration": 2.94}, {"text": "chunks called functions.", "start": 654.22, "duration": 1.72}, {"text": "And within each function, the\noperations of the function", "start": 655.94, "duration": 3.8}, {"text": "are encoded within instructions.", "start": 659.74, "duration": 2.46}, {"text": "And each instruction shows\nup, at least on this slide,", "start": 662.2, "duration": 3.12}, {"text": "on a separate line.", "start": 665.32, "duration": 2.67}, {"text": "Those functions operate on what\nare called LLVM IR registers.", "start": 667.99, "duration": 3.45}, {"text": "These are kind of\nlike the variables.", "start": 671.44, "duration": 2.97}, {"text": "And each of those variables\nhas some associated type.", "start": 674.41, "duration": 2.64}, {"text": "So the types are actually\nexplicit within the IR.", "start": 677.05, "duration": 3.12}, {"text": "And we'll take a look\nat the types in more", "start": 680.17, "duration": 2.79}, {"text": "detail in a couple of slides.", "start": 682.96, "duration": 1.23}, {"text": "So based on that\nhigh-level overview,", "start": 687.29, "duration": 4.17}, {"text": "we can do a little bit of\na comparison between LLVM", "start": 691.46, "duration": 2.125}, {"text": "IR and assembly language.", "start": 693.585, "duration": 2.475}, {"text": "The first thing that we\nsee is that it looks kind", "start": 696.06, "duration": 2.19}, {"text": "of similar to assembly, right?", "start": 698.25, "duration": 2.67}, {"text": "It still has a simple\ninstruction format.", "start": 700.92, "duration": 2.7}, {"text": "There is some destination\noperand, which", "start": 703.62, "duration": 3.36}, {"text": "we are calling a register.", "start": 706.98, "duration": 1.58}, {"text": "And then there is an equal sign\nand then an op code, be it add,", "start": 708.56, "duration": 3.55}, {"text": "or call, or what\nhave you, and then", "start": 712.11, "duration": 2.43}, {"text": "some list of source operations.", "start": 714.54, "duration": 1.41}, {"text": "That's roughly what each\ninstruction looks like.", "start": 715.95, "duration": 3.39}, {"text": "We can also see that the\nLLVM IR code, it'll turn out.", "start": 719.34, "duration": 5.34}, {"text": "The LLVM IR code adopts\na similar structure", "start": 724.68, "duration": 3.27}, {"text": "to the assembly code itself.", "start": 727.95, "duration": 2.85}, {"text": "And control flow, once\nagain, is implemented", "start": 730.8, "duration": 1.98}, {"text": "using conditional branches, as\nwell as unconditional branches.", "start": 732.78, "duration": 4.882}, {"text": "But one thing that we'll\nnotice is that LLVM IR", "start": 737.662, "duration": 1.958}, {"text": "is simpler than assembly.", "start": 739.62, "duration": 1.83}, {"text": "It has a much smaller\ninstruction set.", "start": 741.45, "duration": 2.82}, {"text": "And unlike assembly\nlanguage, LLVM IR", "start": 744.27, "duration": 2.49}, {"text": "supports an infinite\nnumber of registers.", "start": 746.76, "duration": 2.19}, {"text": "If you can name it,\nit's a register.", "start": 748.95, "duration": 2.01}, {"text": "So in that sense, LLVM's\nnotion of registers", "start": 750.96, "duration": 3.72}, {"text": "is a lot closer to C's\nnotion of variables.", "start": 754.68, "duration": 3.31}, {"text": "And when you read LLVM IR,\nand you see those registers,", "start": 757.99, "duration": 3.38}, {"text": "you should just think\nabout C variables.", "start": 761.37, "duration": 3.54}, {"text": "There's no implicit RFLAGS\nregister, and there no implicit", "start": 764.91, "duration": 3.3}, {"text": "condition codes going on.", "start": 768.21, "duration": 1.36}, {"text": "Everything is pretty explicit\nin terms of the LLVM.", "start": 769.57, "duration": 4.1}, {"text": "There's no explicit stack\npointer or frame pointer.", "start": 773.67, "duration": 2.86}, {"text": "There's a type system that's\nexplicit in the IR itself.", "start": 776.53, "duration": 4.52}, {"text": "And it's C like in\nnature, and there", "start": 781.05, "duration": 2.43}, {"text": "are C-like functions for\norganizing the code overall.", "start": 783.48, "duration": 5.488}, {"text": "So let's take a look at\neach of these components,", "start": 788.968, "duration": 2.042}, {"text": "starting with LLVM IR registers.", "start": 791.01, "duration": 2.01}, {"text": "This is basically LLVM's\nname for a variable.", "start": 793.02, "duration": 3.06}, {"text": "All of the data in LLVM IR\nis stored in these variables,", "start": 796.08, "duration": 2.595}, {"text": "which are called registers.", "start": 798.675, "duration": 1.125}, {"text": "And the syntax is a percent\nsymbol followed by a name.", "start": 799.8, "duration": 3.98}, {"text": "So %0, %1, %2,\nthat sort of thing.", "start": 803.78, "duration": 4.867}, {"text": "And as I mentioned\nbefore, LLVM IR registers", "start": 808.647, "duration": 1.833}, {"text": "are a lot like c variables.", "start": 810.48, "duration": 1.768}, {"text": "LLVM supports an infinite\nnumber of these things,", "start": 812.248, "duration": 2.042}, {"text": "and each distinct register is\njust distinguished by its name.", "start": 814.29, "duration": 4.75}, {"text": "So %0 is different from %1,\nbecause they have different", "start": 819.04, "duration": 3.29}, {"text": "names.", "start": 822.33, "duration": 1.51}, {"text": "Register names are also local\nto each LLVM IR function.", "start": 823.84, "duration": 4.47}, {"text": "And in this regard, they're\nalso similar to C variables.", "start": 828.31, "duration": 3.95}, {"text": "If you wrote a C program\nwith two functions, A and B,", "start": 832.26, "duration": 3.0}, {"text": "and each function had\na local variable apple,", "start": 835.26, "duration": 3.0}, {"text": "those are two different apples.", "start": 838.26, "duration": 2.04}, {"text": "The apple in A is not the\nsame thing as the apple in B.", "start": 840.3, "duration": 3.37}, {"text": "Similarly, if you had two\ndifferent LLVM IR functions,", "start": 843.67, "duration": 3.47}, {"text": "and they both described\nsome register five,", "start": 847.14, "duration": 3.75}, {"text": "those are two\ndifferent variables.", "start": 850.89, "duration": 3.678}, {"text": "They're not\nautomatically aliased.", "start": 854.568, "duration": 1.417}, {"text": "So here's an example\nof an LLVM IR snippet.", "start": 858.66, "duration": 1.98}, {"text": "And what we've done\nhere is just highlighted", "start": 860.64, "duration": 1.98}, {"text": "all of the registers.", "start": 862.62, "duration": 0.94}, {"text": "Some of them are being\nassigned, because they're", "start": 863.56, "duration": 2.0}, {"text": "on the left-hand side\nof an equal symbol.", "start": 865.56, "duration": 2.22}, {"text": "And some of them are being used\nas arguments when they show up", "start": 867.78, "duration": 2.61}, {"text": "on the right-hand side.", "start": 870.39, "duration": 1.8}, {"text": "There is one catch, which\nwe'll see later on, namely", "start": 872.19, "duration": 4.05}, {"text": "that the syntax\nfor LLVM registers", "start": 876.24, "duration": 2.88}, {"text": "ends up being hijacked\nwhen LLVM needs to refer", "start": 879.12, "duration": 3.84}, {"text": "to different basic blocks.", "start": 882.96, "duration": 1.53}, {"text": "We haven't defined\nbasic blocks yet.", "start": 884.49, "duration": 1.5}, {"text": "We'll see what that's all about\nin just a couple of slides.", "start": 885.99, "duration": 3.785}, {"text": "Everyone good so far?", "start": 889.775, "duration": 0.875}, {"text": "So LLVM IR code is\norganized into instructions,", "start": 896.99, "duration": 5.07}, {"text": "and the syntax for\nthese instructions", "start": 902.06, "duration": 1.62}, {"text": "is pretty straightforward.", "start": 903.68, "duration": 2.71}, {"text": "We have a register name\non the left-hand side,", "start": 906.39, "duration": 3.568}, {"text": "then an equal symbol,\nand then and op code,", "start": 909.958, "duration": 1.792}, {"text": "followed by an operand list.", "start": 911.75, "duration": 2.43}, {"text": "For example, the top\nhighlight instruction", "start": 914.18, "duration": 4.26}, {"text": "has register six equal\nto add of sum arguments.", "start": 918.44, "duration": 5.66}, {"text": "And we'll see a little bit more\nabout those arguments later.", "start": 924.1, "duration": 4.257}, {"text": "That's the syntax for when\nan instruction actually", "start": 928.357, "duration": 2.083}, {"text": "returns some value.", "start": 930.44, "duration": 1.21}, {"text": "So addition returns the\nsum of the two operands.", "start": 931.65, "duration": 4.19}, {"text": "Other instructions don't\nreturn a value, per se,", "start": 935.84, "duration": 3.15}, {"text": "not a value that you'd\nstore in a local register.", "start": 938.99, "duration": 3.24}, {"text": "And so the syntax for\nthose instructions", "start": 942.23, "duration": 1.77}, {"text": "is just an op code followed\nby a list of operands.", "start": 944.0, "duration": 4.08}, {"text": "Ironically, the\nreturn instruction", "start": 948.08, "duration": 4.53}, {"text": "that you'd find at\nthe end of a function", "start": 952.61, "duration": 2.04}, {"text": "doesn't assign a\nparticular register value.", "start": 954.65, "duration": 4.88}, {"text": "And of course, the operands\ncan be either registers,", "start": 959.53, "duration": 2.46}, {"text": "or constants, or, as\nwe'll see later on,", "start": 961.99, "duration": 2.43}, {"text": "they can identify basic\nblocks within the function.", "start": 964.42, "duration": 3.3}, {"text": "The LLVM IR instruction set\nis smaller than that of x86.", "start": 970.92, "duration": 4.06}, {"text": "x86 contains hundreds\nof instructions", "start": 974.98, "duration": 2.24}, {"text": "when you start counting up\nall the vector instructions.", "start": 977.22, "duration": 2.57}, {"text": "And LLVM IR is far more\nmodest in that regard.", "start": 979.79, "duration": 3.01}, {"text": "There's some instructions\nfor data movements,", "start": 982.8, "duration": 3.25}, {"text": "including stack allocation,\nreading memory, writing memory,", "start": 986.05, "duration": 4.19}, {"text": "converting between types.", "start": 990.24, "duration": 1.305}, {"text": "Yeah, that's pretty much it.", "start": 994.23, "duration": 1.69}, {"text": "There are some instructions\nfor doing arithmetic or logic,", "start": 995.92, "duration": 3.08}, {"text": "including integer arithmetic,\nfloating-point arithmetic,", "start": 999.0, "duration": 3.3}, {"text": "Boolean logic, binary logic,\nor address calculations.", "start": 1002.3, "duration": 4.688}, {"text": "And then there are a\ncouple of instructions", "start": 1006.988, "duration": 1.792}, {"text": "to do control flow.", "start": 1008.78, "duration": 1.57}, {"text": "There are unconditional\nbranches or jumps,", "start": 1010.35, "duration": 2.49}, {"text": "conditional branches\nor jumps, subroutines--", "start": 1012.84, "duration": 3.17}, {"text": "that's call or return--", "start": 1016.01, "duration": 2.1}, {"text": "and then there's this\nmagical phi function,", "start": 1018.11, "duration": 1.8}, {"text": "which we'll see more of\nlater on in these slides.", "start": 1019.91, "duration": 6.78}, {"text": "Finally, as I mentioned\nbefore, everything in LLVM IR", "start": 1026.69, "duration": 2.33}, {"text": "is explicitly typed.", "start": 1029.02, "duration": 1.54}, {"text": "It's a strongly-typed\nlanguage in that sense.", "start": 1030.56, "duration": 3.07}, {"text": "And the type system looks\nsomething like this.", "start": 1033.63, "duration": 3.209}, {"text": "For integers, whenever there's\na variable of an integer type,", "start": 1036.839, "duration": 2.901}, {"text": "you'll see an i\nfollowed by some number.", "start": 1039.74, "duration": 1.91}, {"text": "And that number defines the\nnumber of bits in that integer.", "start": 1041.65, "duration": 4.61}, {"text": "So if you see a\nvariable of type i64,", "start": 1046.26, "duration": 3.33}, {"text": "that means it's\na 64-bit integer.", "start": 1049.59, "duration": 3.44}, {"text": "If you see a\nvariable of type i1,", "start": 1053.03, "duration": 3.6}, {"text": "that would be a 1-bit\ninteger or, in other words,", "start": 1056.63, "duration": 2.53}, {"text": "a Boolean value.", "start": 1059.16, "duration": 2.24}, {"text": "There are also\nfloating-point types,", "start": 1061.4, "duration": 1.5}, {"text": "such as double and float.", "start": 1062.9, "duration": 2.13}, {"text": "There are pointer types,\nwhen you follow an integer", "start": 1065.03, "duration": 3.3}, {"text": "or floating-point type with\na star, much like in C,", "start": 1068.33, "duration": 3.63}, {"text": "you can have a raise.", "start": 1071.96, "duration": 1.01}, {"text": "And that uses a square\nbracket notation,", "start": 1072.97, "duration": 3.693}, {"text": "where, within the\nsquare brackets,", "start": 1076.663, "duration": 1.417}, {"text": "you'll have some number and then\ntimes and then some other type.", "start": 1078.08, "duration": 4.167}, {"text": "Maybe it's a primitive\ntype, like an integer", "start": 1082.247, "duration": 1.833}, {"text": "or a floating-point.", "start": 1084.08, "duration": 1.26}, {"text": "Maybe it's something\nmore complicated.", "start": 1085.34, "duration": 2.67}, {"text": "You can have structs\nwith an LLVM IR.", "start": 1088.01, "duration": 2.07}, {"text": "And that uses squiggly\nbrackets with types", "start": 1090.08, "duration": 3.69}, {"text": "enumerated on the inside.", "start": 1093.77, "duration": 1.53}, {"text": "You can have vector types,\nwhich uses angle brackets", "start": 1095.3, "duration": 3.33}, {"text": "and otherwise adopts a similar\nsyntax to the array type.", "start": 1098.63, "duration": 4.78}, {"text": "Finally, you can\noccasionally see a variable,", "start": 1103.41, "duration": 3.567}, {"text": "which looks like an\nordinary register,", "start": 1106.977, "duration": 1.583}, {"text": "except that its type is label.", "start": 1108.56, "duration": 2.3}, {"text": "And that actually\nrefers to a basic block.", "start": 1110.86, "duration": 2.17}, {"text": "Those are the basic\ncomponents of LLVM IR.", "start": 1115.67, "duration": 1.98}, {"text": "Any questions so far?", "start": 1117.65, "duration": 1.02}, {"text": "Everything clear?", "start": 1122.43, "duration": 1.32}, {"text": "Everything unclear?", "start": 1123.75, "duration": 0.795}, {"text": "STUDENT: What's the\nbasic [INAUDIBLE]??", "start": 1127.17, "duration": 3.19}, {"text": "TAO SCHARDL: That\nshould be unclear,", "start": 1130.36, "duration": 1.5}, {"text": "and we'll talk about it.", "start": 1131.86, "duration": 1.87}, {"text": "Yeah?", "start": 1133.73, "duration": 0.5}, {"text": "STUDENT: Is the\nvector notation there", "start": 1134.23, "duration": 2.31}, {"text": "for the vectorization that's\ndone, like the special register", "start": 1136.54, "duration": 4.623}, {"text": "is used?", "start": 1141.163, "duration": 0.957}, {"text": "TAO SCHARDL: Is the vector\nnotation used for the vector", "start": 1142.12, "duration": 2.67}, {"text": "registers?", "start": 1144.79, "duration": 2.16}, {"text": "In a sense, yes.", "start": 1146.95, "duration": 1.41}, {"text": "The vector operations\nwith an LLVM", "start": 1148.36, "duration": 2.64}, {"text": "don't look like\nSEC or AVX, per se.", "start": 1151.0, "duration": 3.66}, {"text": "They look more like\nordinary operations,", "start": 1154.66, "duration": 2.1}, {"text": "except those ordinary operations\nwork on a vector type.", "start": 1156.76, "duration": 3.93}, {"text": "So that's how the vector\noperations show up in LLVM IR.", "start": 1160.69, "duration": 4.14}, {"text": "That make some sense?", "start": 1164.83, "duration": 1.41}, {"text": "Cool.", "start": 1166.24, "duration": 1.46}, {"text": "Anything else?", "start": 1167.7, "duration": 0.59}, {"text": "OK, that's the whole primer.", "start": 1172.61, "duration": 1.71}, {"text": "That's pretty much\nall of the language", "start": 1174.32, "duration": 1.903}, {"text": "that you're going\nto need to know,", "start": 1176.223, "duration": 1.417}, {"text": "at least for this slide deck.", "start": 1177.64, "duration": 2.08}, {"text": "We'll cover some of the\ndetails as we go along.", "start": 1179.72, "duration": 2.97}, {"text": "Let's start translating\nC code into LLVM IR.", "start": 1182.69, "duration": 2.565}, {"text": "Is that good?", "start": 1185.255, "duration": 2.805}, {"text": "All right, let's start with\npretty much the simplest", "start": 1188.06, "duration": 2.55}, {"text": "thing we can--", "start": 1190.61, "duration": 1.05}, {"text": "straight line C code.", "start": 1191.66, "duration": 1.83}, {"text": "What do I mean by\nstraight line C code?", "start": 1193.49, "duration": 1.83}, {"text": "I mean that this\nis a blob of C code", "start": 1195.32, "duration": 1.92}, {"text": "that contains no\nconditionals or loops.", "start": 1197.24, "duration": 3.18}, {"text": "So it's just a whole\nsequence of operations.", "start": 1200.42, "duration": 4.2}, {"text": "And that sequence of\noperations in C code", "start": 1204.62, "duration": 2.79}, {"text": "turns into a sequence of\noperations in LLVM IR.", "start": 1207.41, "duration": 4.68}, {"text": "So in this example here,\nwe have foo of n minus 1", "start": 1212.09, "duration": 3.75}, {"text": "plus bar of n minus 2.", "start": 1215.84, "duration": 1.38}, {"text": "That is a sequence\nof operations.", "start": 1217.22, "duration": 2.4}, {"text": "And it turns into the\nLLVM IR on the right.", "start": 1219.62, "duration": 3.663}, {"text": "We can see how that happens.", "start": 1223.283, "duration": 1.167}, {"text": "There are a couple\nrules of thumb", "start": 1224.45, "duration": 1.375}, {"text": "when reading\nstraight line C code", "start": 1225.825, "duration": 1.535}, {"text": "and interpreting it in the IR.", "start": 1227.36, "duration": 2.79}, {"text": "Arguments to any\noperation are evaluated", "start": 1230.15, "duration": 2.49}, {"text": "before the operation itself.", "start": 1232.64, "duration": 2.887}, {"text": "So what do I mean by that?", "start": 1235.527, "duration": 1.083}, {"text": "Well, in this case, we\nneed to evaluate n minus 1", "start": 1236.61, "duration": 4.14}, {"text": "before we pass the\nresults to foo.", "start": 1240.75, "duration": 4.04}, {"text": "And what we see\nin the LLVM IR is", "start": 1244.79, "duration": 1.71}, {"text": "that we have an\naddition operation that", "start": 1246.5, "duration": 2.01}, {"text": "computes n minus 1.", "start": 1248.51, "duration": 1.425}, {"text": "And then the result of that--", "start": 1249.935, "duration": 1.815}, {"text": "stored into register 4--\ngets passed to the call", "start": 1251.75, "duration": 3.03}, {"text": "instruction on the\nnext line, which", "start": 1254.78, "duration": 1.92}, {"text": "calls out to function foo.", "start": 1256.7, "duration": 2.526}, {"text": "Sound good?", "start": 1259.226, "duration": 3.374}, {"text": "Similarly, we need\nto evaluate n minus 2", "start": 1262.6, "duration": 2.91}, {"text": "before passing its results\nto the function bar.", "start": 1265.51, "duration": 2.96}, {"text": "And we see that\nsequence of instructions", "start": 1268.47, "duration": 3.07}, {"text": "showing up next in the LLVM IR.", "start": 1271.54, "duration": 2.51}, {"text": "And now, we actually need\nthe return value-- oh, yeah?", "start": 1274.05, "duration": 2.25}, {"text": "Question?", "start": 1276.3, "duration": 0.5}, {"text": "STUDENT: What is NSW?", "start": 1276.8, "duration": 1.592}, {"text": "TAO SCHARDL: NSW?", "start": 1278.392, "duration": 0.708}, {"text": "Essentially, that\nis an attribute,", "start": 1282.093, "duration": 1.417}, {"text": "which we'll talk about later.", "start": 1283.51, "duration": 2.4}, {"text": "These are things that decorate\nthe instructions, as well", "start": 1285.91, "duration": 2.82}, {"text": "as the types, within\nLLVM IR, basically,", "start": 1288.73, "duration": 2.52}, {"text": "as the compiler\nfigures stuff out.", "start": 1291.25, "duration": 1.84}, {"text": "So it helps the compiler along\nwith analysis and optimization.", "start": 1293.09, "duration": 5.558}, {"text": "Good?", "start": 1298.648, "duration": 2.902}, {"text": "So for the last\noperation here, we", "start": 1301.55, "duration": 1.91}, {"text": "had to evaluate both foo and\nbar and get their return values", "start": 1303.46, "duration": 4.65}, {"text": "before we could\nadd them together.", "start": 1308.11, "duration": 2.31}, {"text": "And so the very last\noperation in this sequence", "start": 1310.42, "duration": 2.58}, {"text": "is the addition.", "start": 1313.0, "duration": 1.23}, {"text": "That just takes us those return\nvalues and computes their sum.", "start": 1314.23, "duration": 3.27}, {"text": "Now all of that used primitive\ntypes, in particular, integers.", "start": 1321.63, "duration": 4.95}, {"text": "But it's possible that your\ncode uses aggregate types.", "start": 1326.58, "duration": 2.82}, {"text": "By aggregating types, I\nmean, arrays or struts,", "start": 1329.4, "duration": 3.06}, {"text": "that sort of thing.", "start": 1332.46, "duration": 1.5}, {"text": "And aggregate types are harder\nto store within registers,", "start": 1333.96, "duration": 3.3}, {"text": "typically speaking.", "start": 1337.26, "duration": 2.01}, {"text": "And so they're typically\nstored within memory.", "start": 1339.27, "duration": 3.36}, {"text": "As a result, if you\nwant to access something", "start": 1342.63, "duration": 2.37}, {"text": "within an aggregate type, if you\nwant to read some elements out", "start": 1345.0, "duration": 3.09}, {"text": "of an array, that involves\nperforming a memory access", "start": 1348.09, "duration": 3.72}, {"text": "or, more precisely, computing\nsome address into memory,", "start": 1351.81, "duration": 3.87}, {"text": "and then loading or\nstoring that address.", "start": 1355.68, "duration": 3.25}, {"text": "So here, for example, we have\nan array A of seven integers.", "start": 1358.93, "duration": 4.53}, {"text": "And we're going\nto access A sub x.", "start": 1363.46, "duration": 2.32}, {"text": "In LLVM IR, that turns\ninto two instructions--", "start": 1365.78, "duration": 3.37}, {"text": "this getelementptr\nfollowed by a load.", "start": 1369.15, "duration": 3.61}, {"text": "And in the getelementptr\ncase, this computes an address", "start": 1372.76, "duration": 4.94}, {"text": "into memory and\nstores the result", "start": 1377.7, "duration": 1.95}, {"text": "of that address into a register,\nin this case, register 5.", "start": 1379.65, "duration": 3.87}, {"text": "The next instruction,\nthe load, takes", "start": 1383.52, "duration": 2.64}, {"text": "the address stored in\nregister 5 and simply loads", "start": 1386.16, "duration": 4.14}, {"text": "that particular memory\naddress, storing", "start": 1390.3, "duration": 2.55}, {"text": "the result into another\nregister, in this case, 6.", "start": 1392.85, "duration": 3.758}, {"text": "Pretty simple.", "start": 1396.608, "duration": 0.938}, {"text": "When reading the\ngetelementptr instruction,", "start": 1400.83, "duration": 2.51}, {"text": "the basic syntax\ninvolves a pointer", "start": 1403.34, "duration": 3.4}, {"text": "into memory followed by\na sequence of indices.", "start": 1406.74, "duration": 3.0}, {"text": "And all that\ngetelementptr really", "start": 1409.74, "duration": 1.68}, {"text": "does is it computes an\naddress by taking that pointer", "start": 1411.42, "duration": 4.11}, {"text": "and then adding on that\nsequence of indices.", "start": 1415.53, "duration": 2.88}, {"text": "So in this case, we have a\ngetelementptr instruction,", "start": 1418.41, "duration": 3.66}, {"text": "which takes the\naddress in register 2,", "start": 1422.07, "duration": 4.08}, {"text": "and then adds onto it--", "start": 1426.15, "duration": 2.34}, {"text": "yeah, that's a\npointer into memory--", "start": 1428.49, "duration": 1.5}, {"text": "and then it adds\nonto it to indices.", "start": 1429.99, "duration": 1.91}, {"text": "One is the literal\nvalue 0, and the other", "start": 1431.9, "duration": 3.46}, {"text": "is the value stored\nin register 4.", "start": 1435.36, "duration": 2.22}, {"text": "So that just\ncomputes the address,", "start": 1437.58, "duration": 2.27}, {"text": "starting at 2 plus 0 plus\nwhatever was in register 4.", "start": 1439.85, "duration": 4.57}, {"text": "That's all for\nstraight line code.", "start": 1448.09, "duration": 2.19}, {"text": "Good so far?", "start": 1450.28, "duration": 0.75}, {"text": "feel free to interrupt\nif you have questions.", "start": 1453.78, "duration": 3.48}, {"text": "Cool.", "start": 1457.26, "duration": 1.26}, {"text": "Functions-- let's talk\nabout C functions.", "start": 1458.52, "duration": 3.13}, {"text": "So when there's a\nfunction in your C code,", "start": 1461.65, "duration": 3.32}, {"text": "generally speaking, you'll have\na function within the LLVM code", "start": 1464.97, "duration": 2.91}, {"text": "as well.", "start": 1467.88, "duration": 2.828}, {"text": "And similarly, when there's a\nreturn statement in the C code,", "start": 1470.708, "duration": 2.542}, {"text": "you'll end up with a return\nstatement in the LLVM IR.", "start": 1473.25, "duration": 3.27}, {"text": "So here, we have\njust the bare bones C", "start": 1476.52, "duration": 3.21}, {"text": "code for this fib routine.", "start": 1479.73, "duration": 2.43}, {"text": "That corresponds to this\nfib function within LLVM IR.", "start": 1482.16, "duration": 7.56}, {"text": "And the function\ndeclaration itself", "start": 1489.72, "duration": 3.09}, {"text": "looks pretty similar to what\nyou would get in ordinary C.", "start": 1492.81, "duration": 7.01}, {"text": "The return statement\nis also similar.", "start": 1499.82, "duration": 2.19}, {"text": "It may take an argument,\nif you're returning", "start": 1502.01, "duration": 3.48}, {"text": "some value to the caller.", "start": 1505.49, "duration": 2.04}, {"text": "In this case, for\nthe fib routine,", "start": 1507.53, "duration": 1.62}, {"text": "we're going to return\na 64-bit integer.", "start": 1509.15, "duration": 2.52}, {"text": "And so we see that this\nreturn statement returns", "start": 1511.67, "duration": 3.03}, {"text": "the 64-bit integer stored in\nregister 0, a lot like in C.", "start": 1514.7, "duration": 9.76}, {"text": "Functions can have parameters.", "start": 1524.46, "duration": 1.84}, {"text": "And when you have a C function\nwith a list of parameters,", "start": 1526.3, "duration": 2.75}, {"text": "basically, in LLVM\nIR, you're going", "start": 1529.05, "duration": 1.52}, {"text": "to end up with a\nsimilar looking function", "start": 1530.57, "duration": 1.93}, {"text": "with the exact same list\nof parameters translated", "start": 1532.5, "duration": 4.32}, {"text": "into LLVM IR.", "start": 1536.82, "duration": 2.04}, {"text": "So here, we have this C code\nfor the mm base routine.", "start": 1538.86, "duration": 5.29}, {"text": "And we have the\ncorresponding LLVM IR", "start": 1544.15, "duration": 1.82}, {"text": "for an mm-based function.", "start": 1545.97, "duration": 2.43}, {"text": "And what we see is we\nhave a pointer to a double", "start": 1548.4, "duration": 3.87}, {"text": "as the first parameter,\nfollowed by a 32-bit integer,", "start": 1552.27, "duration": 3.87}, {"text": "followed by another\npointer to a double,", "start": 1556.14, "duration": 2.07}, {"text": "followed by another\n32-bit integer,", "start": 1558.21, "duration": 2.19}, {"text": "following another\npointer to a double,", "start": 1560.4, "duration": 2.25}, {"text": "and another 33-bit integer,\nand another 32-bit integer.", "start": 1562.65, "duration": 5.74}, {"text": "One implicit thing with an\nLLVM IR if you're looking", "start": 1568.39, "duration": 2.25}, {"text": "at a function declaration\nor definition,", "start": 1570.64, "duration": 2.88}, {"text": "the parameters are\nautomatically named %0, %1, %2,", "start": 1573.52, "duration": 4.95}, {"text": "so on and so forth.", "start": 1578.47, "duration": 1.24}, {"text": "There's one unfortunate\nthing about LLVM IR.", "start": 1579.71, "duration": 2.45}, {"text": "The registers are a\nlot like C functions,", "start": 1582.16, "duration": 2.55}, {"text": "but unfortunately,\nthat implies that when", "start": 1584.71, "duration": 1.74}, {"text": "you're reading LLVM IR,\nit's a lot like reading", "start": 1586.45, "duration": 3.75}, {"text": "the code from your teammate, who\nalways insists on naming things", "start": 1590.2, "duration": 4.44}, {"text": "with nondescript,\nsingle-letter variable names.", "start": 1594.64, "duration": 3.27}, {"text": "Also, that teammate doesn't\ncomment his code, or her code,", "start": 1597.91, "duration": 2.497}, {"text": "or their code.", "start": 1600.407, "duration": 0.583}, {"text": "OK, so basic blocks--", "start": 1607.99, "duration": 2.25}, {"text": "when we look at the\ncode within a function,", "start": 1610.24, "duration": 2.22}, {"text": "that code gets\npartitioned into chunks,", "start": 1612.46, "duration": 3.81}, {"text": "which are called basic blocks.", "start": 1616.27, "duration": 2.13}, {"text": "A basic block has\na property that's", "start": 1618.4, "duration": 2.55}, {"text": "a sequence of instructions.", "start": 1620.95, "duration": 1.35}, {"text": "In other words, it's a\nblob a straight line code,", "start": 1622.3, "duration": 2.94}, {"text": "where control can only enter\nfrom the first instruction", "start": 1625.24, "duration": 3.99}, {"text": "in that block.", "start": 1629.23, "duration": 1.65}, {"text": "And it can only leave from the\nlast instruction in that block.", "start": 1630.88, "duration": 4.87}, {"text": "So here we have the C code\nfor this routine fib.c.", "start": 1635.75, "duration": 3.74}, {"text": "We're going to see a lot of\nthis routine fib.c, by the way.", "start": 1639.49, "duration": 3.15}, {"text": "And we have the\ncorresponding LLVM IR.", "start": 1642.64, "duration": 2.82}, {"text": "And what we have in the C\ncode, what the C code is", "start": 1645.46, "duration": 2.67}, {"text": "telling us is that\nif n is less than 2,", "start": 1648.13, "duration": 2.43}, {"text": "you want to do one thing.", "start": 1650.56, "duration": 1.84}, {"text": "Otherwise, you want to do\nsome complicated computation", "start": 1652.4, "duration": 3.83}, {"text": "and then return that result.", "start": 1656.23, "duration": 2.53}, {"text": "And if we think about that.", "start": 1658.76, "duration": 1.95}, {"text": "We've got this branch\nin our control flow.", "start": 1660.71, "duration": 2.03}, {"text": "And what we'll end up with\nare three different blocks", "start": 1662.74, "duration": 4.32}, {"text": "within the LLVM IR.", "start": 1667.06, "duration": 2.27}, {"text": "So we end up with\none block, which", "start": 1669.33, "duration": 2.65}, {"text": "does the computation\nis n less than 2.", "start": 1671.98, "duration": 4.13}, {"text": "And then we end up with\nanother block that says, well,", "start": 1676.11, "duration": 3.81}, {"text": "in one case, just go ahead and\nreturn something, in this case,", "start": 1679.92, "duration": 3.85}, {"text": "the input to the function.", "start": 1683.77, "duration": 2.4}, {"text": "In the other case, do some\ncomplicated calculations,", "start": 1686.17, "duration": 3.39}, {"text": "some straight line code,\nand then return that result.", "start": 1689.56, "duration": 7.61}, {"text": "Now when we partition\nthe code of a function", "start": 1697.17, "duration": 5.07}, {"text": "into these basic\nblocks, we actually", "start": 1702.24, "duration": 1.95}, {"text": "have connections\nbetween the basic blocks", "start": 1704.19, "duration": 2.34}, {"text": "based on how control can move\nbetween the basic blocks.", "start": 1706.53, "duration": 5.2}, {"text": "These control flow instructions,\nin particular, the branch", "start": 1711.73, "duration": 3.24}, {"text": "instructions, as we'll\nsee, induce edges", "start": 1714.97, "duration": 3.0}, {"text": "among these basic blocks.", "start": 1717.97, "duration": 1.35}, {"text": "Whenever there's a branch\ninstruction that can specify,", "start": 1719.32, "duration": 4.68}, {"text": "that control can\nleave this basic block", "start": 1724.0, "duration": 2.28}, {"text": "and go to that\nother basic block,", "start": 1726.28, "duration": 2.82}, {"text": "or that other basic block,\nor maybe one or the other,", "start": 1729.1, "duration": 3.73}, {"text": "depending on how the result\nof some computation unfolded.", "start": 1732.83, "duration": 4.94}, {"text": "And so for the fib function\nthat we saw before,", "start": 1737.77, "duration": 2.85}, {"text": "we had those three basic blocks.", "start": 1740.62, "duration": 1.8}, {"text": "And based on whether or\nnot n was than 2, either", "start": 1742.42, "duration": 3.09}, {"text": "we would execute the\nsimple return statement,", "start": 1745.51, "duration": 2.73}, {"text": "or we would execute the\nblob of straight line", "start": 1748.24, "duration": 1.89}, {"text": "code shown on the left.", "start": 1750.13, "duration": 1.41}, {"text": "So those are basic\nblocks and functions.", "start": 1755.94, "duration": 2.08}, {"text": "Everyone still good so far?", "start": 1758.02, "duration": 3.46}, {"text": "Any questions?", "start": 1761.48, "duration": 2.43}, {"text": "Clear as mud?", "start": 1763.91, "duration": 0.77}, {"text": "Let's talk about conditionals.", "start": 1770.36, "duration": 1.25}, {"text": "You've already seen one\nof these conditionals.", "start": 1771.61, "duration": 2.01}, {"text": "That's given rise to these basic\nblocks and these control flow", "start": 1773.62, "duration": 2.94}, {"text": "edges.", "start": 1776.56, "duration": 0.5}, {"text": "So let's tease that apart\na little bit further.", "start": 1777.06, "duration": 4.333}, {"text": "When we have a C\nconditional-- in other words,", "start": 1781.393, "duration": 1.917}, {"text": "an if-then-else statement\nor a switch statement,", "start": 1783.31, "duration": 2.37}, {"text": "for that matter--", "start": 1785.68, "duration": 2.31}, {"text": "that gets translated\ninto a conditional branch", "start": 1787.99, "duration": 3.75}, {"text": "instruction, or BR, in the\nLLVM IR representation.", "start": 1791.74, "duration": 4.83}, {"text": "So what we saw before is that\nwe have this if n less than 2", "start": 1796.57, "duration": 5.28}, {"text": "and this basic block\nwith two outgoing edges.", "start": 1801.85, "duration": 2.57}, {"text": "If we take a really close look\nat that first basic block,", "start": 1804.42, "duration": 4.75}, {"text": "we can tease it apart and\nsee what each operation does.", "start": 1809.17, "duration": 5.28}, {"text": "So first, in order to do\nthis conditional operation,", "start": 1814.45, "duration": 3.945}, {"text": "we need to compute whether\nor not n is less than 2.", "start": 1818.395, "duration": 2.125}, {"text": "We need to do a\ncomparison between n", "start": 1820.52, "duration": 2.93}, {"text": "and the literal value 2.", "start": 1823.45, "duration": 1.95}, {"text": "That comparison operation\nturns into an icmp instruction", "start": 1825.4, "duration": 3.87}, {"text": "within the LLVM IR, an integer\ncomparison in the LLVM IR.", "start": 1829.27, "duration": 5.46}, {"text": "The result of that\ncomparison then", "start": 1834.73, "duration": 1.62}, {"text": "gets passed to a conditional\nbranch as one of its arguments,", "start": 1836.35, "duration": 4.26}, {"text": "and the conditional branch\nspecifies a couple of things", "start": 1840.61, "duration": 4.86}, {"text": "beyond that one argument.", "start": 1845.47, "duration": 2.34}, {"text": "In particular, that conditional\nbranch takes out 1-bit", "start": 1847.81, "duration": 3.09}, {"text": "integer-- that Boolean result--", "start": 1850.9, "duration": 2.49}, {"text": "as well as labels of two\ndifferent basic blocks.", "start": 1853.39, "duration": 4.55}, {"text": "So that Boolean value\nis called the predicate.", "start": 1857.94, "duration": 3.582}, {"text": "And that's, in this case,\na result of that comparison", "start": 1861.522, "duration": 2.208}, {"text": "from before.", "start": 1863.73, "duration": 1.31}, {"text": "And then the two\nbasic blocks say", "start": 1865.04, "duration": 1.63}, {"text": "where to go if the\npredicate is true", "start": 1866.67, "duration": 2.52}, {"text": "or where to go if the\npredicate is false.", "start": 1869.19, "duration": 2.8}, {"text": "The first label is the\ndestination when it's true,", "start": 1871.99, "duration": 2.87}, {"text": "second label destination\nwhen it's false--", "start": 1874.86, "duration": 2.22}, {"text": "pretty straightforward.", "start": 1877.08, "duration": 1.175}, {"text": "And if we decide to map\nthis onto our control flow", "start": 1881.23, "duration": 3.07}, {"text": "graph, which we were\nlooking at before,", "start": 1884.3, "duration": 2.88}, {"text": "we can identify the\ntwo branches coming out", "start": 1887.18, "duration": 3.03}, {"text": "of our first basic block\nas either the true branch", "start": 1890.21, "duration": 3.87}, {"text": "or the false branch\nbased on whether or not", "start": 1894.08, "duration": 2.61}, {"text": "you follow that edge when\nthe predicate is true", "start": 1896.69, "duration": 2.4}, {"text": "or you follow it when\nthe predicate is false.", "start": 1899.09, "duration": 2.79}, {"text": "Sound good?", "start": 1901.88, "duration": 1.4}, {"text": "That should be straightforward.", "start": 1903.28, "duration": 3.37}, {"text": "Let me know if it's not.", "start": 1906.65, "duration": 1.0}, {"text": "Let me know if it's confusing.", "start": 1907.65, "duration": 2.89}, {"text": "Now it's also\npossible that you can", "start": 1913.62, "duration": 1.62}, {"text": "have an unconditional\nbranch in LLVM IR.", "start": 1915.24, "duration": 3.6}, {"text": "You can just have a branch\ninstruction with one operand,", "start": 1918.84, "duration": 2.82}, {"text": "and that one operand\nspecifies a basic block.", "start": 1921.66, "duration": 3.96}, {"text": "There's no predicate.", "start": 1925.62, "duration": 0.95}, {"text": "There is no true or false.", "start": 1926.57, "duration": 1.27}, {"text": "It's just the one basic block.", "start": 1927.84, "duration": 1.44}, {"text": "And what that instruction\nsays is, when you get here,", "start": 1929.28, "duration": 4.62}, {"text": "now, go to that\nother basic block.", "start": 1933.9, "duration": 2.86}, {"text": "This might seem kind\nof silly, right?", "start": 1936.76, "duration": 1.8}, {"text": "Why wouldn't we just need to\njump to another basic block?", "start": 1938.56, "duration": 3.78}, {"text": "Why not just merge\nthis code with the code", "start": 1942.34, "duration": 2.88}, {"text": "in the subsequent basic block?", "start": 1945.22, "duration": 2.143}, {"text": "Any thoughts?", "start": 1947.363, "duration": 0.542}, {"text": "STUDENT: For instance,\nin this case,", "start": 1951.36, "duration": 1.5}, {"text": "other things might jump in.", "start": 1952.86, "duration": 1.955}, {"text": "TAO SCHARDL: Correct.", "start": 1954.815, "duration": 0.875}, {"text": "Other things might go\nto that basic block.", "start": 1955.69, "duration": 2.39}, {"text": "And in general, when we\nlook at the structure", "start": 1958.08, "duration": 3.37}, {"text": "that we get for any\nparticular conditional in C,", "start": 1961.45, "duration": 4.23}, {"text": "we end up with this\nsort of diamond shape.", "start": 1965.68, "duration": 1.8}, {"text": "And in order to implement\nthat diamond shape,", "start": 1967.48, "duration": 2.76}, {"text": "we need these\nunconditional branches.", "start": 1970.24, "duration": 2.91}, {"text": "So there's a good reason\nfor them to be around.", "start": 1973.15, "duration": 2.6}, {"text": "And here, we just\nhave an example", "start": 1975.75, "duration": 1.6}, {"text": "of a slightly more\ncomplicated conditional", "start": 1977.35, "duration": 3.45}, {"text": "that creates this diamond shape\nin our control flow graph.", "start": 1980.8, "duration": 3.93}, {"text": "So lets tease this\npiece of code apart.", "start": 1984.73, "duration": 3.33}, {"text": "In the first block, we're going\nto evaluate if some predicate--", "start": 1988.06, "duration": 3.7}, {"text": "and in this case, our\npredicate is x bitwise and 1.", "start": 1991.76, "duration": 3.95}, {"text": "And what we see in\nthe first basic block", "start": 1995.71, "duration": 1.95}, {"text": "is that we compute the\nbitwise and store that result,", "start": 1997.66, "duration": 3.69}, {"text": "do a comparison between that\nresult, and the value 1.", "start": 2001.35, "duration": 4.41}, {"text": "That gives us a Boolean value,\nwhich is stored in register 3.", "start": 2005.76, "duration": 4.29}, {"text": "And we branch conditionally\non whether 3 is true or false.", "start": 2010.05, "duration": 5.14}, {"text": "In the case that it's true,\nwe'll branch to block 4.", "start": 2015.19, "duration": 3.47}, {"text": "And in block 4, that contains\nthe code for the consequence,", "start": 2018.66, "duration": 4.02}, {"text": "the then clause of\nthe if, then, else.", "start": 2022.68, "duration": 2.82}, {"text": "And in the call square,\nwe just call function foo.", "start": 2025.5, "duration": 2.61}, {"text": "And then we need to\nleave the conditional,", "start": 2028.11, "duration": 2.07}, {"text": "so we'll just branch\nunconditionally.", "start": 2030.18, "duration": 3.65}, {"text": "The alternative, if x and\n1 is zero, if it's false,", "start": 2033.83, "duration": 6.81}, {"text": "then we will execute\nthe function bar,", "start": 2040.64, "duration": 3.41}, {"text": "but then also need to\nleave the conditional.", "start": 2044.05, "duration": 3.4}, {"text": "And so we see in\nblock 5, following", "start": 2047.45, "duration": 2.58}, {"text": "the false branch\nthat we call bar,", "start": 2050.03, "duration": 1.61}, {"text": "then we'd just\nbranch to block 6.", "start": 2051.64, "duration": 2.769}, {"text": "And finally, in block\n6, we return the result.", "start": 2054.409, "duration": 4.111}, {"text": "So we end up with this\ndiamond pattern whenever we", "start": 2058.52, "duration": 2.34}, {"text": "have a conditional, in general.", "start": 2060.86, "duration": 1.44}, {"text": "We may delete\ncertain basic blocks", "start": 2062.3, "duration": 3.35}, {"text": "if the conditional in the\ncode is particularly simple.", "start": 2065.65, "duration": 2.4}, {"text": "But in general, it's\ngoing to be this kind", "start": 2068.05, "duration": 1.75}, {"text": "of diamond-looking thing.", "start": 2069.8, "duration": 3.165}, {"text": "Everyone good so far?", "start": 2072.965, "duration": 0.875}, {"text": "One last C construct-- loops.", "start": 2076.969, "duration": 2.371}, {"text": "Unfortunately, this is the\nmost complicated C construct", "start": 2079.34, "duration": 2.67}, {"text": "when it comes to the LLVM IR.", "start": 2082.01, "duration": 2.91}, {"text": "But things haven't\nbeen too bad so far.", "start": 2084.92, "duration": 1.96}, {"text": "So yeah, let's walk into\nthis with some confidence.", "start": 2086.88, "duration": 5.259}, {"text": "So the simple part is\nthat what we will see", "start": 2092.139, "duration": 5.401}, {"text": "is the C code for\na loop translates", "start": 2097.54, "duration": 3.63}, {"text": "into LLVM IR that, in\nthe control flow graph", "start": 2101.17, "duration": 3.1}, {"text": "representation, is a loop.", "start": 2104.27, "duration": 2.8}, {"text": "So a loop in C is\nliterally a loop", "start": 2107.07, "duration": 2.52}, {"text": "in this graph representation,\nwhich is kind of nice.", "start": 2109.59, "duration": 3.75}, {"text": "But to figure out what's really\ngoing on with these loops,", "start": 2113.34, "duration": 3.8}, {"text": "let's first tease apart\nthe components of a C loop.", "start": 2117.14, "duration": 2.96}, {"text": "Because we have a couple\nof different pieces", "start": 2120.1, "duration": 2.36}, {"text": "in an arbitrary C loop.", "start": 2122.46, "duration": 1.14}, {"text": "We have a loop body,\nwhich is what's", "start": 2123.6, "duration": 2.07}, {"text": "executed on each iteration.", "start": 2125.67, "duration": 1.73}, {"text": "And then we have\nsome loop control,", "start": 2127.4, "duration": 1.66}, {"text": "which manages all of the\niterations of that loop.", "start": 2129.06, "duration": 5.37}, {"text": "So in this case, we\nhave a simple C loop,", "start": 2134.43, "duration": 1.76}, {"text": "which multiplies each\nelement of an input", "start": 2136.19, "duration": 1.86}, {"text": "vector x by some scale over a\nand stores the result into y.", "start": 2138.05, "duration": 4.23}, {"text": "That body gets translated into\na blob of straight line code.", "start": 2142.28, "duration": 3.0}, {"text": "I won't step through all of the\nstraight line code just now.", "start": 2145.28, "duration": 3.25}, {"text": "There's plenty of\nit, and you'll be", "start": 2148.53, "duration": 2.24}, {"text": "able to see the slides\nafter this lecture.", "start": 2150.77, "duration": 3.97}, {"text": "But that blob of\nstraight line code", "start": 2154.74, "duration": 1.47}, {"text": "corresponds to a loop body.", "start": 2156.21, "duration": 1.44}, {"text": "And the rest of the code\nin the LLVM IR snippet", "start": 2157.65, "duration": 2.82}, {"text": "corresponds to the loop control.", "start": 2160.47, "duration": 3.12}, {"text": "So we have the\ninitial assignment", "start": 2163.59, "duration": 3.24}, {"text": "of the induction variable.", "start": 2166.83, "duration": 1.29}, {"text": "The comparison would\nbe end of the loop", "start": 2168.12, "duration": 2.4}, {"text": "and the increment\noperation at the end.", "start": 2170.52, "duration": 2.63}, {"text": "All of that gets encoded in the\nstuff highlighted in yellow,", "start": 2173.15, "duration": 4.12}, {"text": "that loop control part.", "start": 2177.27, "duration": 0.98}, {"text": "Now if we take a\nlook at this code,", "start": 2181.53, "duration": 2.4}, {"text": "there's one odd piece that we\nhaven't really understood yet,", "start": 2183.93, "duration": 5.11}, {"text": "and it's this phi\ninstruction at the beginning.", "start": 2189.04, "duration": 2.83}, {"text": "The phi instruction is weird,\nand it arises pretty commonly", "start": 2191.87, "duration": 5.978}, {"text": "when you're dealing with loops.", "start": 2197.848, "duration": 1.292}, {"text": "It basically is there\nto solve a problem", "start": 2202.02, "duration": 2.67}, {"text": "with LLVM's representation\nof the code.", "start": 2204.69, "duration": 2.67}, {"text": "So before we describe\nthe phi instruction,", "start": 2207.36, "duration": 1.75}, {"text": "let's actually take\na look at the problem", "start": 2209.11, "duration": 2.6}, {"text": "that this phi instruction\ntries to solve.", "start": 2211.71, "duration": 2.22}, {"text": "So let's first tease apart the\nloop to reveal the problem.", "start": 2219.12, "duration": 5.25}, {"text": "The C loop produces\nthis looping pattern", "start": 2224.37, "duration": 2.13}, {"text": "in the control flow graph,\nliterally, an edge that", "start": 2226.5, "duration": 2.82}, {"text": "goes back to the beginning.", "start": 2229.32, "duration": 1.438}, {"text": "If we look at the different\nbasic blocks we have,", "start": 2230.758, "duration": 2.042}, {"text": "we have one block at\nthe beginning, which", "start": 2232.8, "duration": 2.49}, {"text": "initializes the induction\nvariable and sees", "start": 2235.29, "duration": 2.04}, {"text": "if there are any iterations of\nthe loop that need to be run.", "start": 2237.33, "duration": 2.5}, {"text": "If there aren't any\niterations, then they'll", "start": 2243.847, "duration": 1.833}, {"text": "branch directly to\nthe end of loop.", "start": 2245.68, "duration": 1.84}, {"text": "It will just skip\nthe loop entirely.", "start": 2247.52, "duration": 2.02}, {"text": "No need to try to\nexecute any of that code.", "start": 2249.54, "duration": 2.99}, {"text": "And in this case, it\nwill simply return.", "start": 2252.53, "duration": 3.28}, {"text": "And then inside\nthe loop block, we", "start": 2255.81, "duration": 2.04}, {"text": "have these two\nincoming edges-- one", "start": 2257.85, "duration": 2.31}, {"text": "from the entry point of\nthe loop, where i has just", "start": 2260.16, "duration": 3.51}, {"text": "been set to zero, and another\nwhere we're repeating the loop,", "start": 2263.67, "duration": 3.93}, {"text": "where we've decided there's\none more iteration to execute.", "start": 2267.6, "duration": 3.755}, {"text": "And we're going to go back\nfrom the end of the loop", "start": 2271.355, "duration": 2.125}, {"text": "to the beginning.", "start": 2273.48, "duration": 0.93}, {"text": "And that back edge is what\ncreates the loop structure", "start": 2274.41, "duration": 2.61}, {"text": "in the control flow graph.", "start": 2277.02, "duration": 2.095}, {"text": "Make sense?", "start": 2279.115, "duration": 0.5}, {"text": "I at least see one\nnod over there.", "start": 2282.346, "duration": 1.624}, {"text": "So that's encouraging.", "start": 2283.97, "duration": 1.557}, {"text": "OK, so if we take a look\nat the loop control,", "start": 2288.39, "duration": 3.06}, {"text": "there are a couple of\ncomponents to that loop control.", "start": 2291.45, "duration": 2.38}, {"text": "There's the initialization\nof the induction variable.", "start": 2293.83, "duration": 2.81}, {"text": "There is the condition,\nand there's the increment.", "start": 2296.64, "duration": 2.7}, {"text": "Condition says when do you exit.", "start": 2299.34, "duration": 1.62}, {"text": "Increment updates the value\nof the induction variable.", "start": 2300.96, "duration": 5.62}, {"text": "And we can translate\neach of these components", "start": 2306.58, "duration": 2.33}, {"text": "from the C code for\nthe loop control", "start": 2308.91, "duration": 2.64}, {"text": "into the LLVM IR\ncode for that loop.", "start": 2311.55, "duration": 3.46}, {"text": "So the increment,\nwe would expect", "start": 2315.01, "duration": 1.7}, {"text": "to see some sort of addition\nwhere we add 1 to some register", "start": 2316.71, "duration": 5.8}, {"text": "somewhere.", "start": 2322.51, "duration": 0.5}, {"text": "And lo and behold, there\nis an add operation.", "start": 2323.01, "duration": 2.37}, {"text": "So we'll call that\nthe increment.", "start": 2325.38, "duration": 3.41}, {"text": "For the condition, we expect\nsome comparison operation", "start": 2328.79, "duration": 2.91}, {"text": "and a conditional branch\nbased on that comparison.", "start": 2331.7, "duration": 3.21}, {"text": "Look at that.", "start": 2334.91, "duration": 0.57}, {"text": "Right after the\nincrement, there's", "start": 2335.48, "duration": 1.417}, {"text": "a compare and a\nconditional branch", "start": 2336.897, "duration": 2.203}, {"text": "that we'll either take us back\nto the beginning of the loop", "start": 2339.1, "duration": 2.79}, {"text": "or out of the loop entirely.", "start": 2341.89, "duration": 2.107}, {"text": "And we do see that there is\nsome form of initialization.", "start": 2347.2, "duration": 4.95}, {"text": "The initial value of this\ninduction variable is 0.", "start": 2352.15, "duration": 2.88}, {"text": "And we do see a 0 among\nthis loop control code.", "start": 2355.03, "duration": 2.61}, {"text": "It's kind of squirreled away\nin that weird notation there.", "start": 2357.64, "duration": 3.85}, {"text": "And that weird notation\nis sitting next", "start": 2361.49, "duration": 1.64}, {"text": "to the phi instruction.", "start": 2363.13, "duration": 3.25}, {"text": "What's not so clear\nhere is where exactly", "start": 2366.38, "duration": 2.94}, {"text": "is the induction variable.", "start": 2369.32, "duration": 1.86}, {"text": "We had this single\nvariable i in our C code.", "start": 2371.18, "duration": 3.46}, {"text": "And what we're looking\nat in the LLVM IR", "start": 2374.64, "duration": 1.85}, {"text": "are a whole bunch of\ndifferent registers.", "start": 2376.49, "duration": 2.34}, {"text": "We have a register\nthat stores what", "start": 2378.83, "duration": 2.01}, {"text": "we're claiming to\nbe i plus 1, then", "start": 2380.84, "duration": 2.01}, {"text": "we do this comparison\nand branch thing.", "start": 2382.85, "duration": 2.88}, {"text": "And then we have\nthis phi instruction", "start": 2385.73, "duration": 2.43}, {"text": "that takes 0 or the\nresult of the increment.", "start": 2388.16, "duration": 5.1}, {"text": "Where did i actually go?", "start": 2393.26, "duration": 1.56}, {"text": "So the problem here\nis that i is really", "start": 2398.82, "duration": 3.96}, {"text": "represented across all\nof those instructions.", "start": 2402.78, "duration": 2.79}, {"text": "And that happens because the\nvalue of the induction variable", "start": 2405.57, "duration": 3.03}, {"text": "changes as you execute the loop.", "start": 2408.6, "duration": 2.73}, {"text": "The value of i is different on\niteration 0 versus iteration 1", "start": 2411.33, "duration": 3.99}, {"text": "versus iteration 2\nversus iteration 3", "start": 2415.32, "duration": 1.89}, {"text": "and so on and so forth.", "start": 2417.21, "duration": 1.17}, {"text": "i is changing as you\nexecute the loop.", "start": 2418.38, "duration": 3.71}, {"text": "And there's this\nfunny invariant.", "start": 2422.09, "duration": 2.82}, {"text": "Yeah, so if we try to map that\ninduction variable to the LLVM", "start": 2424.91, "duration": 3.405}, {"text": "IR, it kind of maps to\nall of these locations.", "start": 2428.315, "duration": 4.155}, {"text": "It maps to various\nuses in the loop body.", "start": 2432.47, "duration": 2.73}, {"text": "It maps, roughly speaking, to\nthe return value of this field", "start": 2435.2, "duration": 2.91}, {"text": "instruction, even though we're\nnot sure what that's all about.", "start": 2438.11, "duration": 3.09}, {"text": "But we can tell it maps to\nthat, because we're going", "start": 2441.2, "duration": 2.167}, {"text": "to increment that later on.", "start": 2443.367, "duration": 1.373}, {"text": "And we're going to use\nthat in a comparison.", "start": 2444.74, "duration": 2.407}, {"text": "So it kind of maps\nall over the place.", "start": 2447.147, "duration": 1.583}, {"text": "And because it changes values\nwith the increment operation,", "start": 2453.779, "duration": 7.421}, {"text": "we're going to encounter--", "start": 2461.2, "duration": 3.137}, {"text": "so why does it change registers?", "start": 2464.337, "duration": 1.333}, {"text": "Well, we have this\nproperty in LLVM", "start": 2465.67, "duration": 2.85}, {"text": "that each instruction\ndefines the value", "start": 2468.52, "duration": 3.21}, {"text": "of a register, at most, once.", "start": 2471.73, "duration": 2.49}, {"text": "So for any particular\nregister with LLVM,", "start": 2474.22, "duration": 3.09}, {"text": "we can identify a\nunique place in the code", "start": 2477.31, "duration": 2.81}, {"text": "of the function that\ndefines that register value.", "start": 2480.12, "duration": 3.9}, {"text": "This invariant is called\nthe static single assignment", "start": 2484.02, "duration": 3.16}, {"text": "invariant.", "start": 2487.18, "duration": 1.8}, {"text": "And it seems a little bit\nweird, but it turns out", "start": 2488.98, "duration": 2.58}, {"text": "to be an extremely powerful\ninvariant within the compiler.", "start": 2491.56, "duration": 3.97}, {"text": "It assists with a lot of\nthe compiler analysis.", "start": 2495.53, "duration": 2.21}, {"text": "And it also can help\nwith reading the LLVM", "start": 2497.74, "duration": 2.565}, {"text": "IR if you expect it.", "start": 2500.305, "duration": 5.505}, {"text": "So this is a nice\ninvariant, but it", "start": 2505.81, "duration": 2.16}, {"text": "poses a problem\nwhen we're dealing", "start": 2507.97, "duration": 1.62}, {"text": "with induction variables, which\nchange as the loop unfolds.", "start": 2509.59, "duration": 6.19}, {"text": "And so what happens when\ncontrol flow merges at the entry", "start": 2515.78, "duration": 5.09}, {"text": "point of a loop, for example?", "start": 2520.87, "duration": 2.98}, {"text": "How do we define\nwhat the induction", "start": 2523.85, "duration": 1.62}, {"text": "variable is at that location?", "start": 2525.47, "duration": 1.29}, {"text": "Because it could\neither be 0, if this", "start": 2526.76, "duration": 1.927}, {"text": "is the first time through the\nloop, or whatever you lost", "start": 2528.687, "duration": 2.333}, {"text": "incremented.", "start": 2531.02, "duration": 1.66}, {"text": "And the solution to that\nproblem is the phi instruction.", "start": 2532.68, "duration": 2.688}, {"text": "The phi instruction defines\na register that says,", "start": 2538.06, "duration": 5.07}, {"text": "depending on how you get to\nthis location in the code,", "start": 2543.13, "duration": 3.09}, {"text": "this register will have one\nof several different values.", "start": 2546.22, "duration": 4.92}, {"text": "And the phi instruction\nsimply lists", "start": 2551.14, "duration": 1.95}, {"text": "what the value of\nthat register will be,", "start": 2553.09, "duration": 2.91}, {"text": "depending on which basic\nblock you came from.", "start": 2556.0, "duration": 3.72}, {"text": "So in this particular code,\nthe phi instruction says,", "start": 2559.72, "duration": 2.91}, {"text": "if you came from block\n6, which was the entry", "start": 2562.63, "duration": 3.06}, {"text": "point of the loop, where you\ninitially checked if there were", "start": 2565.69, "duration": 4.47}, {"text": "any loop iterations to perform,\nif you come from that block,", "start": 2570.16, "duration": 4.14}, {"text": "then this register 9 is\ngoing to adopt the value 0.", "start": 2574.3, "duration": 4.32}, {"text": "If, however, you followed\nthe back edge of the loop,", "start": 2578.62, "duration": 2.973}, {"text": "then the register is\ngoing to adopt the value,", "start": 2581.593, "duration": 1.917}, {"text": "in this case, 14.", "start": 2583.51, "duration": 2.01}, {"text": "And 14, lo and\nbehold, is the result", "start": 2585.52, "duration": 1.68}, {"text": "of the incremental operation.", "start": 2587.2, "duration": 1.985}, {"text": "And so this phi\ninstruction says,", "start": 2589.185, "duration": 1.375}, {"text": "either you're going\nto start from zero,", "start": 2590.56, "duration": 1.95}, {"text": "or you're going to be i plus 1.", "start": 2592.51, "duration": 1.89}, {"text": "Just to note, the\nphi instruction", "start": 2598.015, "duration": 1.375}, {"text": "is not a real instruction.", "start": 2599.39, "duration": 1.32}, {"text": "It's really a solution to\na problem with an LLVM.", "start": 2600.71, "duration": 4.68}, {"text": "And when you translate\nthis code into assembly,", "start": 2605.39, "duration": 2.857}, {"text": "the phi instruction\nisn't going to map", "start": 2608.247, "duration": 1.583}, {"text": "to any particular\nassembly instruction.", "start": 2609.83, "duration": 2.64}, {"text": "It's really a\nrepresentational trick.", "start": 2612.47, "duration": 3.067}, {"text": "Does that make some sense?", "start": 2615.537, "duration": 1.083}, {"text": "Any questions about that?", "start": 2616.62, "duration": 1.8}, {"text": "Yeah?", "start": 2618.42, "duration": 0.5}, {"text": "STUDENT: Why is it called phi?", "start": 2618.92, "duration": 2.033}, {"text": "TAO SCHARDL: Why\nis it called phi?", "start": 2620.953, "duration": 1.417}, {"text": "That's a great question.", "start": 2622.37, "duration": 1.21}, {"text": "I actually don't know why\nthey chose the name phi.", "start": 2623.58, "duration": 3.557}, {"text": "I don't think they had\na particular affinity", "start": 2627.137, "duration": 1.833}, {"text": "for the Golden\nRatio, but I'm not", "start": 2628.97, "duration": 3.44}, {"text": "sure what the rationale was.", "start": 2632.41, "duration": 1.508}, {"text": "I don't know if\nanyone else knows.", "start": 2633.918, "duration": 1.417}, {"text": "Yeah?", "start": 2637.93, "duration": 1.19}, {"text": "Google knows all, sort of.", "start": 2639.12, "duration": 1.86}, {"text": "Yeah, so adopt the value 0 from\nblock 6 or 14 from block 8.", "start": 2643.61, "duration": 6.82}, {"text": "So that's all of\nthe basic components", "start": 2650.43, "duration": 1.74}, {"text": "of C translated into LLVM IR.", "start": 2652.17, "duration": 3.473}, {"text": "The last thing I\nwant to leave you", "start": 2655.643, "duration": 1.417}, {"text": "with in this section on\nLLVM IR is a discussion", "start": 2657.06, "duration": 2.67}, {"text": "of these attributes.", "start": 2659.73, "duration": 1.067}, {"text": "And we already saw one of\nthese attributes before.", "start": 2660.797, "duration": 2.083}, {"text": "It was this NSW thing\nattached the add instruction.", "start": 2662.88, "duration": 5.04}, {"text": "In general, these\nLLVM IR constructs", "start": 2667.92, "duration": 3.6}, {"text": "might be decorated with these\nextra words and keywords.", "start": 2671.52, "duration": 4.62}, {"text": "And those are the keywords I'm\nreferring to as attributes.", "start": 2676.14, "duration": 2.76}, {"text": "Those attributes convey\na variety of information.", "start": 2678.9, "duration": 6.16}, {"text": "So in this case, what\nwe have here is C code", "start": 2685.06, "duration": 2.48}, {"text": "that performs this\nmemory calculation,", "start": 2687.54, "duration": 4.34}, {"text": "which you might have seen\nfrom our previous lecture.", "start": 2691.88, "duration": 3.21}, {"text": "And what we see in the\ncorresponding LLVM IR", "start": 2695.09, "duration": 2.62}, {"text": "is that there's some extra\nstuff tacked onto that load", "start": 2697.71, "duration": 3.56}, {"text": "instruction where\nyou load memory.", "start": 2701.27, "duration": 2.82}, {"text": "One of those pieces of extra\ninformation is this align 4.", "start": 2704.09, "duration": 4.8}, {"text": "And what that align\n4 attribute says", "start": 2708.89, "duration": 2.78}, {"text": "is it describes the alignment\nof that read from memory.", "start": 2711.67, "duration": 4.1}, {"text": "And so if subsequent\nstages of the compiler", "start": 2715.77, "duration": 2.0}, {"text": "can employ that information,\nif they can optimize", "start": 2717.77, "duration": 3.06}, {"text": "reads that are 4-byte aligned,\nthen this attribute will say,", "start": 2720.83, "duration": 5.34}, {"text": "this is a load that you\ncan go ahead and optimize.", "start": 2726.17, "duration": 2.46}, {"text": "There are a bunch\nof places where", "start": 2731.975, "duration": 1.375}, {"text": "attributes might come from.", "start": 2733.35, "duration": 1.125}, {"text": "Some of them are derived\ndirectly from the source code.", "start": 2734.475, "duration": 2.625}, {"text": "If you write a\nfunction that takes", "start": 2737.1, "duration": 1.77}, {"text": "a parameter marked as const,\nor marked as restrict, then", "start": 2738.87, "duration": 3.87}, {"text": "in the LLVM IR, you might see\nthat the corresponding function", "start": 2742.74, "duration": 3.33}, {"text": "parameter is marked as no alias,\nbecause the restricted keyword", "start": 2746.07, "duration": 3.63}, {"text": "said this pointer can ever\nalias or the const keyword says,", "start": 2749.7, "duration": 4.018}, {"text": "you're only ever going to\nread from this pointer.", "start": 2753.718, "duration": 2.042}, {"text": "So this pointer is going\nto be marked read-only.", "start": 2755.76, "duration": 2.4}, {"text": "So in that case, the source\ncode itself-- the C code--", "start": 2758.16, "duration": 4.38}, {"text": "was the source of\nthe information", "start": 2762.54, "duration": 2.52}, {"text": "for those attributes.", "start": 2765.06, "duration": 1.79}, {"text": "There are some other\nattributes that occur simply", "start": 2766.85, "duration": 2.92}, {"text": "because the compiler\nis smart, and it", "start": 2769.77, "duration": 1.68}, {"text": "does some clever analysis.", "start": 2771.45, "duration": 2.89}, {"text": "So in this case, the LLVM\nIR has a load operation", "start": 2774.34, "duration": 3.71}, {"text": "that's 8-byte aligned.", "start": 2778.05, "duration": 2.862}, {"text": "It was really analysis that\nfigured out the alignment", "start": 2780.912, "duration": 2.208}, {"text": "of that load operation.", "start": 2783.12, "duration": 1.448}, {"text": "Good so far?", "start": 2787.56, "duration": 2.55}, {"text": "Cool.", "start": 2790.11, "duration": 1.55}, {"text": "So let's summarize this part\nof the discussion with what", "start": 2791.66, "duration": 4.91}, {"text": "we've seen about LLVM IR.", "start": 2796.57, "duration": 2.57}, {"text": "LLVM IR is similar to\nassembly, but a lot simpler", "start": 2799.14, "duration": 3.2}, {"text": "in many, many ways.", "start": 2802.34, "duration": 1.92}, {"text": "All of the computed values\nare stored in registers.", "start": 2804.26, "duration": 2.52}, {"text": "And, really, when\nyou're reading LLVM IR,", "start": 2806.78, "duration": 1.86}, {"text": "you can think of\nthose registers a lot", "start": 2808.64, "duration": 2.25}, {"text": "like ordinary C variables.", "start": 2810.89, "duration": 4.17}, {"text": "LLVM IR is a little\nbit funny in that", "start": 2815.06, "duration": 2.22}, {"text": "it adopts a static, single\nassignment paradigm--", "start": 2817.28, "duration": 2.67}, {"text": "this invariant-- where each\nregistered name, each variable", "start": 2819.95, "duration": 3.51}, {"text": "is written by, at most, one\ninstruction within the LLVM IR", "start": 2823.46, "duration": 4.36}, {"text": "code.", "start": 2827.82, "duration": 1.78}, {"text": "So if you're ever curious where\n%14 is defined within this", "start": 2829.6, "duration": 3.48}, {"text": "function, just do a search for\nwhere %14 is on the left-hand", "start": 2833.08, "duration": 3.87}, {"text": "side of an equals,\nand there you go.", "start": 2836.95, "duration": 4.32}, {"text": "We can model of\nfunction in LLVM IR", "start": 2841.27, "duration": 1.77}, {"text": "as a control flow\ngraph, whose nodes", "start": 2843.04, "duration": 2.16}, {"text": "correspond to basic blocks--", "start": 2845.2, "duration": 2.04}, {"text": "these blobs of\nstraight line code--", "start": 2847.24, "duration": 2.01}, {"text": "and whose edges do node control\nflow among those basic blocks.", "start": 2849.25, "duration": 3.34}, {"text": "And compared to C, LLVM\nIR is pretty similar,", "start": 2852.59, "duration": 4.74}, {"text": "except that all of these\noperations are explicit.", "start": 2857.33, "duration": 3.02}, {"text": "The types are\nexplicit everywhere.", "start": 2860.35, "duration": 1.98}, {"text": "The integer sizes\nare all apparent.", "start": 2862.33, "duration": 2.3}, {"text": "You don't have to\nremember that int really", "start": 2864.63, "duration": 1.75}, {"text": "means a 32-bit\ninteger, and you need", "start": 2866.38, "duration": 2.73}, {"text": "n-64 to be a 64-bit integer,\nor you need a long or anything.", "start": 2869.11, "duration": 3.94}, {"text": "It's just i and\nthen a bit width.", "start": 2873.05, "duration": 3.77}, {"text": "There no implicit operations\nat the LLVM IR level.", "start": 2876.82, "duration": 2.91}, {"text": "All the typecasts are explicit.", "start": 2879.73, "duration": 2.91}, {"text": "In some sense, LLVM\nIR is like assembly", "start": 2882.64, "duration": 4.8}, {"text": "if assembly were more like c.", "start": 2887.44, "duration": 2.247}, {"text": "And that's doubly a\nstatement that would not", "start": 2889.687, "duration": 1.833}, {"text": "have made sense 40 minutes ago.", "start": 2891.52, "duration": 1.64}, {"text": "All right, so you've seen how to\ntranslate C code into LLVM IR.", "start": 2897.29, "duration": 5.51}, {"text": "There's one last step.", "start": 2902.8, "duration": 1.05}, {"text": "We want to translate the\nLLVM IR into assembly.", "start": 2903.85, "duration": 3.89}, {"text": "And it turns out that\nstructurally speaking,", "start": 2907.74, "duration": 2.78}, {"text": "LLVM IR is very\nsimilar to assembly.", "start": 2910.52, "duration": 2.51}, {"text": "We can, more or less,\nmap each line of LLVM IR", "start": 2913.03, "duration": 4.44}, {"text": "to some sequence of lines\nin the final assembly code.", "start": 2917.47, "duration": 5.76}, {"text": "But there is some\nadditional complexity.", "start": 2923.23, "duration": 1.74}, {"text": "The compiler isn't\ndone with its work", "start": 2924.97, "duration": 1.71}, {"text": "yet when it's compiling\nC to LLVM IR to assembly.", "start": 2926.68, "duration": 6.36}, {"text": "There are three main tasks\nthat the compiler still", "start": 2933.04, "duration": 2.31}, {"text": "has to perform in order\nto generate x86-64.", "start": 2935.35, "duration": 6.09}, {"text": "First, it has to select\nthe actual x86 assembly", "start": 2941.44, "duration": 2.88}, {"text": "instructions that are going to\nimplement these various LLVM IR", "start": 2944.32, "duration": 2.98}, {"text": "operations.", "start": 2947.3, "duration": 1.34}, {"text": "It has to decide which general\npurpose registers are going", "start": 2948.64, "duration": 3.51}, {"text": "to hold different\nvalues and which values", "start": 2952.15, "duration": 2.64}, {"text": "need to be squirreled\naway into memory,", "start": 2954.79, "duration": 2.58}, {"text": "because it just has\nno other choice.", "start": 2957.37, "duration": 2.37}, {"text": "And it has to coordinate\nall of the function calls.", "start": 2959.74, "duration": 2.52}, {"text": "And it's not just\nthe function calls", "start": 2962.26, "duration": 1.5}, {"text": "within this particular\nsource file.", "start": 2963.76, "duration": 3.09}, {"text": "It's also function calls\nbetween that source file,", "start": 2966.85, "duration": 2.97}, {"text": "and other source files\nthat you're compiling,", "start": 2969.82, "duration": 2.13}, {"text": "and binary libraries that are\njust sitting on the system.", "start": 2971.95, "duration": 3.777}, {"text": "But the compiler never\nreally gets to touch.", "start": 2975.727, "duration": 1.833}, {"text": "It has to coordinate\nall of those calls.", "start": 2977.56, "duration": 2.61}, {"text": "That's a bit complicated.", "start": 2980.17, "duration": 1.24}, {"text": "That is going to be the reason\nfor a lot of the remaining", "start": 2981.41, "duration": 3.32}, {"text": "complexity.", "start": 2984.73, "duration": 1.32}, {"text": "And that's what brings our\ndiscussion to the Linux", "start": 2986.05, "duration": 2.91}, {"text": "x86-64 calling convention.", "start": 2988.96, "duration": 4.325}, {"text": "This isn't a very\nfun convention.", "start": 2993.285, "duration": 1.375}, {"text": "Don't worry.", "start": 2994.66, "duration": 1.65}, {"text": "But nevertheless, it's useful.", "start": 2996.31, "duration": 3.68}, {"text": "So to talk about\nthis convention,", "start": 2999.99, "duration": 2.55}, {"text": "let's first take a look at\nhow a program gets laid out", "start": 3002.54, "duration": 3.0}, {"text": "in memory when you run it.", "start": 3005.54, "duration": 2.97}, {"text": "So when a program\nexecutes, virtually memory", "start": 3008.51, "duration": 2.73}, {"text": "gets organized into a whole\nbunch of different chunks", "start": 3011.24, "duration": 2.79}, {"text": "which are called segments.", "start": 3014.03, "duration": 1.59}, {"text": "There's a segment that\ncorresponds to the stack that's", "start": 3015.62, "duration": 3.0}, {"text": "actually located near the\ntop of virtual memory,", "start": 3018.62, "duration": 2.13}, {"text": "and it grows downwards.", "start": 3020.75, "duration": 1.53}, {"text": "The stack grows down.", "start": 3022.28, "duration": 1.38}, {"text": "Remember this.", "start": 3023.66, "duration": 1.63}, {"text": "There is a heap segment,\nwhich grows upwards", "start": 3025.29, "duration": 2.75}, {"text": "from a middle\nlocation in memory.", "start": 3028.04, "duration": 3.12}, {"text": "And those two\ndynamically-allocated segments", "start": 3031.16, "duration": 5.7}, {"text": "live at the top of the\nvirtual address space.", "start": 3036.86, "duration": 2.923}, {"text": "There are then two\nadditional segments--", "start": 3039.783, "duration": 1.667}, {"text": "the bss segment for\nuninitialized data", "start": 3041.45, "duration": 3.6}, {"text": "and the data segment\nfor initialized data.", "start": 3045.05, "duration": 3.563}, {"text": "And finally, at the bottom\nof virtual address space,", "start": 3048.613, "duration": 2.167}, {"text": "there's a tech segment.", "start": 3050.78, "duration": 1.073}, {"text": "And that just stores the\ncode of the program itself.", "start": 3051.853, "duration": 2.167}, {"text": "Now when you read\nassembly code directly,", "start": 3058.91, "duration": 4.56}, {"text": "you'll see that\nthe assembly code", "start": 3063.47, "duration": 1.41}, {"text": "contains more than just some\nlabels and some instructions.", "start": 3064.88, "duration": 4.08}, {"text": "In fact, it's decorated with\na whole bunch of other stuff.", "start": 3068.96, "duration": 4.24}, {"text": "And these are called\nassembler directives,", "start": 3073.2, "duration": 3.29}, {"text": "and these directives operate\non different sections", "start": 3076.49, "duration": 2.97}, {"text": "of the assembly code.", "start": 3079.46, "duration": 1.35}, {"text": "Some of those directives\nrefer to the various segments", "start": 3080.81, "duration": 3.33}, {"text": "of virtual memory.", "start": 3084.14, "duration": 1.4}, {"text": "And those segment\ndirectives are used", "start": 3085.54, "duration": 2.38}, {"text": "to organize the content\nof the assembly file.", "start": 3087.92, "duration": 4.2}, {"text": "For example, the .text\ndirective identifies some chunk", "start": 3092.12, "duration": 4.23}, {"text": "of the assembly, which is really\ncode and should be located", "start": 3096.35, "duration": 2.85}, {"text": "in the text segment\nwhen the program is run.", "start": 3099.2, "duration": 2.79}, {"text": "The .bss segment\nidentifies stuff that lives", "start": 3101.99, "duration": 3.48}, {"text": "in the assembler directive\nto identify stuff in the bss", "start": 3105.47, "duration": 3.41}, {"text": "segment.", "start": 3108.88, "duration": 1.2}, {"text": "The .data directive identify\nstuff in the data segment,", "start": 3110.08, "duration": 3.07}, {"text": "so on and so forth.", "start": 3113.15, "duration": 1.65}, {"text": "There are also various\nstorage directives", "start": 3114.8, "duration": 1.8}, {"text": "that will store\ncontent of some variety", "start": 3116.6, "duration": 2.88}, {"text": "directly into the current\nsegment-- whatever was last", "start": 3119.48, "duration": 3.12}, {"text": "identified by a\nsegment directive.", "start": 3122.6, "duration": 2.34}, {"text": "So if, at some point, there\nis a directive x colon", "start": 3124.94, "duration": 5.38}, {"text": "dot space 20, that\nspace directive says,", "start": 3130.32, "duration": 2.88}, {"text": "allocate some amount of memory.", "start": 3133.2, "duration": 1.83}, {"text": "And in this case, it says,\nallocate 20 bytes of memory.", "start": 3135.03, "duration": 3.27}, {"text": "And we're going to\nlabel that location x.", "start": 3138.3, "duration": 2.98}, {"text": "The .long segment says, store\na constant long integer value--", "start": 3141.28, "duration": 5.988}, {"text": "in this case, 172--", "start": 3147.268, "duration": 0.792}, {"text": "in this example, at location y.", "start": 3150.89, "duration": 3.44}, {"text": "The asciz segment\nsimilarly stores a string", "start": 3154.33, "duration": 4.02}, {"text": "at that particular location.", "start": 3158.35, "duration": 1.9}, {"text": "So here, we're storing the\nstring 6.172 at location z.", "start": 3160.25, "duration": 4.77}, {"text": "There is an align\ndirective that aligns", "start": 3165.02, "duration": 3.44}, {"text": "the next content in the assembly\nfile to an 8-byte boundary.", "start": 3168.46, "duration": 7.08}, {"text": "There are additional segments\nfor the linker to obey,", "start": 3175.54, "duration": 3.39}, {"text": "and those are the scope\nand linkage directives.", "start": 3178.93, "duration": 2.52}, {"text": "For example, you might see\n.globl in front of a label.", "start": 3181.45, "duration": 4.26}, {"text": "And that single is linker\nthat that particular symbol", "start": 3185.71, "duration": 3.93}, {"text": "should be visible to the other\nfiles that the linker touches.", "start": 3189.64, "duration": 3.83}, {"text": "In this case, .globl fib makes\nfib visible to the other object", "start": 3193.47, "duration": 5.86}, {"text": "files, and that allows this\nother object files to call", "start": 3199.33, "duration": 3.48}, {"text": "or refer to this fib location.", "start": 3202.81, "duration": 1.815}, {"text": "Now, let's turn our\nattention to the segment", "start": 3207.77, "duration": 3.03}, {"text": "at the top, the stack segment.", "start": 3210.8, "duration": 3.63}, {"text": "This segment is used to store\ndata and memory in order", "start": 3214.43, "duration": 2.82}, {"text": "to manage function\ncalls and returns.", "start": 3217.25, "duration": 3.39}, {"text": "That's a nice high-level\ndescription, but what exactly", "start": 3220.64, "duration": 3.39}, {"text": "ends up in the stack segment?", "start": 3224.03, "duration": 1.47}, {"text": "Why do we need a stack?", "start": 3225.5, "duration": 2.13}, {"text": "What data will end\nup going there?", "start": 3227.63, "duration": 1.908}, {"text": "Can anyone tell me?", "start": 3229.538, "duration": 0.792}, {"text": "STUDENT: Local\nvariables in function?", "start": 3235.12, "duration": 1.592}, {"text": "TAO SCHARDL: Local\nvariables in function.", "start": 3236.712, "duration": 1.708}, {"text": "Anything else?", "start": 3238.42, "duration": 2.82}, {"text": "You already answered once.", "start": 3241.24, "duration": 1.64}, {"text": "I may call on you again.", "start": 3242.88, "duration": 1.25}, {"text": "Go ahead.", "start": 3244.13, "duration": 0.5}, {"text": "STUDENT: Function arguments?", "start": 3244.63, "duration": 1.08}, {"text": "TAO SCHARDL: Sorry?", "start": 3245.71, "duration": 0.24}, {"text": "STUDENT: Function arguments?", "start": 3245.95, "duration": 1.05}, {"text": "TAO SCHARDL: Function\narguments-- very good.", "start": 3247.0, "duration": 1.95}, {"text": "Anything else?", "start": 3248.95, "duration": 1.81}, {"text": "I thought I saw a\nhand over here, but--", "start": 3250.76, "duration": 1.625}, {"text": "STUDENT: The return address?", "start": 3256.75, "duration": 1.46}, {"text": "TAO SCHARDL: The return address.", "start": 3258.21, "duration": 1.333}, {"text": "Anything else?", "start": 3262.33, "duration": 0.6}, {"text": "Yeah?", "start": 3262.93, "duration": 0.5}, {"text": "There's one other\nimportant thing", "start": 3266.31, "duration": 3.19}, {"text": "that gets stored on stack.", "start": 3269.5, "duration": 1.164}, {"text": "Yeah?", "start": 3275.02, "duration": 0.968}, {"text": "STUDENT: The return value?", "start": 3275.988, "duration": 2.432}, {"text": "TAO SCHARDL: The return value--", "start": 3278.42, "duration": 1.715}, {"text": "actually, that\none's interesting.", "start": 3280.135, "duration": 1.375}, {"text": "It might be stored on the\nstack, but it might not", "start": 3281.51, "duration": 3.0}, {"text": "be stored on the stack.", "start": 3284.51, "duration": 2.76}, {"text": "Good guess, though.", "start": 3287.27, "duration": 0.97}, {"text": "Yeah?", "start": 3288.24, "duration": 0.5}, {"text": "STUDENT: Intermediate results?", "start": 3288.74, "duration": 1.773}, {"text": "TAO SCHARDL:\nIntermediate results,", "start": 3290.513, "duration": 1.417}, {"text": "in a manner of speaking, yes.", "start": 3291.93, "duration": 2.07}, {"text": "There are more\nintermediate results", "start": 3294.0, "duration": 1.56}, {"text": "than meets the eye when\nit comes to assembly", "start": 3295.56, "duration": 4.2}, {"text": "or comparing it to\nC. But in particular,", "start": 3299.76, "duration": 4.67}, {"text": "by intermediate results,\nlet's say, register state.", "start": 3304.43, "duration": 3.15}, {"text": "There are only so many\nregisters on the machine.", "start": 3307.58, "duration": 2.82}, {"text": "And sometimes,\nthat's not enough.", "start": 3310.4, "duration": 3.57}, {"text": "And so the function may\nwant to squirrel away", "start": 3313.97, "duration": 3.03}, {"text": "some data that's in registers\nand stash it somewhere", "start": 3317.0, "duration": 2.97}, {"text": "in order to read it back later.", "start": 3319.97, "duration": 1.568}, {"text": "The stack is a very\nnatural place to do it.", "start": 3321.538, "duration": 1.792}, {"text": "That's the dedicated\nplace to do it.", "start": 3323.33, "duration": 3.126}, {"text": "So yeah, that's pretty\nmuch all the content", "start": 3326.456, "duration": 2.694}, {"text": "of what ends up on the call\nstack as the program executes.", "start": 3329.15, "duration": 5.95}, {"text": "Now, here's the thing.", "start": 3335.1, "duration": 1.64}, {"text": "There are a whole bunch of\nfunctions in the program.", "start": 3336.74, "duration": 3.12}, {"text": "Some of them may have been\ndefined in the source file", "start": 3339.86, "duration": 6.09}, {"text": "that you're compiling right now.", "start": 3345.95, "duration": 1.58}, {"text": "Some of them might be defined\nin other source files.", "start": 3347.53, "duration": 2.26}, {"text": "Some of them might be\ndefined in libraries", "start": 3349.79, "duration": 2.04}, {"text": "that were compiled\nby someone else,", "start": 3351.83, "duration": 1.85}, {"text": "possibly using a different\ncompiler, with different flags,", "start": 3353.68, "duration": 3.46}, {"text": "under different\nparameters, presumably,", "start": 3357.14, "duration": 2.04}, {"text": "for this architecture--\nat least, one hopes.", "start": 3359.18, "duration": 2.85}, {"text": "But those libraries are\ncompletely out of your control.", "start": 3362.03, "duration": 5.84}, {"text": "And now, we have this problem.", "start": 3367.87, "duration": 1.77}, {"text": "All those object files might\ndefine these functions.", "start": 3369.64, "duration": 3.648}, {"text": "And those functions want to\ncall each other, regardless", "start": 3373.288, "duration": 2.292}, {"text": "of where those functions\nare necessarily defined.", "start": 3375.58, "duration": 2.88}, {"text": "And so somehow, we need to\ncoordinate all those function", "start": 3378.46, "duration": 3.51}, {"text": "calls and make sure that\nif one function wants", "start": 3381.97, "duration": 2.73}, {"text": "to use these registers,\nand this other function", "start": 3384.7, "duration": 2.55}, {"text": "wants to use the same\nregisters, those functions", "start": 3387.25, "duration": 2.4}, {"text": "aren't going to interfere\nwith each other.", "start": 3389.65, "duration": 2.51}, {"text": "Or if they both want\nto read stack memory,", "start": 3392.16, "duration": 1.93}, {"text": "they're not going to\nclobber each other's stacks.", "start": 3394.09, "duration": 3.99}, {"text": "So how do we deal with\nthis coordination problem?", "start": 3398.08, "duration": 3.94}, {"text": "At a high level, what's\nthe high-level strategy", "start": 3402.02, "duration": 2.57}, {"text": "we're going to adopt to deal\nwith this coordination problem?", "start": 3404.59, "duration": 2.52}, {"text": "STUDENT: Put the values of\nthe registers on the stack", "start": 3410.399, "duration": 2.208}, {"text": "before you go into the function.", "start": 3412.607, "duration": 2.163}, {"text": "TAO SCHARDL: That\nwill be part of it.", "start": 3414.77, "duration": 1.71}, {"text": "But for the higher\nlevel strategy--", "start": 3416.48, "duration": 3.25}, {"text": "so that's a component of\nthis higher level strategy.", "start": 3419.73, "duration": 2.46}, {"text": "Yeah?", "start": 3422.19, "duration": 0.5}, {"text": "Go ahead.", "start": 3422.69, "duration": 0.64}, {"text": "STUDENT: Calling convention?", "start": 3423.33, "duration": 0.74}, {"text": "TAO SCHARDL: Calling convention.", "start": 3424.07, "duration": 0.78}, {"text": "You remembered the title of\nthis section of the talk.", "start": 3424.85, "duration": 2.4}, {"text": "Great.", "start": 3427.25, "duration": 1.62}, {"text": "We're going to make sure\nthat every single function,", "start": 3428.87, "duration": 2.91}, {"text": "regardless of where it's\ndefined, they all abide", "start": 3431.78, "duration": 2.82}, {"text": "by the same calling convention.", "start": 3434.6, "duration": 2.04}, {"text": "So it's a standard\nthat all the functions", "start": 3436.64, "duration": 2.4}, {"text": "will obey in order to make sure\nthey all play nicely together.", "start": 3439.04, "duration": 5.24}, {"text": "So let's unpack the Linux\nx86-64 calling convention.", "start": 3444.28, "duration": 3.1}, {"text": "Well, not the whole thing,\nbecause it's actually", "start": 3447.38, "duration": 2.0}, {"text": "pretty complicated, but at\nleast enough to understand", "start": 3449.38, "duration": 2.82}, {"text": "the basics of what's going on.", "start": 3452.2, "duration": 2.76}, {"text": "So a high level, this calling\nconvention organizes the stack", "start": 3454.96, "duration": 4.05}, {"text": "segment into frames, such that\neach function instantiation--", "start": 3459.01, "duration": 4.62}, {"text": "each time you call a function--", "start": 3463.63, "duration": 1.98}, {"text": "that instantiation gets a\nsingle frame all to itself.", "start": 3465.61, "duration": 5.28}, {"text": "And to manage all\nthose stack frames,", "start": 3470.89, "duration": 1.93}, {"text": "the calling convention is going\nto use these two pointers-- rbp", "start": 3472.82, "duration": 3.11}, {"text": "and rsp, which you\nshould've seen last time.", "start": 3475.93, "duration": 2.82}, {"text": "rbp, the base pointer,\nwill point to the top", "start": 3478.75, "duration": 3.09}, {"text": "of the current stack frame.", "start": 3481.84, "duration": 1.49}, {"text": "rsp will point to the bottom\nup the current stack frame.", "start": 3483.33, "duration": 2.65}, {"text": "And remember, the stack grows.", "start": 3485.98, "duration": 1.74}, {"text": "Now when the code executes\ncall-and-return instructions,", "start": 3491.26, "duration": 3.87}, {"text": "those instructions\nare going to operate", "start": 3495.13, "duration": 4.5}, {"text": "on the stack, these various\nstock pointers, as well", "start": 3499.63, "duration": 3.0}, {"text": "as the instruction\npointer, rip, in order", "start": 3502.63, "duration": 2.46}, {"text": "to manage the return\naddress of each function.", "start": 3505.09, "duration": 3.87}, {"text": "In particular, when a call\ninstruction gets executed,", "start": 3508.96, "duration": 4.2}, {"text": "in x86, that call\ninstruction will", "start": 3513.16, "duration": 2.16}, {"text": "push the current value\nof rip onto the stack,", "start": 3515.32, "duration": 3.59}, {"text": "and that will be\nthe return address.", "start": 3518.91, "duration": 2.07}, {"text": "And then the call instruction\nwill jump to its operand.", "start": 3520.98, "duration": 2.93}, {"text": "It's operand being the address\nof some function in the program", "start": 3523.91, "duration": 6.11}, {"text": "memory, or, at least, one hopes.", "start": 3530.02, "duration": 2.34}, {"text": "Perhaps there was buffer\noverflow corruption", "start": 3532.36, "duration": 2.79}, {"text": "of some kind, and your\nprogram is in dire straits.", "start": 3535.15, "duration": 4.56}, {"text": "But presumably, it's the\naddress of a function.", "start": 3539.71, "duration": 5.24}, {"text": "The return instruction\ncomplements the call,", "start": 3544.95, "duration": 2.26}, {"text": "and it's going to undo the\noperations of that call", "start": 3547.21, "duration": 2.67}, {"text": "instruction.", "start": 3549.88, "duration": 0.75}, {"text": "It'll pop the return\naddress off the stack", "start": 3550.63, "duration": 3.63}, {"text": "and put that into rip.", "start": 3554.26, "duration": 1.92}, {"text": "And that will\ncause the execution", "start": 3556.18, "duration": 1.77}, {"text": "to return to the caller\nand resume execution", "start": 3557.95, "duration": 3.63}, {"text": "from the statement right\nafter the original call.", "start": 3561.58, "duration": 2.82}, {"text": "So that's the high level of\nhow the stack gets managed", "start": 3567.04, "duration": 2.84}, {"text": "as well as the return address.", "start": 3569.88, "duration": 1.71}, {"text": "How about, how do we\nmaintain registers", "start": 3571.59, "duration": 1.83}, {"text": "across all those calls?", "start": 3573.42, "duration": 2.285}, {"text": "Well, there's a\nbit of a problem.", "start": 3575.705, "duration": 1.375}, {"text": "Because we might have\ntwo different functions", "start": 3577.08, "duration": 2.34}, {"text": "that want to use\nthe same registers.", "start": 3579.42, "duration": 2.24}, {"text": "Some of this might be review,\nby the way, from 6004.", "start": 3581.66, "duration": 7.54}, {"text": "If you have questions,\njust let me know.", "start": 3589.2, "duration": 2.728}, {"text": "So we have this problem,\nwhere two different functions,", "start": 3591.928, "duration": 2.292}, {"text": "function A, which might\ncall another function", "start": 3594.22, "duration": 1.875}, {"text": "B. Those two functions might\nwant to use the same registers.", "start": 3596.095, "duration": 4.575}, {"text": "So who's responsible\nfor making sure", "start": 3600.67, "duration": 2.91}, {"text": "that if function B operates\non the same registers as A,", "start": 3603.58, "duration": 4.14}, {"text": "that when B is done,\nA doesn't end up", "start": 3607.72, "duration": 2.07}, {"text": "with corrupted state\nin its registers?", "start": 3609.79, "duration": 3.42}, {"text": "Well, they're two\ndifferent strategies", "start": 3613.21, "duration": 1.613}, {"text": "that could be adopted.", "start": 3614.823, "duration": 0.917}, {"text": "One is to have the caller\nsave off the register", "start": 3615.74, "duration": 4.02}, {"text": "state before invoking a call.", "start": 3619.76, "duration": 2.65}, {"text": "But that has some downsides.", "start": 3622.41, "duration": 2.24}, {"text": "The caller might waste\nwork, saying, well,", "start": 3624.65, "duration": 2.1}, {"text": "I have to save all of this\nregister state in case", "start": 3626.75, "duration": 3.09}, {"text": "the function I'm calling\nwants to use those registers.", "start": 3629.84, "duration": 3.083}, {"text": "If the calling function\ndoesn't use those registers,", "start": 3632.923, "duration": 2.167}, {"text": "that was a bunch of wasted work.", "start": 3635.09, "duration": 2.94}, {"text": "So on the other side,\nyou might say, well,", "start": 3638.03, "duration": 2.17}, {"text": "let's just have the callee\nsave all that registered state.", "start": 3640.2, "duration": 3.455}, {"text": "But that could waste\nwork if the callee", "start": 3643.655, "duration": 2.038}, {"text": "is going to save off register\nstate that the caller wasn't", "start": 3645.693, "duration": 2.417}, {"text": "using.", "start": 3648.11, "duration": 0.912}, {"text": "So if the callee\nsays, well, I want", "start": 3649.022, "duration": 1.458}, {"text": "to use all these registers.", "start": 3650.48, "duration": 1.125}, {"text": "I don't know what the\ncalling function used,", "start": 3651.605, "duration": 2.895}, {"text": "so I'm just going to push\neverything on the stack, that", "start": 3654.5, "duration": 2.43}, {"text": "could be a lot of wasted work.", "start": 3656.93, "duration": 2.64}, {"text": "So what does the x86\ncalling convention", "start": 3659.57, "duration": 2.58}, {"text": "do, if you had to guess?", "start": 3662.15, "duration": 2.378}, {"text": "Yeah?", "start": 3667.92, "duration": 0.5}, {"text": "STUDENT: [INAUDIBLE]", "start": 3668.42, "duration": 6.053}, {"text": "TAO SCHARDL: That's\nexactly right.", "start": 3674.473, "duration": 1.417}, {"text": "It does a little bit of both.", "start": 3675.89, "duration": 1.4}, {"text": "It specifies some\nof the registers", "start": 3677.29, "duration": 2.16}, {"text": "as being callee-saved registers,\nand the rest of the registers", "start": 3679.45, "duration": 3.66}, {"text": "are caller-saved registers.", "start": 3683.11, "duration": 2.04}, {"text": "And so the caller will\nbe responsible for saving", "start": 3685.15, "duration": 3.03}, {"text": "some stuff.", "start": 3688.18, "duration": 0.99}, {"text": "The callee will be responsible\nfor saving other stuff.", "start": 3689.17, "duration": 3.9}, {"text": "And if either of those\nfunctions doesn't", "start": 3693.07, "duration": 2.31}, {"text": "need one of those registers,\nthen it can avoid wasted work.", "start": 3695.38, "duration": 5.016}, {"text": "In x86-64, in this\ncalling convention,", "start": 3700.396, "duration": 3.984}, {"text": "turns out that the rbx, rbp,\nand r12 through r15 registers", "start": 3704.38, "duration": 3.6}, {"text": "are all callee saved, and\nthe rest of the registers", "start": 3707.98, "duration": 2.4}, {"text": "are caller saved.", "start": 3710.38, "duration": 1.38}, {"text": "In particular, the\nC linkage defined", "start": 3711.76, "duration": 2.94}, {"text": "by this calling convention\nfor all the registers", "start": 3714.7, "duration": 3.16}, {"text": "looks something like this.", "start": 3717.86, "duration": 1.83}, {"text": "And that identifies\nlots of stuff.", "start": 3719.69, "duration": 2.92}, {"text": "It identifies a register for\nstoring the return value,", "start": 3722.61, "duration": 3.19}, {"text": "registers for storing a\nbunch of the arguments,", "start": 3725.8, "duration": 2.55}, {"text": "caller-save registers,\ncallee-saved registers,", "start": 3728.35, "duration": 3.51}, {"text": "a register just for linking.", "start": 3731.86, "duration": 2.28}, {"text": "I don't expect you to\nmemorize this in 12 seconds.", "start": 3734.14, "duration": 3.99}, {"text": "And I think on\nany quiz-- well, I", "start": 3738.13, "duration": 2.4}, {"text": "won't say what the course app\nwill do on quizzes this year.", "start": 3740.53, "duration": 3.666}, {"text": "STUDENT: [INAUDIBLE] everyone.", "start": 3744.196, "duration": 1.364}, {"text": "TAO SCHARDL: Yeah, OK,\nwell, there you go.", "start": 3745.56, "duration": 1.75}, {"text": "So you'll have\nthese slides later.", "start": 3747.31, "duration": 2.22}, {"text": "You can practice\nmemorizing them.", "start": 3749.53, "duration": 1.38}, {"text": "Not sure on this slide.", "start": 3754.55, "duration": 1.02}, {"text": "There are a couple\nother registers", "start": 3755.57, "duration": 1.68}, {"text": "that are used for saving\nfunction arguments and return", "start": 3757.25, "duration": 3.57}, {"text": "values.", "start": 3760.82, "duration": 1.39}, {"text": "And, in particular, whenever\nyou're passing floating point", "start": 3762.21, "duration": 2.78}, {"text": "stuff around, the xmm\nregister 0 through 7", "start": 3764.99, "duration": 3.39}, {"text": "are used to deal with those\nfloating point values.", "start": 3768.38, "duration": 4.3}, {"text": "Cool.", "start": 3772.68, "duration": 0.5}, {"text": "So we have strategies for\nmaintaining the stack.", "start": 3773.18, "duration": 2.79}, {"text": "We have strategies for\nmaintaining register states.", "start": 3775.97, "duration": 4.2}, {"text": "But we still have\nthe situation where", "start": 3780.17, "duration": 2.4}, {"text": "functions may want\nto use overlapping", "start": 3782.57, "duration": 2.55}, {"text": "parts of stack memory.", "start": 3785.12, "duration": 1.557}, {"text": "And so we need to coordinate how\nall those functions are going", "start": 3786.677, "duration": 2.583}, {"text": "to use the stack memory itself.", "start": 3789.26, "duration": 4.06}, {"text": "This is a bit hard to describe.", "start": 3793.32, "duration": 1.32}, {"text": "The cleanest way I know\ndescribe it is just", "start": 3794.64, "duration": 2.29}, {"text": "to work through an example.", "start": 3796.93, "duration": 2.1}, {"text": "So here's the setup.", "start": 3799.03, "duration": 1.68}, {"text": "Let's imagine that we\nhave some function A that", "start": 3800.71, "duration": 2.57}, {"text": "is called of\nfunction B. And we're", "start": 3803.28, "duration": 2.01}, {"text": "in the midst of\nexecuting function B,", "start": 3805.29, "duration": 2.09}, {"text": "and now, function B is about\nto call some other function C.", "start": 3807.38, "duration": 6.14}, {"text": "As we mentioned before, B\nhas a frame all to itself.", "start": 3813.52, "duration": 4.282}, {"text": "And that frame contains\na whole bunch of stuff.", "start": 3817.802, "duration": 1.958}, {"text": "It contains arguments\nthat A passed to B.", "start": 3819.76, "duration": 2.4}, {"text": "It contains a return address.", "start": 3822.16, "duration": 1.65}, {"text": "It contains a base pointer.", "start": 3823.81, "duration": 2.1}, {"text": "It contains some\nlocal variables.", "start": 3825.91, "duration": 1.77}, {"text": "And because B is\nabout to call C,", "start": 3827.68, "duration": 1.77}, {"text": "it's also going to contain\nsome data for arguments", "start": 3829.45, "duration": 2.94}, {"text": "that B will pass to C.", "start": 3832.39, "duration": 3.9}, {"text": "So that's our setup.", "start": 3836.29, "duration": 1.53}, {"text": "We have one function\nready to call another.", "start": 3837.82, "duration": 4.25}, {"text": "Let's take a look at\nhow this stack memory", "start": 3842.07, "duration": 1.75}, {"text": "is organized first.", "start": 3843.82, "duration": 2.81}, {"text": "So at the top, we have what's\ncalled a linkage block.", "start": 3846.63, "duration": 3.12}, {"text": "And in this linkage\nblock, this is the region", "start": 3849.75, "duration": 2.917}, {"text": "of stack memory,\nwhere function B will", "start": 3852.667, "duration": 1.583}, {"text": "access non-register arguments\nfrom its caller, function A.", "start": 3854.25, "duration": 5.15}, {"text": "It will access these\nby indexing off", "start": 3859.4, "duration": 2.62}, {"text": "of the base pointer, rbp,\nusing positive offsets.", "start": 3862.02, "duration": 2.94}, {"text": "Again, the stack grows down.", "start": 3864.96, "duration": 1.89}, {"text": "B will also have a\nblock of stack space", "start": 3872.1, "duration": 3.04}, {"text": "after the linkage block\nand return address and bass", "start": 3875.14, "duration": 3.12}, {"text": "pointer.", "start": 3878.26, "duration": 0.84}, {"text": "It will have a region of its\nframe for local variables,", "start": 3879.1, "duration": 3.09}, {"text": "and it can access\nthose local variables", "start": 3882.19, "duration": 1.92}, {"text": "by indexing off of rbp in\nthe negative direction.", "start": 3884.11, "duration": 3.63}, {"text": "Stack grows down.", "start": 3887.74, "duration": 1.68}, {"text": "If you don't have anything\nelse, stack grows down.", "start": 3889.42, "duration": 2.22}, {"text": "Now B is about to\ncall a function C,", "start": 3895.35, "duration": 3.59}, {"text": "and we want to see how\nall of this unfolds.", "start": 3898.94, "duration": 3.8}, {"text": "So before calling C, B is going\nto place non-register arguments", "start": 3902.74, "duration": 4.36}, {"text": "for C on to a reserved linkage\nblock in its own stack memory", "start": 3907.1, "duration": 6.63}, {"text": "below its local variables.", "start": 3913.73, "duration": 1.47}, {"text": "And it will access\nthose by indexing rbp", "start": 3917.75, "duration": 1.78}, {"text": "with negative offsets.", "start": 3919.53, "duration": 2.9}, {"text": "So those arguments\nfrom B to its callers", "start": 3922.43, "duration": 2.15}, {"text": "will specify those to be\narguments from B to C. And then", "start": 3924.58, "duration": 4.412}, {"text": "what's going to happen?", "start": 3928.992, "duration": 0.958}, {"text": "Then B is going to call\nC. And as we saw before,", "start": 3929.95, "duration": 3.18}, {"text": "the call instruction saves\noff the return address", "start": 3933.13, "duration": 2.91}, {"text": "onto the stack, and\nthen it branches", "start": 3936.04, "duration": 2.88}, {"text": "control to the entry\npoint of function C.", "start": 3938.92, "duration": 6.7}, {"text": "When the function C\nstarts, it's going", "start": 3945.62, "duration": 1.8}, {"text": "to execute what's called\nthe function prologue.", "start": 3947.42, "duration": 2.44}, {"text": "And the function prologue\nconsists of a couple of steps.", "start": 3949.86, "duration": 2.73}, {"text": "First, it's going\nto save off the base", "start": 3952.59, "duration": 1.85}, {"text": "pointer for B's stack frame.", "start": 3954.44, "duration": 2.43}, {"text": "So it'll just squirrel away the\nvalue of rbp onto the stack.", "start": 3956.87, "duration": 5.03}, {"text": "Then it's going to\nset rbp equal to rsp,", "start": 3961.9, "duration": 2.71}, {"text": "because we're now\nentering a brand new frame", "start": 3964.61, "duration": 2.13}, {"text": "for the invocation of C.", "start": 3966.74, "duration": 4.0}, {"text": "And then C can go ahead\nand allocate the space", "start": 3970.74, "duration": 2.88}, {"text": "that it needs on the stack.", "start": 3973.62, "duration": 1.84}, {"text": "This will be space that C needs\nfor its own local variables,", "start": 3975.46, "duration": 3.53}, {"text": "as well as space that C will\nuse for any linkage blocks", "start": 3978.99, "duration": 4.41}, {"text": "that it creates for the\nthings that it calls.", "start": 3983.4, "duration": 3.12}, {"text": "Now there is one\ncommon optimization", "start": 3990.94, "duration": 1.95}, {"text": "that the compiler will\nattempt to perform.", "start": 3992.89, "duration": 2.67}, {"text": "If a function never needs to\nperform stack allocations,", "start": 3995.56, "duration": 5.16}, {"text": "except to handle\nthese function calls--", "start": 4000.72, "duration": 2.59}, {"text": "in other words, if the\ndifference between rbp and rsp", "start": 4003.31, "duration": 3.32}, {"text": "is a compile time\nconstant, then the compiler", "start": 4006.63, "duration": 2.97}, {"text": "might go ahead and\njust get rid of rbp", "start": 4009.6, "duration": 3.48}, {"text": "and do all of the indexing\nbased off the stack pointer rsp.", "start": 4013.08, "duration": 4.503}, {"text": "And the reason it'll do\nthat is because, if it", "start": 4017.583, "duration": 1.917}, {"text": "could get one more general\npurpose register out", "start": 4019.5, "duration": 2.67}, {"text": "of our rbp, well, now,\nrpb is general purpose.", "start": 4022.17, "duration": 3.69}, {"text": "And it has one extra\nregister to use", "start": 4025.86, "duration": 1.68}, {"text": "to do all of its calculations.", "start": 4027.54, "duration": 1.86}, {"text": "Reading from a register\ntakes some time.", "start": 4029.4, "duration": 3.03}, {"text": "Reading from even L1 cache takes\nsignificantly more, I think,", "start": 4032.43, "duration": 3.84}, {"text": "four times that amount.", "start": 4036.27, "duration": 3.33}, {"text": "And so this is a\ncommon optimization", "start": 4039.6, "duration": 1.5}, {"text": "that the compiler\nwill want to perform.", "start": 4041.1, "duration": 2.32}, {"text": "Now, turns out that\nthere's a lot more", "start": 4043.42, "duration": 2.22}, {"text": "to the calling\nconvention than just", "start": 4045.64, "duration": 1.68}, {"text": "what's shown on these slides.", "start": 4047.32, "duration": 1.83}, {"text": "We're not going to go\nthrough that today.", "start": 4049.15, "duration": 2.16}, {"text": "If you'd like to\nhave more details,", "start": 4051.31, "duration": 2.28}, {"text": "there's a nice document--\nthe System V ABI--", "start": 4053.59, "duration": 3.36}, {"text": "that describes the whole\ncalling convention.", "start": 4056.95, "duration": 3.355}, {"text": "Any questions so far?", "start": 4060.305, "duration": 0.875}, {"text": "All right, so let's wrap all\nthis up with a final case", "start": 4066.73, "duration": 4.09}, {"text": "study, and let's take a look\nat how all these components fit", "start": 4070.82, "duration": 3.12}, {"text": "together.", "start": 4073.94, "duration": 0.94}, {"text": "When we're\ntranslating a simple C", "start": 4074.88, "duration": 1.76}, {"text": "function to compute\nFibonacci numbers", "start": 4076.64, "duration": 2.34}, {"text": "all the way down to assembly.", "start": 4078.98, "duration": 2.59}, {"text": "And as you've been\ndescribing this whole time,", "start": 4081.57, "duration": 2.22}, {"text": "we're going to take\nthis in two steps.", "start": 4083.79, "duration": 2.62}, {"text": "Let's describe our\nstarting point, fib.c.", "start": 4086.41, "duration": 2.15}, {"text": "This should be basically no\nsurprise to you at this point.", "start": 4088.56, "duration": 2.97}, {"text": "This is a C function fib, which\ncomputes the nth Fibonacci", "start": 4091.53, "duration": 3.87}, {"text": "number in one of the worst\ncomputational ways possible,", "start": 4095.4, "duration": 4.919}, {"text": "it turns out.", "start": 4100.319, "duration": 0.811}, {"text": "But it computes the\nnth Fibonacci number", "start": 4101.13, "duration": 1.8}, {"text": "f of n recursively\nusing the formula f of n", "start": 4102.93, "duration": 3.27}, {"text": "is equal to n when\nn is either 0 or 1.", "start": 4106.2, "duration": 2.88}, {"text": "Or it computes f of n\nminus 1 and f of n minus 2", "start": 4109.08, "duration": 4.56}, {"text": "and takes their sum.", "start": 4113.64, "duration": 1.427}, {"text": "This is an exponential\ntime algorithm", "start": 4115.067, "duration": 1.542}, {"text": "to compute Fibonacci numbers.", "start": 4116.609, "duration": 2.051}, {"text": "I would say, don't\nrun this at home,", "start": 4118.66, "duration": 1.5}, {"text": "except, invariably,\nyou'll run this at home.", "start": 4120.16, "duration": 2.119}, {"text": "There are much faster algorithms\nto compute Fibonacci numbers.", "start": 4122.279, "duration": 3.25}, {"text": "But this is good enough\nfor a didactic example.", "start": 4125.529, "duration": 2.514}, {"text": "We're not really worried\nabout how fast can we", "start": 4128.043, "duration": 1.917}, {"text": "compute fib today.", "start": 4129.96, "duration": 2.79}, {"text": "Now the C code fib.c\nis even simpler", "start": 4132.75, "duration": 3.09}, {"text": "than the recurrence implies.", "start": 4135.84, "duration": 1.83}, {"text": "We're not even going to bother\nchecking that the input value", "start": 4137.67, "duration": 2.699}, {"text": "n is some non-negative value.", "start": 4140.369, "duration": 2.461}, {"text": "What we're going to do is say,\nlook, if n is less than 2,", "start": 4142.83, "duration": 2.94}, {"text": "go ahead and return\nthat value of n.", "start": 4145.77, "duration": 1.799}, {"text": "Otherwise, do the\nrecursive thing.", "start": 4147.569, "duration": 4.141}, {"text": "We've already seen this\ngo a couple of times.", "start": 4151.71, "duration": 2.37}, {"text": "Everyone good so far?", "start": 4154.08, "duration": 1.109}, {"text": "Any questions on\nthese three lines?", "start": 4155.189, "duration": 2.907}, {"text": "Great.", "start": 4158.096, "duration": 2.294}, {"text": "All right, so let's\ntranslate fib.c into fib.ll.", "start": 4160.39, "duration": 3.5}, {"text": "We've seen a lot of these\npieces in lectures so far.", "start": 4163.89, "duration": 4.648}, {"text": "And here, we've just\nrewritten fib.c a little bit", "start": 4168.538, "duration": 2.042}, {"text": "to make drawing all the\nlines a little bit simpler.", "start": 4170.58, "duration": 5.23}, {"text": "So here, we have the\nC code for fib.c.", "start": 4175.81, "duration": 2.32}, {"text": "The corresponding LLVM\nIR looks like this.", "start": 4178.13, "duration": 3.82}, {"text": "And as we could guess from\nlooking at the code for fib.c,", "start": 4181.95, "duration": 4.29}, {"text": "we have this\nconditional and then", "start": 4186.24, "duration": 3.51}, {"text": "two different things\nthat might occur based on", "start": 4189.75, "duration": 2.49}, {"text": "whether or not n is less than 2.", "start": 4192.24, "duration": 2.07}, {"text": "And so we end up with three\nbasic blocks within the LLVM", "start": 4194.31, "duration": 2.73}, {"text": "IR.", "start": 4197.04, "duration": 1.69}, {"text": "The first basic block\nchecks event is less than 2", "start": 4198.73, "duration": 2.52}, {"text": "and then branches\nbased on that result.", "start": 4201.25, "duration": 2.55}, {"text": "And we've seen how all\nthat works previously.", "start": 4203.8, "duration": 3.486}, {"text": "If n happens to be less than\n2, then the consequent--", "start": 4207.286, "duration": 3.564}, {"text": "the true case of that branch--", "start": 4210.85, "duration": 2.56}, {"text": "ends up showing up at the end.", "start": 4213.41, "duration": 1.25}, {"text": "And all it does is it\nreturns the input value,", "start": 4214.66, "duration": 2.5}, {"text": "which is stored in register 0.", "start": 4217.16, "duration": 2.74}, {"text": "Otherwise, it's going\nto do some straight line", "start": 4219.9, "duration": 2.91}, {"text": "code to compute fib of n\nminus 1 and fib of n minus 2.", "start": 4222.81, "duration": 5.15}, {"text": "It will take those return\nvalues, add them together,", "start": 4227.96, "duration": 3.28}, {"text": "return that result. That's\nthe end Fibonacci number.", "start": 4231.24, "duration": 4.57}, {"text": "So that gets us from\nC code to LLVM IR.", "start": 4235.81, "duration": 3.025}, {"text": "Questions about that?", "start": 4238.835, "duration": 0.875}, {"text": "All right, fib n minus 1, fib\nn minus 2, add them, return it.", "start": 4245.13, "duration": 3.83}, {"text": "We're good.", "start": 4248.96, "duration": 0.8}, {"text": "OK, so one last step.", "start": 4249.76, "duration": 1.74}, {"text": "We want to compile LLVM IR\nall the way down to assembly.", "start": 4251.5, "duration": 3.42}, {"text": "As I alluded to before,\nroughly speaking,", "start": 4254.92, "duration": 3.45}, {"text": "the structure of the LLVM\nIR resembles the structure", "start": 4258.37, "duration": 3.18}, {"text": "of the assembly code.", "start": 4261.55, "duration": 1.23}, {"text": "There's just extra stuff\nin the assembly code.", "start": 4262.78, "duration": 3.49}, {"text": "And so we're going to translate\nthe LLVM IR, more or less,", "start": 4266.27, "duration": 3.36}, {"text": "line by line into\nthe assembly code", "start": 4269.63, "duration": 2.33}, {"text": "and see where that\nextra stuff shows up.", "start": 4271.96, "duration": 2.218}, {"text": "So at the beginning,\nwe have a function.", "start": 4277.6, "duration": 1.67}, {"text": "We were defining a function fib.", "start": 4279.27, "duration": 1.95}, {"text": "And in the assembly\ncode, we make", "start": 4281.22, "duration": 2.01}, {"text": "sure that fib is a globally\naccessible function using", "start": 4283.23, "duration": 5.13}, {"text": "some assembler directives,\nthe globlfib directive.", "start": 4288.36, "duration": 4.35}, {"text": "We do an alignment to\nmake sure that function", "start": 4292.71, "duration": 2.0}, {"text": "lies in a nice location\nin the instruction memory,", "start": 4294.71, "duration": 3.12}, {"text": "and then we declare the symbol\nfib, which just defines where", "start": 4297.83, "duration": 7.15}, {"text": "this function lives in memory.", "start": 4304.98, "duration": 3.62}, {"text": "All right, let's take a\nlook at this assembly.", "start": 4308.6, "duration": 4.78}, {"text": "The next thing that\nwe see here are", "start": 4313.38, "duration": 1.95}, {"text": "these two instructions--\na push queue or rbp", "start": 4315.33, "duration": 3.06}, {"text": "and a movq of rsp, rbp.", "start": 4318.39, "duration": 3.8}, {"text": "Who can tell me what these do?", "start": 4322.19, "duration": 1.316}, {"text": "Yes?", "start": 4332.44, "duration": 1.226}, {"text": "STUDENT: Push the base\n[INAUDIBLE] on the stack,", "start": 4333.666, "duration": 2.094}, {"text": "then [INAUDIBLE].", "start": 4335.76, "duration": 2.83}, {"text": "TAO SCHARDL: Cool.", "start": 4338.59, "duration": 0.75}, {"text": "Does that sound like a familiar\nthing we described earlier", "start": 4339.34, "duration": 4.41}, {"text": "in this lecture?", "start": 4343.75, "duration": 2.41}, {"text": "STUDENT: the calling convention?", "start": 4346.16, "duration": 1.76}, {"text": "TAO SCHARDL: Yep, it's part\nof the calling convention.", "start": 4347.92, "duration": 2.73}, {"text": "This is part of the\nfunction prologue.", "start": 4350.65, "duration": 1.74}, {"text": "Save off rpb, and then\nset rbp equal to rsp.", "start": 4352.39, "duration": 5.25}, {"text": "So we already have a\ncouple extra instructions", "start": 4357.64, "duration": 2.12}, {"text": "that weren't in the LLVM IR,\nbut must be in the assembly", "start": 4359.76, "duration": 2.73}, {"text": "in order to coordinate everyone.", "start": 4362.49, "duration": 2.55}, {"text": "OK, so now, we have\nthese two instructions.", "start": 4365.04, "duration": 4.21}, {"text": "We're now going to push a couple\nmore registers onto the stack.", "start": 4369.25, "duration": 3.73}, {"text": "So why does the\nassembly do this?", "start": 4372.98, "duration": 2.98}, {"text": "Any guesses?", "start": 4375.96, "duration": 2.806}, {"text": "Yeah?", "start": 4378.766, "duration": 0.5}, {"text": "STUDENT: Callee-saved registers?", "start": 4379.266, "duration": 1.384}, {"text": "TAO SCHARDL:\nCallee-saved registers--", "start": 4380.65, "duration": 3.49}, {"text": "yes, callee-saved registers.", "start": 4384.14, "duration": 2.94}, {"text": "The fib routing,\nwe're guessing, will", "start": 4387.08, "duration": 2.48}, {"text": "want to use r14 rbx\nduring this calculation.", "start": 4389.56, "duration": 3.54}, {"text": "And so if there are interesting\nvalues in those registers,", "start": 4393.1, "duration": 3.21}, {"text": "save them off onto the stack.", "start": 4396.31, "duration": 1.938}, {"text": "Presumably, we'll\nrestore them later.", "start": 4398.248, "duration": 1.542}, {"text": "Then we have this move\ninstruction for rdi into rbx.", "start": 4402.85, "duration": 7.748}, {"text": "This requires a little\nbit more arcane knowledge,", "start": 4410.598, "duration": 2.042}, {"text": "but any guesses as\nto what this is for?", "start": 4412.64, "duration": 2.72}, {"text": "STUDENT: rdi is probably the\nargument to the function.", "start": 4422.332, "duration": 3.856}, {"text": "TAO SCHARDL: rdi is the\nargument to the function.", "start": 4426.188, "duration": 2.042}, {"text": "Exactly.", "start": 4428.23, "duration": 0.66}, {"text": "That's the arcane knowledge.", "start": 4428.89, "duration": 1.47}, {"text": "So this is implicit\nfrom the assembly, which", "start": 4430.36, "duration": 4.5}, {"text": "is why you either have to\nmemorize that huge chart of GPR", "start": 4434.86, "duration": 6.44}, {"text": "C linkage nonsense.", "start": 4441.3, "duration": 2.56}, {"text": "But all this operation\ndoes is it takes whatever", "start": 4443.86, "duration": 2.79}, {"text": "that argument was, and it's\nsquirrels it away into the rbx", "start": 4446.65, "duration": 3.52}, {"text": "register for some purpose that\nwe'll find out about soon.", "start": 4450.17, "duration": 4.655}, {"text": "Then we have this instruction,\nand this corresponds", "start": 4457.73, "duration": 3.54}, {"text": "to the highlighted\ninstruction on the left,", "start": 4461.27, "duration": 2.46}, {"text": "in case that gives any hints.", "start": 4463.73, "duration": 1.86}, {"text": "What does this instruction do?", "start": 4465.59, "duration": 3.61}, {"text": "STUDENT: [INAUDIBLE].", "start": 4469.2, "duration": 0.918}, {"text": "TAO SCHARDL: Sorry.", "start": 4470.118, "duration": 0.792}, {"text": "STUDENT: It calculates whether\nn is small [INAUDIBLE]..", "start": 4470.91, "duration": 3.145}, {"text": "TAO SCHARDL: Correct.", "start": 4474.055, "duration": 0.875}, {"text": "It evaluates the predicate.", "start": 4474.93, "duration": 2.093}, {"text": "It's just going\nto do a comparison", "start": 4477.023, "duration": 1.417}, {"text": "between the value of n and\nthe literal value of 2,", "start": 4478.44, "duration": 6.34}, {"text": "comparing against 2.", "start": 4484.78, "duration": 3.17}, {"text": "So based on the result of that\ncomparison, if you recall,", "start": 4487.95, "duration": 2.97}, {"text": "last lecture, the\nresults of a comparison", "start": 4490.92, "duration": 3.03}, {"text": "will set some bits in this\nimplicit EFLAGS flags register,", "start": 4493.95, "duration": 4.2}, {"text": "or RFLAGS register.", "start": 4498.15, "duration": 2.07}, {"text": "And based on the\nsetting of those bits,", "start": 4500.22, "duration": 3.3}, {"text": "the various conditional jumps\nthat occur next in the code", "start": 4503.52, "duration": 3.57}, {"text": "will have varying behavior.", "start": 4507.09, "duration": 2.77}, {"text": "So in case the comparison\nresults to false-- if n is,", "start": 4509.86, "duration": 2.9}, {"text": "in fact, greater\nthan or equal to 2--", "start": 4512.76, "duration": 2.13}, {"text": "then the next instruction is\njge, will jump to the label", "start": 4514.89, "duration": 5.9}, {"text": "LBB0 underscore 1.", "start": 4520.79, "duration": 1.99}, {"text": "You can tell already that\nreading assembly is super-fun.", "start": 4522.78, "duration": 2.351}, {"text": "Now that's a conditional jump.", "start": 4528.9, "duration": 3.47}, {"text": "And it's possible that the\nsetting of bits in RFLAGS", "start": 4532.37, "duration": 4.47}, {"text": "doesn't evaluate true\nfor that condition code.", "start": 4536.84, "duration": 5.275}, {"text": "And so it's possible that the\ncode will just fall through", "start": 4542.115, "duration": 2.375}, {"text": "pass this jge instruction\nand, instead, execute", "start": 4544.49, "duration": 2.91}, {"text": "these operations.", "start": 4547.4, "duration": 1.19}, {"text": "And these operations correspond\nto the true side of the LLVM IR", "start": 4548.59, "duration": 3.67}, {"text": "branch operation.", "start": 4552.26, "duration": 1.17}, {"text": "When n is less than 2,\nthis will move n into rax,", "start": 4553.43, "duration": 4.92}, {"text": "and then jumped to\nthe label LBB03.", "start": 4558.35, "duration": 3.8}, {"text": "Any guesses as to why\nit moves n into our rax?", "start": 4562.15, "duration": 2.08}, {"text": "Yeah?", "start": 4571.236, "duration": 0.958}, {"text": "STUDENT: That's\nthe return value.", "start": 4572.194, "duration": 1.916}, {"text": "TAO SCHARDL: That's a\nreturn value-- exactly.", "start": 4574.11, "duration": 2.4}, {"text": "If it can return a\nvalue through registers,", "start": 4576.51, "duration": 2.04}, {"text": "it will return it through rax.", "start": 4578.55, "duration": 2.23}, {"text": "Very good.", "start": 4580.78, "duration": 2.79}, {"text": "So now, we see this label LBBO1.", "start": 4583.57, "duration": 2.28}, {"text": "That's the label,\nas we saw before,", "start": 4585.85, "duration": 1.74}, {"text": "for the false side\nof the LLVM branch.", "start": 4587.59, "duration": 1.91}, {"text": "And the first thing in that\nlabel is this operation--", "start": 4592.3, "duration": 3.4}, {"text": "leaq minus 1 of rbx rdi.", "start": 4595.7, "duration": 3.83}, {"text": "Any guesses as to\nwhat that's for?", "start": 4599.53, "duration": 1.59}, {"text": "The corresponding LLVM IR\nis highlighted on the left,", "start": 4601.12, "duration": 2.31}, {"text": "by the way.", "start": 4603.43, "duration": 2.31}, {"text": "The lea instruction means\nload-effective address.", "start": 4605.74, "duration": 4.59}, {"text": "All lea does is an\naddress calculation.", "start": 4610.33, "duration": 3.27}, {"text": "But something that\ncompilers really like to do", "start": 4613.6, "duration": 2.61}, {"text": "is exploit the lea instruction\nto do simple integer arithmetic", "start": 4616.21, "duration": 4.71}, {"text": "as long as that integer\narithmetic fits with the things", "start": 4620.92, "duration": 3.42}, {"text": "that lea can actually compute.", "start": 4624.34, "duration": 2.64}, {"text": "And so all this\ninstruction is doing", "start": 4626.98, "duration": 1.65}, {"text": "is adding negative 1 to rbx.", "start": 4628.63, "duration": 2.79}, {"text": "And rbx, as we recall,\nstored the input value of n.", "start": 4631.42, "duration": 4.35}, {"text": "And it will store\nthe result into rdi.", "start": 4635.77, "duration": 1.83}, {"text": "That's all that this\ninstruction does.", "start": 4640.97, "duration": 3.71}, {"text": "So it computes the negative\n1, stores it into rbi.", "start": 4644.68, "duration": 4.285}, {"text": "How about this instruction?", "start": 4648.965, "duration": 1.125}, {"text": "This one should be easier.", "start": 4650.09, "duration": 1.631}, {"text": "STUDENT: For the previous one,\nhow did you get [INAUDIBLE]??", "start": 4651.721, "duration": 6.383}, {"text": "I'm familiar with [INAUDIBLE]\nbecause [INAUDIBLE]..", "start": 4658.104, "duration": 3.437}, {"text": "But is there no add\nimmediate instruction in x86?", "start": 4661.541, "duration": 4.564}, {"text": "TAO SCHARDL: Is there no\nadd immediate instruction?", "start": 4666.105, "duration": 2.125}, {"text": "So you can do an add\ninstruction in x86", "start": 4668.23, "duration": 2.94}, {"text": "and specify an immediate value.", "start": 4671.17, "duration": 1.86}, {"text": "The advantage of\nthis instruction", "start": 4673.03, "duration": 2.19}, {"text": "is that you can specify a\ndifferent destination operand.", "start": 4675.22, "duration": 4.5}, {"text": "That's why compilers\nlike to use it.", "start": 4679.72, "duration": 2.61}, {"text": "More arcane knowledge.", "start": 4682.33, "duration": 1.95}, {"text": "I don't blame you if\nthis kind of thing", "start": 4684.28, "duration": 2.82}, {"text": "turns you off from reading x86.", "start": 4687.1, "duration": 1.628}, {"text": "It certainly turns me\noff from reading x86.", "start": 4688.728, "duration": 1.792}, {"text": "So this instruction should\nbe a little bit easier.", "start": 4693.25, "duration": 2.1}, {"text": "Guess as to why it does?", "start": 4695.35, "duration": 1.05}, {"text": "Feel free to shout\nit out, because we're", "start": 4696.4, "duration": 1.667}, {"text": "running a little short on time.", "start": 4698.067, "duration": 1.783}, {"text": "STUDENT: Calls a function.", "start": 4699.85, "duration": 1.26}, {"text": "TAO SCHARDL: Calls a function.", "start": 4701.11, "duration": 0.61}, {"text": "What function?", "start": 4701.72, "duration": 0.41}, {"text": "STUDENT: Call fib.", "start": 4702.13, "duration": 0.84}, {"text": "TAO SCHARDL: Call fib, exactly.", "start": 4702.97, "duration": 1.83}, {"text": "Great.", "start": 4704.8, "duration": 1.02}, {"text": "Then we have this\nmove operation,", "start": 4705.82, "duration": 1.56}, {"text": "which moves rax into r14.", "start": 4707.38, "duration": 2.43}, {"text": "Any guess as to why we do this?", "start": 4709.81, "duration": 1.382}, {"text": "Say it.", "start": 4714.39, "duration": 0.74}, {"text": "STUDENT: Get the\nresult of the call.", "start": 4715.13, "duration": 2.153}, {"text": "TAO SCHARDL: Get the\nresult of the call.", "start": 4717.283, "duration": 1.667}, {"text": "So rax is going to store the\nreturn value of that call.", "start": 4718.95, "duration": 3.917}, {"text": "And we're just going to\nsquirrel it away into r14.", "start": 4722.867, "duration": 2.083}, {"text": "Question?", "start": 4724.95, "duration": 0.791}, {"text": "STUDENT: [INAUDIBLE]", "start": 4725.741, "duration": 2.197}, {"text": "TAO SCHARDL: Sorry.", "start": 4727.938, "duration": 0.792}, {"text": "STUDENT: It stores [INAUDIBLE]?", "start": 4728.73, "duration": 2.757}, {"text": "TAO SCHARDL: It'll actually\nstore the whole return value", "start": 4731.487, "duration": 2.333}, {"text": "from the previous call.", "start": 4733.82, "duration": 1.695}, {"text": "STUDENT: [INAUDIBLE]", "start": 4735.515, "duration": 4.323}, {"text": "TAO SCHARDL: It's part\nof that result. This", "start": 4739.838, "duration": 1.792}, {"text": "will be a component in\ncomputing the return", "start": 4741.63, "duration": 2.46}, {"text": "value for this call of fib.", "start": 4744.09, "duration": 1.26}, {"text": "You're exactly right.", "start": 4745.35, "duration": 1.23}, {"text": "But we need to save\noff this result,", "start": 4746.58, "duration": 2.43}, {"text": "because we're going to do, as\nwe see, another call to fib.", "start": 4749.01, "duration": 3.39}, {"text": "And that's going to clobber rax.", "start": 4752.4, "duration": 3.34}, {"text": "Make sense?", "start": 4755.74, "duration": 1.9}, {"text": "Cool.", "start": 4757.64, "duration": 1.25}, {"text": "So rax stores the\nresult of the function.", "start": 4758.89, "duration": 2.1}, {"text": "Save it into r14.", "start": 4760.99, "duration": 0.91}, {"text": "Great.", "start": 4761.9, "duration": 0.5}, {"text": "Since we're running\nshort of time,", "start": 4765.55, "duration": 1.97}, {"text": "anyone want to tell\nme really quickly what", "start": 4767.52, "duration": 1.75}, {"text": "these instructions do?", "start": 4769.27, "duration": 1.65}, {"text": "Just a wild guess if you had to.", "start": 4770.92, "duration": 1.882}, {"text": "STUDENT: N minus 2", "start": 4777.562, "duration": 0.958}, {"text": "TAO SCHARDL: n minus 2.", "start": 4778.52, "duration": 1.74}, {"text": "Compute n minus 2 by\nthis addition operation.", "start": 4780.26, "duration": 2.6}, {"text": "Stash it into rdi.", "start": 4782.86, "duration": 3.39}, {"text": "And then you call\nfib on n minus 2.", "start": 4786.25, "duration": 2.85}, {"text": "And that will return the results\ninto rax, as we saw before.", "start": 4789.1, "duration": 5.64}, {"text": "So now, we do this operation.", "start": 4794.74, "duration": 1.25}, {"text": "Add r14 into rax.", "start": 4795.99, "duration": 1.83}, {"text": "And this does what?", "start": 4797.82, "duration": 2.142}, {"text": "STUDENT: Ends our last\nfunction return to what", "start": 4803.364, "duration": 3.402}, {"text": "was going off this one.", "start": 4806.766, "duration": 1.284}, {"text": "TAO SCHARDL: Exactly.", "start": 4808.05, "duration": 1.62}, {"text": "So rax stores the result of\nthe last function return.", "start": 4809.67, "duration": 2.87}, {"text": "Add it into r14, which\nis where we stashed", "start": 4812.54, "duration": 2.29}, {"text": "the result of fib of n minus 1.", "start": 4814.83, "duration": 2.698}, {"text": "Cool.", "start": 4817.528, "duration": 0.5}, {"text": "Then we have a label for\nthe true side of the branch.", "start": 4820.74, "duration": 4.75}, {"text": "This is the last pop\nquiz question I'll ask.", "start": 4825.49, "duration": 2.61}, {"text": "Pop quiz-- God, I didn't\neven intend that one.", "start": 4828.1, "duration": 4.41}, {"text": "Why do we do these\npop operations?", "start": 4832.51, "duration": 2.502}, {"text": "In the front.", "start": 4841.868, "duration": 0.542}, {"text": "STUDENT: To restore the register\nbefore exiting the stack frame?", "start": 4842.41, "duration": 2.95}, {"text": "TAO SCHARDL: Restore\nthe registers", "start": 4845.36, "duration": 1.67}, {"text": "before exiting the\nstack frame-- exactly.", "start": 4847.03, "duration": 3.06}, {"text": "In calling convention\nterms, that's", "start": 4850.09, "duration": 1.59}, {"text": "called the function epilogue.", "start": 4851.68, "duration": 2.31}, {"text": "And then finally, we return.", "start": 4853.99, "duration": 2.13}, {"text": "So that is how we get\nfrom C to assembly.", "start": 4859.46, "duration": 2.87}, {"text": "This is just a summary slide\nof everything we covered today.", "start": 4862.33, "duration": 5.61}, {"text": "We took the trip from C\nto assembly via LLVM IR.", "start": 4867.94, "duration": 4.35}, {"text": "And we saw how we can represent\nthings in a control flow graph", "start": 4872.29, "duration": 3.57}, {"text": "as basic blocks connected\nby control flow edges.", "start": 4875.86, "duration": 3.637}, {"text": "And then there's\nadditional complexity", "start": 4879.497, "duration": 1.583}, {"text": "when you get to the actual\nassembly, mostly to deal", "start": 4881.08, "duration": 2.67}, {"text": "with this calling invention.", "start": 4883.75, "duration": 2.01}, {"text": "That's all I have for you today.", "start": 4885.76, "duration": 1.54}, {"text": "Thanks for your time.", "start": 4887.3, "duration": 1.81}]