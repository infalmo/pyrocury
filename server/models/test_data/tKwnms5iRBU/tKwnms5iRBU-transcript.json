[{"text": "The following content is\nprovided under a Creative", "start": 0.07, "duration": 2.43}, {"text": "Commons license.", "start": 2.5, "duration": 1.519}, {"text": "Your support will help\nMIT OpenCourseWare", "start": 4.019, "duration": 2.341}, {"text": "continue to offer high quality\neducational resources for free.", "start": 6.36, "duration": 4.37}, {"text": "To make a donation or\nview additional materials", "start": 10.73, "duration": 2.6}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.33, "duration": 3.887}, {"text": "at ocw.mit.edu.", "start": 17.217, "duration": 0.625}, {"text": "ERIK DEMAINE: All right,\nlet's get started.", "start": 20.93, "duration": 2.26}, {"text": "Today, we have another cool\ngraph algorithm or problem.", "start": 23.19, "duration": 5.33}, {"text": "Actually, we'll\nhave two algorithms.", "start": 28.52, "duration": 2.91}, {"text": "The problem is called\nminimum spanning tree.", "start": 31.43, "duration": 2.92}, {"text": "You can probably guess from the\ntitle what it's trying to do.", "start": 34.35, "duration": 2.9}, {"text": "We'll see two\nalgorithms for doing it.", "start": 37.25, "duration": 1.74}, {"text": "Both of them are in the category\nof greedy algorithms, which", "start": 38.99, "duration": 3.21}, {"text": "is something we've\nseen a couple of times", "start": 42.2, "duration": 2.51}, {"text": "already in 6.046,\nstarting with lecture 1.", "start": 44.71, "duration": 4.25}, {"text": "This is the definition of\ngreedy algorithm from lecture 1,", "start": 48.96, "duration": 2.47}, {"text": "roughly.", "start": 51.43, "duration": 1.28}, {"text": "The idea is to always make\ngreedy choices, meaning", "start": 52.71, "duration": 4.14}, {"text": "the choice is locally best.", "start": 56.85, "duration": 2.28}, {"text": "For right now, it seems\nlike a good thing to do,", "start": 59.13, "duration": 3.23}, {"text": "but maybe in the future\nit will screw you over.", "start": 62.36, "duration": 4.18}, {"text": "And if you have a\ncorrect greedy algorithm,", "start": 66.54, "duration": 2.26}, {"text": "you prove that it\nwon't screw you over.", "start": 68.8, "duration": 2.1}, {"text": "So it's sort of like\nCookie Monster here, always", "start": 70.9, "duration": 2.5}, {"text": "locally seems like a good\nidea to eat another cookie,", "start": 73.4, "duration": 2.27}, {"text": "but maybe it'll bite\nyou in the future.", "start": 75.67, "duration": 3.35}, {"text": "So today we will embrace\nour inner Cookie Monster", "start": 79.02, "duration": 4.28}, {"text": "and eat as many-- eat\nthe largest cookie first,", "start": 83.3, "duration": 3.23}, {"text": "would be the standard\nalgorithm for Cookie Monster.", "start": 86.53, "duration": 2.867}, {"text": "I don't know if you learned\nthat in Sesame Street,", "start": 89.397, "duration": 2.083}, {"text": "but-- all right.", "start": 91.48, "duration": 2.99}, {"text": "So what's the problem?", "start": 94.47, "duration": 2.25}, {"text": "Minimum spanning tree.", "start": 96.72, "duration": 1.21}, {"text": "Can anyone tell\nme what a tree is?", "start": 97.93, "duration": 2.42}, {"text": "Formally, not the outside thing.", "start": 100.35, "duration": 3.89}, {"text": "In graph land.", "start": 104.24, "duration": 2.35}, {"text": "Acyclic graph, close.", "start": 106.59, "duration": 1.14}, {"text": "Connected acyclic graph, good.", "start": 110.45, "duration": 2.462}, {"text": "That's important.", "start": 112.912, "duration": 0.708}, {"text": "This is 604.2 stuff.", "start": 118.85, "duration": 9.05}, {"text": "OK, so how about\na spanning tree?", "start": 127.9, "duration": 3.5}, {"text": "Sorry?", "start": 135.331, "duration": 0.499}, {"text": "AUDIENCE: It contains\nall the vertices.", "start": 135.83, "duration": 1.28}, {"text": "ERIK DEMAINE: It contains\nall the vertices.", "start": 137.11, "duration": 1.791}, {"text": "Yeah.", "start": 138.901, "duration": 0.689}, {"text": "So let me go over here.", "start": 139.59, "duration": 2.115}, {"text": "Spanning means it contains all\nthe vertices, so implicit here,", "start": 147.35, "duration": 4.54}, {"text": "I guess, is subtree or subgraph.", "start": 151.89, "duration": 2.32}, {"text": "You're given a graph.", "start": 154.21, "duration": 1.6}, {"text": "You want a spanning\ntree of that graph.", "start": 155.81, "duration": 2.43}, {"text": "It's going to be a tree\nthat lives inside the graph.", "start": 164.21, "duration": 2.79}, {"text": "So we're going to take\nsome of the edges of G,", "start": 167.0, "duration": 2.33}, {"text": "make a tree out of them, make\na connected acyclic graph.", "start": 169.33, "duration": 3.06}, {"text": "And that tree should hit\nall the vertices in G.", "start": 172.39, "duration": 3.93}, {"text": "So this is going to be a subset\nof the edges, or subgraph.", "start": 176.32, "duration": 4.38}, {"text": "Those edges should form a tree.", "start": 186.06, "duration": 2.1}, {"text": "And, I'll say, hit\nall vertices of G.", "start": 193.52, "duration": 12.78}, {"text": "OK, if I just said they\nshould form a tree,", "start": 206.3, "duration": 1.98}, {"text": "then I could say, well,\nI'll take no edges,", "start": 208.28, "duration": 2.32}, {"text": "and here's a tree\nwith one vertex.", "start": 210.6, "duration": 2.56}, {"text": "That's not very interesting.", "start": 213.16, "duration": 1.434}, {"text": "You want a vertex--\nyou want, basically,", "start": 214.594, "duration": 1.666}, {"text": "the vertex set of the tree\nto be the same as the vertex", "start": 216.26, "duration": 2.4}, {"text": "set of the graph.", "start": 218.66, "duration": 1.34}, {"text": "That's the spanning property.", "start": 220.0, "duration": 1.547}, {"text": "But you still want\nit to be a tree,", "start": 221.547, "duration": 1.458}, {"text": "so you want it to be connected\nand you want it to be acyclic.", "start": 223.005, "duration": 3.835}, {"text": "Now if G is disconnected,\nthis is impossible.", "start": 226.84, "duration": 3.76}, {"text": "And for that, you could\ndefine a spanning forest", "start": 230.6, "duration": 2.09}, {"text": "to be like a maximal\nthing like this,", "start": 232.69, "duration": 2.57}, {"text": "but we'll focus on the case\nhere as G is connected.", "start": 235.26, "duration": 2.98}, {"text": "That's the interesting case.", "start": 238.24, "duration": 1.66}, {"text": "And so we can get\na spanning tree.", "start": 239.9, "duration": 3.27}, {"text": "All right?", "start": 243.17, "duration": 0.5}, {"text": "So what is this minimum\nspanning tree problem?", "start": 243.67, "duration": 2.42}, {"text": "Minimum spanning tree.", "start": 249.54, "duration": 1.83}, {"text": "We're given a weighted\ngraph, just like last time,", "start": 251.37, "duration": 11.03}, {"text": "with shortest paths.", "start": 262.4, "duration": 0.98}, {"text": "We have an edge weight function\nW giving me a real number, say,", "start": 263.38, "duration": 11.34}, {"text": "for every edge.", "start": 274.72, "duration": 2.25}, {"text": "And we want to find a spanning\ntree of minimum total weight.", "start": 276.97, "duration": 5.155}, {"text": "So I'm going to define\nthe weight of a tree T", "start": 296.33, "duration": 3.13}, {"text": "to be the sum over\nall edges in T,", "start": 299.46, "duration": 4.37}, {"text": "because I'm viewing a spanning\ntree as a set of edges,", "start": 303.83, "duration": 3.42}, {"text": "of the weight of that edge.", "start": 307.25, "duration": 3.75}, {"text": "OK, so pretty much\nwhat you would expect.", "start": 311.0, "duration": 2.07}, {"text": "Minimum weight spanning tree.", "start": 313.07, "duration": 1.45}, {"text": "It's a relatively\nsimple problem,", "start": 317.05, "duration": 2.27}, {"text": "but it's not so easy\nto find an algorithm.", "start": 319.32, "duration": 2.79}, {"text": "You need to prove a lot to\nmake sure that you really", "start": 322.11, "duration": 3.28}, {"text": "find the right tree.", "start": 325.39, "duration": 2.16}, {"text": "I guess the really\nnaive algorithm here", "start": 327.55, "duration": 3.16}, {"text": "would be to try\nall spanning trees,", "start": 330.71, "duration": 4.77}, {"text": "compute the weight\nof each spanning tree", "start": 335.48, "duration": 2.1}, {"text": "and return the minimum.", "start": 337.58, "duration": 2.18}, {"text": "That sounds reasonable.", "start": 339.76, "duration": 1.07}, {"text": "That's correct.", "start": 340.83, "duration": 2.06}, {"text": "But it's bad, because-- n to\nthe fourth, that would be nice.", "start": 342.89, "duration": 11.73}, {"text": "It's larger than that.", "start": 354.62, "duration": 0.95}, {"text": "Maybe not so obvious, but\nit can be exponential.", "start": 361.29, "duration": 4.56}, {"text": "Here's a graph where the\nnumber of spanning trees", "start": 365.85, "duration": 2.246}, {"text": "is exponential.", "start": 368.096, "duration": 0.624}, {"text": "This is a complete\nbipartite graph", "start": 372.98, "duration": 3.71}, {"text": "with two vertices on one side\nand n vertices on the other,", "start": 376.69, "duration": 4.5}, {"text": "and so you can-- let's\nsay we put these two", "start": 381.19, "duration": 3.8}, {"text": "edges into the spanning tree.", "start": 384.99, "duration": 1.92}, {"text": "And now, for each\nof these vertices,", "start": 386.91, "duration": 3.32}, {"text": "we can choose whether it\nconnects to the left vertex", "start": 390.23, "duration": 2.23}, {"text": "or the right vertix.", "start": 392.46, "duration": 0.86}, {"text": "It can only do one, but it could\ndo either one independently.", "start": 393.32, "duration": 2.541}, {"text": "So maybe this guy\nchooses the left one,", "start": 395.861, "duration": 1.769}, {"text": "this one chooses the right one.", "start": 397.63, "duration": 1.542}, {"text": "This one chooses the\nleft one, and so on.", "start": 399.172, "duration": 1.708}, {"text": "If I have n vertices down here,\nI have 2 to the n different", "start": 400.88, "duration": 3.86}, {"text": "spanning trees.", "start": 404.74, "duration": 2.04}, {"text": "So there can be an\nexponential number.", "start": 406.78, "duration": 3.852}, {"text": "So that algorithm\nis not so good.", "start": 410.632, "duration": 1.848}, {"text": "Exponential bad.", "start": 419.4, "duration": 1.23}, {"text": "Polynomial good.", "start": 420.63, "duration": 0.784}, {"text": "So today, we're going to\nget a polynomial algorithm.", "start": 421.414, "duration": 2.166}, {"text": "In fact, we will get an almost\nlinear time algorithm as fast", "start": 423.58, "duration": 3.74}, {"text": "as Dijkstra's algorithm.", "start": 427.32, "duration": 1.42}, {"text": "But we can't use\nDijkstra's algorithm,", "start": 428.74, "duration": 3.23}, {"text": "there's no shortest paths here.", "start": 431.97, "duration": 1.67}, {"text": "Plus, one of the algorithms will\nactually look pretty similar.", "start": 433.64, "duration": 2.71}, {"text": "Two lectures ago, the\ndynamic programming lecture,", "start": 439.41, "duration": 2.93}, {"text": "we saw an example where\nwe tried to do greedy,", "start": 442.34, "duration": 4.17}, {"text": "and it gave the\nwrong answer, and so", "start": 446.51, "duration": 1.99}, {"text": "we fell back on\ndynamic programming.", "start": 448.5, "duration": 1.51}, {"text": "Today, we're going to try\nto do dynamic programming,", "start": 450.01, "duration": 3.32}, {"text": "it's going to fail, and we're\ngoing to fall back on greedy.", "start": 453.33, "duration": 3.26}, {"text": "It's like the reverse.", "start": 456.59, "duration": 1.075}, {"text": "But the way it's\ngoing to fail is", "start": 457.665, "duration": 1.375}, {"text": "we're going to get\nexponential time initially,", "start": 459.04, "duration": 2.66}, {"text": "and then greedy will let\nus get polynomial time.", "start": 461.7, "duration": 3.17}, {"text": "This is actually a bit unusual.", "start": 464.87, "duration": 1.52}, {"text": "I would say more typically,\ndynamic programming", "start": 466.39, "duration": 2.86}, {"text": "can solve anything,\nbut, you know, with n", "start": 469.25, "duration": 2.64}, {"text": "to the seventh running\ntime, something slow.", "start": 471.89, "duration": 2.709}, {"text": "And then you apply\ngreedy, and you get down", "start": 474.599, "duration": 1.791}, {"text": "to like n or n log\nn running time.", "start": 476.39, "duration": 1.9}, {"text": "So that's more common.", "start": 478.29, "duration": 1.27}, {"text": "But today, we're going\nto go from exponential", "start": 479.56, "duration": 1.875}, {"text": "down to polynomial.", "start": 481.435, "duration": 1.097}, {"text": "And that's pretty nice.", "start": 482.532, "duration": 0.958}, {"text": "Cool.", "start": 487.28, "duration": 0.63}, {"text": "So let me tell you a little\nbit about greedy algorithm", "start": 487.91, "duration": 6.37}, {"text": "theory, so to speak.", "start": 494.28, "duration": 1.095}, {"text": "This is from the textbook.", "start": 500.697, "duration": 1.083}, {"text": "If your problem can be\nsolved by greedy algorithm,", "start": 507.07, "duration": 5.089}, {"text": "usually you can\nprove two properties", "start": 512.159, "duration": 2.041}, {"text": "about that algorithm.", "start": 514.2, "duration": 2.68}, {"text": "One of them is called\noptimal substructure.", "start": 516.88, "duration": 2.095}, {"text": "And the other is called\nthe greedy choice property.", "start": 529.4, "duration": 2.3}, {"text": "Optimal substructure\nshould be familiar idea", "start": 531.7, "duration": 8.15}, {"text": "because it's essentially\nan encapsulation", "start": 539.85, "duration": 2.61}, {"text": "of dynamic programming.", "start": 542.46, "duration": 1.055}, {"text": "Greedy algorithms\nare, in some sense,", "start": 573.429, "duration": 1.541}, {"text": "a special form of\ndynamic programming.", "start": 574.97, "duration": 1.665}, {"text": "So this is saying\nsomething like,", "start": 588.3, "duration": 1.7}, {"text": "if you can solve\nsubproblems optimally,", "start": 590.0, "duration": 2.634}, {"text": "smaller subproblems, or\nwhatever, then you can", "start": 592.634, "duration": 1.916}, {"text": "solve your original problem.", "start": 594.55, "duration": 1.93}, {"text": "And this may happen\nrecursively, whatever.", "start": 596.48, "duration": 2.16}, {"text": "That's essentially\nwhat makes a recurrence", "start": 598.64, "duration": 2.18}, {"text": "work for dynamic programming.", "start": 600.82, "duration": 2.8}, {"text": "And with dynamic programming,\nfor this to be possible,", "start": 603.62, "duration": 5.85}, {"text": "we need to guess some\nfeature of the solution.", "start": 609.47, "duration": 3.667}, {"text": "For example, in\nminimum spanning tree,", "start": 613.137, "duration": 1.583}, {"text": "maybe you guess one of the edges\nthat's in the right answer.", "start": 614.72, "duration": 2.71}, {"text": "And then, once you do\nthat, you can reduce it", "start": 620.29, "duration": 2.42}, {"text": "to some other subproblems.", "start": 622.71, "duration": 1.926}, {"text": "And if you can solve\nthose subproblems,", "start": 624.636, "duration": 1.624}, {"text": "you combine them and\nget an optimal solution", "start": 626.26, "duration": 1.53}, {"text": "to your original thing.", "start": 627.79, "duration": 0.958}, {"text": "So this is a familiar property.", "start": 628.748, "duration": 2.182}, {"text": "I don't usually think of it this\nway for dynamic programming,", "start": 630.93, "duration": 3.21}, {"text": "but that is essentially what\nwe're doing via guessing.", "start": 634.14, "duration": 4.862}, {"text": "But with greedy algorithms,\nwe're not going to guess.", "start": 639.002, "duration": 2.208}, {"text": "We're just going to be greedy.", "start": 641.21, "duration": 1.81}, {"text": "Eat the largest cookie.", "start": 643.02, "duration": 1.47}, {"text": "And so that's the\ngreedy choice property.", "start": 644.49, "duration": 2.305}, {"text": "This says that eating\nthe largest cookie", "start": 658.99, "duration": 2.6}, {"text": "is actually a good thing to do.", "start": 661.59, "duration": 2.06}, {"text": "If we keep making\nlocally optimal choices,", "start": 670.546, "duration": 3.404}, {"text": "will end up with a\nglobally optimal solution.", "start": 673.95, "duration": 2.15}, {"text": "No tummy ache.", "start": 685.65, "duration": 1.36}, {"text": "This is something you wouldn't\nexpect to be true in general,", "start": 692.71, "duration": 2.6}, {"text": "but it's going to be true\nfor minimum spanning tree.", "start": 695.31, "duration": 3.072}, {"text": "And it's true for a\nhandful of other problems.", "start": 698.382, "duration": 1.918}, {"text": "You'll see a bunch more\nin recitation tomorrow.", "start": 700.3, "duration": 1.958}, {"text": "This is sort of general\ntheory, but I'm actually", "start": 706.19, "duration": 2.14}, {"text": "going to have a theorem like\nthis for minimum spanning tree", "start": 708.33, "duration": 3.32}, {"text": "and a theorem like this\nfor minimum spanning tree.", "start": 711.65, "duration": 3.066}, {"text": "This is the prototype, but most\nof today is all about minimum", "start": 714.716, "duration": 3.574}, {"text": "spanning tree.", "start": 718.29, "duration": 0.68}, {"text": "And for minimum spanning\ntree, neither of these", "start": 722.202, "duration": 1.958}, {"text": "is very obvious.", "start": 724.16, "duration": 1.72}, {"text": "So I'm just going to\nshow you these theorems.", "start": 725.88, "duration": 2.41}, {"text": "They're fairly easy to prove,\nin fact, but finding them", "start": 728.29, "duration": 4.034}, {"text": "is probably the tricky part.", "start": 732.324, "duration": 1.166}, {"text": "Actually, I guess optimal\nsubstructure is probably", "start": 746.88, "duration": 3.11}, {"text": "the least intuitive or the\nleast obvious greedy choice.", "start": 749.99, "duration": 4.506}, {"text": "You're probably\nalready thinking,", "start": 754.496, "duration": 1.374}, {"text": "what are good greedy choices?", "start": 755.87, "duration": 1.95}, {"text": "Minimum weight edge seems\nlike a good starting point,", "start": 757.82, "duration": 3.28}, {"text": "which we will get to.", "start": 761.1, "duration": 2.06}, {"text": "But there's even\na stronger version", "start": 763.16, "duration": 2.1}, {"text": "of that, which we will prove.", "start": 765.26, "duration": 1.84}, {"text": "And first, optimal substructure.", "start": 767.1, "duration": 2.52}, {"text": "So here, I'm going to think\nlike a dynamic program.", "start": 769.62, "duration": 4.13}, {"text": "Let's suppose that we know an\nedge that's in our solution.", "start": 773.75, "duration": 4.36}, {"text": "Suppose we know\nan edge that lives", "start": 778.11, "duration": 1.71}, {"text": "in a minimum spanning tree.", "start": 779.82, "duration": 1.83}, {"text": "We could guess that.", "start": 781.65, "duration": 1.3}, {"text": "We're not going\nto, but we could.", "start": 782.95, "duration": 2.93}, {"text": "Either way, let's just\nsuppose than an edge e--", "start": 785.88, "duration": 5.97}, {"text": "I should mention, I\nguess I didn't say,", "start": 791.85, "duration": 2.17}, {"text": "this graph is undirected.", "start": 794.02, "duration": 2.23}, {"text": "A minimum spanning tree\ndoesn't quite make sense", "start": 796.25, "duration": 2.21}, {"text": "with directed graphs.", "start": 798.46, "duration": 1.08}, {"text": "There are other\nversions of the problem", "start": 799.54, "duration": 1.624}, {"text": "but here, the graph\nis undirected.", "start": 801.164, "duration": 2.926}, {"text": "So probably, I should write\nthis as a unordered set, u,", "start": 804.09, "duration": 3.942}, {"text": "v. And there are possibly\nmany minimum spanning trees.", "start": 808.032, "duration": 13.384}, {"text": "There could be many solutions\nwith the same weight.", "start": 821.416, "duration": 2.124}, {"text": "For example, if all of\nthese edges have weight 1,", "start": 823.54, "duration": 2.63}, {"text": "all of these trees\nare actually minimum.", "start": 826.17, "duration": 3.44}, {"text": "If all the edges have weight\n1, every spanning tree", "start": 829.61, "duration": 2.18}, {"text": "is minimum, because every\nspanning tree has exactly", "start": 831.79, "duration": 2.65}, {"text": "n minus 1 edges.", "start": 834.44, "duration": 0.875}, {"text": "But let's suppose we\nknow an edge that's", "start": 837.84, "duration": 1.97}, {"text": "guaranteed to be in some minimum\nspanning tree, at least one.", "start": 839.81, "duration": 5.25}, {"text": "What I would like to do is take\nthis, so let me draw a picture.", "start": 845.06, "duration": 4.34}, {"text": "I have a graph.", "start": 849.4, "duration": 2.67}, {"text": "We've identified some edge\nin the graph, e, that lives", "start": 852.07, "duration": 4.33}, {"text": "in some minimum spanning tree.", "start": 856.4, "duration": 2.57}, {"text": "I'm going to draw some kind\nof tree structure here.", "start": 858.97, "duration": 2.64}, {"text": "OK.", "start": 869.4, "duration": 1.46}, {"text": "The wiggly lines are the tree.", "start": 870.86, "duration": 2.325}, {"text": "There are some\nother edges in here,", "start": 873.185, "duration": 1.459}, {"text": "which I don't want to draw too\nmany of them because it's ugly.", "start": 874.644, "duration": 2.582}, {"text": "Those are other\nedges in the graph.", "start": 877.226, "duration": 1.674}, {"text": "Who knows where they are?", "start": 878.9, "duration": 1.041}, {"text": "They could be all\nsorts of things.", "start": 879.941, "duration": 3.189}, {"text": "OK?", "start": 883.13, "duration": 0.5}, {"text": "But I've highlighted the\ngraph in a particular way.", "start": 883.63, "duration": 4.6}, {"text": "Because the minimum\nspanning tree", "start": 888.23, "duration": 2.5}, {"text": "is a tree, if I delete\ne from the tree, then", "start": 890.73, "duration": 3.74}, {"text": "I get two components.", "start": 894.47, "duration": 2.38}, {"text": "Every edge I remove--\nI'm minimally connected.", "start": 896.85, "duration": 3.1}, {"text": "So if I delete an edge, I\ndisconnect into two parts,", "start": 899.95, "duration": 2.73}, {"text": "so I've drawn that as the left\ncircle and the right circle.", "start": 902.68, "duration": 3.85}, {"text": "It's just a general way\nto think about a tree.", "start": 906.53, "duration": 2.25}, {"text": "Now there are other unused\nedges in this picture,", "start": 908.78, "duration": 2.38}, {"text": "who knows where they live?", "start": 911.16, "duration": 2.801}, {"text": "OK?", "start": 913.961, "duration": 0.499}, {"text": "What I would like to do is\nsomehow simplify this graph", "start": 914.46, "duration": 4.31}, {"text": "and get a smaller problem,\nsay a graph with fewer edges.", "start": 918.77, "duration": 3.275}, {"text": "Any suggestions\non how to do that?", "start": 925.82, "duration": 1.54}, {"text": "I don't actually know where\nall these white edges are,", "start": 932.09, "duration": 2.7}, {"text": "but what I'd like to do is--\nI'm supposing I know where e is,", "start": 934.79, "duration": 4.45}, {"text": "and that's an edge in my\nminimum spanning tree.", "start": 939.24, "duration": 2.57}, {"text": "So how could I get rid of it?", "start": 941.81, "duration": 2.99}, {"text": "Yeah.", "start": 948.252, "duration": 0.5}, {"text": "AUDIENCE: Find\nthe minimum weight", "start": 948.752, "duration": 1.482}, {"text": "spanning tree of the two edges.", "start": 950.234, "duration": 1.486}, {"text": "ERIK DEMAINE: I'd like\nto divide and conquer.", "start": 951.72, "duration": 1.24}, {"text": "Maybe find the\nminimum weight over", "start": 952.96, "duration": 1.45}, {"text": "here, minimum weight over here.", "start": 954.41, "duration": 1.291}, {"text": "Of course, I don't know\nwhich nodes are in what side.", "start": 955.701, "duration": 2.629}, {"text": "So that's a little trickier.", "start": 958.33, "duration": 1.85}, {"text": "But what do I do but E itself?", "start": 960.18, "duration": 1.884}, {"text": "Let's start with that.", "start": 962.064, "duration": 0.916}, {"text": "Yeah.", "start": 966.917, "duration": 0.5}, {"text": "AUDIENCE: You remove it?", "start": 967.417, "duration": 1.0}, {"text": "ERIK DEMAINE: You\ncould remove it.", "start": 968.417, "duration": 1.465}, {"text": "That's a good idea.", "start": 969.882, "duration": 0.986}, {"text": "Doesn't work, but worth\na Frisbee nonetheless.", "start": 970.868, "duration": 5.942}, {"text": "If I delete this\nedge, one problem", "start": 976.81, "duration": 2.71}, {"text": "is maybe none of these red\nedges exist and then my graph", "start": 979.52, "duration": 3.02}, {"text": "is disconnected.", "start": 982.54, "duration": 1.32}, {"text": "Well, maybe that's\nactually a good case.", "start": 983.86, "duration": 2.88}, {"text": "That probably would\nbe a good case.", "start": 986.74, "duration": 1.64}, {"text": "Then I know how to\ndivide and conquer.", "start": 988.38, "duration": 2.004}, {"text": "I just look at the\nconnected components.", "start": 990.384, "duration": 1.666}, {"text": "In general, if I\ndelete the edge,", "start": 992.05, "duration": 4.12}, {"text": "and I have these red\nedges, then I maybe", "start": 996.17, "duration": 2.896}, {"text": "find a minimum spanning\ntree on what remains.", "start": 999.066, "duration": 1.874}, {"text": "Maybe I'll end up including\none of these edges.", "start": 1003.75, "duration": 2.43}, {"text": "Maybe this edge ends up\nin the spanning tree,", "start": 1006.18, "duration": 3.48}, {"text": "and then I can't put E in.", "start": 1009.66, "duration": 2.13}, {"text": "So it's a little awkward.", "start": 1011.79, "duration": 1.91}, {"text": "Yeah?", "start": 1013.7, "duration": 0.5}, {"text": "AUDIENCE: Can you merge\nthe two nodes into one?", "start": 1014.2, "duration": 1.958}, {"text": "Merge the two nodes into one.", "start": 1016.158, "duration": 1.402}, {"text": "Yes.", "start": 1017.56, "duration": 1.01}, {"text": "Purple Frisbee.", "start": 1018.57, "duration": 2.88}, {"text": "Impressive.", "start": 1021.45, "duration": 1.47}, {"text": "This is what we call\ncontracting the edge.", "start": 1022.92, "duration": 2.269}, {"text": "It just means merge\nthe endpoints.", "start": 1029.92, "duration": 3.34}, {"text": "Merge u and v. So I will draw\na new version of the graph.", "start": 1033.26, "duration": 9.989}, {"text": "So this was u and v before.", "start": 1049.84, "duration": 2.74}, {"text": "You've got to put\nthe label inside.", "start": 1052.58, "duration": 2.3}, {"text": "And now we have a new\nvertex here, which is uv.", "start": 1054.88, "duration": 4.43}, {"text": "Or you can think it\nas the set u, v. We", "start": 1059.31, "duration": 2.73}, {"text": "won't really need to\nkeep track of names.", "start": 1062.04, "duration": 2.64}, {"text": "And whatever edges\nyou had over here,", "start": 1064.68, "duration": 5.44}, {"text": "you're going to have over here.", "start": 1070.12, "duration": 2.81}, {"text": "OK?", "start": 1072.93, "duration": 0.5}, {"text": "Just collapse u and v.\nThe edge e disappears.", "start": 1073.43, "duration": 2.793}, {"text": "And one other thing can happen.", "start": 1079.91, "duration": 3.27}, {"text": "Let me-- go over here.", "start": 1083.18, "duration": 5.1}, {"text": "We could end up with duplicate\nedges by this process.", "start": 1094.04, "duration": 3.38}, {"text": "So for example, suppose\nwe have u and v,", "start": 1097.42, "duration": 4.33}, {"text": "and they have a common neighbor.", "start": 1101.75, "duration": 2.3}, {"text": "Might have many common\nneighbors, who knows.", "start": 1104.05, "duration": 3.23}, {"text": "Add some other edges,\nuncommon neighbors.", "start": 1107.28, "duration": 3.88}, {"text": "When I merge, I'd\nlike to just have", "start": 1111.16, "duration": 9.09}, {"text": "a single edge to that vertex and\na single edge to that vertex.", "start": 1120.25, "duration": 3.815}, {"text": "And what I'm going\nto do is, if I", "start": 1124.065, "duration": 1.375}, {"text": "have some weights on these\nedges, let's say a and b,", "start": 1125.44, "duration": 3.63}, {"text": "and c and d, I'm just\ngoing to take the minimum.", "start": 1129.07, "duration": 3.63}, {"text": "Because what I'm about to do is\ncompute a minimum spanning tree", "start": 1137.78, "duration": 2.64}, {"text": "in this graph.", "start": 1140.42, "duration": 2.39}, {"text": "And if I take the minimum\nspanning tree here,", "start": 1142.81, "duration": 1.89}, {"text": "and I had multiple\nedges-- one weight a,", "start": 1144.7, "duration": 2.55}, {"text": "one weight b-- do you think I\nwould choose the larger weight", "start": 1147.25, "duration": 2.9}, {"text": "edge?", "start": 1150.15, "duration": 1.02}, {"text": "It does-- they're\nexactly the same edge,", "start": 1151.17, "duration": 1.7}, {"text": "but one is higher weight.", "start": 1152.87, "duration": 1.057}, {"text": "There's no point in keeping\nthe higher weight one,", "start": 1153.927, "duration": 2.083}, {"text": "so I'm just going to throw\naway the higher weight one.", "start": 1156.01, "duration": 2.83}, {"text": "Take them in.", "start": 1158.84, "duration": 1.66}, {"text": "So this is a particular form\nof edge contraction and graphs.", "start": 1160.5, "duration": 5.8}, {"text": "And I claim it's a good\nthing to do, in the sense", "start": 1166.3, "duration": 3.88}, {"text": "that if I can find a\nminimum spanning tree", "start": 1170.18, "duration": 2.01}, {"text": "in this new graph--\nthis is usually", "start": 1172.19, "duration": 2.28}, {"text": "called a G slash e, slash\ninstead of negative, to remove", "start": 1174.47, "duration": 6.72}, {"text": "e.", "start": 1181.19, "duration": 0.793}, {"text": "I'm contracting e.", "start": 1181.983, "duration": 2.569}, {"text": "So this is G slash e.", "start": 1184.552, "duration": 2.128}, {"text": "This is G. If I can find a\nminimum spanning tree in G", "start": 1186.68, "duration": 5.47}, {"text": "slash e, I claim I can find\none in the original graph G", "start": 1192.15, "duration": 5.42}, {"text": "just by adding the edge e.", "start": 1197.57, "duration": 3.11}, {"text": "So I'm going to\nsay if G prime is", "start": 1200.68, "duration": 8.01}, {"text": "a minimum spanning\ntree, of G slash e,", "start": 1208.69, "duration": 5.66}, {"text": "then T prime union e is a\nminimum spanning tree of G.", "start": 1214.35, "duration": 15.28}, {"text": "So overall, you\ncan think of this", "start": 1229.63, "duration": 1.64}, {"text": "as a recurrence in\na dynamic program,", "start": 1231.27, "duration": 2.35}, {"text": "and let me write down\nthat dynamic program.", "start": 1233.62, "duration": 2.39}, {"text": "It won't be very\ngood dynamic program,", "start": 1239.13, "duration": 2.07}, {"text": "but it's a starting point.", "start": 1241.2, "duration": 1.15}, {"text": "This is conceptually\nwhat we want to do.", "start": 1252.88, "duration": 2.13}, {"text": "We're trying to guess\nan edge e that's", "start": 1255.01, "duration": 5.33}, {"text": "in a minimum spanning tree.", "start": 1260.34, "duration": 3.62}, {"text": "Then we're going to\ncontract that edge.", "start": 1263.96, "duration": 1.64}, {"text": "Then we're going to recurse,\nfind the minimum spanning tree", "start": 1270.03, "duration": 3.69}, {"text": "on what remains, and then we\nfind the minimum spanning tree.", "start": 1273.72, "duration": 4.59}, {"text": "Then we want to\ndecontract the edge,", "start": 1278.31, "duration": 2.44}, {"text": "put it back, put the\ngraph back the way it was.", "start": 1280.75, "duration": 3.92}, {"text": "And then add e to the\nminimum spanning tree.", "start": 1284.67, "duration": 2.48}, {"text": "And what this lemma\ntells us, is that this", "start": 1291.7, "duration": 3.517}, {"text": "is a correct algorithm.", "start": 1295.217, "duration": 0.958}, {"text": "If you're lucky-- and we're\ngoing to force luckiness", "start": 1299.11, "duration": 2.88}, {"text": "by trying all edges-- but if\nwe start with an edge that", "start": 1301.99, "duration": 2.72}, {"text": "is guaranteed to be in some\nminimum spanning tree, call it", "start": 1304.71, "duration": 3.43}, {"text": "a safe edge, and\nwe contract, and we", "start": 1308.14, "duration": 3.49}, {"text": "find a minimum spanning\ntree on what remains,", "start": 1311.63, "duration": 2.08}, {"text": "then we can put e\nback in at the end,", "start": 1313.71, "duration": 3.05}, {"text": "and we'll get a minimum spanning\ntree of the original graph.", "start": 1316.76, "duration": 3.47}, {"text": "So this gives us correctness\nof this algorithm.", "start": 1320.23, "duration": 3.55}, {"text": "Now, this algorithm's\nbad, again,", "start": 1323.78, "duration": 2.6}, {"text": "from a complexity standpoint.", "start": 1326.38, "duration": 1.98}, {"text": "The running time is\ngoing to be exponential.", "start": 1328.36, "duration": 2.806}, {"text": "The number of sub problems we\nmight have to consider here", "start": 1331.166, "duration": 2.374}, {"text": "is all subsets of edges.", "start": 1333.54, "duration": 1.42}, {"text": "There's no particular way--\nbecause at every step,", "start": 1334.96, "duration": 3.98}, {"text": "we're guessing an arbitrary\nedge in the graph,", "start": 1338.94, "duration": 3.3}, {"text": "there's no structure.", "start": 1342.24, "duration": 1.29}, {"text": "Like, we can't say well,\nit's the first k edges,", "start": 1343.53, "duration": 2.33}, {"text": "or some substring of edges.", "start": 1345.86, "duration": 2.03}, {"text": "It's just going to be\nsome subset of edges.", "start": 1347.89, "duration": 2.32}, {"text": "There's exponentially\nmany subsets, 2 to the e,", "start": 1350.21, "duration": 2.87}, {"text": "so this is exponential.", "start": 1353.08, "duration": 1.01}, {"text": "But we're going to\nmake a polynomial", "start": 1359.37, "duration": 3.61}, {"text": "by removing the guessing.", "start": 1362.98, "duration": 1.814}, {"text": "This is actually a\nreally good prototype", "start": 1364.794, "duration": 1.666}, {"text": "for a greedy algorithm.", "start": 1366.46, "duration": 1.45}, {"text": "If instead of guessing,\ntrying all edges,", "start": 1367.91, "duration": 2.49}, {"text": "if we could find a\ngood edge to choose", "start": 1370.4, "duration": 2.04}, {"text": "that's guaranteed to be in\na minimum spanning tree,", "start": 1372.44, "duration": 3.43}, {"text": "then we could actually\nfollow this procedure,", "start": 1375.87, "duration": 2.42}, {"text": "and this would be like\nan iterative algorithm.", "start": 1378.29, "duration": 3.46}, {"text": "If you-- you don't\nguess-- you correctly", "start": 1381.75, "duration": 2.86}, {"text": "choose a good-- you\ntake the biggest cookie,", "start": 1384.61, "duration": 3.48}, {"text": "you contract it, and then\nyou repeat that process", "start": 1388.09, "duration": 2.924}, {"text": "over and over, that\nwould be a prototype", "start": 1391.014, "duration": 1.666}, {"text": "for a greedy algorithm and\nthat's what's going to work.", "start": 1392.68, "duration": 2.08}, {"text": "There's different ways to\nchoose this greedy edge,", "start": 1394.76, "duration": 1.68}, {"text": "and we're going to get\ntwo different algorithms", "start": 1396.44, "duration": 1.958}, {"text": "accordingly.", "start": 1398.398, "duration": 0.834}, {"text": "But that's where we're going.", "start": 1399.232, "duration": 1.208}, {"text": "First, I should prove\nthis claim, cause,", "start": 1400.44, "duration": 2.296}, {"text": "you know, where did edge\ncontraction come from?", "start": 1402.736, "duration": 2.274}, {"text": "Why does it work?", "start": 1405.01, "duration": 0.81}, {"text": "It's not too hard to prove.", "start": 1409.422, "duration": 2.548}, {"text": "Let's do it.", "start": 1411.97, "duration": 0.58}, {"text": "Question?", "start": 1426.0, "duration": 1.07}, {"text": "Oh.", "start": 1427.07, "duration": 0.92}, {"text": "All right.", "start": 1427.99, "duration": 2.3}, {"text": "I should be able to do\nthis without looking.", "start": 1430.29, "duration": 3.38}, {"text": "So--", "start": 1433.67, "duration": 1.88}, {"text": "Proof of optimal substructure.", "start": 1435.55, "duration": 1.95}, {"text": "So we're given a lot.", "start": 1437.5, "duration": 1.13}, {"text": "We're told that e belongs\nto a minimize spanning tree.", "start": 1438.63, "duration": 2.57}, {"text": "Let's give that\nspanning tree a name.", "start": 1441.2, "duration": 2.58}, {"text": "Say we have a minimum spanning\ntree T star, which contains e.", "start": 1443.78, "duration": 6.92}, {"text": "So we're assuming that\nexists, then we contract e.", "start": 1450.7, "duration": 4.39}, {"text": "And then we're\ngiven T prime, which", "start": 1455.09, "duration": 1.51}, {"text": "is a minimum spanning\ntree of G slash e.", "start": 1456.6, "duration": 3.85}, {"text": "And then we want to\nanalyze this thing.", "start": 1460.45, "duration": 1.8}, {"text": "So I want to claim\nthat this thing is", "start": 1462.25, "duration": 2.03}, {"text": "a minimum spanning\ntree, in other words,", "start": 1464.28, "duration": 2.13}, {"text": "that the weight of\nthat spanning tree", "start": 1466.41, "duration": 2.95}, {"text": "is equal to the weight\nof this spanning tree,", "start": 1469.36, "duration": 2.95}, {"text": "because this one is minimum.", "start": 1472.31, "duration": 2.29}, {"text": "This is a minimum spanning\nof G. And this is also", "start": 1474.6, "duration": 4.11}, {"text": "supposed to be a minimum\nspanning tree of G.", "start": 1478.71, "duration": 5.97}, {"text": "OK.", "start": 1484.68, "duration": 1.78}, {"text": "Sounds easy, right?", "start": 1486.46, "duration": 3.46}, {"text": "I'm going to cheat, sorry.", "start": 1489.92, "duration": 1.21}, {"text": "I see.", "start": 1500.33, "duration": 0.57}, {"text": "Right.", "start": 1500.9, "duration": 0.5}, {"text": "Duh.", "start": 1501.4, "duration": 1.65}, {"text": "Easy, once you know how.", "start": 1503.05, "duration": 1.59}, {"text": "So what we're going to do is\nthink about contracting e.", "start": 1504.64, "duration": 5.104}, {"text": "OK, we already\nknow we're supposed", "start": 1509.744, "duration": 1.416}, {"text": "to be thinking about\ncontracting e in the graph.", "start": 1511.16, "duration": 2.6}, {"text": "Let's look at how it changes\nthat given minimum spanning", "start": 1513.76, "duration": 3.12}, {"text": "tree.", "start": 1516.88, "duration": 0.84}, {"text": "So we have T star,\nminimum spanning", "start": 1517.72, "duration": 2.52}, {"text": "tree of the whole graph, and\nthen I'm going to contract e.", "start": 1520.24, "duration": 5.66}, {"text": "What I mean is, if\nthat edge happens", "start": 1525.9, "duration": 2.16}, {"text": "to be in the spanning\ntree-- it is, actually.", "start": 1528.06, "duration": 3.58}, {"text": "We assumed that e is in there.", "start": 1531.64, "duration": 1.9}, {"text": "So I'm basically removing,\nI'm just deleting that edge,", "start": 1533.54, "duration": 4.55}, {"text": "maybe I should call it minus e.", "start": 1538.09, "duration": 2.13}, {"text": "Then that should be a\nspanning tree of G slash e.", "start": 1543.16, "duration": 10.77}, {"text": "So when I contract\nthe edge in the graph,", "start": 1553.93, "duration": 2.65}, {"text": "if I throw away the edge\nfrom this spanning tree,", "start": 1556.58, "duration": 2.86}, {"text": "I should still have\na spanning tree,", "start": 1559.44, "duration": 1.51}, {"text": "and I don't know\nwhether it's minimum.", "start": 1560.95, "duration": 1.8}, {"text": "Probably, it is, but we\nwon't prove that right now.", "start": 1562.75, "duration": 3.33}, {"text": "I claim it's still\na spanning tree.", "start": 1568.93, "duration": 2.175}, {"text": "What would that take?", "start": 1571.105, "duration": 0.875}, {"text": "It still hits all the vertices,\nbecause if I removed the edge,", "start": 1571.98, "duration": 5.74}, {"text": "things would not be\nconnected together.", "start": 1577.72, "duration": 1.8}, {"text": "But this edge was in\nthe spanning tree,", "start": 1579.52, "duration": 4.26}, {"text": "and then I fused those\ntwo vertices together,", "start": 1583.78, "duration": 2.82}, {"text": "so whatever spanning-- I\nmean, whatever was connected", "start": 1586.6, "duration": 2.79}, {"text": "before is still connected.", "start": 1589.39, "duration": 1.43}, {"text": "Contraction generally\npreserves connectivity.", "start": 1590.82, "duration": 3.174}, {"text": "If these things were already\nconnected directly by an edge", "start": 1593.994, "duration": 2.416}, {"text": "when I contract, I still\nhave a connected structure,", "start": 1596.41, "duration": 2.86}, {"text": "so I'm still hitting\nall the vertices.", "start": 1599.27, "duration": 2.73}, {"text": "And also, the number of\nedges is still exactly right.", "start": 1602.0, "duration": 3.26}, {"text": "Before, I had n minus 1 edges.", "start": 1605.26, "duration": 2.257}, {"text": "Afterwards, I'll still\nhave n minus 1 edges,", "start": 1607.517, "duration": 1.833}, {"text": "because I removed one edge\nand I removed one vertex,", "start": 1609.35, "duration": 2.31}, {"text": "in terms of the count.", "start": 1611.66, "duration": 1.33}, {"text": "So that proves that it's\nstill a spanning tree,", "start": 1612.99, "duration": 2.88}, {"text": "using properties of trees.", "start": 1615.87, "duration": 1.54}, {"text": "Cool.", "start": 1620.33, "duration": 2.04}, {"text": "So that means the minimum\nspanning tree, this thing,", "start": 1622.37, "duration": 5.02}, {"text": "T prime, the minimum\nspanning tree of G slash e,", "start": 1627.39, "duration": 3.3}, {"text": "has a smaller weight\nthan this one.", "start": 1630.69, "duration": 2.387}, {"text": "Because this is a\nspanning tree, the minimum", "start": 1633.077, "duration": 1.833}, {"text": "is smaller than\nall spanning trees.", "start": 1634.91, "duration": 2.08}, {"text": "So we know the\nweight of T prime is", "start": 1636.99, "duration": 2.61}, {"text": "less than or equal to the\nweight of T star minus e.", "start": 1639.6, "duration": 5.75}, {"text": "Cool.", "start": 1649.85, "duration": 1.49}, {"text": "And now we want to know about\nthis thing, the weight of T", "start": 1651.34, "duration": 5.97}, {"text": "prime plus e.", "start": 1657.31, "duration": 3.71}, {"text": "Well, that's just the weight of\nT prime plus the weight of e,", "start": 1661.02, "duration": 5.63}, {"text": "because the weight\nof a tree is just", "start": 1666.65, "duration": 1.91}, {"text": "the sum of the\nweights of the edges.", "start": 1668.56, "duration": 2.11}, {"text": "So this is less\nthan or equal to w", "start": 1670.67, "duration": 2.623}, {"text": "of T star minus e plus e, which\nis just the weight of T star.", "start": 1673.293, "duration": 8.837}, {"text": "So we proved that the weight\nof our proposed spanning tree", "start": 1685.39, "duration": 3.25}, {"text": "is less than or equal to\nthe weight of the minimum", "start": 1688.64, "duration": 2.18}, {"text": "spanning tree in G, and\ntherefore, T prime union", "start": 1690.82, "duration": 4.36}, {"text": "e actually is a\nminimum spanning tree.", "start": 1695.18, "duration": 1.99}, {"text": "OK?", "start": 1697.17, "duration": 0.5}, {"text": "This is really easy.", "start": 1697.67, "duration": 1.05}, {"text": "It actually implies that\nall of these inequalities", "start": 1708.527, "duration": 2.083}, {"text": "have to be\nequalities, because we", "start": 1710.61, "duration": 1.42}, {"text": "started with something minimum.", "start": 1712.03, "duration": 1.291}, {"text": "Clear?", "start": 1715.81, "duration": 0.72}, {"text": "That's the easier half.", "start": 1716.53, "duration": 1.73}, {"text": "The", "start": 1718.26, "duration": 0.5}, {"text": "More interesting property is\ngoing to be this greedy choice", "start": 1718.76, "duration": 2.458}, {"text": "property.", "start": 1721.218, "duration": 1.342}, {"text": "This is sort of where the\naction is for greedy algorithms,", "start": 1722.56, "duration": 2.48}, {"text": "and this is usually\nthe heart of proving", "start": 1725.04, "duration": 1.98}, {"text": "greedy algorithms are correct.", "start": 1727.02, "duration": 1.629}, {"text": "We don't yet have\na greedy algorithm,", "start": 1728.649, "duration": 1.541}, {"text": "but we're thinking about it.", "start": 1730.19, "duration": 1.74}, {"text": "We need some way to\nintelligently choose an edge e,", "start": 1731.93, "duration": 4.61}, {"text": "and I'm going to give\nyou a whole bunch of ways", "start": 1736.54, "duration": 2.04}, {"text": "to intelligently\nchoose an edge e.", "start": 1738.58, "duration": 1.48}, {"text": "So here's a really\npowerful lemma,", "start": 1781.13, "duration": 1.59}, {"text": "and we're going to make it\neven stronger in a moment.", "start": 1782.72, "duration": 2.208}, {"text": "So I'm going to introduce\nthe notion of a cut, that's", "start": 1801.1, "duration": 3.11}, {"text": "going to be a similar\npicture to what I had before.", "start": 1804.21, "duration": 3.69}, {"text": "I'm going to look at\nsome set of vertices.", "start": 1807.9, "duration": 1.86}, {"text": "S here is a subset\nof the vertices,", "start": 1809.76, "duration": 4.32}, {"text": "and that leaves in the\ngraph, everything else.", "start": 1814.08, "duration": 3.02}, {"text": "This would be V minus\nS. OK, so there's", "start": 1817.1, "duration": 4.54}, {"text": "some vertices over here,\nsome vertices over here,", "start": 1821.64, "duration": 4.01}, {"text": "there's some edges\nthat are purely", "start": 1825.65, "duration": 1.74}, {"text": "inside one side of the cut.", "start": 1827.39, "duration": 3.22}, {"text": "And then what I'm\ninterested in are", "start": 1830.61, "duration": 1.67}, {"text": "the edges that cross the cut.", "start": 1832.28, "duration": 1.68}, {"text": "OK, whatever they look\nlike, these edges.", "start": 1838.38, "duration": 2.05}, {"text": "If an edge has one vertex in\nV and one vertex not in V,", "start": 1840.43, "duration": 4.11}, {"text": "I call that edge\na crossing edge.", "start": 1844.54, "duration": 1.96}, {"text": "OK, so let's suppose that e is\na least-weight edge crossing", "start": 1851.68, "duration": 17.48}, {"text": "the cut.", "start": 1869.16, "duration": 0.5}, {"text": "So let's say, let me be\nspecific, if e is uv,", "start": 1875.16, "duration": 8.96}, {"text": "then I want one of the\nendpoints, let's u, to be in S,", "start": 1884.12, "duration": 3.926}, {"text": "and I want the other\none to be not in S,", "start": 1888.046, "duration": 3.354}, {"text": "so it's in capital\nV minus S. And that", "start": 1891.4, "duration": 3.74}, {"text": "would be a crossing edge, and\namong all the crossing edges,", "start": 1895.14, "duration": 2.67}, {"text": "I want to take one\nof minimum weight.", "start": 1897.81, "duration": 3.55}, {"text": "There might be many,\nbut pick any one.", "start": 1901.36, "duration": 4.78}, {"text": "Then I claim that edge is\nin a minimum spanning tree.", "start": 1906.14, "duration": 2.95}, {"text": "This is our golden\nticket, right?", "start": 1920.03, "duration": 2.29}, {"text": "If we can guarantee an edge is\nin the minimum spanning tree,", "start": 1922.32, "duration": 3.27}, {"text": "then we plug that in here.", "start": 1925.59, "duration": 1.62}, {"text": "Instead of guessing, we'll\njust take that edge--", "start": 1927.21, "duration": 2.74}, {"text": "we know it's in a\nminimum spanning tree--", "start": 1929.95, "duration": 2.42}, {"text": "and then we'll contract it\nand repeat this process.", "start": 1932.37, "duration": 3.28}, {"text": "So the tricky part-- I mean, it\nis true that the minimum weight", "start": 1935.65, "duration": 3.66}, {"text": "edge is in a minimum spanning\ntree, I'll give that away.", "start": 1939.31, "duration": 3.64}, {"text": "But the question is,\nwhat you do then?", "start": 1942.95, "duration": 2.385}, {"text": "And I guess you\ncontract and repeat", "start": 1948.22, "duration": 1.6}, {"text": "but, that will be\nKruskal's algorithm.", "start": 1949.82, "duration": 2.82}, {"text": "But this is, in some\nsense, a more general tool", "start": 1952.64, "duration": 4.08}, {"text": "that will let us identify\nedges that are guaranteed", "start": 1956.72, "duration": 2.22}, {"text": "to be in the minimum\nspanning tree,", "start": 1958.94, "duration": 1.458}, {"text": "even after we've already\nidentified some edges as being", "start": 1960.398, "duration": 2.502}, {"text": "in the minimum spanning tree,\nso it's a little more powerful.", "start": 1962.9, "duration": 3.92}, {"text": "Let's prove this claim.", "start": 1966.82, "duration": 4.44}, {"text": "This is where things\nget particularly cool.", "start": 1971.26, "duration": 2.49}, {"text": "And this is where we're\ngoing to use something", "start": 1989.714, "duration": 1.916}, {"text": "called a c and paste argument.", "start": 1991.63, "duration": 1.39}, {"text": "And if you are ever\ntrying to prove", "start": 1999.2, "duration": 1.57}, {"text": "a greedy algorithm\ncorrect, the first thing", "start": 2000.77, "duration": 2.12}, {"text": "that should come to your\nmind is cut and paste.", "start": 2002.89, "duration": 3.005}, {"text": "This is almost universally how\nyou prove greedy algorithms", "start": 2005.895, "duration": 3.185}, {"text": "to be correct, which is, suppose\nyou have some optimal solution", "start": 2009.08, "duration": 5.45}, {"text": "which doesn't have\nthe property you want,", "start": 2014.53, "duration": 2.06}, {"text": "like that it includes e here.", "start": 2016.59, "duration": 2.22}, {"text": "And then you modify it,\nusually by cutting out", "start": 2018.81, "duration": 2.52}, {"text": "one part of the solution and\npasting in a different part,", "start": 2021.33, "duration": 2.49}, {"text": "like e, and prove that you\nstill have an optimal solution,", "start": 2023.82, "duration": 4.36}, {"text": "and therefore, there\nis an optimal solution.", "start": 2028.18, "duration": 2.4}, {"text": "There is an MST that has\nthe property you want.", "start": 2030.58, "duration": 5.57}, {"text": "OK, so we're going to do that\nby starting from an arbitrary", "start": 2036.15, "duration": 3.47}, {"text": "minimum spanning tree.", "start": 2039.62, "duration": 2.51}, {"text": "So let T star be a minimum\nspanning tree of G,", "start": 2042.13, "duration": 8.2}, {"text": "and if the edge e is\nin there, we're done.", "start": 2050.33, "duration": 2.67}, {"text": "So presumably, e is not in\nthat minimum spanning tree.", "start": 2053.0, "duration": 4.77}, {"text": "We're going to modify\nT star to include e.", "start": 2060.42, "duration": 3.969}, {"text": "So again, let me draw the cut.", "start": 2064.389, "duration": 1.481}, {"text": "There's S and V minus\nS. We have some edge e", "start": 2068.672, "duration": 4.098}, {"text": "which crosses the\ncut, goes from u to v,", "start": 2072.77, "duration": 4.76}, {"text": "that's not in the\nminimum spanning tree.", "start": 2077.53, "duration": 1.77}, {"text": "Let's say in blue, I draw\nthe minimum spanning tree.", "start": 2079.3, "duration": 5.05}, {"text": "So you know, the\nminimum spanning tree", "start": 2084.35, "duration": 2.17}, {"text": "connects everything\ntogether here.", "start": 2086.52, "duration": 1.505}, {"text": "I claim it's got to have some\nedges that cross the cut,", "start": 2091.75, "duration": 5.024}, {"text": "because if it has no\nedges that cross the cut,", "start": 2096.774, "duration": 1.916}, {"text": "it doesn't connect vertices over\nhere with vertices over here.", "start": 2098.69, "duration": 3.34}, {"text": "So it may not use e, but some\nof the edges must cross the cut.", "start": 2102.03, "duration": 4.88}, {"text": "So here's a possible\nminimum spanning tree.", "start": 2106.91, "duration": 6.38}, {"text": "It happens to have sort of\ntwo components over here", "start": 2113.29, "duration": 2.61}, {"text": "in S, maybe.", "start": 2115.9, "duration": 0.7}, {"text": "Who knows?", "start": 2116.6, "duration": 2.82}, {"text": "But there's got to be at least\none edge the crosses over.", "start": 2119.42, "duration": 4.73}, {"text": "In fact, the minimum\nspanning tree, T star,", "start": 2124.15, "duration": 7.61}, {"text": "has to connect vertex\nu to vertex v, somehow.", "start": 2131.76, "duration": 6.13}, {"text": "It doesn't use e, but there's\ngot to be-- it's a tree,", "start": 2137.89, "duration": 2.82}, {"text": "so in fact, there has to\nbe a unique path from u", "start": 2140.71, "duration": 2.9}, {"text": "to v in the minimum\nspanning tree.", "start": 2143.61, "duration": 7.1}, {"text": "And now u is in S, v is not in\nS. So if you look at that path,", "start": 2150.71, "duration": 4.42}, {"text": "for a while, you\nmight stay in S,", "start": 2155.13, "duration": 1.5}, {"text": "but eventually you\nhave to leave S, which", "start": 2156.63, "duration": 2.78}, {"text": "means there has to be an\nedge like this one, which", "start": 2159.41, "duration": 4.24}, {"text": "I'll call it e prime,\nwhich transitions", "start": 2163.65, "duration": 4.41}, {"text": "from S to V minus S.", "start": 2168.06, "duration": 2.94}, {"text": "So there must be an edge e prime\nin the minimum spanning tree", "start": 2171.0, "duration": 9.95}, {"text": "that crosses the cut, because\nu and v are connected by a path", "start": 2180.95, "duration": 9.05}, {"text": "and that path starts in S,\nends not in S, so it's got", "start": 2190.0, "duration": 2.65}, {"text": "to transition at least once.", "start": 2192.65, "duration": 1.54}, {"text": "It might transition many\ntimes, but there has", "start": 2194.19, "duration": 2.38}, {"text": "to be at least one such edge.", "start": 2196.57, "duration": 2.03}, {"text": "And now what I'm going\nto do is cut and paste.", "start": 2198.6, "duration": 3.82}, {"text": "I'm going to remove e\nprime and add an e instead.", "start": 2202.42, "duration": 4.81}, {"text": "So I'm going to look at T\nstar minus e prime plus e.", "start": 2207.23, "duration": 8.755}, {"text": "I claim that is a\nminimum spanning tree.", "start": 2219.51, "duration": 2.93}, {"text": "First I want to claim, this is\nmaybe the more annoying part,", "start": 2222.44, "duration": 3.5}, {"text": "that it is a spanning tree.", "start": 2225.94, "duration": 1.48}, {"text": "This is more of a\ngraph theory thing.", "start": 2236.59, "duration": 3.54}, {"text": "I guess one comforting\nthing is that you've", "start": 2240.13, "duration": 2.8}, {"text": "preserved the number of\nedges, so it should still", "start": 2242.93, "duration": 3.15}, {"text": "be if you get one\nproperty, you get", "start": 2246.08, "duration": 3.01}, {"text": "the other, because I remove\none edge, add in one edge,", "start": 2249.09, "duration": 3.09}, {"text": "I'm still going to\nhave n minus 1 edges.", "start": 2252.18, "duration": 2.78}, {"text": "The worry, I guess, is that\nthings become disconnected", "start": 2254.96, "duration": 2.56}, {"text": "when you do that, but\nthat's essentially not", "start": 2257.52, "duration": 3.97}, {"text": "going to happen\nbecause if I think", "start": 2261.49, "duration": 1.75}, {"text": "of removing e prime, again, that\ndisconnects the tree into two", "start": 2263.24, "duration": 3.44}, {"text": "parts.", "start": 2266.68, "duration": 1.61}, {"text": "And I know, by this path, that\none part contains this vertex,", "start": 2268.29, "duration": 5.57}, {"text": "another part\ncontains this vertex,", "start": 2273.86, "duration": 1.67}, {"text": "and I know that this\nvertex is connected to u", "start": 2275.53, "duration": 2.77}, {"text": "and this vertex is connected\nto v. Maybe I should", "start": 2278.3, "duration": 2.08}, {"text": "call this u prime and v prime.", "start": 2280.38, "duration": 2.84}, {"text": "I know u and u prime\nare connected by a path.", "start": 2283.22, "duration": 2.81}, {"text": "I know v and v prime\nare connected by a path.", "start": 2286.03, "duration": 2.35}, {"text": "But I know that by\ndeleting e prime,", "start": 2288.38, "duration": 1.78}, {"text": "u prime and v prime are not\nconnected to each other.", "start": 2290.16, "duration": 2.74}, {"text": "Therefore, u and v are not\nconnected to each other,", "start": 2292.9, "duration": 2.4}, {"text": "after removing e prime.", "start": 2295.3, "duration": 1.67}, {"text": "So when I add in e, I newly\nconnect u and v again,", "start": 2296.97, "duration": 3.78}, {"text": "and so everything's\nconnected back together.", "start": 2300.75, "duration": 3.632}, {"text": "I have exactly the\nright number of edges.", "start": 2304.382, "duration": 1.708}, {"text": "Therefore, I'm a spanning tree.", "start": 2306.09, "duration": 1.7}, {"text": "So that's the graph\nthree theory part.", "start": 2310.3, "duration": 1.61}, {"text": "Now the interesting part\nfrom a greedy algorithm", "start": 2311.91, "duration": 2.0}, {"text": "is to prove to this is minimum,\nthat the weight is not too big.", "start": 2313.91, "duration": 5.93}, {"text": "So let's do that over here.", "start": 2319.84, "duration": 1.45}, {"text": "So I have the weight of T\nstar minus e plus-- minus e", "start": 2330.5, "duration": 11.93}, {"text": "prime plus e.", "start": 2342.43, "duration": 2.07}, {"text": "By linearity, this\nis just the weight", "start": 2344.5, "duration": 2.71}, {"text": "of T star minus the weight e\nprime plus the weight of e.", "start": 2347.21, "duration": 5.96}, {"text": "And now we're going\nto use this property,", "start": 2356.492, "duration": 1.708}, {"text": "we haven't that yet, e is a\nleast-weight edge crossing", "start": 2358.2, "duration": 3.65}, {"text": "the cut.", "start": 2361.85, "duration": 1.34}, {"text": "So e prime crosses\nthe cut, so does e,", "start": 2363.19, "duration": 3.105}, {"text": "but e is the smallest\npossible weight you", "start": 2366.295, "duration": 1.805}, {"text": "could have crossing the cut.", "start": 2368.1, "duration": 1.49}, {"text": "That means that-- I'll put that\nover here-- the weight of e", "start": 2369.59, "duration": 5.29}, {"text": "is less than or equal\nto the weight of e", "start": 2374.88, "duration": 2.47}, {"text": "prime, because e prime is\na particular edge crossing", "start": 2377.35, "duration": 3.61}, {"text": "the cut, e was the\nsmallest weight of them.", "start": 2380.96, "duration": 2.66}, {"text": "So that tells us\nsomething about this.", "start": 2383.62, "duration": 3.99}, {"text": "Signs are so difficult.\nI think that means", "start": 2387.61, "duration": 4.24}, {"text": "that this is negative or zero.", "start": 2391.85, "duration": 1.87}, {"text": "So this should be less than\nor equal to w of T star,", "start": 2396.82, "duration": 5.81}, {"text": "and that's what I\nwant, because that", "start": 2402.63, "duration": 1.61}, {"text": "says the weight of this\nspanning tree is less than", "start": 2404.24, "duration": 2.29}, {"text": "or equal to the optimum\nweight, the minimum weight.", "start": 2406.53, "duration": 2.894}, {"text": "So that means, actually,\nthis must be minimum.", "start": 2409.424, "duration": 1.916}, {"text": "So what I've done is I've\nconstructed a new minimum", "start": 2414.96, "duration": 2.35}, {"text": "spanning tree.", "start": 2417.31, "duration": 0.6}, {"text": "It's just as good as T star,\nbut now it includes my edge e,", "start": 2417.91, "duration": 4.644}, {"text": "and that's what I\nwanted to prove.", "start": 2422.554, "duration": 1.416}, {"text": "There is a minimum\nspanning tree that", "start": 2423.97, "duration": 1.85}, {"text": "contains e, provided e\nis the minimum weight", "start": 2425.82, "duration": 3.167}, {"text": "edge crossing a cut.", "start": 2428.987, "duration": 0.833}, {"text": "So that proves this\ngreedy choice property.", "start": 2433.11, "duration": 4.79}, {"text": "And I'm going to observe one\nextra feature of this proof,", "start": 2437.9, "duration": 5.78}, {"text": "which is that-- so\nwe cut and paste,", "start": 2443.68, "duration": 2.93}, {"text": "in the sense that we removed\none thing, which was e prime,", "start": 2446.61, "duration": 3.45}, {"text": "and we added a\ndifferent thing, e.", "start": 2450.06, "duration": 3.7}, {"text": "And a useful feature is that\nthe things that we change only", "start": 2453.76, "duration": 6.66}, {"text": "are edges that cross the cut.", "start": 2460.42, "duration": 2.59}, {"text": "So we only, let's say, modified\nedges that cross the cut.", "start": 2463.01, "duration": 8.86}, {"text": "I'm going to use that later.", "start": 2482.86, "duration": 1.716}, {"text": "We removed one edge that crossed\nthe cut, and we put in the one", "start": 2484.576, "duration": 2.624}, {"text": "that we wanted.", "start": 2487.2, "duration": 2.348}, {"text": "OK so far?", "start": 2489.548, "duration": 1.782}, {"text": "There's a bunch of lemmas.", "start": 2491.33, "duration": 3.362}, {"text": "Now we actually get to do\nalgorithms using these lemmas.", "start": 2494.692, "duration": 2.333}, {"text": "We'll start with maybe the\nless obvious algorithm,", "start": 2499.93, "duration": 4.86}, {"text": "but it's nice because it's\nvery much like Dijkstra.", "start": 2504.79, "duration": 2.69}, {"text": "It follows very closely\nto the Dijkstra model.", "start": 2507.48, "duration": 3.33}, {"text": "And then we'll get to\nthe one that we've all", "start": 2510.81, "duration": 2.211}, {"text": "been thinking about, which\nwas choose a minimum weight", "start": 2513.021, "duration": 2.249}, {"text": "edge, contract, and repeat.", "start": 2515.27, "duration": 2.19}, {"text": "That doesn't-- well, that does\nwork, but the obvious way is,", "start": 2517.46, "duration": 6.33}, {"text": "maybe, slow.", "start": 2523.79, "duration": 1.61}, {"text": "We want to do it in\nnear linear time.", "start": 2525.4, "duration": 2.47}, {"text": "Let's start with the\nDijkstra-like algorithm.", "start": 2540.075, "duration": 1.875}, {"text": "This is Prim's algorithm.", "start": 2546.13, "duration": 1.21}, {"text": "Maybe I'll start by\nwriting down the algorithm.", "start": 2556.41, "duration": 2.075}, {"text": "It's a little long.", "start": 2558.485, "duration": 1.275}, {"text": "In general, the idea-- we want\nto apply this greedy choice", "start": 2563.08, "duration": 3.63}, {"text": "property.", "start": 2566.71, "duration": 0.5}, {"text": "To apply the greedy\nchoice property,", "start": 2567.21, "duration": 1.5}, {"text": "you need to choose a cut.", "start": 2568.71, "duration": 2.86}, {"text": "With Prim, we're going to start\nout with an obvious cut, which", "start": 2571.57, "duration": 3.23}, {"text": "is a single vertex.", "start": 2574.8, "duration": 1.69}, {"text": "If we have a single\nvertex S, and we", "start": 2576.49, "duration": 2.82}, {"text": "say that is our set\ncapital S, then you know,", "start": 2579.31, "duration": 3.666}, {"text": "there's some images\ncoming out of it.", "start": 2582.976, "duration": 2.124}, {"text": "There's basically S\nversus everyone else.", "start": 2585.1, "duration": 3.8}, {"text": "That's a cut.", "start": 2588.9, "duration": 1.14}, {"text": "And so I could take\nthe minimum weight edge", "start": 2590.04, "duration": 1.87}, {"text": "coming out of that\ncut and put that", "start": 2591.91, "duration": 3.37}, {"text": "in my minimum spanning tree.", "start": 2595.28, "duration": 1.88}, {"text": "So when I do that, I put it\nin my minimum spanning tree", "start": 2597.16, "duration": 5.26}, {"text": "because I know it's in\nsome minimum spanning tree.", "start": 2602.42, "duration": 2.39}, {"text": "Now, I'm going to make capital\nS grow a little bit to include", "start": 2604.81, "duration": 4.08}, {"text": "that vertex, and repeat.", "start": 2608.89, "duration": 3.21}, {"text": "That's actually also a\nvery natural algorithm.", "start": 2612.1, "duration": 2.21}, {"text": "Start with a tiny s and just\nkeep growing it one by one.", "start": 2614.31, "duration": 3.47}, {"text": "At each stage use this lemma to\nguarantee the edge I'm adding", "start": 2617.78, "duration": 3.88}, {"text": "is still in the\nminimum spanning tree.", "start": 2621.66, "duration": 3.38}, {"text": "So to make that work\nout, we're always", "start": 2625.04, "duration": 3.6}, {"text": "going to need to choose the\nminimum weight edge that's", "start": 2628.64, "duration": 3.99}, {"text": "coming out of the cut.", "start": 2632.63, "duration": 3.92}, {"text": "And we'll do that\nusing a priority queue,", "start": 2636.55, "duration": 5.14}, {"text": "just like we do in Dijkstra.", "start": 2641.69, "duration": 1.23}, {"text": "So for every vertex\nthat's in V minus S,", "start": 2647.82, "duration": 3.64}, {"text": "we're going to have that\nvertex in the priority queue.", "start": 2651.46, "duration": 3.92}, {"text": "And the question is, what is\nthe key value of that node", "start": 2655.38, "duration": 6.49}, {"text": "stored in the priority queue?", "start": 2661.87, "duration": 2.49}, {"text": "So the invariant I'm going\nto have is that the key of v", "start": 2664.36, "duration": 5.4}, {"text": "is the minimum of the\nweights of the edges", "start": 2669.76, "duration": 6.31}, {"text": "that cross the cut into\nv. So for vertex v,", "start": 2676.07, "duration": 5.53}, {"text": "I want to look at\nthe-- I'm not going", "start": 2681.6, "duration": 1.76}, {"text": "to compute this every time,\nI'm only going to maintain it.", "start": 2683.36, "duration": 2.91}, {"text": "I want the minimum weight\nof an edge that starts in S", "start": 2686.27, "duration": 3.615}, {"text": "and goes to v, which is not in\nS because v in Q-- Q only stores", "start": 2689.885, "duration": 4.985}, {"text": "vertices that are not in\nS-- I want the key value", "start": 2694.87, "duration": 3.87}, {"text": "to be that minimum\nweight so if I choose", "start": 2698.74, "duration": 2.02}, {"text": "the overall minimum\nvertex, that gives me", "start": 2700.76, "duration": 3.03}, {"text": "the edge of minimum weight\nthat crosses the cut.", "start": 2703.79, "duration": 2.82}, {"text": "OK?", "start": 2706.61, "duration": 0.5}, {"text": "I've sort of divided this\nminimum vertex by vertex.", "start": 2707.11, "duration": 5.5}, {"text": "For every vertex\nover here, I'm going", "start": 2712.61, "duration": 3.18}, {"text": "to say, what's the minimum\nincoming weight from somebody", "start": 2715.79, "duration": 2.95}, {"text": "over here?", "start": 2718.74, "duration": 1.01}, {"text": "What's the minimum\nincoming weight", "start": 2719.75, "duration": 1.48}, {"text": "from someone over here to there?", "start": 2721.23, "duration": 1.81}, {"text": "To here?", "start": 2723.04, "duration": 1.676}, {"text": "Take the minimum\nof those things.", "start": 2724.716, "duration": 1.396}, {"text": "And of course, the\nmin of all those", "start": 2726.112, "duration": 1.458}, {"text": "will be the min of\nall those edges.", "start": 2727.57, "duration": 2.025}, {"text": "OK, that's how I'm\ndividing things up.", "start": 2729.595, "duration": 2.855}, {"text": "And this will be easier\nto maintain, but let me", "start": 2732.45, "duration": 2.64}, {"text": "first initialize everything.", "start": 2735.09, "duration": 1.965}, {"text": "OK, I guess we're going\nto actually initialize", "start": 2746.484, "duration": 1.916}, {"text": "with S being the empty set,\nso Q will store everybody,", "start": 2748.4, "duration": 6.18}, {"text": "except I'm going to get\nthings started by setting", "start": 2754.58, "duration": 5.21}, {"text": "for particular vertex little s.", "start": 2759.79, "duration": 2.64}, {"text": "I'm going to set\nits key to zero.", "start": 2762.43, "duration": 1.4}, {"text": "It doesn't matter\nwho little s is.", "start": 2767.31, "duration": 3.9}, {"text": "That's just your start vertex.", "start": 2771.21, "duration": 1.28}, {"text": "Just pick one vertex\nand set its key to zero.", "start": 2775.96, "duration": 3.79}, {"text": "That will force it\nto be chosen first", "start": 2779.75, "duration": 2.6}, {"text": "because for everyone else,\nfor v not equal to S,", "start": 2782.35, "duration": 9.83}, {"text": "I'm going to set\nthe key to infinity,", "start": 2792.18, "duration": 4.2}, {"text": "because we haven't yet seen\nany edges that go in there,", "start": 2796.38, "duration": 3.924}, {"text": "but we'll change\nthat in a moment.", "start": 2800.304, "duration": 1.416}, {"text": "OK, so that was the\ninitialization, now", "start": 2816.93, "duration": 4.12}, {"text": "we're going to do a loop.", "start": 2821.05, "duration": 1.97}, {"text": "We're going to keep going\nuntil the Q is empty,", "start": 2823.02, "duration": 2.99}, {"text": "because when the Q is empty,\nthat means S is everybody,", "start": 2826.01, "duration": 4.54}, {"text": "and at that point, we'll\nhave a spanning tree", "start": 2830.55, "duration": 2.11}, {"text": "on the whole graph, and\nit better be minimum.", "start": 2832.66, "duration": 3.345}, {"text": "OK, and we're going to\ndo that by extracting", "start": 2836.005, "duration": 5.205}, {"text": "the minimum from\nour priority Q. When", "start": 2841.21, "duration": 8.31}, {"text": "we remove Q-- we remove\nvertex u from the queue Q,", "start": 2849.52, "duration": 11.87}, {"text": "this means that we're\nadding u to S. OK,", "start": 2861.39, "duration": 3.53}, {"text": "by taking it out of Q,\nthat means it enters S,", "start": 2864.92, "duration": 3.11}, {"text": "by the invariant at the top.", "start": 2868.03, "duration": 3.04}, {"text": "So now we need to\nupdate this invariant,", "start": 2871.07, "duration": 4.515}, {"text": "that all the key\nvalues are correct.", "start": 2875.585, "duration": 1.935}, {"text": "As soon as we move\na vertex into S,", "start": 2877.52, "duration": 2.42}, {"text": "now there are new edges we have\nto consider from S to not S,", "start": 2879.94, "duration": 5.55}, {"text": "and we do that just by looking\nat all of the neighbors of u.", "start": 2885.49, "duration": 7.35}, {"text": "I haven't written\nthis in a long time,", "start": 2892.84, "duration": 1.65}, {"text": "but this is how it's\nusually written in Dijkstra,", "start": 2894.49, "duration": 2.71}, {"text": "except in Dijkstra, these\nare the outgoing edges from u", "start": 2897.2, "duration": 3.36}, {"text": "and v are the neighbors.", "start": 2900.56, "duration": 1.17}, {"text": "Here, it's an undirected\ngraph, so these are", "start": 2901.73, "duration": 1.97}, {"text": "all of the neighbors v of u.", "start": 2903.7, "duration": 1.88}, {"text": "This as an adjacency list.", "start": 2905.58, "duration": 3.05}, {"text": "OK, so we're looking at u,\nwhich has just been added to S,", "start": 2908.63, "duration": 9.409}, {"text": "and we're looking at the edges.", "start": 2918.039, "duration": 1.291}, {"text": "We want to look at the edge\nas they go to V minus S, only", "start": 2919.33, "duration": 3.5}, {"text": "those ones.", "start": 2922.83, "duration": 1.21}, {"text": "And then for those vertices v,\nwe need to update their keys,", "start": 2924.04, "duration": 4.35}, {"text": "because it used to just\ncount all of these edges that", "start": 2928.39, "duration": 3.66}, {"text": "went from the rest of S to\nv. And now we have a new edge", "start": 2932.05, "duration": 2.81}, {"text": "uv that v needs to consider,\nbecause u just got added to S.", "start": 2934.86, "duration": 6.38}, {"text": "So the first thing I'm\ngoing say is if v in in Q.", "start": 2941.24, "duration": 3.78}, {"text": "So we're just going to store\na Boolean for every vertex", "start": 2945.02, "duration": 4.0}, {"text": "about whether it's\nin the queue, and so", "start": 2949.02, "duration": 2.176}, {"text": "when I extract it\nfrom the queue,", "start": 2951.196, "duration": 1.374}, {"text": "I just set that\nBoolean to false.", "start": 2952.57, "duration": 2.28}, {"text": "Being in the queue is the\nsame as being not in S,", "start": 2954.85, "duration": 2.68}, {"text": "this is what Q represents.", "start": 2957.53, "duration": 2.756}, {"text": "So Q is over here, kind of.", "start": 2960.286, "duration": 3.714}, {"text": "So if we're in the queue,\nsame as saying v is not in S,", "start": 2964.0, "duration": 7.56}, {"text": "then we're going\nto do a check which", "start": 2971.56, "duration": 2.41}, {"text": "lets us compute the minimum.", "start": 2973.97, "duration": 1.47}, {"text": "This is going to look a\nlot like a relaxation.", "start": 2975.44, "duration": 1.93}, {"text": "Sorry.", "start": 2984.117, "duration": 0.5}, {"text": "A couple things\ngoing on because I", "start": 3002.12, "duration": 1.68}, {"text": "want to compute\nnot just the value", "start": 3003.8, "duration": 1.444}, {"text": "of the minimum spanning\ntree, I actually", "start": 3005.244, "duration": 1.666}, {"text": "want to find the\nminimum spanning tree,", "start": 3006.91, "duration": 1.625}, {"text": "so I'm going to store\nparent pointers.", "start": 3008.535, "duration": 2.815}, {"text": "But this is just\nbasically taking a min.", "start": 3011.35, "duration": 1.83}, {"text": "I say, if the\nweight of this edge", "start": 3013.18, "duration": 1.787}, {"text": "is smaller than what's\ncurrently in the key,", "start": 3014.967, "duration": 1.833}, {"text": "then update the key, because the\nkey is supposed to be the min.", "start": 3016.8, "duration": 3.61}, {"text": "OK, that's all we need to do to\nmaintain this invariant, this", "start": 3020.41, "duration": 3.151}, {"text": "for loop.", "start": 3023.561, "duration": 0.499}, {"text": "After the for loop, this\nproperty will be restored,", "start": 3024.06, "duration": 3.77}, {"text": "v dot key will be that minimum.", "start": 3027.83, "duration": 2.92}, {"text": "And furthermore, we kept track\nof where the minimums came", "start": 3030.75, "duration": 2.62}, {"text": "from, so when you end\nup extracting a vertex,", "start": 3033.37, "duration": 4.89}, {"text": "you've already figured\nout which edge you", "start": 3038.26, "duration": 4.55}, {"text": "added to put that into the set.", "start": 3042.81, "duration": 2.72}, {"text": "So in fact, u\nalready had a parent,", "start": 3045.53, "duration": 4.61}, {"text": "this would be u\ndot parent, and we", "start": 3050.14, "duration": 6.67}, {"text": "want to add that edge into\nthe minimum spanning tree", "start": 3056.81, "duration": 3.96}, {"text": "when we add u to S. Overall, let\nme write why this is happening.", "start": 3060.77, "duration": 7.18}, {"text": "At the end of the algorithm,\nfor every vertex v,", "start": 3070.81, "duration": 4.22}, {"text": "we want the v dot parent.", "start": 3075.03, "duration": 1.42}, {"text": "And that will be our\nminimum spanning tree.", "start": 3082.71, "duration": 2.607}, {"text": "Those are the edges that form\nthe minimum spanning tree.", "start": 3085.317, "duration": 2.333}, {"text": "Let's prove that this works.", "start": 3093.46, "duration": 4.285}, {"text": "Actually, let's do an example.", "start": 3112.995, "duration": 1.25}, {"text": "We've done enough\nproofs for a while.", "start": 3117.472, "duration": 2.523}, {"text": "Let's do it over here.", "start": 3119.995, "duration": 1.195}, {"text": "I need a little break.", "start": 3130.35, "duration": 1.93}, {"text": "Examples are fun, though easy\nto make mistakes, so correct me", "start": 3132.28, "duration": 4.14}, {"text": "if you see me making a mistake.", "start": 3136.42, "duration": 2.36}, {"text": "And let me draw a graph.", "start": 3138.78, "duration": 3.255}, {"text": "OK, weights.", "start": 3161.174, "duration": 1.746}, {"text": "14, 3, 8, 5, 6, 12, 7, 9, 15.", "start": 3162.92, "duration": 10.97}, {"text": "10.", "start": 3177.706, "duration": 0.5}, {"text": "OK.", "start": 3181.55, "duration": 2.03}, {"text": "Colors.", "start": 3183.58, "duration": 2.6}, {"text": "So I want to start\nat this vertex", "start": 3186.18, "duration": 3.4}, {"text": "just because I know it\ndoes an interesting thing,", "start": 3189.58, "duration": 2.89}, {"text": "or it's a nice example.", "start": 3192.47, "duration": 2.02}, {"text": "Here's my weighted\nundirected graph.", "start": 3194.49, "duration": 1.87}, {"text": "I want to compute\nminimum spanning tree.", "start": 3196.36, "duration": 1.98}, {"text": "I'm going to start\nwith a capital", "start": 3198.34, "duration": 3.61}, {"text": "S being-- well actually, I start\nwith capital S being nothing,", "start": 3201.95, "duration": 5.08}, {"text": "and all of the weights--\nall of the key values", "start": 3207.03, "duration": 3.01}, {"text": "are initially infinity.", "start": 3210.04, "duration": 1.22}, {"text": "So I'm going to write\nthe key values in blue.", "start": 3211.26, "duration": 3.26}, {"text": "So initially everything is\ninfinity for every vertex,", "start": 3214.52, "duration": 10.71}, {"text": "except for S the value is zero.", "start": 3225.23, "duration": 2.77}, {"text": "So all of these things\nare in my priority queue,", "start": 3230.72, "duration": 2.81}, {"text": "and so when I extract from the\nqueue, I of course get S. OK,", "start": 3233.53, "duration": 4.96}, {"text": "that's the point of that set up.", "start": 3238.49, "duration": 2.5}, {"text": "So that's when I draw the red\ncircle containing little s.", "start": 3240.99, "duration": 3.65}, {"text": "The red circle here is\nsupposed to be capital S.", "start": 3244.64, "duration": 3.84}, {"text": "So at this point, I've\nadded capital S-- little s", "start": 3248.48, "duration": 3.68}, {"text": "to capital S, and then I look\nat all of the neighbors v of S.", "start": 3252.16, "duration": 7.4}, {"text": "And I make sure that they are\noutside of S. In this case,", "start": 3259.56, "duration": 3.31}, {"text": "they all are.", "start": 3262.87, "duration": 0.63}, {"text": "All three neighbors, these\nthree guys, are not in S.", "start": 3263.5, "duration": 4.385}, {"text": "And then I look at the\nweights of the edges.", "start": 3267.885, "duration": 2.245}, {"text": "Here I have a weight 7 edge.", "start": 3270.13, "duration": 1.79}, {"text": "That's smaller than\ninfinity, so I'm", "start": 3271.92, "duration": 2.07}, {"text": "going to cross out\ninfinity and write 7.", "start": 3273.99, "duration": 2.98}, {"text": "And 15 is smaller\nthan infinity, so I'm", "start": 3276.97, "duration": 2.46}, {"text": "going to cross out\ninfinity and write 15.", "start": 3279.43, "duration": 2.244}, {"text": "And 10, surprise, is\nsmaller than infinity.", "start": 3281.674, "duration": 3.465}, {"text": "So I'm going to cross\nout infinity rate 10.", "start": 3285.139, "duration": 1.791}, {"text": "So now I've updated the key\nvalues for those three nodes.", "start": 3286.93, "duration": 4.14}, {"text": "I should mention in\nthe priority queue,", "start": 3291.07, "duration": 2.43}, {"text": "to do that, that is a\ndecrease-key operation.", "start": 3293.5, "duration": 4.71}, {"text": "This thing here\nis a decrease-key.", "start": 3298.21, "duration": 3.235}, {"text": "You need to update the\npriority queue to say,", "start": 3301.445, "duration": 1.875}, {"text": "hey look, the key of\nthis node changed.", "start": 3303.32, "duration": 3.77}, {"text": "And so you're going to have\nto move it around in the heap,", "start": 3307.09, "duration": 2.83}, {"text": "or whatever.", "start": 3309.92, "duration": 2.48}, {"text": "Just like Dijkstra,\nsame thing happens.", "start": 3312.4, "duration": 2.21}, {"text": "OK, so I've decreased the\nkey of those three nodes.", "start": 3314.61, "duration": 2.25}, {"text": "Now I do another iteration.", "start": 3316.86, "duration": 1.37}, {"text": "I look at all of the\nkey values stored.", "start": 3318.23, "duration": 2.22}, {"text": "The smallest one is 7, because\nthis node's no longer in there.", "start": 3320.45, "duration": 6.75}, {"text": "So I'm going to add\nthis node to capital S.", "start": 3327.2, "duration": 3.64}, {"text": "So capital S is going to\ngrow to include that node.", "start": 3330.84, "duration": 4.08}, {"text": "I've extracted it\nfrom the queue.", "start": 3334.92, "duration": 1.88}, {"text": "And now I look at all the\nneighbors of that node.", "start": 3336.8, "duration": 2.77}, {"text": "So, for example,\nhere's a neighbor.", "start": 3339.57, "duration": 2.95}, {"text": "9 is less than\ninfinity, so I write 9.", "start": 3342.52, "duration": 4.15}, {"text": "Here's a neighbor.", "start": 3346.67, "duration": 0.96}, {"text": "12 is less than\ninfinity, so I write 12.", "start": 3347.63, "duration": 3.53}, {"text": "5 is less than\ninfinity, so I write 5.", "start": 3351.16, "duration": 2.65}, {"text": "Here's a neighbor,\nbut s is in big S,", "start": 3353.81, "duration": 3.22}, {"text": "so we're not going\nto touch that edge.", "start": 3357.03, "duration": 2.18}, {"text": "I'm not going to touch s.", "start": 3359.21, "duration": 2.58}, {"text": "OK?", "start": 3361.79, "duration": 0.67}, {"text": "I will end up looking at every\nedge twice, so no big deal.", "start": 3362.46, "duration": 3.61}, {"text": "Right now, who's smallest?", "start": 3366.07, "duration": 1.7}, {"text": "5, I think.", "start": 3367.77, "duration": 1.62}, {"text": "It's the smallest blue key.", "start": 3369.39, "duration": 3.05}, {"text": "So we're going to\nadd 5 to the set.", "start": 3372.44, "duration": 2.09}, {"text": "Sorry, add this\nvertex to the set S,", "start": 3377.73, "duration": 2.7}, {"text": "and then look at all of the\noutgoing edges from here.", "start": 3380.43, "duration": 3.94}, {"text": "So 6 is actually less\nthan 12, so this edge", "start": 3384.37, "duration": 4.35}, {"text": "is better than that one was.", "start": 3388.72, "duration": 2.48}, {"text": "Then, what's that, an 8?", "start": 3391.2, "duration": 2.191}, {"text": "8 Is less than 10.", "start": 3393.391, "duration": 1.599}, {"text": "14 is definitely\nless than infinity.", "start": 3397.82, "duration": 2.85}, {"text": "And we look at this\nedge, but that edge", "start": 3400.67, "duration": 2.35}, {"text": "stays inside the red set,\nso we forget about it.", "start": 3403.02, "duration": 3.82}, {"text": "Next smallest value is 6.", "start": 3406.84, "duration": 3.44}, {"text": "So 6, we add this guy in.", "start": 3410.28, "duration": 8.96}, {"text": "We look at the edges\nfrom that vertex,", "start": 3419.24, "duration": 2.15}, {"text": "but actually nothing happens\nbecause all those vertices", "start": 3421.39, "duration": 2.55}, {"text": "are inside capital S, so we\ndon't care about those edges.", "start": 3423.94, "duration": 4.76}, {"text": "Next one is 8, so we'll\nadd in this vertex.", "start": 3428.7, "duration": 11.65}, {"text": "And there's only one edge that\nleaves the cut, so that's 3,", "start": 3440.35, "duration": 3.48}, {"text": "and 3 is indeed better than 14.", "start": 3443.83, "duration": 3.244}, {"text": "So never mind.", "start": 3447.074, "duration": 4.626}, {"text": "Stop.", "start": 3451.7, "duration": 2.77}, {"text": "So good, now I think\nthe smallest key is 3.", "start": 3454.47, "duration": 4.287}, {"text": "Notice smallest key is\nsmaller than anything", "start": 3458.757, "duration": 1.833}, {"text": "we've seen before, other\nthan 0, but that's OK.", "start": 3460.59, "duration": 2.8}, {"text": "I'll just add it in,\nand there's no edges", "start": 3463.39, "duration": 3.87}, {"text": "leaving the cut from there.", "start": 3467.26, "duration": 1.66}, {"text": "And then over here,\nwe have 9 and 15.", "start": 3468.92, "duration": 2.22}, {"text": "So first we'll add 9.", "start": 3471.14, "duration": 2.18}, {"text": "There's no edges there.", "start": 3473.32, "duration": 1.25}, {"text": "Then we add 15.", "start": 3474.57, "duration": 1.1}, {"text": "OK, now s is everything.", "start": 3475.67, "duration": 1.031}, {"text": "We're done.", "start": 3476.701, "duration": 0.499}, {"text": "Q is empty.", "start": 3477.2, "duration": 1.344}, {"text": "Where's the minimal\nspanning tree?", "start": 3478.544, "duration": 1.416}, {"text": "I forgot to draw it.", "start": 3479.96, "duration": 3.02}, {"text": "Luckily, all of the edges\nhere have different numbers", "start": 3482.98, "duration": 3.22}, {"text": "as labels.", "start": 3486.2, "duration": 0.81}, {"text": "So when I have a 3\nhere, what I mean is,", "start": 3487.01, "duration": 2.77}, {"text": "include 3 in the\nminimum spanning tree,", "start": 3489.78, "duration": 2.19}, {"text": "the edge that was labeled 3.", "start": 3491.97, "duration": 1.68}, {"text": "OK, so this will be a\nminimum spanning tree edge.", "start": 3493.65, "duration": 3.02}, {"text": "5 will be a minimum\nspanning tree edge.", "start": 3496.67, "duration": 2.89}, {"text": "These are actually\nthe parent pointers.", "start": 3499.56, "duration": 1.67}, {"text": "6 will be a minimum\nspanning tree edge.", "start": 3501.23, "duration": 2.79}, {"text": "7, 9, 15, and 8.", "start": 3504.02, "duration": 7.625}, {"text": "Every vertex except\nthe starting one", "start": 3514.72, "duration": 2.74}, {"text": "will have a parent, which means\nwe'll have exactly n minus 1", "start": 3517.46, "duration": 2.57}, {"text": "edges, that's a good sign.", "start": 3520.03, "duration": 2.85}, {"text": "And in fact, this will be\na minimum spanning tree.", "start": 3522.88, "duration": 2.44}, {"text": "That's the claim, because\nevery time we grew the circle", "start": 3525.32, "duration": 4.14}, {"text": "to include a bigger\nthing, we were", "start": 3529.46, "duration": 1.89}, {"text": "guaranteed that this edge was\nin the minimum spanning tree", "start": 3531.35, "duration": 4.62}, {"text": "by applying this\nproperty with that cut.", "start": 3535.97, "duration": 4.13}, {"text": "Let me just write that down.", "start": 3542.71, "duration": 1.54}, {"text": "OK, to prove\ncorrectness, you need", "start": 3553.43, "duration": 1.6}, {"text": "to prove an invariant that this\nkey, the key of every vertex,", "start": 3555.03, "duration": 4.72}, {"text": "always remains this minimum.", "start": 3559.75, "duration": 2.09}, {"text": "So this is an invariant.", "start": 3561.84, "duration": 1.007}, {"text": "You should prove\nthat by induction.", "start": 3562.847, "duration": 1.458}, {"text": "I won't prove it here.", "start": 3573.77, "duration": 1.04}, {"text": "But we have another invariant,\na more interesting one", "start": 3577.82, "duration": 6.46}, {"text": "from an MST\nperspective, you know,", "start": 3584.28, "duration": 1.866}, {"text": "it's just a sort of algorithm\nimplementation detail,", "start": 3586.146, "duration": 3.534}, {"text": "that the tree T sub S,\nwithin S is always contained", "start": 3589.68, "duration": 9.96}, {"text": "in a minimum spanning\ntree of G. So over here,", "start": 3599.64, "duration": 5.975}, {"text": "we have this way of computing\nminimum spanning tree", "start": 3605.615, "duration": 2.125}, {"text": "for all vertices v,\nbut what I'd like", "start": 3607.74, "duration": 2.62}, {"text": "to do is just look\nat v that's currently", "start": 3610.36, "duration": 2.11}, {"text": "in S. By the end, that\nwill be the whole thing,", "start": 3612.47, "duration": 3.21}, {"text": "but if I look at v in S, and I\nalways look at the edge from v", "start": 3615.68, "duration": 3.78}, {"text": "to v dot parent, that\ngives me this tree TS.", "start": 3619.46, "duration": 5.12}, {"text": "I claim it will be contained\nin a minimum spanning tree", "start": 3624.58, "duration": 3.01}, {"text": "of the entire graph,\nproof by induction.", "start": 3627.59, "duration": 5.26}, {"text": "So by induction, let's assume--\ninduction hypothesis will", "start": 3632.85, "duration": 6.99}, {"text": "be that, let's say there is\na minimum spanning tree T", "start": 3639.84, "duration": 5.59}, {"text": "star, which contains\nT sub S, and then what", "start": 3645.43, "duration": 4.58}, {"text": "the algorithm does, is it\nrepeatedly grows S by adding", "start": 3650.01, "duration": 4.01}, {"text": "this vertex u to S. So let's\nsuppose that it adds u to S.", "start": 3654.02, "duration": 11.22}, {"text": "So I'm actually going to look\nat the edge that it adds.", "start": 3665.24, "duration": 2.99}, {"text": "So we have S and V minus S, and\nwe do this thing, like we just", "start": 3678.99, "duration": 8.64}, {"text": "saw, of growing by one.", "start": 3687.63, "duration": 2.43}, {"text": "We add one new vertex\nover here to S,", "start": 3690.06, "duration": 4.31}, {"text": "and that vertex has a parent\nedge, has a parent pointer.", "start": 3694.37, "duration": 4.87}, {"text": "So this edge, I'm\ngoing to call e.", "start": 3699.24, "duration": 2.08}, {"text": "So we're adding some vertex u\nthat we extract at the minimum,", "start": 3701.32, "duration": 3.3}, {"text": "and we also added an\nedge e to this TS,", "start": 3704.62, "duration": 4.61}, {"text": "because we grew S by 1.", "start": 3709.23, "duration": 3.55}, {"text": "OK, when I do that,\nall I do is say, look,", "start": 3712.78, "duration": 3.9}, {"text": "greedy choice\nproperty guarantees", "start": 3716.68, "duration": 2.3}, {"text": "there's a minimum spanning\ntree that contains e.", "start": 3718.98, "duration": 4.18}, {"text": "Because we extracted\nthe min from the queue,", "start": 3723.16, "duration": 2.32}, {"text": "and the key values are this,\nas I was arguing before,", "start": 3725.48, "duration": 2.84}, {"text": "that is the minimum overall\nedge that crosses the cut.", "start": 3728.32, "duration": 4.86}, {"text": "e is a minimum weight\nedge that crosses the cut,", "start": 3733.18, "duration": 2.42}, {"text": "and so by greedy\nchoice property,", "start": 3735.6, "duration": 13.77}, {"text": "there is some minimum\nspanning tree that contains e.", "start": 3749.37, "duration": 5.64}, {"text": "But actually, I need that\nthe minimum spanning tree", "start": 3755.01, "duration": 2.24}, {"text": "not only contains e, but also\ncontains all the other spanning", "start": 3757.25, "duration": 4.15}, {"text": "tree edges that we had\nalready said were in T star.", "start": 3761.4, "duration": 4.65}, {"text": "OK, so here's where I'm going\nto use the stronger property.", "start": 3766.05, "duration": 4.41}, {"text": "I can modify T star to\ninclude e and T sub S.", "start": 3770.46, "duration": 15.5}, {"text": "So we already assumed that T\nstar includes T sub S. I just", "start": 3785.96, "duration": 3.44}, {"text": "don't want to break that.", "start": 3789.4, "duration": 2.46}, {"text": "And if you remember the proof\nof this greedy choice property,", "start": 3791.86, "duration": 2.9}, {"text": "we said, well all we need to do\nis remove one edge that crosses", "start": 3794.76, "duration": 4.6}, {"text": "the cut and replace it with e.", "start": 3799.36, "duration": 2.685}, {"text": "So here what I'm saying\nis there's some edge,", "start": 3802.045, "duration": 1.875}, {"text": "yeah, maybe there's some\nedge over here in T star", "start": 3803.92, "duration": 3.56}, {"text": "that we had to remove,\nand then we put e in.", "start": 3807.48, "duration": 3.37}, {"text": "And then we get a minimum\nspanning tree again,", "start": 3810.85, "duration": 3.32}, {"text": "T star prime.", "start": 3814.17, "duration": 2.59}, {"text": "OK, this edge that I remove\ncannot be one of the TS edges", "start": 3816.76, "duration": 5.77}, {"text": "because the TS edges\nare all inside S.", "start": 3822.53, "duration": 3.13}, {"text": "So because I'm only removing\nan edge that crosses the cut,", "start": 3825.66, "duration": 3.61}, {"text": "I'm not disturbing TS.", "start": 3829.27, "duration": 1.64}, {"text": "TS will remain inside T star,\nbut then I get the new property", "start": 3830.91, "duration": 5.32}, {"text": "that e is inside T star, and so\nI prove this invariant holds.", "start": 3836.23, "duration": 6.385}, {"text": "OK?", "start": 3842.615, "duration": 0.5}, {"text": "I keep changing T star, but I\nalways preserve the property", "start": 3843.115, "duration": 3.065}, {"text": "that all of the spanning\ntree edges that are inside S", "start": 3846.18, "duration": 2.93}, {"text": "are contained in some minimum\nspanning tree of G. Maybe", "start": 3849.11, "duration": 3.145}, {"text": "I'll add in some for emphasis.", "start": 3852.255, "duration": 1.375}, {"text": "Cool?", "start": 3857.52, "duration": 1.11}, {"text": "So that's how we use\nthe greedy choice", "start": 3858.63, "duration": 1.8}, {"text": "property to get correctness\nof Prim's algorithm.", "start": 3860.43, "duration": 4.21}, {"text": "What's the running time\nof Prim's algorithm?", "start": 3866.895, "duration": 1.833}, {"text": "Same as Dijkstra, good answer.", "start": 3876.05, "duration": 1.64}, {"text": "I guess it depends what\npriority queue you use,", "start": 3881.19, "duration": 2.455}, {"text": "but whatever priority queue you\nuse, it's the same as Dijkstra.", "start": 3883.645, "duration": 2.855}, {"text": "And so in particular, if we\nuse Fibonacci heaps, which,", "start": 3895.79, "duration": 2.64}, {"text": "again, we're not covering, we\nget V log V plus E. In general,", "start": 3898.43, "duration": 11.216}, {"text": "for every edge, we have\nto do a decrease-key.", "start": 3909.646, "duration": 1.874}, {"text": "Actually, for every edge we do\ntwo decrease-key operations,", "start": 3911.52, "duration": 2.64}, {"text": "potentially, if\nyou think about it.", "start": 3914.16, "duration": 2.56}, {"text": "But this for loop over\nthe adjacency, the cost", "start": 3916.72, "duration": 5.06}, {"text": "of this stuff is constant.", "start": 3921.78, "duration": 2.01}, {"text": "The cost of this is the\ndegree of the vertex u.", "start": 3923.79, "duration": 6.74}, {"text": "And so we're basically\ndoing the sum", "start": 3930.53, "duration": 2.38}, {"text": "of the degrees of\nthe vertices, which", "start": 3932.91, "duration": 3.74}, {"text": "is the number of edges times 2.", "start": 3936.65, "duration": 1.93}, {"text": "That's the handshaking lemma.", "start": 3938.58, "duration": 1.5}, {"text": "So for every edge,\nwe're potentially", "start": 3940.08, "duration": 2.23}, {"text": "doing one decrease-key\noperation,", "start": 3942.31, "duration": 2.03}, {"text": "and with Fibonacci heaps,\nthat's constant time.", "start": 3944.34, "duration": 2.54}, {"text": "But we're also doing V extract\nmins those cost log V time,", "start": 3946.88, "duration": 3.327}, {"text": "cause the size of\nthe queue is at most", "start": 3950.207, "duration": 1.583}, {"text": "V, and so that is actually\nthe right running time.", "start": 3951.79, "duration": 3.36}, {"text": "Just like Dijkstra, so\neasy formula to remember.", "start": 3955.15, "duration": 2.55}, {"text": "All right, let's do one more\nalgorithm, Kruskal's algorithm.", "start": 3960.63, "duration": 6.39}, {"text": "Kruskal's algorithm is a\nlittle bit weirder from the S", "start": 4001.28, "duration": 3.58}, {"text": "perspective, I guess.", "start": 4004.86, "duration": 3.272}, {"text": "We'll see what cuts\nwe're using in a moment,", "start": 4008.132, "duration": 4.67}, {"text": "but it's based\naround this idea of,", "start": 4012.802, "duration": 1.458}, {"text": "well, the globally\nminimum weight", "start": 4014.26, "duration": 1.96}, {"text": "edge is the minimum weight edge\nfor all cuts that cross it,", "start": 4016.22, "duration": 5.17}, {"text": "or for all cuts that it crosses.", "start": 4021.39, "duration": 2.37}, {"text": "The globally minimum weight edge\nis going to be a valid choice,", "start": 4023.76, "duration": 3.4}, {"text": "and so, by this\ntheorem, you pick", "start": 4027.16, "duration": 1.49}, {"text": "some S that partitions\nthe endpoints of e,", "start": 4028.65, "duration": 4.4}, {"text": "therefore e is in a\nminimum spanning tree.", "start": 4033.05, "duration": 1.75}, {"text": "So let's choose that one\nfirst, and then repeat.", "start": 4034.8, "duration": 3.71}, {"text": "Conceptually, what we want to\ndo is that DP idea of contract", "start": 4038.51, "duration": 3.17}, {"text": "the vertex, sorry,\ncontract the edge", "start": 4041.68, "duration": 2.71}, {"text": "and then find the minimum\nweight edge that remains.", "start": 4044.39, "duration": 3.19}, {"text": "But the way I'm going to phrase\nit doesn't explicitly contract,", "start": 4047.58, "duration": 2.82}, {"text": "although implicitly,\nit's doing that.", "start": 4050.4, "duration": 3.56}, {"text": "And there's a catch.", "start": 4053.96, "duration": 2.86}, {"text": "The catch is suppose I've\npicked some edges out to be", "start": 4059.8, "duration": 7.644}, {"text": "in my minimum spanning tree.", "start": 4067.444, "duration": 1.166}, {"text": "Suppose this was\nthe minimum weight", "start": 4068.61, "duration": 1.55}, {"text": "and this was the next minimum,\nnext minimum, next minimum,", "start": 4070.16, "duration": 1.905}, {"text": "next minimum.", "start": 4072.065, "duration": 0.745}, {"text": "Suppose that the next\nlar-- at this point,", "start": 4072.81, "duration": 3.64}, {"text": "after contracting those\nedges, the minimum weight edge", "start": 4076.45, "duration": 3.26}, {"text": "is this one.", "start": 4079.71, "duration": 3.03}, {"text": "Do I want to put this edge\nin my minimum spanning tree?", "start": 4082.74, "duration": 3.44}, {"text": "No.", "start": 4086.18, "duration": 1.2}, {"text": "That would add a cycle.", "start": 4087.38, "duration": 0.96}, {"text": "Cycles are bad.", "start": 4088.34, "duration": 2.37}, {"text": "This is the tricky\npart of this algorithm.", "start": 4090.71, "duration": 1.85}, {"text": "I have to keep track of\nwhether I should actually", "start": 4092.56, "duration": 4.0}, {"text": "add an edge, in other\nwords, whether this vertex", "start": 4096.56, "duration": 3.03}, {"text": "and this vertex have already\nbeen connected to each other.", "start": 4099.59, "duration": 4.25}, {"text": "And it turns out you've\nalready seen a data structure", "start": 4103.84, "duration": 2.349}, {"text": "to do that.", "start": 4106.189, "duration": 1.441}, {"text": "This is what I call\nunion-find and the textbook", "start": 4107.63, "duration": 2.599}, {"text": "calls it disjoint-set\ndata structure.", "start": 4110.229, "duration": 1.861}, {"text": "So it's in recitation.", "start": 4117.609, "duration": 3.091}, {"text": "Recitation 3.", "start": 4120.7, "duration": 0.835}, {"text": "So I want to maintain\nfor my MST so far,", "start": 4128.43, "duration": 2.69}, {"text": "so I'm adding edges\none at a time.", "start": 4131.12, "duration": 1.97}, {"text": "And I have some tree-- well,\nit's actually a forest,", "start": 4133.09, "duration": 2.51}, {"text": "but I'm still\ngoing to call it T,", "start": 4135.6, "duration": 3.95}, {"text": "and I'm going to maintain it\nin a union-find structure,", "start": 4139.55, "duration": 6.19}, {"text": "disjoint-set set data structure.", "start": 4145.74, "duration": 3.03}, {"text": "Remember, this had three\noperations, make set, union,", "start": 4148.77, "duration": 4.0}, {"text": "and find set.", "start": 4152.77, "duration": 1.33}, {"text": "Tell me given an item which\nset does it belong to?", "start": 4154.1, "duration": 5.439}, {"text": "We're going to use\nthat, the sets are going", "start": 4159.539, "duration": 1.791}, {"text": "to be the connected components.", "start": 4161.33, "duration": 2.23}, {"text": "So after I've added these edges,\nthese guys, these vertices", "start": 4163.56, "duration": 4.104}, {"text": "here, will form one\nconnected component,", "start": 4167.664, "duration": 1.666}, {"text": "and, you know,\neverybody else will just", "start": 4169.33, "duration": 1.985}, {"text": "be in its own\nseparate component.", "start": 4171.315, "duration": 2.425}, {"text": "So to get started, I'm not going\nto have any edges in my tree,", "start": 4173.74, "duration": 6.76}, {"text": "and so every vertex is in\nits own connected component.", "start": 4180.5, "duration": 3.39}, {"text": "So I represent that by calling\nmake-set v for all vertices.", "start": 4183.89, "duration": 7.53}, {"text": "So every vertex lives in\nits own singleton set.", "start": 4191.42, "duration": 4.58}, {"text": "OK, now I'd like to do the\nminimum weight edge, and then", "start": 4196.0, "duration": 4.245}, {"text": "the next minimum weight edge,\nand the next minimum weight", "start": 4200.245, "duration": 2.375}, {"text": "edge.", "start": 4202.62, "duration": 0.5}, {"text": "That's also known\nas sorting, so I'm", "start": 4203.12, "duration": 2.33}, {"text": "going to sort E by\nweight, increasing weight,", "start": 4205.45, "duration": 10.76}, {"text": "so I get to start with\nthe minimum weight edge.", "start": 4216.21, "duration": 3.87}, {"text": "So now I'm going to do a\nfor-loop over the edges,", "start": 4230.69, "duration": 12.32}, {"text": "increasing order by weight.", "start": 4243.01, "duration": 1.51}, {"text": "Now I want to know--\nI have an edge,", "start": 4249.64, "duration": 3.72}, {"text": "it's basically the minimum\nweight edge among the edges", "start": 4253.36, "duration": 2.25}, {"text": "that remain, and so I want to\nknow whether I should add it.", "start": 4255.61, "duration": 3.13}, {"text": "I'm going to add it provided\nthe endpoints of the edge", "start": 4258.74, "duration": 3.154}, {"text": "are not in the same\nconnected component.", "start": 4261.894, "duration": 1.666}, {"text": "How can I find out\nwhether two vertices", "start": 4266.89, "duration": 2.27}, {"text": "are in the same connected\ncomponent, given this setup?", "start": 4269.16, "duration": 2.388}, {"text": "Yeah?", "start": 4276.528, "duration": 0.836}, {"text": "AUDIENCE: Call find-set\ntwice and then--", "start": 4277.364, "duration": 1.666}, {"text": "ERIK DEMAINE: Call\nfind-set twice and see", "start": 4279.03, "duration": 1.708}, {"text": "whether they're equal, exactly.", "start": 4280.738, "duration": 2.372}, {"text": "Good answer.", "start": 4283.11, "duration": 0.77}, {"text": "So if you find-set of u\nis from find-set of v,", "start": 4286.84, "duration": 11.68}, {"text": "find-set just returns\nsome identifier.", "start": 4298.52, "duration": 2.874}, {"text": "We don't really care\nwhat it is, as long", "start": 4301.394, "duration": 1.666}, {"text": "as it returns the same\nthing for the same set.", "start": 4303.06, "duration": 2.487}, {"text": "So if u and v are in the\nsame set, in other words,", "start": 4305.547, "duration": 2.083}, {"text": "they're in the same\nconnected component,", "start": 4307.63, "duration": 1.18}, {"text": "then find-set will return\nthe same thing for both.", "start": 4308.81, "duration": 2.48}, {"text": "But provided they're\nnot equal, then", "start": 4311.29, "duration": 2.12}, {"text": "we can add this\nedge into our tree.", "start": 4313.41, "duration": 8.48}, {"text": "So we add e to the\nset T, and then", "start": 4321.89, "duration": 4.44}, {"text": "we have to represent\nthe fact that we just", "start": 4326.33, "duration": 1.82}, {"text": "merged the connected\ncomponents of u and v,", "start": 4328.15, "duration": 2.44}, {"text": "and we do that\nwith a union call.", "start": 4330.59, "duration": 1.77}, {"text": "And if you're ever\nwondering what", "start": 4337.336, "duration": 1.374}, {"text": "the heck do we use union-find\nfor, this is the answer.", "start": 4338.71, "duration": 3.56}, {"text": "The union-find data structure\nwas invented in order", "start": 4342.27, "duration": 2.37}, {"text": "to implement Kruskal's\nalgorithm faster, OK?", "start": 4344.64, "duration": 3.07}, {"text": "In fact, a lot of\ndata structures", "start": 4347.71, "duration": 1.4}, {"text": "come from graph algorithms.", "start": 4349.11, "duration": 2.1}, {"text": "The reason Fibonacci\nheaps were invented", "start": 4351.21, "duration": 2.99}, {"text": "was because there was\nDijkstra's algorithm", "start": 4354.2, "duration": 1.77}, {"text": "and we wanted it to run fast.", "start": 4355.97, "duration": 1.48}, {"text": "So same deal here, you just\nsaw it in the reverse order.", "start": 4357.45, "duration": 3.25}, {"text": "First you saw union-find.", "start": 4360.7, "duration": 1.08}, {"text": "Now, union-find, you\nknow you can solve v", "start": 4361.78, "duration": 1.93}, {"text": "in alpha of n time, the\ninverse Ackermann function,", "start": 4363.71, "duration": 2.86}, {"text": "super, super tiny, slow growing\nfunction, smaller than log", "start": 4366.57, "duration": 3.2}, {"text": "log log log log log log.", "start": 4369.77, "duration": 1.6}, {"text": "Really small.", "start": 4373.94, "duration": 1.62}, {"text": "But we have this sorting,\nwhich is kind of annoying.", "start": 4375.56, "duration": 2.44}, {"text": "So the overall\nrunning time-- we'll", "start": 4378.0, "duration": 2.395}, {"text": "worry about correctness\nin a moment.", "start": 4380.395, "duration": 2.345}, {"text": "We have to sort--\nto sort E by weight.", "start": 4382.74, "duration": 7.2}, {"text": "So I'll just call\nthat's sort of E.", "start": 4389.94, "duration": 2.49}, {"text": "Then we have to do some unions.", "start": 4392.43, "duration": 3.47}, {"text": "I guess for every edge,\npotentially, we do a union.", "start": 4395.9, "duration": 4.52}, {"text": "I'll just write E times alpha\nof v. And then we have to do,", "start": 4400.42, "duration": 8.86}, {"text": "well, we also have to\nfind-sets, but same deal.", "start": 4409.28, "duration": 2.485}, {"text": "So find-set and union\ncost alpha amortized,", "start": 4411.765, "duration": 3.225}, {"text": "so the total cost for\ndoing this for all edges", "start": 4414.99, "duration": 1.97}, {"text": "is going to be the number\nof edges times alpha,", "start": 4416.96, "duration": 3.38}, {"text": "and then there's like plus v,\nI guess, but that's smaller.", "start": 4420.34, "duration": 5.36}, {"text": "That's a connected graph.", "start": 4425.7, "duration": 1.53}, {"text": "So other than the sorting time,\nthis algorithm is really good.", "start": 4427.23, "duration": 3.77}, {"text": "It's faster.", "start": 4431.0, "duration": 2.91}, {"text": "But if you're sorting\nby an n log n algorithm,", "start": 4433.91, "duration": 3.21}, {"text": "this is not so great.", "start": 4437.12, "duration": 2.95}, {"text": "That's how it goes.", "start": 4440.07, "duration": 0.96}, {"text": "I think you can reduce this to\nsorting just v things, instead", "start": 4441.03, "duration": 3.69}, {"text": "of E things, with a\nlittle bit of effort,", "start": 4444.72, "duration": 2.77}, {"text": "like doing a select operation.", "start": 4447.49, "duration": 1.57}, {"text": "But when this algorithm\nis really good", "start": 4449.06, "duration": 2.63}, {"text": "is if your weights are integers.", "start": 4451.69, "duration": 2.55}, {"text": "If You have weights, let's\nsay weight of e is 0 or 1", "start": 4454.24, "duration": 9.3}, {"text": "or, say, n to the c,\nfor some constant c,", "start": 4463.54, "duration": 3.79}, {"text": "then I can use rate x\nsort, linear time sorting,", "start": 4467.33, "duration": 4.01}, {"text": "and then this will\nbe linear time,", "start": 4471.34, "duration": 1.58}, {"text": "and I'm only paying\nE times alpha.", "start": 4472.92, "duration": 2.03}, {"text": "So if you have\nreasonably small weights,", "start": 4474.95, "duration": 3.15}, {"text": "Kruskal's algorithm is better.", "start": 4478.1, "duration": 1.52}, {"text": "Otherwise, I guess you\nprefer Prim's algorithm.", "start": 4479.62, "duration": 5.3}, {"text": "But either away.", "start": 4484.92, "duration": 0.81}, {"text": "I actually used a variation\nof this algorithm recently.", "start": 4488.87, "duration": 2.79}, {"text": "If you want to generate\na random spanning tree,", "start": 4491.66, "duration": 2.61}, {"text": "then you can use exactly\nthe same algorithm.", "start": 4494.27, "duration": 2.53}, {"text": "You pick a random manage that\nyou haven't picked already, you", "start": 4496.8, "duration": 3.08}, {"text": "see, can I add this\nedge with this test?", "start": 4499.88, "duration": 3.36}, {"text": "If you can, add it and repeat.", "start": 4503.24, "duration": 1.741}, {"text": "That will give you a\nrandom spanning tree.", "start": 4504.981, "duration": 1.749}, {"text": "It will generate all spanning\ntrees uniform leap likely.", "start": 4506.73, "duration": 4.26}, {"text": "So that's a fun fact,\nuseful thing for union-find.", "start": 4510.99, "duration": 5.09}, {"text": "Let me tell you briefly\nabout correctness.", "start": 4516.08, "duration": 1.77}, {"text": "Again, we proved correctness\nwith an invariant.", "start": 4534.012, "duration": 1.958}, {"text": "Claim that at all\ntimes the tree T", "start": 4550.72, "duration": 2.35}, {"text": "of edges that\nwe've picked so far", "start": 4553.07, "duration": 1.85}, {"text": "is contained in some minimum\nspanning tree, T star.", "start": 4554.92, "duration": 5.87}, {"text": "T start is going to\nchange, but I always", "start": 4560.79, "duration": 2.69}, {"text": "want the edges I've chosen to be\ninside a minimum spanning tree.", "start": 4563.48, "duration": 3.2}, {"text": "Again, we can prove\nthis by induction.", "start": 4566.68, "duration": 2.32}, {"text": "So assume by induction\nthat this is true", "start": 4569.0, "duration": 6.0}, {"text": "so far, and then suppose that\nwe're adding an edge here.", "start": 4575.0, "duration": 6.91}, {"text": "So we're converting T into\nT prime, which is T union e.", "start": 4581.91, "duration": 5.86}, {"text": "By the data structural\nsetup, I know", "start": 4591.65, "duration": 3.04}, {"text": "that the endpoints\nof e, u, and v", "start": 4594.69, "duration": 2.19}, {"text": "are in different\nconnected components.", "start": 4596.88, "duration": 3.59}, {"text": "In general, what my\npicture looks like,", "start": 4600.47, "duration": 1.76}, {"text": "is I have some various\nconnected components,", "start": 4602.23, "duration": 2.38}, {"text": "maybe there's a single\nvertex, whatever.", "start": 4604.61, "duration": 3.71}, {"text": "I've built a minimum\nspanning tree for each one.", "start": 4608.32, "duration": 2.46}, {"text": "I built some tree,\nand I actually", "start": 4610.78, "duration": 2.65}, {"text": "know that these trees are\ncontained in one global minimum", "start": 4613.43, "duration": 3.09}, {"text": "spanning tree.", "start": 4616.52, "duration": 2.925}, {"text": "OK, and now we're\nlooking at an edge that", "start": 4619.445, "duration": 2.305}, {"text": "goes from some vertex u\nin one connected component", "start": 4621.75, "duration": 3.58}, {"text": "to some vertex v in a\ndifferent connected component.", "start": 4625.33, "duration": 3.12}, {"text": "This is our edge e.", "start": 4628.45, "duration": 2.55}, {"text": "That's our setup.", "start": 4631.0, "duration": 2.17}, {"text": "Because the union-find\ndata structure", "start": 4633.17, "duration": 1.777}, {"text": "maintains connected\ncomponents, that's", "start": 4634.947, "duration": 1.583}, {"text": "another invariant to prove.", "start": 4636.53, "duration": 2.04}, {"text": "We're considering adding\nthis edge, which connects two", "start": 4638.57, "duration": 2.79}, {"text": "different connected components.", "start": 4641.36, "duration": 2.13}, {"text": "So I want to use the greedy\nchoice property with some S.", "start": 4643.49, "duration": 6.36}, {"text": "What should S be?", "start": 4649.85, "duration": 1.36}, {"text": "I want e to cross a cut,\nso what's a good cut?", "start": 4671.71, "duration": 4.219}, {"text": "Yeah?", "start": 4683.913, "duration": 0.998}, {"text": "AUDIENCE: The\nconnected component", "start": 4684.911, "duration": 1.375}, {"text": "of u and then everything else.", "start": 4686.286, "duration": 1.499}, {"text": "ERIK DEMAINE:\nConnected component", "start": 4687.785, "duration": 1.375}, {"text": "of u and everything else?", "start": 4689.16, "duration": 1.61}, {"text": "AUDIENCE: Yeah.", "start": 4690.77, "duration": 0.67}, {"text": "ERIK DEMAINE: That\nwould work, which", "start": 4691.44, "duration": 1.499}, {"text": "is also the opposite of the\nconnected component containing", "start": 4692.939, "duration": 2.611}, {"text": "v. There are many\nchoices that work.", "start": 4695.55, "duration": 3.02}, {"text": "I could take basically\nthis cut, which", "start": 4698.57, "duration": 2.329}, {"text": "is the connected component\nof you with everything", "start": 4700.899, "duration": 2.041}, {"text": "else versus the\nconnected component of v.", "start": 4702.94, "duration": 2.31}, {"text": "I could take this cut, which\nis the connected component of u", "start": 4705.25, "duration": 3.09}, {"text": "only versus everybody else.", "start": 4708.34, "duration": 2.35}, {"text": "Either of those will work.", "start": 4710.69, "duration": 2.04}, {"text": "Good.", "start": 4712.73, "duration": 0.5}, {"text": "Good curve, all right.", "start": 4716.37, "duration": 3.66}, {"text": "So let's say S equals the\nconnected component of u,", "start": 4720.03, "duration": 4.44}, {"text": "or connected component of v.\ne crosses that, all right?", "start": 4724.47, "duration": 4.35}, {"text": "Because it goes from u to\nv, and u is on one side,", "start": 4728.82, "duration": 3.05}, {"text": "v is on the other side.", "start": 4731.87, "duration": 3.24}, {"text": "I wanted to include an\nentire connected component", "start": 4735.11, "duration": 2.39}, {"text": "because when I apply the\ngreedy choice property,", "start": 4737.5, "duration": 3.34}, {"text": "I modify T star,\nand I don't want", "start": 4740.84, "duration": 2.3}, {"text": "to modify, I don't want to\ndelete any of these edges that", "start": 4743.14, "duration": 3.27}, {"text": "are already in my\nconnected components,", "start": 4746.41, "duration": 1.97}, {"text": "that I've already put in there.", "start": 4748.38, "duration": 1.95}, {"text": "But if I choose my\ncut to just be this,", "start": 4750.33, "duration": 2.95}, {"text": "I know that the edge\nthat I potentially remove", "start": 4753.28, "duration": 2.67}, {"text": "will cross this\ncut, which means it", "start": 4755.95, "duration": 1.574}, {"text": "goes between connected\ncomponents, which means", "start": 4757.524, "duration": 1.916}, {"text": "I haven't added that yet to T.", "start": 4759.44, "duration": 2.62}, {"text": "So when I apply this\ngreedy choice property,", "start": 4762.06, "duration": 3.23}, {"text": "I'm not deleting anything\nfrom T. Everything that", "start": 4765.29, "duration": 5.18}, {"text": "was in T is still in T star.", "start": 4770.47, "duration": 3.21}, {"text": "So that tells me that T prime\nis contained in T star prime.", "start": 4773.68, "duration": 10.05}, {"text": "The new T star that I get\nwhen I apply the cut and paste", "start": 4783.73, "duration": 4.42}, {"text": "argument, I modify\nT star potentially", "start": 4788.15, "duration": 2.2}, {"text": "by removing one edge\nand putting e in.", "start": 4790.35, "duration": 2.77}, {"text": "And the edge that\nI remove was not", "start": 4793.12, "duration": 1.48}, {"text": "already in T, which means\nI preserve this part,", "start": 4794.6, "duration": 4.25}, {"text": "but I also get that\nmy new edge e is", "start": 4798.85, "duration": 3.73}, {"text": "in the minimum spanning tree.", "start": 4802.58, "duration": 1.78}, {"text": "And so that's how you prove\nby induction that at all times", "start": 4804.36, "duration": 2.86}, {"text": "the edges that you've\nchosen so far are in T star.", "start": 4807.22, "duration": 4.38}, {"text": "Actually, to apply the\ngreedy choice property,", "start": 4811.6, "duration": 2.67}, {"text": "I need not only that e is cut--\nsorry, that e crosses the cut,", "start": 4814.27, "duration": 3.44}, {"text": "I also need that e\nis the minimum weight", "start": 4817.71, "duration": 1.94}, {"text": "edge crossing the cut.", "start": 4819.65, "duration": 1.82}, {"text": "That's a little more\nargument to prove.", "start": 4821.47, "duration": 5.12}, {"text": "The rough idea is\nthat if you forget", "start": 4826.59, "duration": 3.052}, {"text": "about the edges we've\nalready dealt with,", "start": 4829.642, "duration": 1.708}, {"text": "e is the globally\nminimum weight edge.", "start": 4831.35, "duration": 2.89}, {"text": "OK, but what about the edges\nwe've already dealt with?", "start": 4834.24, "duration": 2.63}, {"text": "Some of them are in the tree.", "start": 4836.87, "duration": 3.29}, {"text": "The edges that are in\nthese-- that are in T, those", "start": 4840.16, "duration": 3.251}, {"text": "obviously don't cross the cut.", "start": 4843.411, "duration": 1.249}, {"text": "That's how we designed the cut.", "start": 4844.66, "duration": 1.54}, {"text": "The cup was designed\nnot to cross,", "start": 4846.2, "duration": 2.06}, {"text": "not two separate any of\nthese connected components.", "start": 4848.26, "duration": 2.61}, {"text": "So all the edges that we've\nadded to T, those are OK.", "start": 4850.87, "duration": 3.86}, {"text": "They're not related to the\nedges that cross this cut.", "start": 4854.73, "duration": 4.92}, {"text": "But we may have already\nconsidered some lower weight", "start": 4859.65, "duration": 2.94}, {"text": "edges that we didn't add to T.\nIf we didn't add an edge to T,", "start": 4862.59, "duration": 5.744}, {"text": "that means actually they\nwere in the same set, which", "start": 4868.334, "duration": 2.166}, {"text": "means also those are-- I'm going\nto use my other color, blue.", "start": 4870.5, "duration": 6.5}, {"text": "Those are extra\nedges in here that", "start": 4877.0, "duration": 2.54}, {"text": "are inside a\nconnected component,", "start": 4879.54, "duration": 3.75}, {"text": "have smaller weight\nthan e, but they're", "start": 4883.29, "duration": 1.76}, {"text": "inside the connected component.", "start": 4885.05, "duration": 1.35}, {"text": "So again, they're not crossed.", "start": 4886.4, "duration": 2.18}, {"text": "So they don't cross\nthe cut, rather.", "start": 4888.58, "duration": 3.06}, {"text": "So e is basically the\nfirst edge that we're", "start": 4891.64, "duration": 2.6}, {"text": "considering that\ncrosses this cut,", "start": 4894.24, "duration": 1.81}, {"text": "because otherwise we would have\nadded that other edge first.", "start": 4896.05, "duration": 3.19}, {"text": "So here, we have to do sort\nof the greedy argument again,", "start": 4899.24, "duration": 3.67}, {"text": "considering edges\nby weight and e", "start": 4902.91, "duration": 2.61}, {"text": "is going to be the\nfirst edge that", "start": 4905.52, "duration": 1.85}, {"text": "crosses this\nparticular cut, which", "start": 4907.37, "duration": 1.79}, {"text": "is this connected component\nversus everyone else.", "start": 4909.16, "duration": 2.93}, {"text": "So e has to be the minimum\nweight edge crossing the cut,", "start": 4912.09, "duration": 2.55}, {"text": "so the greedy choice\nproperty applies.", "start": 4914.64, "duration": 1.65}, {"text": "So we can put e in the\nminimum spanning tree,", "start": 4916.29, "duration": 3.41}, {"text": "and this algorithm is correct.", "start": 4919.7, "duration": 1.86}, {"text": "OK?", "start": 4921.56, "duration": 0.5}, {"text": "So we've used that lemma\na zillion times by now.", "start": 4922.06, "duration": 3.67}, {"text": "That's minimum spanning\ntree and nearly linear time.", "start": 4925.73, "duration": 3.7}]