[{"text": "The following content is\nprovided under a Creative", "start": 0.79, "duration": 2.4}, {"text": "Commons license.", "start": 3.19, "duration": 1.54}, {"text": "Your support will help\nMIT OpenCourseWare", "start": 4.73, "duration": 2.3}, {"text": "continue to offer high quality\neducational resources for free.", "start": 7.03, "duration": 4.36}, {"text": "To make a donation or\nview additional materials", "start": 11.39, "duration": 2.6}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.99, "duration": 3.89}, {"text": "at ocw.mit.edu.", "start": 17.88, "duration": 0.96}, {"text": "PROFESSOR: All right.", "start": 31.14, "duration": 1.96}, {"text": "Let's get started, everyone.", "start": 33.1, "duration": 2.02}, {"text": "So, good afternoon.", "start": 35.12, "duration": 2.22}, {"text": "Welcome to the second lecture\nof 60001 and also of 600.", "start": 37.34, "duration": 5.13}, {"text": "So as always, if you'd like to\nfollow along with the lectures,", "start": 42.47, "duration": 3.53}, {"text": "please go ahead and download\nthe slides and the code", "start": 46.0, "duration": 2.19}, {"text": "that I'll provide at least an\nhour before class every day.", "start": 48.19, "duration": 5.08}, {"text": "All right.", "start": 53.27, "duration": 0.5}, {"text": "So a quick recap of\nwhat we did last time.", "start": 53.77, "duration": 2.65}, {"text": "So last time, we talked a little\nbit about what a computer is.", "start": 56.42, "duration": 4.19}, {"text": "And I think the main takeaway\nfrom the last lecture", "start": 60.61, "duration": 2.52}, {"text": "is really that a computer only\ndoes what it is told, right?", "start": 63.13, "duration": 3.6}, {"text": "So it's not going to\nspontaneously make", "start": 66.73, "duration": 2.07}, {"text": "decisions on its own.", "start": 68.8, "duration": 1.29}, {"text": "You, as the programmer,\nhave to tell it", "start": 70.09, "duration": 2.58}, {"text": "what you want it to do\nby writing programs.", "start": 72.67, "duration": 2.831}, {"text": "OK.", "start": 75.501, "duration": 0.499}, {"text": "So we talked about\nsimple objects.", "start": 76.0, "duration": 2.61}, {"text": "And these objects were\nof different types.", "start": 78.61, "duration": 3.39}, {"text": "So we saw integers,\nfloats, and Booleans.", "start": 82.0, "duration": 3.06}, {"text": "And then we did a couple of\nsimple operations with them.", "start": 85.06, "duration": 3.33}, {"text": "Today, we're going to\nlook at a different--", "start": 88.39, "duration": 1.86}, {"text": "a new type of object\ncalled a string.", "start": 90.25, "duration": 3.6}, {"text": "And then we're\ngoing to introduce", "start": 93.85, "duration": 1.38}, {"text": "some more powerful things\nin our programming toolbox.", "start": 95.23, "duration": 6.89}, {"text": "So we're going to look at how\nto branch within a program,", "start": 102.12, "duration": 2.59}, {"text": "and how to make things-- how\nto make the computer repeat", "start": 104.71, "duration": 2.73}, {"text": "certain tasks\nwithin our program.", "start": 107.44, "duration": 2.76}, {"text": "All right.", "start": 110.2, "duration": 0.93}, {"text": "So let's begin by\nlooking at strings.", "start": 111.13, "duration": 2.4}, {"text": "So strings are a\nnew object type.", "start": 113.53, "duration": 3.0}, {"text": "We've seen so far\nintegers, which", "start": 116.53, "duration": 1.5}, {"text": "were whole numbers, floats,\nwhich were decimal numbers,", "start": 118.03, "duration": 4.35}, {"text": "and we have seen Booleans,\nwhich were true and false.", "start": 122.38, "duration": 3.53}, {"text": "So strings are going to be\nsequences of characters.", "start": 125.91, "duration": 3.879}, {"text": "And these characters\ncan be anything.", "start": 129.789, "duration": 1.891}, {"text": "They can be letters,\ndigits, special characters,", "start": 131.68, "duration": 3.16}, {"text": "and also spaces.", "start": 134.84, "duration": 2.21}, {"text": "And you tell Python that you're\ntalking about a string object", "start": 137.05, "duration": 3.51}, {"text": "by enclosing it in\nquotation marks.", "start": 140.56, "duration": 2.76}, {"text": "So in this case, I'm creating an\nobject whose value is h-e-l-l-o", "start": 143.32, "duration": 6.54}, {"text": "space t-h-e-r-e.", "start": 149.86, "duration": 2.814}, {"text": "And Python knows it's a\nstring object, because we're", "start": 152.674, "duration": 2.166}, {"text": "enclosing it in quotations.", "start": 154.84, "duration": 1.547}, {"text": "They can be either double\nquotes or single quotes,", "start": 156.387, "duration": 2.083}, {"text": "but as long as you're\nconsistent, it doesn't matter.", "start": 158.47, "duration": 2.79}, {"text": "And this object, we're binding\nit to this variable named hi.", "start": 161.26, "duration": 5.48}, {"text": "And we're using that using\nthe equals sign, which", "start": 166.74, "duration": 2.47}, {"text": "is the assignment operator.", "start": 169.21, "duration": 2.33}, {"text": "So from now on, whenever we\nrefer to this variable hi,", "start": 171.54, "duration": 3.78}, {"text": "Python is going to say, oh,\nI know what the value is,", "start": 175.32, "duration": 2.38}, {"text": "and it's that string\nof characters.", "start": 177.7, "duration": 3.164}, {"text": "So we're going to\nlearn about two things", "start": 180.864, "duration": 1.666}, {"text": "that you can do on strings\ntoday, two operations.", "start": 182.53, "duration": 2.73}, {"text": "One is to concatenate them.", "start": 185.26, "duration": 1.89}, {"text": "And concatenation is\nreally just a fancy word", "start": 187.15, "duration": 2.55}, {"text": "for using this plus\noperator, which", "start": 189.7, "duration": 2.22}, {"text": "means put the strings together.", "start": 191.92, "duration": 2.89}, {"text": "So I have this original\nvariable named hi,", "start": 194.81, "duration": 3.83}, {"text": "and I create a new\nvariable called name.", "start": 198.64, "duration": 2.28}, {"text": "And in it, I'm going\nto assign the string", "start": 200.92, "duration": 3.63}, {"text": "a-n-a to the variable name.", "start": 204.55, "duration": 2.74}, {"text": "And when I use the plus\noperator in between hi and name,", "start": 207.29, "duration": 3.77}, {"text": "those two variables,\nPython is going", "start": 211.06, "duration": 1.86}, {"text": "to look at the\nvalues of those two,", "start": 212.92, "duration": 2.01}, {"text": "and it's going to just\nput them together.", "start": 214.93, "duration": 3.4}, {"text": "OK.", "start": 218.33, "duration": 1.48}, {"text": "I'm going to switch to Spider.", "start": 219.81, "duration": 3.33}, {"text": "And this is just that\nexample from the slides.", "start": 223.14, "duration": 6.577}, {"text": "So let's see what happens.", "start": 229.717, "duration": 1.083}, {"text": "So I have the variable\nhi, the variable name,", "start": 230.8, "duration": 3.99}, {"text": "and I'm just concatenating\nthose two together.", "start": 234.79, "duration": 2.46}, {"text": "And then I'm going\nto print that out.", "start": 237.25, "duration": 2.23}, {"text": "So if I run the code, notice\nit prints out \"hello thereana.\"", "start": 239.48, "duration": 5.97}, {"text": "There's no space.", "start": 245.45, "duration": 1.14}, {"text": "And there's no space because\nthe concatenation operator,", "start": 246.59, "duration": 3.07}, {"text": "the plus, doesn't add\nany spaces implicitly.", "start": 249.66, "duration": 3.83}, {"text": "So again, another example\nof just computer just", "start": 253.49, "duration": 2.94}, {"text": "doing what it's told.", "start": 256.43, "duration": 1.409}, {"text": "If we want to add a space,\nwe'd have to actually insert", "start": 257.839, "duration": 2.731}, {"text": "the space manually.", "start": 260.57, "duration": 1.8}, {"text": "So that's this\nline here, line 8.", "start": 262.37, "duration": 2.97}, {"text": "And in this line,\nwe're concatenating", "start": 265.34, "duration": 1.89}, {"text": "the value of the\nvariable hi with a space.", "start": 267.23, "duration": 4.21}, {"text": "Notice we're putting\nit in quotation marks.", "start": 271.44, "duration": 2.36}, {"text": "Just a space.", "start": 273.8, "duration": 1.05}, {"text": "And then with name.", "start": 274.85, "duration": 2.22}, {"text": "So if we'll go ahead\nand print that value,", "start": 277.07, "duration": 4.45}, {"text": "notice this was that\ngarbage greeting there.", "start": 281.52, "duration": 3.96}, {"text": "And now we have a\nproper greeting, right?", "start": 285.48, "duration": 2.13}, {"text": "So that's the concatenation\nbetween strings.", "start": 292.85, "duration": 3.451}, {"text": "And then the other\nthing we're going", "start": 296.301, "duration": 1.499}, {"text": "to look at related to\nstrings is the star operator.", "start": 297.8, "duration": 6.39}, {"text": "So that's this one\nhere on line 10.", "start": 304.19, "duration": 3.06}, {"text": "So Python allows you to use\nthe star operator, which", "start": 307.25, "duration": 2.51}, {"text": "stands for multiplication,\nbetween a string and a number.", "start": 309.76, "duration": 5.66}, {"text": "And when you do that,\nPython interprets it", "start": 315.42, "duration": 3.65}, {"text": "as repeat that string\nthat many number of times.", "start": 319.07, "duration": 6.43}, {"text": "So in this case, I'm\ncreating a silly greeting,", "start": 325.5, "duration": 3.65}, {"text": "and I'm concatenating the value\nof hi, which is \"hello there\"", "start": 329.15, "duration": 4.35}, {"text": "with the space plus the name.", "start": 333.5, "duration": 3.829}, {"text": "So notice here, I'm\nusing parentheses", "start": 337.329, "duration": 1.541}, {"text": "to tell Python, do this\noperation first, and then", "start": 338.87, "duration": 3.48}, {"text": "multiply whatever the\nresult of this is by 3.", "start": 342.35, "duration": 5.85}, {"text": "So if I print that\nout, it's going", "start": 348.2, "duration": 3.55}, {"text": "to multiply the space\nwith my name three times,", "start": 351.75, "duration": 3.57}, {"text": "and it's going to concatenate\nthat with \"hello there.\"", "start": 355.32, "duration": 2.76}, {"text": "So that's exactly what\nit printed out there.", "start": 358.08, "duration": 4.59}, {"text": "Last lecture, we talked\na little bit about print.", "start": 362.67, "duration": 2.51}, {"text": "Today, I'm going to talk about\nsome nuances related to print.", "start": 365.18, "duration": 3.89}, {"text": "So you use print to\ninteract with the user.", "start": 369.07, "duration": 3.63}, {"text": "It's cool to write programs that\nprint things out to the user.", "start": 372.7, "duration": 3.02}, {"text": "So the key word\nhere being print.", "start": 375.72, "duration": 3.39}, {"text": "And then you put\nparentheses after print.", "start": 379.11, "duration": 2.97}, {"text": "And in the parentheses,\nyou put in whatever", "start": 382.08, "duration": 3.15}, {"text": "you want to show the user.", "start": 385.23, "duration": 2.53}, {"text": "So in this little\nprogram, I have--", "start": 387.76, "duration": 2.39}, {"text": "I created a variable named x.", "start": 390.15, "duration": 1.83}, {"text": "I assigned it the value\n1, and then I print 1.", "start": 391.98, "duration": 3.81}, {"text": "Here, I'm casting.", "start": 395.79, "duration": 2.6}, {"text": "So I'm taking the number\none, the integer 1,", "start": 398.39, "duration": 2.47}, {"text": "and I'm casting it to a string.", "start": 400.86, "duration": 2.7}, {"text": "And you'll see why in a moment.", "start": 403.56, "duration": 2.61}, {"text": "So I want to bring\nto your attention", "start": 406.17, "duration": 1.5}, {"text": "a couple of things here.", "start": 407.67, "duration": 1.0}, {"text": "So in the first print, I'm\nusing commas everywhere here.", "start": 408.67, "duration": 6.11}, {"text": "And in the second\nprint, I'm using plus.", "start": 414.78, "duration": 1.77}, {"text": "So by definition, if\nyou-- you can use commas", "start": 421.1, "duration": 3.24}, {"text": "inside a print-- inside\nthe parentheses of print.", "start": 424.34, "duration": 4.5}, {"text": "And if you use a comma, Python\nis going to automatically", "start": 428.84, "duration": 4.92}, {"text": "add a space in\nbetween the two things", "start": 433.76, "duration": 3.33}, {"text": "that the comma is in\nbetween, the values.", "start": 437.09, "duration": 3.01}, {"text": "So \"my fav num is\"\nis the first thing.", "start": 440.1, "duration": 3.39}, {"text": "And the second thing is\nwhatever's after the comma.", "start": 443.49, "duration": 3.83}, {"text": "Let's take x.", "start": 447.32, "duration": 1.77}, {"text": "So if you use a comma, Python\nis going to automatically insert", "start": 449.09, "duration": 3.03}, {"text": "a space for you.", "start": 452.12, "duration": 2.46}, {"text": "Sometimes, you might want\nthat, sometimes you might not.", "start": 454.58, "duration": 2.34}, {"text": "If you don't want that, you\ncan use the concatenation", "start": 456.92, "duration": 3.06}, {"text": "operation, the plus.", "start": 459.98, "duration": 2.01}, {"text": "And you can add all\nof your little bits", "start": 461.99, "duration": 2.4}, {"text": "together to create\none big string.", "start": 464.39, "duration": 3.82}, {"text": "If you're using\ncommas, the items,", "start": 468.21, "duration": 2.69}, {"text": "the objects in\nbetween the commas,", "start": 470.9, "duration": 1.44}, {"text": "do not all have to be strings.", "start": 472.34, "duration": 2.01}, {"text": "That's the plus side\nof using commas.", "start": 474.35, "duration": 1.8}, {"text": "But the downside is you\nget spaces everywhere.", "start": 476.15, "duration": 3.87}, {"text": "If you use plus\noperator, the plus side", "start": 480.02, "duration": 3.57}, {"text": "is Python does exactly\nwhat you tell it to do,", "start": 483.59, "duration": 3.3}, {"text": "but everything has to\nbe a string object.", "start": 486.89, "duration": 2.43}, {"text": "So \"my fav num is\"\nis a string object.", "start": 489.32, "duration": 3.36}, {"text": "You have to convert all of\nyour numbers to string objects,", "start": 492.68, "duration": 3.12}, {"text": "and so on.", "start": 495.8, "duration": 2.53}, {"text": "So if we look at Spider--\nThis is the same-- almost", "start": 498.33, "duration": 11.41}, {"text": "the same code.", "start": 509.74, "duration": 1.2}, {"text": "So here, I don't\nhave spaces anywhere.", "start": 510.94, "duration": 3.13}, {"text": "So you can see that\nthe first line here", "start": 514.07, "duration": 3.71}, {"text": "has commas everywhere.", "start": 517.78, "duration": 1.81}, {"text": "So I'm going to have spaces in\nbetween every one of the things", "start": 519.59, "duration": 3.53}, {"text": "that I'm printing out.", "start": 523.12, "duration": 4.19}, {"text": "This line here is sort of a\ncombination between commas", "start": 527.31, "duration": 3.66}, {"text": "and concatenation.", "start": 530.97, "duration": 3.28}, {"text": "So depending on where\nI used the comma,", "start": 534.25, "duration": 2.35}, {"text": "I'm going to have\nan extra space.", "start": 536.6, "duration": 1.42}, {"text": "And this line here just has\nconcatenation everywhere.", "start": 538.02, "duration": 4.08}, {"text": "So if I run this, notice this\nvery first line added spaces", "start": 542.1, "duration": 6.14}, {"text": "everywhere in between\nall my objects.", "start": 548.24, "duration": 1.78}, {"text": "The second one added\nspaces somewhere.", "start": 550.02, "duration": 1.929}, {"text": "And you can sort of trace\nthrough and see exactly where", "start": 551.949, "duration": 2.291}, {"text": "the spaces were added.", "start": 554.24, "duration": 2.12}, {"text": "And the last line here\ndidn't add spaces anywhere.", "start": 556.36, "duration": 4.658}, {"text": "So printing things out\nto the console is nice,", "start": 573.22, "duration": 4.37}, {"text": "but the second part of sort of\nwriting an interactive program", "start": 577.59, "duration": 3.27}, {"text": "is getting input from the user.", "start": 580.86, "duration": 2.31}, {"text": "And that's the more\ninteresting part.", "start": 583.17, "duration": 2.34}, {"text": "So if you've done problem set 0,\nyou might have sort of already", "start": 585.51, "duration": 3.63}, {"text": "tried to understand\nthis on your own.", "start": 589.14, "duration": 1.57}, {"text": "But here we are.", "start": 590.71, "duration": 1.34}, {"text": "So the way you get\ninput from the user", "start": 592.05, "duration": 3.6}, {"text": "is using this command\nfunction called input.", "start": 595.65, "duration": 4.38}, {"text": "And inside the parentheses,\nyou type in whatever you'd", "start": 600.03, "duration": 3.6}, {"text": "like to prompt the user with.", "start": 603.63, "duration": 4.18}, {"text": "So in this case, in my\nexample here, I have input,", "start": 607.81, "duration": 3.68}, {"text": "and then here I said\n\"type anything.\"", "start": 611.49, "duration": 2.58}, {"text": "So the user is going\nto see this text here,", "start": 614.07, "duration": 2.67}, {"text": "and then the program\nis just going to stop.", "start": 616.74, "duration": 2.592}, {"text": "And it's going to\nwait for the user", "start": 619.332, "duration": 1.458}, {"text": "to type in something\nand hit Enter.", "start": 620.79, "duration": 2.97}, {"text": "As soon as the user\ntypes in Enter,", "start": 623.76, "duration": 3.36}, {"text": "whatever the user types\nin becomes a string.", "start": 627.12, "duration": 4.35}, {"text": "If a user types in a\nnumber, for example,", "start": 631.47, "duration": 2.34}, {"text": "that becomes the\nstring of that number.", "start": 633.81, "duration": 2.994}, {"text": "So everything the\nuser types in is", "start": 636.804, "duration": 1.416}, {"text": "going to be made as a string.", "start": 638.22, "duration": 1.71}, {"text": "In this line right here,\nwhatever these the user types", "start": 643.18, "duration": 2.91}, {"text": "in becomes a string.", "start": 646.09, "duration": 1.8}, {"text": "And we're going to\nbind that string object", "start": 647.89, "duration": 2.88}, {"text": "to this variable named text.", "start": 650.77, "duration": 3.827}, {"text": "So now, further in my\nprogram, I could do whatever", "start": 654.597, "duration": 2.083}, {"text": "I want with this variable text.", "start": 656.68, "duration": 1.59}, {"text": "In this case, I'm\ngoing to print 5*text.", "start": 658.27, "duration": 4.05}, {"text": "OK.", "start": 662.32, "duration": 1.26}, {"text": "So if the user, for\nexample, gave me \"ha,\"", "start": 663.58, "duration": 3.54}, {"text": "I'm going to print \"ha\" 5 times.", "start": 667.12, "duration": 2.91}, {"text": "If the user gave\nme 5, what do you", "start": 670.03, "duration": 3.579}, {"text": "think the user is--\nwhat do you think", "start": 673.609, "duration": 1.541}, {"text": "is going to be printed out?", "start": 675.15, "duration": 3.23}, {"text": "25 or 5 five times?", "start": 678.38, "duration": 4.171}, {"text": "Great.", "start": 682.551, "duration": 0.499}, {"text": "Yes.", "start": 683.05, "duration": 0.24}, {"text": "Exactly.", "start": 683.29, "duration": 0.499}, {"text": "5 five times.", "start": 683.789, "duration": 0.929}, {"text": "Oftentimes, you don't want to\nwork with numbers as strings,", "start": 688.27, "duration": 3.43}, {"text": "right?", "start": 691.7, "duration": 0.5}, {"text": "You want to work with\nnumbers as numbers, right?", "start": 692.2, "duration": 2.49}, {"text": "So you have to cast.", "start": 694.69, "duration": 2.136}, {"text": "And we learned\nthat last lecture.", "start": 696.826, "duration": 1.374}, {"text": "You cast by just putting\nin this little bit", "start": 698.2, "duration": 2.82}, {"text": "right in front of the input.", "start": 701.02, "duration": 2.284}, {"text": "And you can cast it to\nwhatever type you want.", "start": 703.304, "duration": 1.916}, {"text": "Here I cast it to an int, but\nyou can also cast to a float", "start": 705.22, "duration": 3.09}, {"text": "if you want to work with floats.", "start": 708.31, "duration": 2.31}, {"text": "And that converts whatever\nthe user typed in,", "start": 710.62, "duration": 3.15}, {"text": "as long as it's some number that\nPython knows how to convert,", "start": 713.77, "duration": 3.57}, {"text": "into the number itself.", "start": 717.34, "duration": 1.81}, {"text": "So in this case, if\nthe user gives me 5,", "start": 719.15, "duration": 2.12}, {"text": "I'm going to print out 5 times\n5 instead of 5 five times.", "start": 721.27, "duration": 5.92}, {"text": "So that's the code here.", "start": 727.19, "duration": 5.11}, {"text": "So the first bit\nis I'm going to get", "start": 734.87, "duration": 1.7}, {"text": "the user to type in anything,\nand I'm going to put 555.", "start": 736.57, "duration": 6.62}, {"text": "And then when I type in the\nnumber, since I'm casting it,", "start": 743.19, "duration": 2.49}, {"text": "I'm going to do operations\nwith the number.", "start": 745.68, "duration": 2.24}, {"text": "Yeah, question.", "start": 747.92, "duration": 0.7}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 748.62, "duration": 0.954}, {"text": "PROFESSOR: Why do you\nwant to cast to-- oh.", "start": 752.44, "duration": 5.07}, {"text": "The question is why do you\nwant to cast to a string?", "start": 757.51, "duration": 3.525}, {"text": "Why do you want to cast\na string to a number?", "start": 761.035, "duration": 1.875}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 762.91, "duration": 0.974}, {"text": "PROFESSOR: Oh, so\nPython always--", "start": 766.81, "duration": 3.51}, {"text": "whatever you type\nin, just by default,", "start": 770.32, "duration": 2.85}, {"text": "by definition of\nthe input command,", "start": 773.17, "duration": 2.13}, {"text": "Python always makes it a string.", "start": 775.3, "duration": 2.73}, {"text": "So if you want to\nwork with numbers,", "start": 778.03, "duration": 1.5}, {"text": "you have to explicitly\ntell it, I'm", "start": 779.53, "duration": 1.458}, {"text": "going to work with a number.", "start": 780.988, "duration": 2.212}, {"text": "So even if you give\nit the number 5,", "start": 783.2, "duration": 1.55}, {"text": "it's going to think\nit's the string 5.", "start": 784.75, "duration": 3.52}, {"text": "Yeah.", "start": 788.27, "duration": 0.85}, {"text": "That's just how input works.", "start": 789.12, "duration": 1.325}, {"text": "The next thing we're\ngoing to look at", "start": 793.96, "duration": 4.23}, {"text": "is ways that you can start\nadding tests in your code.", "start": 798.19, "duration": 7.14}, {"text": "And before you can start\nadding tests in your code,", "start": 805.33, "duration": 4.38}, {"text": "you need to be able to\ndo the actual tests.", "start": 809.71, "duration": 3.09}, {"text": "So this is where comparison\noperators come in.", "start": 812.8, "duration": 7.05}, {"text": "So here, let's assume that\ni and j are variables.", "start": 819.85, "duration": 4.8}, {"text": "The following comparisons are\ngoing to give you a Boolean.", "start": 824.65, "duration": 3.42}, {"text": "So it's either going to say,\nthis is true or this is false.", "start": 828.07, "duration": 3.43}, {"text": "So that's going to be your test.", "start": 831.5, "duration": 3.35}, {"text": "So if i and j are\nvariables, you're", "start": 834.85, "duration": 1.98}, {"text": "allowed to compare\nints with ints,", "start": 836.83, "duration": 1.56}, {"text": "floats with floats,\nstrings with strings.", "start": 838.39, "duration": 3.51}, {"text": "And you're allowed\nto compare ints", "start": 841.9, "duration": 1.44}, {"text": "and floats between\nthemselves, but you're not", "start": 843.34, "duration": 2.16}, {"text": "allowed to compare a\nstring with a number.", "start": 845.5, "duration": 4.02}, {"text": "In fact, if you even try to\ndo that in Python-- in Spider", "start": 849.52, "duration": 3.81}, {"text": "here, if I try to say, is\nthe letter a greater than 5?", "start": 853.33, "duration": 5.04}, {"text": "I get some angry\ntext right here.", "start": 858.37, "duration": 4.02}, {"text": "And this just tells\nme Python doesn't", "start": 862.39, "duration": 1.98}, {"text": "understand the\nmeaning of-- how do I", "start": 864.37, "duration": 1.95}, {"text": "compare a string with a number?", "start": 866.32, "duration": 1.295}, {"text": "OK.", "start": 870.9, "duration": 0.94}, {"text": "So just like in math, we can\ndo these usual comparisons.", "start": 871.84, "duration": 4.28}, {"text": "We can say if something\nis greater than something,", "start": 876.12, "duration": 2.1}, {"text": "greater or equal to, less\nthan, less than or equal to.", "start": 878.22, "duration": 2.94}, {"text": "I'd like to bring to your\nattention the equality.", "start": 881.16, "duration": 3.25}, {"text": "So the single equals\nsign is an assignment.", "start": 884.41, "duration": 2.391}, {"text": "So you're taking a\nvalue, and you're", "start": 886.801, "duration": 1.499}, {"text": "assigning it to a variable.", "start": 888.3, "duration": 1.124}, {"text": "But when you're doing\nthe double equals sign,", "start": 889.424, "duration": 1.996}, {"text": "this is the test for equality.", "start": 891.42, "duration": 2.16}, {"text": "Is the value of\nvariable i the same", "start": 893.58, "duration": 2.25}, {"text": "as the value of the variable j?", "start": 895.83, "duration": 2.432}, {"text": "And that's, again,\nalso going to give you", "start": 898.262, "duration": 1.708}, {"text": "a Boolean either true or false.", "start": 899.97, "duration": 2.26}, {"text": "And you can also test for\ninequality with the exclamation", "start": 902.23, "duration": 3.22}, {"text": "equal.", "start": 905.45, "duration": 1.27}, {"text": "So that means, is the\nvalue of the variable i", "start": 906.72, "duration": 2.57}, {"text": "not equal to the value\nof the variable j?", "start": 909.29, "duration": 2.74}, {"text": "True if yes, false if no.", "start": 912.03, "duration": 1.86}, {"text": "OK.", "start": 916.76, "duration": 0.5}, {"text": "So those are comparison\noperators on integer,", "start": 917.26, "duration": 2.21}, {"text": "floats, and strings.", "start": 919.47, "duration": 1.74}, {"text": "On Booleans, you can do\nsome logic operators.", "start": 921.21, "duration": 4.41}, {"text": "And the simplest\nis just inverting.", "start": 925.62, "duration": 4.99}, {"text": "So if a is a variable\nthat has a Boolean value,", "start": 930.61, "duration": 5.15}, {"text": "not a is just\ngoing to invert it.", "start": 935.76, "duration": 1.69}, {"text": "So if a is true, then not\na is false, and vice versa.", "start": 937.45, "duration": 5.17}, {"text": "This is a table that sort of\nrepresents what I've said here.", "start": 942.62, "duration": 3.32}, {"text": "So you can do-- you\ncan use and and or.", "start": 945.94, "duration": 3.81}, {"text": "These are key words in Python.", "start": 949.75, "duration": 2.31}, {"text": "You can use those two\nkey words on variables,", "start": 952.06, "duration": 2.64}, {"text": "on Boolean variables.", "start": 954.7, "duration": 3.15}, {"text": "And you get the result\na and b is only true", "start": 957.85, "duration": 4.02}, {"text": "if both a and b are true.", "start": 961.87, "duration": 2.85}, {"text": "And a or b is only false\nif a and b are false.", "start": 964.72, "duration": 6.3}, {"text": "And this is the complete\ntable just in case", "start": 971.02, "duration": 2.43}, {"text": "you need to reference it.", "start": 973.45, "duration": 1.12}, {"text": "All right.", "start": 977.22, "duration": 0.5}, {"text": "So now that we have ways to do\nlogical-- question right there.", "start": 977.72, "duration": 3.57}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 981.29, "duration": 0.924}, {"text": "PROFESSOR: Yeah, great question.", "start": 986.107, "duration": 1.333}, {"text": "So what does it mean to\ncompare a string with a string", "start": 987.44, "duration": 2.25}, {"text": "with the greater than?", "start": 989.69, "duration": 0.93}, {"text": "So that's just going to compare\nthem, lexicographically.", "start": 990.62, "duration": 3.48}, {"text": "So does it come first\nin the alphabet?", "start": 994.1, "duration": 3.25}, {"text": "So we can even test that out.", "start": 997.35, "duration": 2.09}, {"text": "We can say, is a greater than b?", "start": 999.44, "duration": 5.05}, {"text": "And it's false.", "start": 1004.49, "duration": 0.625}, {"text": "So b comes later in\nthe alphabet than a.", "start": 1008.07, "duration": 2.083}, {"text": "OK.", "start": 1013.86, "duration": 0.57}, {"text": "So now we have ways\nto do the tests.", "start": 1014.43, "duration": 2.22}, {"text": "So we can add some branching\nto our programming toolbox", "start": 1016.65, "duration": 6.0}, {"text": "now that we have\nways to do tests.", "start": 1022.65, "duration": 2.49}, {"text": "This is a map of MIT.", "start": 1025.14, "duration": 1.689}, {"text": "I'm going to go through\nsort of a little example", "start": 1026.829, "duration": 3.5}, {"text": "to motivate why we would want\nto do branching in our code.", "start": 1030.329, "duration": 4.828}, {"text": "And I think after this lecture,\nyou'll be able to sort of code", "start": 1035.157, "duration": 2.583}, {"text": "up this algorithm that\nI'm going to explain.", "start": 1037.74, "duration": 2.4}, {"text": "So most of us see MIT as a maze.", "start": 1040.14, "duration": 1.77}, {"text": "I first did when I came here.", "start": 1041.91, "duration": 1.56}, {"text": "When I first came\nhere, obviously, I", "start": 1046.78, "duration": 1.5}, {"text": "signed up for the free\nfood mailing list.", "start": 1048.28, "duration": 2.37}, {"text": "And MIT, being a maze, I\nhad no idea where to go,", "start": 1050.65, "duration": 3.69}, {"text": "what the shortest\npath was to free food.", "start": 1054.34, "duration": 2.8}, {"text": "So one way to think about\nit is all I wanted to do", "start": 1057.14, "duration": 3.85}, {"text": "was get to the free food.", "start": 1060.99, "duration": 3.64}, {"text": "A very simple algorithm to\nget there would be to say,", "start": 1064.63, "duration": 3.33}, {"text": "OK, I'm going take\nmy right hand,", "start": 1067.96, "duration": 1.38}, {"text": "and I'm going to make sure\nthat my right hand is always", "start": 1069.34, "duration": 2.291}, {"text": "on a wall.", "start": 1071.631, "duration": 1.543}, {"text": "And I'm going to go around\ncampus with my right hand", "start": 1073.174, "duration": 2.166}, {"text": "always being at a wall.", "start": 1075.34, "duration": 1.56}, {"text": "And eventually, I'll get\nto where the free food is.", "start": 1076.9, "duration": 2.25}, {"text": "There might not be\nany left, right?", "start": 1079.15, "duration": 1.65}, {"text": "But I'll be there.", "start": 1080.8, "duration": 2.37}, {"text": "So the algorithm is as follows.", "start": 1083.17, "duration": 2.387}, {"text": "If my right hand always\nhas to be on a wall,", "start": 1085.557, "duration": 1.833}, {"text": "then I'm going to\nsay, if there's", "start": 1087.39, "duration": 3.01}, {"text": "no wall to my right\nside, then I'm", "start": 1090.4, "duration": 1.95}, {"text": "going to go right\nuntil I get to a wall.", "start": 1092.35, "duration": 2.07}, {"text": "Then if there's a wall to my\nright, and I can go forward,", "start": 1097.84, "duration": 4.74}, {"text": "I'm just going to\nkeep going forward.", "start": 1102.58, "duration": 3.51}, {"text": "If I keep going forward, and\nthere's a wall to my right", "start": 1106.09, "duration": 2.31}, {"text": "and in front of me, I'm going\nto turn around and go left.", "start": 1108.4, "duration": 3.3}, {"text": "And then if there's a wall\nto my right, in front of me,", "start": 1111.7, "duration": 2.79}, {"text": "and to the left, then I'm going\nto turn around and go back.", "start": 1114.49, "duration": 2.64}, {"text": "So with this fairly\nsimple algorithm,", "start": 1117.13, "duration": 3.42}, {"text": "I just follow the path always\nkeeping the wall to my right.", "start": 1120.55, "duration": 6.29}, {"text": "And eventually, I would\nend up where I need to be.", "start": 1126.84, "duration": 3.25}, {"text": "So notice, I used, just in\nplain English, a few key words.", "start": 1130.09, "duration": 4.02}, {"text": "If, otherwise, things like that.", "start": 1134.11, "duration": 3.75}, {"text": "So in programming, we have\nthose same constructs.", "start": 1137.86, "duration": 3.78}, {"text": "And those same sort\nof intuitive words", "start": 1141.64, "duration": 2.19}, {"text": "can be used to tell\nPython to do something", "start": 1143.83, "duration": 3.42}, {"text": "or to do something else or to\nchoose from a different set", "start": 1147.25, "duration": 4.05}, {"text": "of possibilities.", "start": 1151.3, "duration": 3.39}, {"text": "And this way, we\ncan get the computer", "start": 1154.69, "duration": 1.68}, {"text": "to make decisions for us.", "start": 1156.37, "duration": 2.281}, {"text": "And you might be\nthinking, well, you", "start": 1158.651, "duration": 1.499}, {"text": "said that computers can't\nmake decisions on their own.", "start": 1160.15, "duration": 3.0}, {"text": "It's not.", "start": 1163.15, "duration": 0.885}, {"text": "You, as programmers, are\ngoing to build these decisions", "start": 1164.035, "duration": 2.565}, {"text": "into the program,\nand all the computer", "start": 1166.6, "duration": 1.92}, {"text": "is going to do is going to reach\nthe decision point and say,", "start": 1168.52, "duration": 3.43}, {"text": "OK, this is a decision\npoint, should I go left", "start": 1171.95, "duration": 2.39}, {"text": "or should I go right?", "start": 1174.34, "duration": 0.93}, {"text": "Or which one do I pick?", "start": 1175.27, "duration": 1.62}, {"text": "And these sort of decisions are\ncreated by you as a programmer.", "start": 1176.89, "duration": 3.3}, {"text": "And the computer just\nhas to make the decision", "start": 1180.19, "duration": 2.1}, {"text": "and choose a path.", "start": 1182.29, "duration": 1.44}, {"text": "OK.", "start": 1183.73, "duration": 1.35}, {"text": "So in programming, there's\nthree sort of simple ways", "start": 1185.08, "duration": 2.64}, {"text": "that you can add control\nflow to your programs.", "start": 1187.72, "duration": 3.21}, {"text": "And that's making one\ndecision and choosing", "start": 1190.93, "duration": 2.55}, {"text": "whether to execute something\nor execute something else.", "start": 1193.48, "duration": 4.51}, {"text": "The first is a simple if.", "start": 1197.99, "duration": 3.83}, {"text": "And given a program\nthat just linearly", "start": 1201.82, "duration": 2.76}, {"text": "has statements\nthat get executed,", "start": 1204.58, "duration": 2.91}, {"text": "whenever I reach\nan if statement,", "start": 1207.49, "duration": 4.16}, {"text": "you're going to\ncheck the condition.", "start": 1211.65, "duration": 2.297}, {"text": "The condition is\ngoing to be something", "start": 1213.947, "duration": 1.583}, {"text": "that's going to get evaluated\nto either true or false.", "start": 1215.53, "duration": 3.175}, {"text": "So I've reached\nthe condition here.", "start": 1221.7, "duration": 3.44}, {"text": "And if the condition\nis true, then I'm", "start": 1225.14, "duration": 1.69}, {"text": "going to additionally execute\nthis extra set of expressions.", "start": 1226.83, "duration": 4.68}, {"text": "But if the condition\nis false, then I'm", "start": 1231.51, "duration": 1.65}, {"text": "just going to keep going\nthrough the program", "start": 1233.16, "duration": 2.43}, {"text": "and not execute that\nextra set of instructions.", "start": 1235.59, "duration": 2.332}, {"text": "How does Python know which\ninstructions to execute?", "start": 1241.59, "duration": 2.89}, {"text": "They're going to be inside\nthis what we call code block.", "start": 1244.48, "duration": 4.07}, {"text": "And the code block is\ndenoted by indentation.", "start": 1248.55, "duration": 3.139}, {"text": "So it's going to be\neverything that's", "start": 1251.689, "duration": 1.541}, {"text": "indented is part of\nthat if code block.", "start": 1253.23, "duration": 4.82}, {"text": "Typically, four\nspaces is indentation.", "start": 1258.05, "duration": 3.45}, {"text": "OK.", "start": 1261.5, "duration": 1.02}, {"text": "So that's how you\nwrite code that", "start": 1262.52, "duration": 4.45}, {"text": "decides whether to execute\nthis extra thing or not.", "start": 1266.97, "duration": 3.98}, {"text": "Now let's say I don't just\nwant to execute an extra thing,", "start": 1270.95, "duration": 3.46}, {"text": "I want to reach a\npoint where I say,", "start": 1274.41, "duration": 3.09}, {"text": "I'll either go down this path\nor I'll do something else.", "start": 1277.5, "duration": 5.01}, {"text": "That's this right here.", "start": 1282.51, "duration": 5.47}, {"text": "So this if else construct\nsays this is my code,", "start": 1287.98, "duration": 6.33}, {"text": "I've reached my\ndecision point here,", "start": 1294.31, "duration": 2.79}, {"text": "if the condition\ninside the if is true,", "start": 1297.1, "duration": 4.96}, {"text": "then I'm going to execute maybe\nthis set of statements here.", "start": 1302.06, "duration": 3.17}, {"text": "But if the condition\nis not true,", "start": 1308.75, "duration": 2.14}, {"text": "then I'm not going to execute\nthat set of statements,", "start": 1310.89, "duration": 2.97}, {"text": "and instead I'm going to\nexecute under whatever else is.", "start": 1313.86, "duration": 6.93}, {"text": "So using this\nconstruct, I'm either", "start": 1320.79, "duration": 1.61}, {"text": "going to do one set of\nexpressions or the other,", "start": 1322.4, "duration": 2.49}, {"text": "but never both.", "start": 1324.89, "duration": 1.98}, {"text": "And after I've executed\none or the other,", "start": 1326.87, "duration": 1.84}, {"text": "I'm going to continue on with\njust the regular execution", "start": 1328.71, "duration": 2.355}, {"text": "of the program.", "start": 1331.065, "duration": 0.625}, {"text": "OK.", "start": 1340.01, "duration": 0.5}, {"text": "So we're able to either\nchoose one thing,", "start": 1340.51, "duration": 1.74}, {"text": "choose one thing or\nanother, but what if we want", "start": 1342.25, "duration": 1.999}, {"text": "to have more than one choice?", "start": 1344.249, "duration": 3.321}, {"text": "So if some number is equal\nto zero, I want to do this.", "start": 1347.57, "duration": 4.1}, {"text": "If it's equal to 1,\nI want to do this.", "start": 1351.67, "duration": 1.86}, {"text": "If it's equal to 2, I want\nto do this, and so on.", "start": 1353.53, "duration": 2.73}, {"text": "That's where this\nlast one comes in.", "start": 1356.26, "duration": 2.76}, {"text": "And we introduced this other\nkey word here called elif.", "start": 1359.02, "duration": 6.72}, {"text": "So that stands for\nshort form for else if.", "start": 1365.74, "duration": 3.57}, {"text": "So first we check if\nthis condition is true.", "start": 1369.31, "duration": 3.94}, {"text": "So we're going\nthrough our program,", "start": 1373.25, "duration": 1.64}, {"text": "we've reached our\ndecision point,", "start": 1374.89, "duration": 2.1}, {"text": "if the condition is true,\nwe're going to execute maybe", "start": 1376.99, "duration": 2.91}, {"text": "this set of instructions.", "start": 1379.9, "duration": 1.38}, {"text": "If the condition is\nnot true, maybe we'll", "start": 1384.32, "duration": 2.16}, {"text": "check-- if the\ncondition is not true,", "start": 1386.48, "duration": 3.07}, {"text": "we will check this\nnext condition.", "start": 1389.55, "duration": 2.39}, {"text": "That's part of the\nelif right here.", "start": 1391.94, "duration": 2.862}, {"text": "And if that one's\ntrue, we're going", "start": 1394.802, "duration": 1.458}, {"text": "to execute a different\nset of instructions.", "start": 1396.26, "duration": 2.46}, {"text": "You can have more than one elif.", "start": 1398.72, "duration": 2.544}, {"text": "And depending on\nwhich one's true,", "start": 1401.264, "duration": 1.416}, {"text": "you're going to execute a\ndifferent set of instructions.", "start": 1402.68, "duration": 3.27}, {"text": "And then this last else\nis sort of a catch all", "start": 1405.95, "duration": 2.52}, {"text": "where if none of the previous\nconditions were true,", "start": 1408.47, "duration": 3.04}, {"text": "then just do this last\nset of expressions.", "start": 1411.51, "duration": 3.59}, {"text": "So in this case, you're\ngoing to choose between one", "start": 1415.1, "duration": 3.09}, {"text": "of these three-- one\nof these four roots,", "start": 1418.19, "duration": 2.49}, {"text": "or however many you have.", "start": 1420.68, "duration": 2.476}, {"text": "And then when you're\ndone making your choice,", "start": 1423.156, "duration": 1.874}, {"text": "you're going to execute the\nremaining set of instructions.", "start": 1425.03, "duration": 2.801}, {"text": "So the way this works is if\nmore than one condition is true,", "start": 1431.27, "duration": 3.12}, {"text": "you're actually just going\nto enter one of them.", "start": 1434.39, "duration": 3.57}, {"text": "And you're going to enter the\nvery first one that's true.", "start": 1437.96, "duration": 3.06}, {"text": "So you're never going\nto enter more than one", "start": 1441.02, "duration": 1.92}, {"text": "of these code blocks.", "start": 1442.94, "duration": 2.7}, {"text": "You always enter one, and\nyou enter the first one", "start": 1445.64, "duration": 2.58}, {"text": "that evaluates to true.", "start": 1448.22, "duration": 1.67}, {"text": "So notice that we denoted\ncode blocks using indentation.", "start": 1455.84, "duration": 3.769}, {"text": "And that's actually\none of the things", "start": 1459.609, "duration": 1.541}, {"text": "that I really like about Python.", "start": 1461.15, "duration": 1.76}, {"text": "It sort of forces you to\nwrite pretty code and nice", "start": 1462.91, "duration": 3.15}, {"text": "looking code and just\ncode that's very readable.", "start": 1466.06, "duration": 5.82}, {"text": "And that forces you to indent\neverything that's a code block.", "start": 1471.88, "duration": 4.23}, {"text": "So you can easily see sort of\nwhere the flow of control is", "start": 1476.11, "duration": 2.91}, {"text": "and where decision making\npoints are and things like that.", "start": 1479.02, "duration": 5.64}, {"text": "So in this particular example,\nwe have one if statement here,", "start": 1484.66, "duration": 4.83}, {"text": "and it checks if two\nvariables are equal.", "start": 1489.49, "duration": 2.035}, {"text": "And we have an if, elif, else.", "start": 1495.32, "duration": 3.39}, {"text": "And in this example, we're\ngoing to enter either this code", "start": 1498.71, "duration": 2.58}, {"text": "block or this one or\nthis one, depending", "start": 1501.29, "duration": 2.94}, {"text": "on the variables of x and y.", "start": 1504.23, "duration": 1.89}, {"text": "And we're only going\ninto one code block.", "start": 1506.12, "duration": 2.55}, {"text": "And we'll enter the\nfirst one that's true.", "start": 1508.67, "duration": 4.84}, {"text": "Notice you can have\nnested conditionals.", "start": 1513.51, "duration": 2.51}, {"text": "So inside this first if,\nwe have another if here.", "start": 1516.02, "duration": 3.04}, {"text": "And this inner if is only going\nto be checked when we enter", "start": 1522.98, "duration": 5.88}, {"text": "the first-- this outter if.", "start": 1528.86, "duration": 1.58}, {"text": "I do want to make\none point, though.", "start": 1536.59, "duration": 2.63}, {"text": "So sometimes, you might forget\nto do the double equals sign", "start": 1539.22, "duration": 2.64}, {"text": "when you are checking for\nequality, and that's OK.", "start": 1541.86, "duration": 4.35}, {"text": "If you just use one\nequals sign, Python's", "start": 1546.21, "duration": 1.98}, {"text": "going to give you an error.", "start": 1548.19, "duration": 2.76}, {"text": "And it's going to\nsay syntax error,", "start": 1550.95, "duration": 2.8}, {"text": "and it's going to\nhighlight this line.", "start": 1553.75, "duration": 2.03}, {"text": "And then you're going to know\nthat there's a mistake there.", "start": 1555.78, "duration": 2.91}, {"text": "And you should be\nusing equality,", "start": 1558.69, "duration": 1.65}, {"text": "because it doesn't\nmake sense to be", "start": 1560.34, "duration": 1.458}, {"text": "using-- to assign-- to be making\nan assignment inside the if.", "start": 1561.798, "duration": 3.532}, {"text": "So we've learned\nabout branching.", "start": 1572.476, "duration": 1.374}, {"text": "And we know about conditionals.", "start": 1573.85, "duration": 3.3}, {"text": "Let's try to apply\nthis to a little game.", "start": 1577.15, "duration": 5.61}, {"text": "And spoiler, we\nwon't be able to.", "start": 1582.76, "duration": 2.22}, {"text": "We'll have to learn\nabout a new thing.", "start": 1584.98, "duration": 2.04}, {"text": "But back in the 1980s,\nthere was the Legend", "start": 1587.02, "duration": 2.28}, {"text": "of Zelda-- cool\ngraphics-- where there was", "start": 1589.3, "duration": 4.05}, {"text": "a scene with the lost woods.", "start": 1593.35, "duration": 3.06}, {"text": "Oversimplification if\nanyone's a Zelda die hard fan.", "start": 1596.41, "duration": 4.5}, {"text": "But the basic idea was\nif you entered the woods,", "start": 1600.91, "duration": 4.32}, {"text": "you entered from the\nleft to the right.", "start": 1605.23, "duration": 2.29}, {"text": "And then as long as\nyou kept going right,", "start": 1607.52, "duration": 2.33}, {"text": "it would show you the same\nscreen over and over again.", "start": 1609.85, "duration": 3.51}, {"text": "And the trick was you\njust had to go backward,", "start": 1613.36, "duration": 2.67}, {"text": "and then you'd exit the woods.", "start": 1616.03, "duration": 2.43}, {"text": "So very simple.", "start": 1618.46, "duration": 1.83}, {"text": "Using what we know so far, we\ncould sort of code this up.", "start": 1620.29, "duration": 4.2}, {"text": "And we'd say\nsomething like this.", "start": 1624.49, "duration": 1.59}, {"text": "If the user exits right,\nthen set the background", "start": 1626.08, "duration": 2.91}, {"text": "to the woods background.", "start": 1628.99, "duration": 2.26}, {"text": "Otherwise, set the background\nto the exit background.", "start": 1631.25, "duration": 4.4}, {"text": "Now let's say the user-- and\nthen in the else, we're done.", "start": 1635.65, "duration": 3.27}, {"text": "Let's say the user went right.", "start": 1638.92, "duration": 1.98}, {"text": "Well, you'd show them\nthe woods background,", "start": 1640.9, "duration": 1.95}, {"text": "and now ask them again,\nwhere do they want to go?", "start": 1642.85, "duration": 2.49}, {"text": "If they exit right,\nset the background", "start": 1645.34, "duration": 1.62}, {"text": "to the woods background.", "start": 1646.96, "duration": 1.0}, {"text": "Otherwise, set the background to\nthe exit background, and so on.", "start": 1647.96, "duration": 3.09}, {"text": "So you notice that there's\nsort of no end to this, right?", "start": 1651.05, "duration": 4.19}, {"text": "How many times-- do you\nknow how many times the user", "start": 1655.24, "duration": 3.212}, {"text": "might keep going right?", "start": 1658.452, "duration": 0.958}, {"text": "They might be really\npersistent, right?", "start": 1659.41, "duration": 2.04}, {"text": "And they'll be like maybe\nif I go 1,000 times,", "start": 1661.45, "duration": 2.76}, {"text": "I'll get out of the woods.", "start": 1664.21, "duration": 1.55}, {"text": "Maybe 1,001?", "start": 1665.76, "duration": 1.9}, {"text": "Maybe.", "start": 1667.66, "duration": 0.99}, {"text": "So this would probably\nbe-- who knows how deep?", "start": 1668.65, "duration": 7.56}, {"text": "These nested ifs.", "start": 1676.21, "duration": 1.282}, {"text": "So we don't know.", "start": 1677.492, "duration": 0.708}, {"text": "So with what we know\nso far, we can't really", "start": 1680.737, "duration": 1.833}, {"text": "code this cute little game.", "start": 1682.57, "duration": 2.22}, {"text": "But enter loops.", "start": 1684.79, "duration": 2.93}, {"text": "And specifically, a while loop.", "start": 1687.72, "duration": 3.5}, {"text": "So this code here that could\nbe infinitely number of nested", "start": 1691.22, "duration": 5.3}, {"text": "if statements deep\ncan be rewritten", "start": 1696.52, "duration": 2.19}, {"text": "using these three lines.", "start": 1698.71, "duration": 2.94}, {"text": "So we say while the\nuser exits right,", "start": 1701.65, "duration": 2.7}, {"text": "set the background to\nthe woods background.", "start": 1704.35, "duration": 2.64}, {"text": "And with a while\nloop, it's going", "start": 1706.99, "duration": 1.38}, {"text": "to do what we tell it\nto do inside the loop,", "start": 1708.37, "duration": 1.833}, {"text": "and then it's going to\ncheck the condition again,", "start": 1710.203, "duration": 2.107}, {"text": "and then it's\ngoing to do what we", "start": 1712.31, "duration": 2.06}, {"text": "say it should do\ninside the code block,", "start": 1714.37, "duration": 2.49}, {"text": "and it's going to check\nthe condition again.", "start": 1716.86, "duration": 2.82}, {"text": "And then when the condition--\nas long as a condition is true,", "start": 1719.68, "duration": 2.98}, {"text": "it's going to keep doing\nthat little loop there.", "start": 1722.66, "duration": 2.669}, {"text": "And as soon as the\ncondition becomes false,", "start": 1725.329, "duration": 1.791}, {"text": "it's going to stop\ndoing the loop", "start": 1727.12, "duration": 1.65}, {"text": "and do whatever's\nright after the while.", "start": 1728.77, "duration": 3.65}, {"text": "OK.", "start": 1732.42, "duration": 1.13}, {"text": "So that's basically\nhow a while loop works.", "start": 1733.55, "duration": 3.96}, {"text": "We have while.", "start": 1737.51, "duration": 1.05}, {"text": "That's the key word.", "start": 1738.56, "duration": 1.59}, {"text": "The condition is\nsomething that gets", "start": 1740.15, "duration": 1.53}, {"text": "evaluated to true or false.", "start": 1741.68, "duration": 2.23}, {"text": "And once again, we have a\ncode block that's indented,", "start": 1743.91, "duration": 3.114}, {"text": "and it tells Python,\nthese are the expressions", "start": 1747.024, "duration": 1.916}, {"text": "I want to do as long as\nthe condition is true.", "start": 1748.94, "duration": 2.36}, {"text": "So the condition is true,\nyou evaluate every expression", "start": 1756.35, "duration": 2.42}, {"text": "in the code block.", "start": 1758.77, "duration": 0.81}, {"text": "When you reach the end of the\nexpression-- end of the code", "start": 1759.58, "duration": 2.49}, {"text": "block, you check\nthe condition again.", "start": 1762.07, "duration": 2.1}, {"text": "If it's true still, you\nkeep doing the expressions.", "start": 1764.17, "duration": 3.06}, {"text": "Check it again, and so on.", "start": 1767.23, "duration": 1.76}, {"text": "So here's a little game.", "start": 1772.91, "duration": 2.66}, {"text": "And with these lines\nof code, we were", "start": 1775.57, "duration": 2.52}, {"text": "able-- we can code up\nthe lost woods of Zelda.", "start": 1778.09, "duration": 5.07}, {"text": "Even worse graphics, by the\nway than the original Zelda", "start": 1783.16, "duration": 3.81}, {"text": "is this one that\nI coded up here.", "start": 1786.97, "duration": 2.01}, {"text": "So I print out the\nfollowing things.", "start": 1788.98, "duration": 1.715}, {"text": "\"You're in the Lost Forest.", "start": 1790.695, "duration": 1.125}, {"text": "Go left or right.\"", "start": 1791.82, "duration": 2.68}, {"text": "And my program's going to say,\n\"You're in the Lost Forest.", "start": 1794.5, "duration": 2.62}, {"text": "Go left or right.\"", "start": 1797.12, "duration": 0.89}, {"text": "It's going to get user input.", "start": 1798.01, "duration": 1.72}, {"text": "It's going to say while the\nuser keeps typing in right,", "start": 1799.73, "duration": 4.16}, {"text": "show them this text,\nand ask them again.", "start": 1803.89, "duration": 3.39}, {"text": "So I'm asking them again by\njust saying input here again.", "start": 1807.28, "duration": 3.987}, {"text": "And that's it.", "start": 1811.267, "duration": 0.583}, {"text": "That's going to just keep\ngetting input from the user.", "start": 1811.85, "duration": 3.17}, {"text": "And if the user doesn't type in\nright, and maybe types in left,", "start": 1815.02, "duration": 3.48}, {"text": "you're going to exit out of\nthis loop, and print out,", "start": 1818.5, "duration": 2.73}, {"text": "\"You've got out of\nthe Lost Forest.\"", "start": 1821.23, "duration": 3.64}, {"text": "So I have to show you this,\nbecause I spent too much time", "start": 1824.87, "duration": 3.75}, {"text": "on it.", "start": 1828.62, "duration": 2.13}, {"text": "But I decided to improve on\nthe code that's in the slides.", "start": 1830.75, "duration": 7.18}, {"text": "And I've written here ways that\nyou guys can also improve it.", "start": 1837.93, "duration": 4.01}, {"text": "So if I run my code--\n\"You're in the Lost Forest.", "start": 1841.94, "duration": 3.25}, {"text": "Go left or right.\"", "start": 1845.19, "duration": 0.81}, {"text": "So if I say left, then yay,\nI got out of the Lost Forest.", "start": 1846.0, "duration": 5.18}, {"text": "But if I go right,\nthen I'm stuck, right?", "start": 1851.18, "duration": 5.25}, {"text": "I took down some trees.", "start": 1856.43, "duration": 1.435}, {"text": "You can see there's\nno more trees here.", "start": 1857.865, "duration": 1.625}, {"text": "I made a table, and\nthen I flipped it over.", "start": 1859.49, "duration": 2.296}, {"text": "So the expansion to this\nif you want to try it out--", "start": 1864.92, "duration": 2.85}, {"text": "I put this in the comments\nhere-- is try to use a counter.", "start": 1867.77, "duration": 4.47}, {"text": "If the user types in\nright the first two times,", "start": 1872.24, "duration": 2.58}, {"text": "just make that a sad face.", "start": 1874.82, "duration": 2.686}, {"text": "But if the user types\nin more than two times,", "start": 1877.506, "duration": 1.874}, {"text": "make them cut down some trees\nand build a table and flip it.", "start": 1879.38, "duration": 5.039}, {"text": "That's a cute little\nexpansion if you", "start": 1884.419, "duration": 1.541}, {"text": "want to test yourself to make\nsure you are getting loops.", "start": 1885.96, "duration": 3.09}, {"text": "OK.", "start": 1889.05, "duration": 1.5}, {"text": "So so far, we've used while\nloops to ask for user input.", "start": 1890.55, "duration": 4.21}, {"text": "And that's actually somewhere\nwhere it makes sense", "start": 1894.76, "duration": 2.484}, {"text": "to use while loops,\nbecause you don't actually", "start": 1897.244, "duration": 1.916}, {"text": "know how many times the user\nis going to type in something.", "start": 1899.16, "duration": 4.2}, {"text": "You can use while loops\nto keep sort of a counter", "start": 1903.36, "duration": 3.76}, {"text": "and to write code\nthat counts something.", "start": 1907.12, "duration": 5.35}, {"text": "If you do that, though,\nthere's two things", "start": 1912.47, "duration": 2.73}, {"text": "you need to take care of.", "start": 1915.2, "duration": 1.14}, {"text": "The first is the\nfirst line here,", "start": 1916.34, "duration": 4.26}, {"text": "which is sort of an\ninitialization of this loop", "start": 1920.6, "duration": 2.951}, {"text": "counter.", "start": 1923.551, "duration": 0.499}, {"text": "And the second is\nthis line here,", "start": 1926.86, "duration": 2.68}, {"text": "which is incrementing\nyour loop counter.", "start": 1929.54, "duration": 2.275}, {"text": "The reason why the\nsecond one is important", "start": 1935.63, "duration": 2.31}, {"text": "is because-- let's look\nat our condition here.", "start": 1937.94, "duration": 2.85}, {"text": "So while n is less than five.", "start": 1940.79, "duration": 3.45}, {"text": "If you didn't have\nthis line here,", "start": 1944.24, "duration": 2.72}, {"text": "you would never increment n.", "start": 1946.96, "duration": 2.29}, {"text": "So every time through the loop,\nyou just keep printing zeros.", "start": 1949.25, "duration": 3.78}, {"text": "And you would have\nan infinite loop.", "start": 1953.03, "duration": 1.8}, {"text": "I do want to show,\nthough, what--", "start": 1954.83, "duration": 2.34}, {"text": "if you do have an infinite loop,\nit's not the end of the world.", "start": 1957.17, "duration": 3.36}, {"text": "So I can say something like--\nso while true, print zero.", "start": 1960.53, "duration": 12.84}, {"text": "So this is going to give me an\ninfinite loop in my program.", "start": 1973.37, "duration": 3.81}, {"text": "And-- whoop.", "start": 1977.18, "duration": 1.17}, {"text": "OK.", "start": 1986.97, "duration": 1.14}, {"text": "So notice it's just printing the\nletter p over and over again.", "start": 1988.11, "duration": 4.342}, {"text": "And if I let it go\nany longer, it's", "start": 1992.452, "duration": 1.458}, {"text": "going to slow down the computer.", "start": 1993.91, "duration": 1.333}, {"text": "So I'm going to hit\nControl-C or Command-C maybe.", "start": 1995.243, "duration": 3.397}, {"text": "And it's going to stop\nthe program from printing.", "start": 1998.64, "duration": 3.96}, {"text": "So just in case you ever\nenter infinite loops", "start": 2002.6, "duration": 2.13}, {"text": "in your programs, just go to\nthe console and hit Control-C,", "start": 2004.73, "duration": 3.84}, {"text": "and that's going to\nstop it from sort", "start": 2008.57, "duration": 2.46}, {"text": "of slowing down the computer.", "start": 2011.03, "duration": 3.651}, {"text": "OK.", "start": 2014.681, "duration": 0.499}, {"text": "So going back to\nthis example, I was", "start": 2015.18, "duration": 1.57}, {"text": "saying that if you're using\ncounters-- variables in order", "start": 2016.75, "duration": 3.81}, {"text": "to sort of count up\ninside the while loop,", "start": 2020.56, "duration": 1.89}, {"text": "you have to take\ncare to initialize", "start": 2022.45, "duration": 1.95}, {"text": "a counter variable first.", "start": 2024.4, "duration": 2.28}, {"text": "And then to increment\nit, otherwise you'll", "start": 2026.68, "duration": 2.49}, {"text": "enter an infinite loop.", "start": 2029.17, "duration": 2.16}, {"text": "That feels a little bit tedious.", "start": 2031.33, "duration": 2.4}, {"text": "And so there's a shortcut for\ndoing that exact same thing.", "start": 2033.73, "duration": 4.06}, {"text": "So these four lines,\nyou can rewrite those", "start": 2037.79, "duration": 2.54}, {"text": "into these two lines right here\nusing this new type of loop", "start": 2040.33, "duration": 3.96}, {"text": "called a for loop.", "start": 2044.29, "duration": 2.77}, {"text": "So the for loop says, for some\nloop variable-- in this case,", "start": 2047.06, "duration": 3.929}, {"text": "I named it n.", "start": 2050.989, "duration": 0.991}, {"text": "You can name it\nwhatever you want.", "start": 2051.98, "duration": 1.999}, {"text": "In range 5-- we're\ngoing to come back", "start": 2053.979, "duration": 1.541}, {"text": "to what range means in\na little bit-- print n.", "start": 2055.52, "duration": 2.83}, {"text": "So every time through\nthe loop, you're", "start": 2062.0, "duration": 1.62}, {"text": "going to print out\nwhat the value of n is.", "start": 2063.62, "duration": 3.3}, {"text": "Range 5 actually\ncreates internally", "start": 2066.92, "duration": 4.29}, {"text": "a sequence of numbers\nstarting from 0", "start": 2071.21, "duration": 2.73}, {"text": "and going to that\nnumber 5 minus 1.", "start": 2073.94, "duration": 3.009}, {"text": "So the sequence is going\nto be 0, 1, 2, 3, and 4.", "start": 2076.949, "duration": 5.0}, {"text": "The first time through the\nloop, you're going to say n", "start": 2081.949, "duration": 2.25}, {"text": "is equal to 0.", "start": 2084.199, "duration": 1.25}, {"text": "Or internally, this\nis what happens.", "start": 2085.449, "duration": 1.631}, {"text": "N gets the value of 0.", "start": 2087.08, "duration": 1.68}, {"text": "You're going to print n.", "start": 2088.76, "duration": 2.31}, {"text": "Then you're going to\ngo back to the top.", "start": 2091.07, "duration": 2.77}, {"text": "N gets the value 1.", "start": 2093.84, "duration": 1.399}, {"text": "Then you're going to go\nexecute whatever is inside.", "start": 2095.239, "duration": 2.881}, {"text": "So you're going to print 1.", "start": 2098.12, "duration": 2.112}, {"text": "Then you're going\nto increment that", "start": 2100.232, "duration": 1.458}, {"text": "to the next value\nin the sequence.", "start": 2101.69, "duration": 1.71}, {"text": "You're going to print\nout 2, and so on.", "start": 2103.4, "duration": 4.2}, {"text": "So this is the general\nlook of a for loop.", "start": 2107.6, "duration": 4.4}, {"text": "So we have for some\nloop variable-- again,", "start": 2112.0, "duration": 4.02}, {"text": "can be named whatever you\nwant-- in range some number.", "start": 2116.02, "duration": 5.34}, {"text": "Do a bunch of stuff.", "start": 2121.36, "duration": 2.28}, {"text": "And again, these are part\nof this for loop code block.", "start": 2123.64, "duration": 3.24}, {"text": "So you should indent\nthem to tell Python", "start": 2126.88, "duration": 2.37}, {"text": "that these are the things\nthat you should do.", "start": 2129.25, "duration": 3.33}, {"text": "So when you're using\nrange some number,", "start": 2132.58, "duration": 1.77}, {"text": "you start out with variable\ngetting the value 0.", "start": 2134.35, "duration": 4.485}, {"text": "With variable having\nvalue 0, you're", "start": 2141.98, "duration": 2.43}, {"text": "going to execute all\nof these expressions.", "start": 2144.41, "duration": 3.54}, {"text": "After all the expressions\nin the code block are done,", "start": 2147.95, "duration": 2.74}, {"text": "you're going to go\non to the next value.", "start": 2150.69, "duration": 3.24}, {"text": "So 1.", "start": 2153.93, "duration": 2.046}, {"text": "You're going to execute\nall these expressions", "start": 2155.976, "duration": 1.874}, {"text": "with the variable being\nvalue 1, and then so on", "start": 2157.85, "duration": 4.08}, {"text": "and so on until you go\nto some num minus 1.", "start": 2161.93, "duration": 3.45}, {"text": "That-- so using\nrange in that way", "start": 2170.45, "duration": 2.58}, {"text": "is a little bit constraining,\nbecause you're always", "start": 2173.03, "duration": 3.3}, {"text": "going to get values\nstarting from 0", "start": 2176.33, "duration": 2.19}, {"text": "and ending at some\nnum minus 1, whatever", "start": 2178.52, "duration": 3.05}, {"text": "is in the parentheses in range.", "start": 2181.57, "duration": 2.282}, {"text": "Sometimes you might want\nto write programs that", "start": 2183.852, "duration": 1.958}, {"text": "maybe start at a custom value.", "start": 2185.81, "duration": 1.722}, {"text": "Don't start at 0.", "start": 2187.532, "duration": 0.708}, {"text": "Maybe they start at 5.", "start": 2188.24, "duration": 1.35}, {"text": "Maybe they start at minus 10.", "start": 2189.59, "duration": 2.644}, {"text": "And sometimes you might\nwant to write programs", "start": 2192.234, "duration": 1.916}, {"text": "that don't go with-- don't\nexpect the numbers by 1,", "start": 2194.15, "duration": 3.48}, {"text": "but maybe skip\nevery other number,", "start": 2197.63, "duration": 1.65}, {"text": "go every two numbers, or every\nthree numbers, and so on.", "start": 2199.28, "duration": 3.04}, {"text": "So you can customize\nrange to your needs.", "start": 2202.32, "duration": 5.25}, {"text": "The one thing you do need\nto give it is the stop.", "start": 2207.57, "duration": 2.66}, {"text": "So if you give it only one\nvalue in the parentheses", "start": 2210.23, "duration": 2.19}, {"text": "that stands for stop.", "start": 2212.42, "duration": 2.61}, {"text": "And by default, start is\ngoing to have the value 0,", "start": 2215.03, "duration": 2.52}, {"text": "and step is going\nto have the value 1.", "start": 2217.55, "duration": 3.95}, {"text": "If you give it two things\nin the parentheses,", "start": 2221.5, "duration": 2.52}, {"text": "you're giving it start and stop.", "start": 2224.02, "duration": 2.49}, {"text": "So the first being start,\nthe second being stop.", "start": 2226.51, "duration": 2.34}, {"text": "And step gets this\nvalue of 1 by default.", "start": 2228.85, "duration": 4.055}, {"text": "And if you give it three\nthings in the parentheses,", "start": 2232.905, "duration": 2.125}, {"text": "you're giving it start,\nstop, and step in that order.", "start": 2235.03, "duration": 3.435}, {"text": "And you're always going to\nstart at the start value", "start": 2242.5, "duration": 3.63}, {"text": "and stop at-- or so you're going\nto start at the start value,", "start": 2246.13, "duration": 4.14}, {"text": "and you're going to\ngo until stop minus 1.", "start": 2250.27, "duration": 2.2}, {"text": "So those are the\nsequences of numbers.", "start": 2252.47, "duration": 1.73}, {"text": "So in this first\ncode right here,", "start": 2256.9, "duration": 2.18}, {"text": "my sum is going to\nget the value 0.", "start": 2259.08, "duration": 1.83}, {"text": "And you're going\nto have a for loop.", "start": 2260.91, "duration": 3.3}, {"text": "We're going to start\nfrom 7, because we're", "start": 2264.21, "duration": 2.49}, {"text": "giving it two numbers.", "start": 2266.7, "duration": 1.265}, {"text": "And when you give\nit two numbers,", "start": 2267.965, "duration": 1.375}, {"text": "it represents start and\nstop with step being 1.", "start": 2269.34, "duration": 4.23}, {"text": "So we're starting at 7.", "start": 2273.57, "duration": 2.34}, {"text": "If step is 1, the\nnext value is 8.", "start": 2275.91, "duration": 4.264}, {"text": "What's the value after that?", "start": 2280.174, "duration": 1.166}, {"text": "If we're incrementing by 1?", "start": 2285.1, "duration": 1.17}, {"text": "9.", "start": 2289.2, "duration": 0.5}, {"text": "And since we're going\nuntil stop minus 1,", "start": 2292.74, "duration": 4.69}, {"text": "we're not actually\ngoing to pick up on 10.", "start": 2297.43, "duration": 3.92}, {"text": "So this loop variable,\ni, the very first time", "start": 2301.35, "duration": 2.52}, {"text": "through the loop is going\nto have the value 7.", "start": 2303.87, "duration": 4.38}, {"text": "So my sum is going\nto be 0 plus 7.", "start": 2308.25, "duration": 5.11}, {"text": "That's everything that's\ninside the code block.", "start": 2317.51, "duration": 3.22}, {"text": "The next time through the\nloop, i gets the value 8.", "start": 2320.73, "duration": 4.79}, {"text": "So inside the for\nloop, my sum gets", "start": 2325.52, "duration": 7.38}, {"text": "whatever the previous value\nwas, which was 7, plus 8.", "start": 2332.9, "duration": 5.25}, {"text": "OK.", "start": 2338.15, "duration": 2.29}, {"text": "The next time through\nthe loop, my sum", "start": 2340.44, "duration": 4.1}, {"text": "get the value 7 plus 8 plus 9.", "start": 2344.54, "duration": 3.72}, {"text": "Obviously, replacing that\nwith the previous value.", "start": 2348.26, "duration": 2.34}, {"text": "So 15.", "start": 2350.6, "duration": 2.6}, {"text": "Since we're not going through\n10, that's where we stop.", "start": 2353.2, "duration": 2.641}, {"text": "And we're going to\nprint out my sum, which", "start": 2355.841, "duration": 1.749}, {"text": "is going to be the value\nof 7 plus 8 plus 9.", "start": 2357.59, "duration": 2.22}, {"text": "Yeah?", "start": 2362.33, "duration": 2.46}, {"text": "OK.", "start": 2364.79, "duration": 0.5}, {"text": "Yeah.", "start": 2365.29, "duration": 1.278}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2366.568, "duration": 1.037}, {"text": "PROFESSOR: Do they\nhave to be integers?", "start": 2367.605, "duration": 1.625}, {"text": "That's a great question.", "start": 2372.591, "duration": 0.999}, {"text": "We can try that out.", "start": 2373.59, "duration": 1.26}, {"text": "I'm not actually sure right\noff the top of my head.", "start": 2374.85, "duration": 3.81}, {"text": "So you can go on Spider and\nsay-- let's say in this example", "start": 2378.66, "duration": 7.87}, {"text": "here.", "start": 2386.53, "duration": 0.5}, {"text": "So we can say 7.1, 10.3-- yeah.", "start": 2392.1, "duration": 6.679}, {"text": "So they have to be integers.", "start": 2398.779, "duration": 1.166}, {"text": "OK.", "start": 2408.62, "duration": 0.63}, {"text": "So that's that example.", "start": 2409.25, "duration": 1.69}, {"text": "And let's erase that.", "start": 2410.94, "duration": 2.39}, {"text": "In this particular example,\nwe have start, stop, and step.", "start": 2413.33, "duration": 3.18}, {"text": "And here, we're going\nevery other value.", "start": 2416.51, "duration": 3.64}, {"text": "So we're starting at 5.", "start": 2420.15, "duration": 2.15}, {"text": "Tell me what the next\nvalue is supposed to be.", "start": 2422.3, "duration": 2.98}, {"text": "If we're taking every other one.", "start": 2425.28, "duration": 2.48}, {"text": "7, and then 9, and then--\nare we doing 11 or not?", "start": 2427.76, "duration": 7.26}, {"text": "Excellent.", "start": 2435.02, "duration": 0.93}, {"text": "Nice.", "start": 2435.95, "duration": 0.51}, {"text": "Yeah.", "start": 2436.46, "duration": 1.11}, {"text": "So we're going to\nthe end minus 1.", "start": 2437.57, "duration": 3.461}, {"text": "OK.", "start": 2441.031, "duration": 0.499}, {"text": "So it's possible\nthat sometimes you", "start": 2441.53, "duration": 1.92}, {"text": "write code where you might want\nto exit out of the loop early.", "start": 2443.45, "duration": 3.989}, {"text": "You don't want to go\nthrough all of the sequences", "start": 2447.439, "duration": 2.041}, {"text": "of your numbers.", "start": 2449.48, "duration": 1.56}, {"text": "Maybe there's a condition\ninside there where you just", "start": 2451.04, "duration": 2.25}, {"text": "want to exit the loop early.", "start": 2453.29, "duration": 2.119}, {"text": "Inside the while\nloop, maybe you want", "start": 2455.409, "duration": 1.541}, {"text": "to exit the loop before the\ncondition becomes false.", "start": 2456.95, "duration": 3.57}, {"text": "So that's where the\nbreak statement comes in.", "start": 2460.52, "duration": 2.46}, {"text": "So the break works like this.", "start": 2462.98, "duration": 3.04}, {"text": "It's going to-- as soon\nas Python sees this break", "start": 2466.02, "duration": 3.08}, {"text": "statement, it's\ngoing to say, OK,", "start": 2469.1, "duration": 3.99}, {"text": "I'm going to look at whatever\nloop I'm currently in.", "start": 2473.09, "duration": 5.07}, {"text": "I'm not evaluating\nany expression", "start": 2478.16, "duration": 2.19}, {"text": "after it that comes\nwithin my loop.", "start": 2480.35, "duration": 3.42}, {"text": "And I'm going to\nimmediately exit the loop.", "start": 2483.77, "duration": 2.41}, {"text": "So I'm going inside\nthis while, this while,", "start": 2486.18, "duration": 2.69}, {"text": "I'm evaluating this\none expression,", "start": 2488.87, "duration": 1.74}, {"text": "and I suddenly see a break.", "start": 2490.61, "duration": 2.82}, {"text": "Expression b does\nnot get evaluated.", "start": 2493.43, "duration": 4.53}, {"text": "And break is going\nto immediately", "start": 2497.96, "duration": 2.01}, {"text": "exit out of the innermost\nloop that it's in.", "start": 2499.97, "duration": 3.18}, {"text": "So this while loop that\nhas condition 2, that's", "start": 2503.15, "duration": 3.39}, {"text": "the innermost loop that\nthe break is found in.", "start": 2506.54, "duration": 4.41}, {"text": "So we're going to exit out\nof this inner most loop here.", "start": 2510.95, "duration": 3.72}, {"text": "And we're evaluating\nexpression c.", "start": 2514.67, "duration": 2.4}, {"text": "And notice, we're\nevaluating expression c,", "start": 2517.07, "duration": 1.83}, {"text": "because it's-- expression c is\npart of the outer while loop.", "start": 2518.9, "duration": 6.24}, {"text": "It's at the same\nlevel as this one.", "start": 2525.14, "duration": 3.33}, {"text": "And these ones are part\nof the inner while loop.", "start": 2528.47, "duration": 5.35}, {"text": "OK.", "start": 2533.82, "duration": 0.66}, {"text": "Last thing I want to\nsay is just a little bit", "start": 2534.48, "duration": 1.874}, {"text": "of a comparison between\nfor and while loops.", "start": 2536.354, "duration": 2.056}, {"text": "So when would you\nuse one or the other.", "start": 2538.41, "duration": 2.79}, {"text": "This might be useful\nin your problem sets.", "start": 2541.2, "duration": 1.909}, {"text": "So for loops you\nusually use when you", "start": 2543.109, "duration": 1.541}, {"text": "know the number of iterations.", "start": 2544.65, "duration": 2.88}, {"text": "While loops are very useful\nwhen, for example, you're", "start": 2547.53, "duration": 2.38}, {"text": "getting user input, and\nuser input is unpredictable.", "start": 2549.91, "duration": 2.469}, {"text": "You don't know how\nmany times they're", "start": 2552.379, "duration": 1.541}, {"text": "going to do a certain task.", "start": 2553.92, "duration": 2.765}, {"text": "For both for and\nwhile loops, you", "start": 2556.685, "duration": 1.375}, {"text": "can end out of the loop\nearly using the break.", "start": 2558.06, "duration": 2.64}, {"text": "The for loop uses this counter.", "start": 2560.7, "duration": 1.77}, {"text": "It's inherent\ninside the for loop.", "start": 2562.47, "duration": 2.91}, {"text": "A while loop you can use a\ncounter in order-- you can use", "start": 2565.38, "duration": 3.15}, {"text": "a while loop to count things.", "start": 2568.53, "duration": 2.31}, {"text": "But you must initialize the\ncounter before the while loop.", "start": 2570.84, "duration": 2.926}, {"text": "And you have to remember to\nincrement it within the loop.", "start": 2573.766, "duration": 2.374}, {"text": "Otherwise, you maybe\nlead to an infinite loop.", "start": 2576.14, "duration": 4.57}, {"text": "We've seen as the very\nfirst example of a for loop", "start": 2580.71, "duration": 3.48}, {"text": "that the while--\nthe for loop could", "start": 2584.19, "duration": 2.71}, {"text": "be rewritten as a while\nloop, but the vice versa", "start": 2586.9, "duration": 2.0}, {"text": "is not necessarily true.", "start": 2588.9, "duration": 2.26}, {"text": "And the counterexample to\nthat is just user input.", "start": 2591.16, "duration": 3.29}, {"text": "So you might not\nknow how many times", "start": 2594.45, "duration": 1.98}, {"text": "you might do a certain task.", "start": 2596.43, "duration": 2.3}, {"text": "All right.", "start": 2598.73, "duration": 0.73}, {"text": "Great.", "start": 2599.46, "duration": 1.02}, {"text": "That's all for today.", "start": 2600.48, "duration": 1.94}]