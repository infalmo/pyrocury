[{"text": "The following\ncontent is provided", "start": 0.08, "duration": 1.72}, {"text": "under a Creative\nCommons license.", "start": 1.8, "duration": 2.24}, {"text": "Your support will help MIT\nOpenCourseWare continue", "start": 4.04, "duration": 2.84}, {"text": "to offer high quality\neducational resources for free.", "start": 6.88, "duration": 3.86}, {"text": "To make a donation, or\nview additional materials", "start": 10.74, "duration": 2.61}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.35, "duration": 3.887}, {"text": "at ocw.mit.edu.", "start": 17.237, "duration": 0.625}, {"text": "PROFESSOR: Good\nmorning, everyone.", "start": 22.46, "duration": 2.05}, {"text": "Let's get started\non lecture number", "start": 24.51, "duration": 2.23}, {"text": "two of four lecture\nsequences of shortest paths.", "start": 26.74, "duration": 3.84}, {"text": "So, last time, we talked\nabout a general structure", "start": 30.58, "duration": 3.64}, {"text": "for a shortest path algorithm.", "start": 34.22, "duration": 2.94}, {"text": "Today, we'll actually look\nat a concrete algorithm", "start": 37.16, "duration": 2.862}, {"text": "that's due to Dijkstra.", "start": 40.022, "duration": 0.958}, {"text": "Before we get to\nthat, I want to do", "start": 43.99, "duration": 1.97}, {"text": "a little bit of a\nreview of the concepts", "start": 45.96, "duration": 3.65}, {"text": "that we covered in\nthe lecture last week.", "start": 49.61, "duration": 4.84}, {"text": "In particular, we\ntalked about this notion", "start": 54.45, "duration": 2.14}, {"text": "of relaxation, which is\na fundamental operation", "start": 56.59, "duration": 2.835}, {"text": "in all shortest path algorithms.", "start": 59.425, "duration": 2.205}, {"text": "And I want to go\nover that again.", "start": 61.63, "duration": 2.05}, {"text": "We look at a couple\nof special cases", "start": 63.68, "duration": 2.34}, {"text": "today, with respect to\nalgorithms for shortest paths.", "start": 66.02, "duration": 4.06}, {"text": "We look at a Directed\nAcyclic Graph.", "start": 70.08, "duration": 3.36}, {"text": "Then your graph has\nno cycles in it.", "start": 73.44, "duration": 3.99}, {"text": "Regardless of whether you\nhave negative edges or not,", "start": 77.43, "duration": 5.34}, {"text": "there's a\nstraightforward algorithm", "start": 82.77, "duration": 1.67}, {"text": "that we look at to find\nshortest paths and DAGs.", "start": 84.44, "duration": 4.32}, {"text": "And then, we'll\nfocus in on the case", "start": 88.76, "duration": 2.01}, {"text": "where there are\nno negative edges.", "start": 90.77, "duration": 1.89}, {"text": "And talk about\nDijkstra's algorithm.", "start": 92.66, "duration": 3.31}, {"text": "So, to start with\nthe review, here's,", "start": 95.97, "duration": 7.22}, {"text": "really, a trivial\nexample of a graph", "start": 103.19, "duration": 3.14}, {"text": "that we want to compute\nthe shortest paths on.", "start": 106.33, "duration": 3.67}, {"text": "And the numbers that are\ninside these vertices", "start": 110.0, "duration": 6.78}, {"text": "are our priority values.", "start": 116.78, "duration": 1.54}, {"text": "So, think of d of v as the\nlength of the current shortest", "start": 118.32, "duration": 11.4}, {"text": "path from the source, s, to v.", "start": 129.72, "duration": 6.53}, {"text": "And, given the source, s, the\nlength to the source is 0.", "start": 136.25, "duration": 6.65}, {"text": "So d of s is 0.", "start": 142.9, "duration": 1.23}, {"text": "It starts at 0 and ends at 0.", "start": 144.13, "duration": 2.46}, {"text": "And other ones, I\ninitialized to infinity.", "start": 146.59, "duration": 3.35}, {"text": "And through this process\nthat we call relaxation,", "start": 149.94, "duration": 5.24}, {"text": "we can generally\nreduce these d values,", "start": 155.18, "duration": 5.59}, {"text": "that are the lengths of\nthe current shortest paths,", "start": 160.77, "duration": 2.16}, {"text": "down to what we call\nthe delta values.", "start": 162.93, "duration": 4.095}, {"text": "Which is the length\nof our shortest path.", "start": 169.61, "duration": 4.18}, {"text": "It may be unique.", "start": 177.03, "duration": 0.915}, {"text": "It may not be unique.", "start": 177.945, "duration": 1.805}, {"text": "But you have to get\nthe minimum value.", "start": 179.75, "duration": 2.53}, {"text": "And then, all of the vertices\nhave convergent values", "start": 182.28, "duration": 7.05}, {"text": "of d that converge to delta.", "start": 189.33, "duration": 2.38}, {"text": "Then, your algorithm is done.", "start": 191.71, "duration": 2.41}, {"text": "And one last thing that is\nimportant to reconstruct", "start": 194.12, "duration": 5.37}, {"text": "the path is the notion\nof a predecessor and pi v", "start": 199.49, "duration": 7.41}, {"text": "is the predecessor of v in\nthe shortest path from s", "start": 206.9, "duration": 9.63}, {"text": "to v. And you can\nfollow this predecessor", "start": 216.53, "duration": 7.65}, {"text": "chain to reconstruct\nthe shortest path,", "start": 224.18, "duration": 2.63}, {"text": "once you've converged,\nand all of the values", "start": 226.81, "duration": 4.75}, {"text": "are down to the delta s comma\nv. So, in this trivial example,", "start": 231.56, "duration": 5.58}, {"text": "you start with d of s being 0, d\nof a and d of b being infinity.", "start": 237.14, "duration": 7.44}, {"text": "Let's put on it a\nfew weights here.", "start": 244.58, "duration": 5.98}, {"text": "And what you do is\npotentially relax", "start": 250.56, "duration": 2.96}, {"text": "the edges that go out of s.", "start": 253.52, "duration": 2.99}, {"text": "And this notion of relaxation,\nthat I'll write out formally", "start": 256.51, "duration": 2.979}, {"text": "in a minute-- we\nlooked at it last time,", "start": 259.489, "duration": 2.451}, {"text": "is a process of\nfollowing this edge,", "start": 261.94, "duration": 2.24}, {"text": "and updating the d of a value.", "start": 264.18, "duration": 2.53}, {"text": "And this infinity becomes\n1 because you say, well,", "start": 266.71, "duration": 3.43}, {"text": "if I start here with 0 and\nI add 1 to it, I get 1 here.", "start": 270.14, "duration": 3.45}, {"text": "Similarly, this\ninfinity becomes 3.", "start": 273.59, "duration": 2.24}, {"text": "And, at this point,\nyou've relaxed the edges", "start": 275.83, "duration": 2.27}, {"text": "that go out of s two these\nother two nodes, a and b.", "start": 278.1, "duration": 4.94}, {"text": "You're not quite done yet.", "start": 283.04, "duration": 2.492}, {"text": "At this point, you could imagine\nthat, at least in this example,", "start": 285.532, "duration": 4.238}, {"text": "you found the shortest\npath to the vertex a.", "start": 289.77, "duration": 2.58}, {"text": "But it is, in fact, a path\nof length, 2, to vertex b.", "start": 292.35, "duration": 5.59}, {"text": "Right now, we think that the\nthe current shortest path to b,", "start": 297.94, "duration": 3.6}, {"text": "after the first step of\nrelaxing the edges from s,", "start": 301.54, "duration": 3.96}, {"text": "happens to be 3.", "start": 305.5, "duration": 1.22}, {"text": "But if you go like so,\nthen you end up with the 2.", "start": 306.72, "duration": 6.64}, {"text": "And, at this point, you're done.", "start": 313.36, "duration": 2.43}, {"text": "Now we have to prove that any\nparticular algorithm we put up", "start": 315.79, "duration": 4.59}, {"text": "is going to converge to the\ndelta values, and the algorithm", "start": 320.38, "duration": 4.38}, {"text": "to terminate.", "start": 324.76, "duration": 0.614}, {"text": "And then, we have to worry\nabout the asymptotic complexity", "start": 325.374, "duration": 2.416}, {"text": "of the algorithm.", "start": 327.79, "duration": 1.14}, {"text": "But that's the\ngeneral overall flow.", "start": 328.93, "duration": 2.13}, {"text": "And we look at, as I said,\ntwo algorithms today.", "start": 331.06, "duration": 3.0}, {"text": "Both special cases.", "start": 334.06, "duration": 1.46}, {"text": "One for DAGs and one\nfor non-negative edges.", "start": 335.52, "duration": 2.86}, {"text": "And we'll go through, and\nmaybe not do a formal proof,", "start": 338.38, "duration": 3.05}, {"text": "but suddenly give you\na strong intuition", "start": 341.43, "duration": 2.89}, {"text": "as to why these algorithms work.", "start": 344.32, "duration": 2.67}, {"text": "Any questions about\nthis material?", "start": 346.99, "duration": 5.76}, {"text": "OK.", "start": 352.75, "duration": 2.17}, {"text": "So, what I want\nto do is give you", "start": 354.92, "duration": 3.3}, {"text": "a sense for why this\nrelaxation step is useful.", "start": 358.22, "duration": 6.55}, {"text": "But also, importantly,\nsafe, or correct.", "start": 364.77, "duration": 3.7}, {"text": "And recall that our basic\nrelaxation operation, which", "start": 368.47, "duration": 6.75}, {"text": "we did over here, as we\nupdated the infinity value to 1", "start": 375.22, "duration": 4.52}, {"text": "and the 3 value to 2, et\ncetera, looks like this.", "start": 379.74, "duration": 4.36}, {"text": "It says, if d of v is greater\nthan d of u plus w u,v. Then,", "start": 384.1, "duration": 9.41}, {"text": "I'm going to update d of v\nto be d of u plus w u, v.", "start": 393.51, "duration": 6.59}, {"text": "You found a better way\nof reaching vertex v.", "start": 400.1, "duration": 3.97}, {"text": "A shorter way.", "start": 404.07, "duration": 0.825}, {"text": "And this way happens to be\ngoing through the vertex, u.", "start": 408.56, "duration": 3.36}, {"text": "So you update not only the\npriority value, but also", "start": 411.92, "duration": 3.41}, {"text": "the predecessor relationship.", "start": 415.33, "duration": 2.12}, {"text": "All right?", "start": 417.45, "duration": 0.5}, {"text": "That's the relaxation step.", "start": 417.95, "duration": 1.99}, {"text": "Now, I want to be able to\nshow that relaxation is safe.", "start": 419.94, "duration": 4.865}, {"text": "What do I mean by that?", "start": 430.2, "duration": 1.56}, {"text": "Well, I want to make sure\nthat I never relax an edge", "start": 431.76, "duration": 4.71}, {"text": "and somehow do\nsomething wrong, which", "start": 436.47, "duration": 2.02}, {"text": "gets me a value that's\nless than delta s v.", "start": 438.49, "duration": 4.83}, {"text": "I want to be able to\nconverge from the top.", "start": 443.32, "duration": 2.56}, {"text": "I want to be able to start\nwith these infinity values", "start": 445.88, "duration": 2.96}, {"text": "because I don't have a path\nto this particular vertex,", "start": 448.84, "duration": 2.82}, {"text": "and continually reduce the\nvalues of the priorities.", "start": 451.66, "duration": 4.04}, {"text": "And then get down to delta, the\ncorrect values, and don't go,", "start": 455.7, "duration": 3.759}, {"text": "I don't want to go any further.", "start": 459.459, "duration": 1.291}, {"text": "All right?", "start": 460.75, "duration": 0.72}, {"text": "Because, if I get below,\nthen you're talking about,", "start": 461.47, "duration": 2.66}, {"text": "essentially, you may\nbe able to get back up,", "start": 464.13, "duration": 2.04}, {"text": "but that is not the kind\nof algorithm that we want.", "start": 466.17, "duration": 3.46}, {"text": "At least, algorithms\nwe look at here.", "start": 469.63, "duration": 2.33}, {"text": "And that is dangerous.", "start": 471.96, "duration": 1.97}, {"text": "So we want relaxation\nto be safe.", "start": 473.93, "duration": 2.92}, {"text": "And we can fairly easily\nprove a simple lemma,", "start": 476.85, "duration": 5.66}, {"text": "using induction, that\nsays that the relaxation", "start": 482.51, "duration": 7.77}, {"text": "operation-- and\nit doesn't matter", "start": 490.28, "duration": 3.41}, {"text": "what sequence you relax things.", "start": 493.69, "duration": 2.0}, {"text": "This is a fairly\npowerful lemma that", "start": 495.69, "duration": 1.905}, {"text": "says that if you have an\nalgorithm that uses relaxation,", "start": 497.595, "duration": 3.255}, {"text": "and that's the only way of\nupdating these d values,", "start": 500.85, "duration": 5.0}, {"text": "then it's safe.", "start": 505.85, "duration": 1.71}, {"text": "You're not going to get a\nwrong, shortest path value.", "start": 507.56, "duration": 3.374}, {"text": "Either at the end\nof the algorithm", "start": 510.934, "duration": 1.416}, {"text": "or at any time during the\nrunning, or the execution,", "start": 512.35, "duration": 2.949}, {"text": "of this algorithm.", "start": 515.299, "duration": 1.111}, {"text": "OK?", "start": 516.41, "duration": 0.499}, {"text": "So the relaxation\noperation algorithm", "start": 516.909, "duration": 2.981}, {"text": "maintains the\ninvariant that d of v", "start": 519.89, "duration": 13.27}, {"text": "is greater than or equal to\ndelta s, v for all vertices.", "start": 533.16, "duration": 9.15}, {"text": "OK?", "start": 542.31, "duration": 0.92}, {"text": "So that's a powerful lemma.", "start": 543.23, "duration": 2.146}, {"text": "It's a fairly straightforward\nlemma to prove.", "start": 545.376, "duration": 1.874}, {"text": "But it's an important lemma.", "start": 547.25, "duration": 2.5}, {"text": "It tells us that we can\ncreate the generic structure", "start": 549.75, "duration": 3.58}, {"text": "of the shortest path algorithm\nthat I talked about last week.", "start": 553.33, "duration": 3.15}, {"text": "It says, pick an edge.", "start": 556.48, "duration": 2.89}, {"text": "Relax it.", "start": 559.37, "duration": 0.941}, {"text": "Pick another edge.", "start": 560.311, "duration": 0.749}, {"text": "Relax it.", "start": 561.06, "duration": 0.937}, {"text": "And hopefully\neverything will work out", "start": 561.997, "duration": 1.583}, {"text": "and you'll get\nyour delta values.", "start": 563.58, "duration": 1.9}, {"text": "And what this lemma\nsays is, you'll", "start": 565.48, "duration": 3.447}, {"text": "never get something\nin the middle that", "start": 568.927, "duration": 1.583}, {"text": "is less than your\nshortest path value.", "start": 570.51, "duration": 1.99}, {"text": "And if you keep running\nover for long enough time,", "start": 572.5, "duration": 3.28}, {"text": "depending on the\nparticular heuristic", "start": 575.78, "duration": 1.66}, {"text": "that you use for\nselecting the edges,", "start": 577.44, "duration": 2.12}, {"text": "your algorithm will\neventually terminate.", "start": 579.56, "duration": 2.01}, {"text": "And, hopefully, it'll\nrun in polynomial time.", "start": 581.57, "duration": 5.17}, {"text": "So, how do we prove this?", "start": 586.74, "duration": 3.76}, {"text": "I'm going to do\nabout half of it,", "start": 590.5, "duration": 2.12}, {"text": "then try and get\nyou to finish it.", "start": 592.62, "duration": 3.54}, {"text": "So it's by induction\non the number of steps,", "start": 596.16, "duration": 8.48}, {"text": "in the sense that we are going\nto essentially assume that d", "start": 604.64, "duration": 10.28}, {"text": "of u is greater than\nor equal to delta s,u.", "start": 614.92, "duration": 9.03}, {"text": "And we're going to do\nthis relaxation operation.", "start": 623.95, "duration": 4.9}, {"text": "So it's like a base case\nis that this is correct.", "start": 628.85, "duration": 4.385}, {"text": "And now we want to show that\nthe relaxation operation doesn't", "start": 636.68, "duration": 6.77}, {"text": "make d of v incorrect.", "start": 643.45, "duration": 3.64}, {"text": "So, that's the\ninductive hypothesis.", "start": 647.09, "duration": 4.935}, {"text": "Now, we can say by the\ntriangle inequality", "start": 654.66, "duration": 6.02}, {"text": "that I talked about late\nin last week's lecture,", "start": 660.68, "duration": 4.91}, {"text": "you have delta s, v less than\nor equal to delta s comma", "start": 665.59, "duration": 6.46}, {"text": "u plus delta u comma\nv. And what is that?", "start": 672.05, "duration": 5.61}, {"text": "Well, that just says, if I\nhave something like this,", "start": 677.66, "duration": 9.01}, {"text": "that I have s.", "start": 686.67, "duration": 3.67}, {"text": "Let's call this u and v.", "start": 690.34, "duration": 5.23}, {"text": "This is not an edge between\ns and v. It's a path.", "start": 695.57, "duration": 3.4}, {"text": "It could be a single edge.", "start": 698.97, "duration": 1.37}, {"text": "But we think of this\nas a path between s", "start": 700.34, "duration": 2.26}, {"text": "and v. This is a\npath between s and u.", "start": 702.6, "duration": 4.43}, {"text": "This is a path between u and v.", "start": 707.03, "duration": 3.86}, {"text": "And, in particular,\nif there's a way", "start": 710.89, "duration": 6.89}, {"text": "of getting from s to u and u\nto v that happens to be shorter", "start": 717.78, "duration": 10.86}, {"text": "then the best way of\ngetting from s to v,", "start": 728.64, "duration": 4.34}, {"text": "well, that's a contradiction.", "start": 732.98, "duration": 1.851}, {"text": "OK?", "start": 734.831, "duration": 0.499}, {"text": "Because this is the shortest\nway of getting from s to v.", "start": 735.33, "duration": 5.94}, {"text": "And it has no constraints\nover the number of edges", "start": 741.27, "duration": 2.33}, {"text": "that it incorporates.", "start": 743.6, "duration": 3.15}, {"text": "And so, by definition,\nthe shortest way", "start": 746.75, "duration": 1.98}, {"text": "of getting from s to v is\neither some direct way.", "start": 748.73, "duration": 2.41}, {"text": "Maybe there's a single edge.", "start": 751.14, "duration": 1.32}, {"text": "Or it may go through\nthis vertex, u.", "start": 752.46, "duration": 4.151}, {"text": "All right?", "start": 756.611, "duration": 0.499}, {"text": "So that's the\ntriangle inequality.", "start": 757.11, "duration": 2.78}, {"text": "Notice that, what I\nhave here, is something", "start": 759.89, "duration": 4.27}, {"text": "where going from s,\nto a, to b is actually", "start": 764.16, "duration": 6.51}, {"text": "shorter than going from s to b.", "start": 770.67, "duration": 2.392}, {"text": "But these are single\nedges we're talking about.", "start": 773.062, "duration": 1.958}, {"text": "These are weights\nwe're talking about.", "start": 775.02, "duration": 1.2}, {"text": "And there's no\ncontradiction here", "start": 776.22, "duration": 1.66}, {"text": "because all this says is\nthat, what I want to see here", "start": 777.88, "duration": 4.05}, {"text": "is delta s comma b\nis going to be 2.", "start": 781.93, "duration": 5.54}, {"text": "OK?", "start": 787.47, "duration": 1.37}, {"text": "Initially, I may be starting\nout with infinity and 3", "start": 788.84, "duration": 2.47}, {"text": "for the d values.", "start": 791.31, "duration": 1.59}, {"text": "But the delta value,\nwhich is the shortest way", "start": 792.9, "duration": 2.26}, {"text": "of getting to b,\nhappens to go through a.", "start": 795.16, "duration": 2.35}, {"text": "And so, if you use that,\nthen the triangle inequality", "start": 797.51, "duration": 2.64}, {"text": "makes sense.", "start": 800.15, "duration": 0.91}, {"text": "So don't get confused\nwhen you see pictures", "start": 801.06, "duration": 2.88}, {"text": "like this, where the weights\ndon't obey the triangle", "start": 803.94, "duration": 5.08}, {"text": "inequality.", "start": 809.02, "duration": 1.02}, {"text": "The triangle inequality has to\ndo with the shortest paths, not", "start": 810.04, "duration": 3.64}, {"text": "the single edge ways.", "start": 813.68, "duration": 1.421}, {"text": "OK?", "start": 815.101, "duration": 0.499}, {"text": "So, that's half the proof here.", "start": 818.41, "duration": 3.91}, {"text": "What I've done is assumed\nthat d of u is correct.", "start": 822.32, "duration": 4.47}, {"text": "And I've used the\ntriangle inequality.", "start": 826.79, "duration": 3.27}, {"text": "And I've just written this down.", "start": 830.06, "duration": 1.62}, {"text": "Now, someone do the last step,\nor the second to last step,", "start": 831.68, "duration": 6.52}, {"text": "of this proof.", "start": 838.2, "duration": 1.53}, {"text": "Anybody?", "start": 839.73, "duration": 0.5}, {"text": "What can I say now, given\nthat what I have here.", "start": 843.1, "duration": 2.7}, {"text": "Look at these two values.", "start": 845.8, "duration": 3.28}, {"text": "What can I say\nabout these values?", "start": 849.08, "duration": 3.54}, {"text": "How can I prove what\nI want to prove,", "start": 852.62, "duration": 1.9}, {"text": "which is, basically, delta of\ns comma v should be less than", "start": 854.52, "duration": 5.23}, {"text": "or equal to d of v?", "start": 859.75, "duration": 1.81}, {"text": "OK.", "start": 861.56, "duration": 0.63}, {"text": "That's what I want to show.", "start": 862.19, "duration": 2.49}, {"text": "I've just written\nanother way here.", "start": 864.68, "duration": 2.1}, {"text": "How do I do that?", "start": 866.78, "duration": 0.73}, {"text": "Anyone?", "start": 870.946, "duration": 0.5}, {"text": "What can I substitute for--\nthere's a less than operator,", "start": 876.38, "duration": 9.43}, {"text": "which means that I can\nreplace things over here.", "start": 885.81, "duration": 3.02}, {"text": "Yeah.", "start": 888.83, "duration": 0.805}, {"text": "AUDIENCE: If you, like,\nyou have a [INAUDIBLE]?", "start": 889.635, "duration": 3.382}, {"text": "PROFESSOR: Ah.", "start": 893.017, "duration": 0.583}, {"text": "Excellent.", "start": 893.6, "duration": 0.5}, {"text": "So the first thing is, I could\nput d of u over here, right?", "start": 894.1, "duration": 5.16}, {"text": "Less than or equal to d of u.", "start": 899.26, "duration": 4.89}, {"text": "And the reason I can do\nthat is because d of u", "start": 904.15, "duration": 2.62}, {"text": "is greater then delta s comma u.", "start": 906.77, "duration": 2.77}, {"text": "So that's cool, right?", "start": 909.54, "duration": 3.53}, {"text": "Sorry, delta.", "start": 913.07, "duration": 0.62}, {"text": "Thank you.", "start": 913.69, "duration": 0.99}, {"text": "Delta s comma u.", "start": 914.68, "duration": 1.22}, {"text": "Thank you.", "start": 915.9, "duration": 1.06}, {"text": "And so, that's what I got here.", "start": 916.96, "duration": 1.67}, {"text": "What else?", "start": 918.63, "duration": 1.41}, {"text": "Yeah?", "start": 920.04, "duration": 0.5}, {"text": "AUDIENCE: You replace\ndelta u, v with w u, v.", "start": 920.54, "duration": 3.534}, {"text": "PROFESSOR: I can replace\ndelta u, v with w, u,", "start": 924.074, "duration": 1.916}, {"text": "v. Exactly right.", "start": 925.99, "duration": 2.72}, {"text": "Exactly right.", "start": 928.71, "duration": 1.01}, {"text": "Great.", "start": 929.72, "duration": 0.6}, {"text": "That deserves a cushion.", "start": 930.32, "duration": 1.24}, {"text": "I think you already have one.", "start": 931.56, "duration": 1.86}, {"text": "Yep.", "start": 933.42, "duration": 1.621}, {"text": "Oh, man.", "start": 935.041, "duration": 0.499}, {"text": "I should have not-- so you\nget that because I messed up.", "start": 935.54, "duration": 3.49}, {"text": "Seems like you\nneed to get-- whoa.", "start": 939.03, "duration": 1.9}, {"text": "Hey.", "start": 940.93, "duration": 0.58}, {"text": "OK.", "start": 941.51, "duration": 1.01}, {"text": "You get one because I\nhit you on the head.", "start": 942.52, "duration": 1.75}, {"text": "All right.", "start": 944.27, "duration": 0.92}, {"text": "And this time, I'll just save.", "start": 945.19, "duration": 1.25}, {"text": "I'm running out\nof cushions here.", "start": 946.44, "duration": 1.374}, {"text": "But I've got some in my office.", "start": 947.814, "duration": 4.076}, {"text": "All right.", "start": 951.89, "duration": 0.82}, {"text": "So that's it.", "start": 952.71, "duration": 0.56}, {"text": "That's the proof.", "start": 953.27, "duration": 1.59}, {"text": "OK?", "start": 954.86, "duration": 1.172}, {"text": "Fairly straightforward.", "start": 956.032, "duration": 0.958}, {"text": "You get to the\npoint where you want", "start": 959.86, "duration": 4.43}, {"text": "to apply the\ntriangle inequality.", "start": 964.29, "duration": 2.71}, {"text": "You simply look at each of\nthese terms and, by induction", "start": 967.0, "duration": 5.99}, {"text": "hypothesis, you\ncould put d,u here.", "start": 972.99, "duration": 3.36}, {"text": "And, I just talked\nabout the weights,", "start": 976.35, "duration": 2.15}, {"text": "and so on, and so forth.", "start": 978.5, "duration": 1.98}, {"text": "And you know that w u,v,\nwhich is a direct way,", "start": 980.48, "duration": 3.15}, {"text": "a single edge way,\nof getting to a node,", "start": 983.63, "duration": 6.01}, {"text": "has to be greater than\nthe shortest path.", "start": 989.64, "duration": 3.91}, {"text": "Like here, this 3\nvalue is a direct way", "start": 993.55, "duration": 2.74}, {"text": "of getting from s to b.", "start": 996.29, "duration": 2.23}, {"text": "And, in this case, it's\ngreater than the shortest", "start": 998.52, "duration": 2.69}, {"text": "path, which is of length 2.", "start": 1001.21, "duration": 1.56}, {"text": "But it can never be smaller\nthan the shortest path.", "start": 1002.77, "duration": 2.94}, {"text": "And so, once we have that\nhere, we can essentially say,", "start": 1005.71, "duration": 5.54}, {"text": "we know that delta s, v is less\nthan or equal to d u plus d v.", "start": 1011.25, "duration": 3.76}, {"text": "Which implies, of course,\nthat this is simply--", "start": 1015.01, "duration": 2.52}, {"text": "once we are done with the\nrelaxation step-- that", "start": 1017.53, "duration": 2.51}, {"text": "equals d v. This part\nhere equals d v. OK?", "start": 1020.04, "duration": 7.59}, {"text": "That's how that works.", "start": 1027.63, "duration": 1.81}, {"text": "So that's good news.", "start": 1029.44, "duration": 1.71}, {"text": "We have a relaxation\nalgorithm that is safe.", "start": 1031.15, "duration": 4.126}, {"text": "We can now\narbitrarily, and we'll", "start": 1035.276, "duration": 1.374}, {"text": "do this for all of algorithms\nwe look at, really.", "start": 1036.65, "duration": 4.87}, {"text": "At least in 006,\nfor shortest paths.", "start": 1041.52, "duration": 2.46}, {"text": "Which applies some\nsequence of relaxations.", "start": 1043.98, "duration": 3.58}, {"text": "And, depending on the\nspecial case of the problem,", "start": 1047.56, "duration": 3.956}, {"text": "we're going to apply these\nthings in different ways", "start": 1051.516, "duration": 2.124}, {"text": "to get the most\nefficient algorithm.", "start": 1053.64, "duration": 2.67}, {"text": "All right?", "start": 1056.31, "duration": 0.89}, {"text": "So, we can now do algorithms.", "start": 1057.2, "duration": 3.69}, {"text": "Let's look at DAGs first.", "start": 1060.89, "duration": 2.825}, {"text": "So, DAG stands for\nDirected Acyclic Graphs.", "start": 1073.67, "duration": 4.72}, {"text": "So that means we\ncan't have cycles.", "start": 1078.39, "duration": 10.04}, {"text": "So we can't have\nnegative cycles.", "start": 1088.43, "duration": 1.88}, {"text": "So that's why this is an\ninteresting special case.", "start": 1090.31, "duration": 3.1}, {"text": "It makes things a\nlittle bit easier for us", "start": 1093.41, "duration": 2.06}, {"text": "because we don't have to\nworry about negative cycles.", "start": 1095.47, "duration": 2.92}, {"text": "We're actually going\nto look at DAGs", "start": 1098.39, "duration": 1.89}, {"text": "that have negative\nedges in them.", "start": 1100.28, "duration": 1.995}, {"text": "All right?", "start": 1102.275, "duration": 0.545}, {"text": "So, we're allowed to have\nnegative edges in these DAGs.", "start": 1102.82, "duration": 3.27}, {"text": "But we don't have\nnegative cycles.", "start": 1106.09, "duration": 1.64}, {"text": "And, as I said\nlast time, it's not", "start": 1107.73, "duration": 1.554}, {"text": "the negative edges\nthat cause a problem.", "start": 1109.284, "duration": 1.666}, {"text": "If you only go through\nat negative edge once,", "start": 1110.95, "duration": 3.316}, {"text": "you can just\nsubtract that value.", "start": 1114.266, "duration": 1.374}, {"text": "And it's cool.", "start": 1115.64, "duration": 1.27}, {"text": "It's only when you\nget into a situation", "start": 1116.91, "duration": 2.05}, {"text": "where you're going\nthrough a negative edge,", "start": 1118.96, "duration": 2.41}, {"text": "a negative cycle.", "start": 1121.37, "duration": 0.99}, {"text": "And you can just iterate through\nthem to get to minus infinity.", "start": 1122.36, "duration": 3.6}, {"text": "And you have an indeterminate\nshortest path value.", "start": 1125.96, "duration": 3.88}, {"text": "So the way this is going\nto work-- if you ever", "start": 1129.84, "duration": 4.48}, {"text": "have a DAG, by the way, the\nfirst thing you want to try--", "start": 1134.32, "duration": 2.5}, {"text": "and this is certainly\ntrue in your problem set--", "start": 1136.82, "duration": 2.0}, {"text": "when there's a question, try\nto topologically sort it.", "start": 1138.82, "duration": 3.02}, {"text": "OK?", "start": 1141.84, "duration": 0.59}, {"text": "It's a fine hammer to\nuse, when you have a DAG.", "start": 1142.43, "duration": 3.12}, {"text": "And it's not an exception here.", "start": 1145.55, "duration": 6.14}, {"text": "To do shortest\npaths, we're going", "start": 1151.69, "duration": 1.81}, {"text": "to topologically sort the DAG.", "start": 1153.5, "duration": 4.26}, {"text": "And the path from u\nto v implies that u", "start": 1157.76, "duration": 15.01}, {"text": "is before v in the ordering.", "start": 1172.77, "duration": 4.73}, {"text": "And, once you do that,\nyou have this linear.", "start": 1181.82, "duration": 1.872}, {"text": "And I'll show you an example.", "start": 1183.692, "duration": 1.208}, {"text": "You have this linear ordering.", "start": 1184.9, "duration": 1.61}, {"text": "And we're just going to\ngo through, in order,", "start": 1186.51, "duration": 2.57}, {"text": "from left to right,\nrelaxing these edges.", "start": 1189.08, "duration": 2.082}, {"text": "And we're going to\nget our shortest", "start": 1191.162, "duration": 1.458}, {"text": "paths for all the vertices.", "start": 1192.62, "duration": 2.62}, {"text": "So, the second and last step\nis, one pass, left to right,", "start": 1195.24, "duration": 5.84}, {"text": "over the vertices, in\ntopologically sorted order.", "start": 1201.08, "duration": 6.38}, {"text": "And we're going to\nrelax each edge that", "start": 1217.0, "duration": 3.57}, {"text": "leaves the particular\nvertex we are", "start": 1220.57, "duration": 1.554}, {"text": "trying to process right now.", "start": 1222.124, "duration": 1.166}, {"text": "And so, we know topological\nsorting is order v plus e,", "start": 1232.94, "duration": 4.05}, {"text": "includes depth-first search.", "start": 1236.99, "duration": 1.67}, {"text": "And this pass over the vertices,\nyou're touching each vertex.", "start": 1238.66, "duration": 2.8}, {"text": "And you're touching every edge\na constant number of times.", "start": 1241.46, "duration": 3.03}, {"text": "In this case, once.", "start": 1244.49, "duration": 1.48}, {"text": "So this is our first special\ncase shortest path algorithm.", "start": 1245.97, "duration": 7.21}, {"text": "And that takes\norder v plus e time.", "start": 1253.18, "duration": 2.74}, {"text": "All right?", "start": 1255.92, "duration": 1.09}, {"text": "Why does this work?", "start": 1257.01, "duration": 1.56}, {"text": "And just one little\ninteresting aspect", "start": 1258.57, "duration": 7.58}, {"text": "of this, which is\nrelated to a DAG.", "start": 1266.15, "duration": 3.42}, {"text": "And the relationship between the\nDAG and the particular starting", "start": 1269.57, "duration": 5.24}, {"text": "vertex that we're\ngoing to be looking at.", "start": 1274.81, "duration": 2.42}, {"text": "So, this is an example.", "start": 1277.23, "duration": 3.27}, {"text": "Suppose I have a DAG like this.", "start": 1280.5, "duration": 3.07}, {"text": "And I marked this vertex as s.", "start": 1283.57, "duration": 3.15}, {"text": "And I want to find the\nshortest path from s", "start": 1286.72, "duration": 3.3}, {"text": "to these other nodes\nthat are a and b.", "start": 1290.02, "duration": 3.31}, {"text": "Well, they don't exist, right?", "start": 1293.33, "duration": 2.95}, {"text": "So, in this case, I'm\ngoing to have a shortest", "start": 1296.28, "duration": 3.89}, {"text": "path to a being infinity\nand shortest path to b", "start": 1300.17, "duration": 2.24}, {"text": "being infinity.", "start": 1302.41, "duration": 1.3}, {"text": "And this is a trivial example.", "start": 1303.71, "duration": 2.37}, {"text": "So, this algorithm is general.", "start": 1306.08, "duration": 2.25}, {"text": "It doesn't say anything about\nwhat the starting vertex is.", "start": 1308.33, "duration": 3.4}, {"text": "Right?", "start": 1311.73, "duration": 0.5}, {"text": "It should work for any\nchoice of starting vertex.", "start": 1312.23, "duration": 3.07}, {"text": "The nice thing is that you\ncan do the topological sort.", "start": 1315.3, "duration": 5.23}, {"text": "And then you can commit to\nwhat the starting vertex is.", "start": 1320.53, "duration": 4.93}, {"text": "And you can go off, and you can\nsay, from this starting vertex,", "start": 1325.46, "duration": 3.43}, {"text": "I'm going to go and\ncompute the shortest paths", "start": 1328.89, "duration": 2.71}, {"text": "to the other vertices\nthat I can actually reach.", "start": 1331.6, "duration": 3.74}, {"text": "OK?", "start": 1335.34, "duration": 0.71}, {"text": "So let's say that you had\na DAG that looks like this.", "start": 1336.05, "duration": 3.59}, {"text": "All right, once you've\ntopologically sorted it,", "start": 1339.64, "duration": 2.0}, {"text": "you can always draw\na DAG in linear form.", "start": 1341.64, "duration": 5.447}, {"text": "That's a nice thing.", "start": 1347.087, "duration": 0.833}, {"text": "I'm going to put edge\nweights down in a minute.", "start": 1357.912, "duration": 1.958}, {"text": "All right.", "start": 1368.15, "duration": 0.5}, {"text": "So that's my DAG.", "start": 1368.65, "duration": 0.97}, {"text": "Let's see.", "start": 1372.88, "duration": 0.5}, {"text": "5, 3, 2, 6, 7, 4,\n2, minus 1, minus 2.", "start": 1373.38, "duration": 10.78}, {"text": "So that's my DAG.", "start": 1387.97, "duration": 1.27}, {"text": "And I've drawn it in\ntopologically sorted form.", "start": 1389.24, "duration": 3.6}, {"text": "And I go left to right.", "start": 1392.84, "duration": 1.46}, {"text": "Now, let's say that, at this\npoint, I get to step two.", "start": 1394.3, "duration": 4.78}, {"text": "And I want to find\nshortest paths.", "start": 1399.08, "duration": 1.73}, {"text": "Now, I have to say,\nwhat is my source?", "start": 1400.81, "duration": 2.68}, {"text": "And, if I just happen to\nhave this as my source,", "start": 1403.49, "duration": 5.36}, {"text": "well, there's\nnothing to do here.", "start": 1408.85, "duration": 2.31}, {"text": "There's no edges\nthat go out of this.", "start": 1411.16, "duration": 2.28}, {"text": "And so that means that\neverything to the left of me", "start": 1413.44, "duration": 3.07}, {"text": "is infinity.", "start": 1416.51, "duration": 1.42}, {"text": "OK?", "start": 1417.93, "duration": 0.81}, {"text": "So the first thing\nthat you do is,", "start": 1418.74, "duration": 1.85}, {"text": "you say, find the\nsource that corresponds", "start": 1420.59, "duration": 3.59}, {"text": "to the starting vertex.", "start": 1424.18, "duration": 2.61}, {"text": "And let's say, this is the\nstarting vertex, in this case.", "start": 1426.79, "duration": 3.42}, {"text": "Which I'll mark in bold.", "start": 1430.21, "duration": 3.69}, {"text": "So that's my starting vertex.", "start": 1433.9, "duration": 1.22}, {"text": "I'll take a nontrivial case.", "start": 1435.12, "duration": 1.94}, {"text": "And everything to\nthe left is going", "start": 1437.06, "duration": 2.51}, {"text": "to get marked with infinity.", "start": 1439.57, "duration": 3.41}, {"text": "And now, I've got to do\nsome work on relaxation.", "start": 1442.98, "duration": 4.04}, {"text": "And I'm not going to get\nthe shortest path instantly", "start": 1447.02, "duration": 3.06}, {"text": "for a particular vertex, once\nI get to it, because there", "start": 1450.08, "duration": 4.45}, {"text": "may be better ways\nof getting there.", "start": 1454.53, "duration": 1.72}, {"text": "And especially if I\nhave negative edges.", "start": 1456.25, "duration": 2.1}, {"text": "And that's certainly possible,\nthat a longer length path", "start": 1458.35, "duration": 3.62}, {"text": "is going to be\nthe shortest path.", "start": 1461.97, "duration": 2.26}, {"text": "But what I'll do is take s.", "start": 1464.23, "duration": 2.79}, {"text": "And I'm going to relax\nedges that emanate from s.", "start": 1467.02, "duration": 3.59}, {"text": "And so, step one,\nall of these are", "start": 1470.61, "duration": 1.91}, {"text": "going to be infinity\nto start with.", "start": 1472.52, "duration": 1.83}, {"text": "So everything is infinity.", "start": 1474.35, "duration": 1.56}, {"text": "The ones to the\nleft stay infinity.", "start": 1475.91, "duration": 1.87}, {"text": "The ones to the right are\ngoing to be reachable.", "start": 1477.78, "duration": 2.72}, {"text": "And you're going to\nupdate those values.", "start": 1480.5, "duration": 6.61}, {"text": "And so, when you go\nlike so, this becomes 2.", "start": 1487.11, "duration": 4.12}, {"text": "This becomes 6.", "start": 1491.23, "duration": 1.74}, {"text": "As I follow that.", "start": 1492.97, "duration": 1.38}, {"text": "And I'm done with\nthis vertex, s.", "start": 1494.35, "duration": 4.59}, {"text": "And this is what I have.", "start": 1498.94, "duration": 1.22}, {"text": "2 and 6.", "start": 1500.16, "duration": 1.15}, {"text": "So the next step is\nto get to this vertex.", "start": 1501.31, "duration": 3.25}, {"text": "Let's call that the vertex a.", "start": 1504.56, "duration": 2.21}, {"text": "And I'm going relax the\nedges going out of a.", "start": 1506.77, "duration": 3.13}, {"text": "And, when I go out\nof a, I get 2 plus 7", "start": 1509.9, "duration": 4.66}, {"text": "is 9, which is greater than 6.", "start": 1514.56, "duration": 2.45}, {"text": "So there's no reason\nto update that.", "start": 1517.01, "duration": 2.25}, {"text": "2 plus 4 is less than infinity.", "start": 1519.26, "duration": 3.58}, {"text": "And so, that's 6.", "start": 1522.84, "duration": 3.91}, {"text": "2 plus 2 gives me 4 here.", "start": 1526.75, "duration": 4.39}, {"text": "And so on and so forth.", "start": 1531.14, "duration": 1.6}, {"text": "So then, now I'm\ndone with vertex a.", "start": 1532.74, "duration": 1.97}, {"text": "If this vertex is b, then I\nhave a value of 6 for this.", "start": 1534.71, "duration": 4.31}, {"text": "And 6 minus 1 is less than 6.", "start": 1539.02, "duration": 3.235}, {"text": "So this becomes 5.", "start": 1542.255, "duration": 2.555}, {"text": "And 5 minus 2-- well, that's\nthe next step after that.", "start": 1544.81, "duration": 5.12}, {"text": "I haven't put-- this is a 1.", "start": 1549.93, "duration": 2.7}, {"text": "And so 6 plus 1 is 7.", "start": 1552.63, "duration": 3.087}, {"text": "But that's greater than 4.", "start": 1555.717, "duration": 1.083}, {"text": "So we don't have\nto anything there.", "start": 1556.8, "duration": 2.07}, {"text": "So the final values that I end\nup getting are 3 for this one.", "start": 1558.87, "duration": 6.54}, {"text": "So this is the final value.", "start": 1565.41, "duration": 1.82}, {"text": "5 is the final value here.", "start": 1567.23, "duration": 2.61}, {"text": "6 is the final value here.", "start": 1569.84, "duration": 2.25}, {"text": "2 is the final value here.", "start": 1572.09, "duration": 1.93}, {"text": "And that one is 0.", "start": 1574.02, "duration": 1.63}, {"text": "And this stays infinity.", "start": 1575.65, "duration": 1.81}, {"text": "OK?", "start": 1577.46, "duration": 1.01}, {"text": "So fairly straightforward.", "start": 1578.47, "duration": 2.21}, {"text": "Do a topological sort.", "start": 1580.68, "duration": 1.88}, {"text": "Find the starting point.", "start": 1582.56, "duration": 1.62}, {"text": "And then run all the\nway to the right.", "start": 1584.18, "duration": 2.95}, {"text": "Interestingly, this is actually\na really simple example", "start": 1587.13, "duration": 3.45}, {"text": "of dynamic programming,\nwhich we'll talk about", "start": 1590.58, "duration": 2.57}, {"text": "in gory detail,\nlater in November.", "start": 1593.15, "duration": 3.31}, {"text": "But what I have here is\nthe simplest special case", "start": 1596.46, "duration": 7.79}, {"text": "of a graph that has an\norder of v e [INAUDIBLE]", "start": 1604.25, "duration": 3.91}, {"text": "shortest path algorithm.", "start": 1608.16, "duration": 1.27}, {"text": "And the reason for that\nis we don't have cycles.", "start": 1609.43, "duration": 2.69}, {"text": "All right?", "start": 1612.12, "duration": 1.03}, {"text": "Any questions about this?", "start": 1613.15, "duration": 2.07}, {"text": "People buy this?", "start": 1615.22, "duration": 2.41}, {"text": "It works?", "start": 1617.63, "duration": 0.82}, {"text": "OK.", "start": 1618.45, "duration": 0.92}, {"text": "So, we've got one\nalgorithm under our belt.", "start": 1619.37, "duration": 2.89}, {"text": "And we look at, really,\na more interesting case", "start": 1622.26, "duration": 2.82}, {"text": "because most graphs are\ngoing to have cycles in them.", "start": 1625.08, "duration": 3.3}, {"text": "But we will stay\nwith the special case", "start": 1628.38, "duration": 3.71}, {"text": "of no negative edges, now.", "start": 1632.09, "duration": 1.25}, {"text": "All right?", "start": 1633.34, "duration": 0.5}, {"text": "So Dijkstra's algorithm doesn't\nwork for negative edges.", "start": 1633.84, "duration": 4.88}, {"text": "So it's different.", "start": 1638.72, "duration": 1.35}, {"text": "This algorithm is not\nsubsumed by Dijkstra.", "start": 1640.07, "duration": 3.08}, {"text": "That's important to understand.", "start": 1643.15, "duration": 1.95}, {"text": "So Dijkstra's algorithm\nworks for graphs with cycles.", "start": 1645.1, "duration": 3.24}, {"text": "But all of the edge ways have\nto be either 0 or positive.", "start": 1648.34, "duration": 4.4}, {"text": "This algorithm works for DAGs\nthat can have negative edges.", "start": 1652.74, "duration": 3.0}, {"text": "But you can't have cycles.", "start": 1655.74, "duration": 1.6}, {"text": "So both of these algorithms\nhave their place under the sun.", "start": 1657.34, "duration": 3.11}, {"text": "So, let's take a look\nat Dijkstra's algorithm.", "start": 1663.33, "duration": 2.9}, {"text": "Actually, I guess I have a demo.", "start": 1666.23, "duration": 1.78}, {"text": "So, the one demo\nwe have in 6006.", "start": 1668.01, "duration": 9.38}, {"text": "[INAUDIBLE] Dijkstra is a very\nstraightforward algorithm.", "start": 1677.39, "duration": 3.07}, {"text": "It's not trivial to\nprove its correctness.", "start": 1680.46, "duration": 4.13}, {"text": "But from a standpoint of\ncoding, from a standpoint", "start": 1684.59, "duration": 3.18}, {"text": "of understanding the flow,\nit's a very straightforward", "start": 1687.77, "duration": 2.87}, {"text": "algorithm.", "start": 1690.64, "duration": 1.38}, {"text": "One of the reasons\nwhy that's the case", "start": 1692.02, "duration": 2.04}, {"text": "is because it's a\ngreedy algorithm.", "start": 1694.06, "duration": 3.2}, {"text": "It does things incrementally,\nmaximizing the benefit,", "start": 1697.26, "duration": 4.45}, {"text": "as you will.", "start": 1701.71, "duration": 1.07}, {"text": "And intuitively builds\nthe shortest paths.", "start": 1702.78, "duration": 3.22}, {"text": "And it goes vertex by vertex.", "start": 1706.0, "duration": 2.77}, {"text": "So here's a demo\nof Dijkstra, which,", "start": 1708.77, "duration": 2.64}, {"text": "the reason I want\nto show you this,", "start": 1711.41, "duration": 2.009}, {"text": "is because it will give you some\nintuition as to why Dijkstra", "start": 1713.419, "duration": 2.541}, {"text": "works.", "start": 1715.96, "duration": 0.793}, {"text": "Now, some points of note.", "start": 1716.753, "duration": 4.287}, {"text": "I can't tilt this more\nthan about this much", "start": 1721.04, "duration": 2.03}, {"text": "because then these\nballs will fall off.", "start": 1723.07, "duration": 2.08}, {"text": "So, cameraman, can you get this?", "start": 1725.15, "duration": 4.03}, {"text": "All right?", "start": 1729.18, "duration": 0.5}, {"text": "For posterity.", "start": 1729.68, "duration": 2.59}, {"text": "So I got an undirected\ngraph here, right?", "start": 1732.27, "duration": 3.17}, {"text": "And each of these\nthings are nodes.", "start": 1735.44, "duration": 3.04}, {"text": "The balls are the\nnodes of the vertices.", "start": 1738.48, "duration": 2.72}, {"text": "And I've drawn the\npicture over there.", "start": 1741.2, "duration": 1.81}, {"text": "And G stands for green.", "start": 1743.01, "duration": 1.27}, {"text": "And Y stands for\nyellow, et cetera.", "start": 1744.28, "duration": 2.07}, {"text": "So, this graph is essentially\nwhat I have up there.", "start": 1746.35, "duration": 2.73}, {"text": "And I've put strings connecting\nthese balls, associated", "start": 1749.08, "duration": 7.46}, {"text": "with the weights that\nyou see up there.", "start": 1756.54, "duration": 5.43}, {"text": "So, if I got this\nright, the string", "start": 1761.97, "duration": 3.73}, {"text": "that's connecting the green ball\nto the yellow ball up on top", "start": 1765.7, "duration": 4.49}, {"text": "is 19 centimeters.", "start": 1770.19, "duration": 1.67}, {"text": "And so on and so forth\nfor these other ones.", "start": 1771.86, "duration": 2.075}, {"text": "All right?", "start": 1773.935, "duration": 1.315}, {"text": "So, that's Dijkstra.", "start": 1775.25, "duration": 2.55}, {"text": "And what do you\nthink I have to do", "start": 1777.8, "duration": 3.81}, {"text": "to compute shortest paths,\nmechanically speaking?", "start": 1781.61, "duration": 4.599}, {"text": "What do you think I have to do?", "start": 1786.209, "duration": 1.291}, {"text": "Yeah, someone.", "start": 1790.248, "duration": 0.862}, {"text": "AUDIENCE: Pick up the\ngreen ball and just--", "start": 1793.741, "duration": 1.791}, {"text": "PROFESSOR: Pick up the\nball and lift it up.", "start": 1795.532, "duration": 1.098}, {"text": "That's right.", "start": 1796.63, "duration": 0.541}, {"text": "Good.", "start": 1797.171, "duration": 0.849}, {"text": "It's worth a cushion.", "start": 1798.02, "duration": 2.23}, {"text": "All right, so, let's\nall this works.", "start": 1800.25, "duration": 1.84}, {"text": "So, first, let me show you by\nthose values that I have there.", "start": 1805.76, "duration": 4.96}, {"text": "If the green ball is the\nstarting vertex, then", "start": 1810.72, "duration": 5.01}, {"text": "the shortest path to the\npurple vertex, p, is 7.", "start": 1815.73, "duration": 6.06}, {"text": "And that's the\nclosest node to G.", "start": 1821.79, "duration": 2.74}, {"text": "And then, the next\nclosest node is", "start": 1824.53, "duration": 2.83}, {"text": "the blue one, which\nis b, which is 12.", "start": 1827.36, "duration": 3.18}, {"text": "7 plus 5.", "start": 1830.54, "duration": 1.29}, {"text": "And so on and so forth.", "start": 1831.83, "duration": 1.38}, {"text": "And so, if this all works,\nand I haven't tried this out,", "start": 1833.21, "duration": 2.68}, {"text": "because this is a one use demo.", "start": 1835.89, "duration": 2.04}, {"text": "Once I pull this up, the\nstrings get so tangled up,", "start": 1837.93, "duration": 3.85}, {"text": "it doesn't work anymore.", "start": 1841.78, "duration": 1.08}, {"text": "All right?", "start": 1842.86, "duration": 0.58}, {"text": "So that's why I had to do\nall of this, lug these over.", "start": 1843.44, "duration": 2.65}, {"text": "Otherwise, it'd\nbe-- so this is not", "start": 1846.09, "duration": 1.69}, {"text": "a computer reversible\nkind of thing.", "start": 1847.78, "duration": 1.555}, {"text": "So, if you want to\ncode Dijkstra up.", "start": 1849.335, "duration": 2.005}, {"text": "OK, so if I just lift\nit up, and if I do that,", "start": 1851.34, "duration": 3.33}, {"text": "and if I tilt it in\nthe right direction.", "start": 1854.67, "duration": 1.667}, {"text": "Yeah.", "start": 1856.337, "duration": 0.499}, {"text": "I want to that.", "start": 1856.836, "duration": 0.684}, {"text": "So you can see that this is a\nlittle bit of fudging going on", "start": 1857.52, "duration": 2.2}, {"text": "here, with respect to\ngetting this right.", "start": 1859.72, "duration": 1.81}, {"text": "But you see green is up on top.", "start": 1861.53, "duration": 1.585}, {"text": "And what is the\nnext one you see?", "start": 1863.115, "duration": 1.375}, {"text": "AUDIENCE: Purple.", "start": 1864.49, "duration": 0.52}, {"text": "PROFESSOR: Purple.", "start": 1865.01, "duration": 0.44}, {"text": "That's good.", "start": 1865.45, "duration": 0.519}, {"text": "What's the next one you see?", "start": 1865.969, "duration": 1.166}, {"text": "AUDIENCE: Blue.", "start": 1867.135, "duration": 0.315}, {"text": "PROFESSOR: Blue.", "start": 1867.45, "duration": 0.666}, {"text": "That's good.", "start": 1868.116, "duration": 2.104}, {"text": "Y, and then R. And\nstrings that are taught,", "start": 1870.22, "duration": 4.46}, {"text": "that have tension in them, are\nthe predecessor vertices, OK?", "start": 1874.68, "duration": 3.63}, {"text": "That's the pie.", "start": 1878.31, "duration": 1.57}, {"text": "All right?", "start": 1879.88, "duration": 0.56}, {"text": "So, again, I computed the\nshortest paths, right?", "start": 1880.44, "duration": 2.91}, {"text": "Mechanically.", "start": 1883.35, "duration": 0.99}, {"text": "And, if I could have a way\nof measuring the tension", "start": 1884.34, "duration": 3.32}, {"text": "on the strings, I have my pie,\nmy predecessor relationship,", "start": 1887.66, "duration": 3.261}, {"text": "as well.", "start": 1890.921, "duration": 0.499}, {"text": "All right?", "start": 1891.42, "duration": 0.64}, {"text": "Now, let's see if this works.", "start": 1892.06, "duration": 1.912}, {"text": "This works, right?", "start": 1893.972, "duration": 1.118}, {"text": "So, if the second thing doesn't\nwork, don't hold it against me.", "start": 1895.09, "duration": 5.18}, {"text": "But, let's say if I take R,\nand I lift it up like that.", "start": 1900.27, "duration": 4.68}, {"text": "Yikes.", "start": 1904.95, "duration": 1.86}, {"text": "So, R, followed by Y,\nfollowed by B, followed by P,", "start": 1906.81, "duration": 3.62}, {"text": "followed by G.", "start": 1910.43, "duration": 1.06}, {"text": "Hey.", "start": 1911.49, "duration": 1.33}, {"text": "Come on.", "start": 1912.82, "duration": 1.74}, {"text": "All right?", "start": 1914.56, "duration": 0.61}, {"text": "This works.", "start": 1915.17, "duration": 0.5}, {"text": "Thank you.", "start": 1915.67, "duration": 0.51}, {"text": "Thank you.", "start": 1916.18, "duration": 1.242}, {"text": "All right.", "start": 1917.422, "duration": 1.868}, {"text": "So there's actually a\nreason why I did that demo.", "start": 1919.29, "duration": 7.46}, {"text": "There's a greedy algorithm here.", "start": 1926.75, "duration": 2.85}, {"text": "And, I guess, greedy is gravity.", "start": 1929.6, "duration": 1.79}, {"text": "Right?", "start": 1931.39, "duration": 0.5}, {"text": "Gravity is greedy.", "start": 1931.89, "duration": 1.94}, {"text": "So, obviously, the reason\nwhy those balls are hanging", "start": 1933.83, "duration": 3.074}, {"text": "is because they have weight.", "start": 1936.904, "duration": 1.166}, {"text": "And they have gravity.", "start": 1938.07, "duration": 1.07}, {"text": "And you can imagine that you\ncould now-- people in physics.", "start": 1939.14, "duration": 2.672}, {"text": "I don't know anybody\nmajoring in physics.", "start": 1941.812, "duration": 1.708}, {"text": "Anyone double majoring in\nphysics or something here?", "start": 1943.52, "duration": 2.78}, {"text": "All right.", "start": 1946.3, "duration": 1.68}, {"text": "So, you know your Newton's\nlaws of mechanics.", "start": 1947.98, "duration": 2.02}, {"text": "And you know about\ngravity, and all of that.", "start": 1950.0, "duration": 1.9}, {"text": "So you can imagine that\nyou said, you know,", "start": 1951.9, "duration": 1.88}, {"text": "the heck with all this priority\nqueue stuff in the problem set.", "start": 1953.78, "duration": 2.995}, {"text": "In the algorithm\nthat we're going", "start": 1956.775, "duration": 1.375}, {"text": "to be talking\nabout for Dijkstra,", "start": 1958.15, "duration": 1.51}, {"text": "I'm going to do a kinetic\nsimulation of shortest paths", "start": 1959.66, "duration": 4.11}, {"text": "in order to get the actual\nvalues of these shortest paths.", "start": 1963.77, "duration": 4.021}, {"text": "OK?", "start": 1967.791, "duration": 0.499}, {"text": "Now, that would be cool.", "start": 1968.29, "duration": 1.5}, {"text": "But it'd be horribly slow.", "start": 1969.79, "duration": 1.94}, {"text": "And so, the Dijkstra algorithm\nwe're going to be talking about", "start": 1971.73, "duration": 2.93}, {"text": "is going to just compute the\nsteady state, corresponding", "start": 1974.66, "duration": 3.32}, {"text": "to the closest vertex that\nis closest to G. All right?", "start": 1977.98, "duration": 6.83}, {"text": "So Dijkstra, the algorithm,\nthe intuition behind it,", "start": 1984.81, "duration": 2.86}, {"text": "is that it's going to greedily\nconstruct shortest paths.", "start": 1987.67, "duration": 3.04}, {"text": "And it's going to\nbe starting with G,", "start": 1990.71, "duration": 1.94}, {"text": "which is your source vertex.", "start": 1992.65, "duration": 1.332}, {"text": "And then, the first\nthing that it's", "start": 1993.982, "duration": 1.458}, {"text": "going to process, and\nfind the shortest path to", "start": 1995.44, "duration": 2.015}, {"text": "is going to be\nthe purple vertex.", "start": 1997.455, "duration": 1.765}, {"text": "And then the blue.", "start": 1999.22, "duration": 0.85}, {"text": "And then the yellow.", "start": 2000.07, "duration": 1.05}, {"text": "And then the red.", "start": 2001.12, "duration": 0.82}, {"text": "All right?", "start": 2001.94, "duration": 0.5}, {"text": "So it actually mimics, to\nsome extent, this demo.", "start": 2002.44, "duration": 4.09}, {"text": "All right?", "start": 2006.53, "duration": 3.232}, {"text": "So, let's take a look at\nthe pseudocode for Dijkstra.", "start": 2009.762, "duration": 2.208}, {"text": "So, g is your graph.", "start": 2040.09, "duration": 1.2}, {"text": "w are the weights.", "start": 2041.29, "duration": 1.76}, {"text": "Small s is the starting vertex.", "start": 2043.05, "duration": 3.71}, {"text": "We're going to initialize g\nand s, which means we just mark", "start": 2046.76, "duration": 9.61}, {"text": "s a starting vertex.", "start": 2056.37, "duration": 1.96}, {"text": "And we're going to also have\nthis capital S, that I'll", "start": 2058.33, "duration": 4.45}, {"text": "use these little bars to\ndifferentiate from small s.", "start": 2062.78, "duration": 4.27}, {"text": "So this is a set.", "start": 2067.05, "duration": 1.149}, {"text": "Capital S is a set.", "start": 2068.199, "duration": 2.681}, {"text": "And we're going to\ninitialize that to null.", "start": 2070.88, "duration": 2.71}, {"text": "And there's another\nset called Q,", "start": 2073.59, "duration": 2.58}, {"text": "which is initialized to\nthe entire set of vertices.", "start": 2076.17, "duration": 4.23}, {"text": "And all this means is\nthat, initially, we", "start": 2080.4, "duration": 2.71}, {"text": "haven't done any processing.", "start": 2083.11, "duration": 1.31}, {"text": "And we don't know the\nshortest paths to any vertex", "start": 2084.42, "duration": 4.81}, {"text": "because this set of\nvertices is null.", "start": 2089.23, "duration": 3.63}, {"text": "And Q is the set of vertices\nthat need to be processed.", "start": 2092.86, "duration": 3.45}, {"text": "And, as we start\nprocessing vertices from Q,", "start": 2096.31, "duration": 3.25}, {"text": "we're going to move\nthem to capital S.", "start": 2099.56, "duration": 2.4}, {"text": "And they're going to\ncontain the set of vertices", "start": 2101.96, "duration": 2.52}, {"text": "that we know the shortest\npaths to already.", "start": 2104.48, "duration": 4.18}, {"text": "And that's the invariant\nin this algorithm.", "start": 2108.66, "duration": 2.3}, {"text": "s is going to contain\nthe set of vertices", "start": 2110.96, "duration": 2.462}, {"text": "that we know the\nshortest paths to.", "start": 2113.422, "duration": 1.458}, {"text": "And so, Dijkstra is\na little while loop", "start": 2117.44, "duration": 5.53}, {"text": "that says, while\nthey're vertices", "start": 2122.97, "duration": 1.77}, {"text": "that need to be processed,\nthen I'm going to take u.", "start": 2124.74, "duration": 7.56}, {"text": "And I'm going to\nextract-min from Q.", "start": 2132.3, "duration": 13.89}, {"text": "And this is going\nto delete u from Q.", "start": 2146.19, "duration": 8.22}, {"text": "And this\ninitialization-- and this", "start": 2154.41, "duration": 4.02}, {"text": "is a small s here-- is\ngoing to set d of s to be 0.", "start": 2158.43, "duration": 6.81}, {"text": "That's all this\ninitialization does.", "start": 2165.24, "duration": 1.93}, {"text": "Because that's all we know.", "start": 2167.17, "duration": 1.76}, {"text": "We have a starting vertex.", "start": 2168.93, "duration": 1.404}, {"text": "And we know that the shortest\npath to the starting vertex,", "start": 2170.334, "duration": 2.416}, {"text": "from the starting vertex, is 0.", "start": 2172.75, "duration": 2.49}, {"text": "So, all that means is\nthat, all of the other ones", "start": 2175.24, "duration": 2.91}, {"text": "have infinity values.", "start": 2178.15, "duration": 1.55}, {"text": "So, at this very first\nstep, it makes sense", "start": 2179.7, "duration": 2.36}, {"text": "that extract-min\nQ is going to pull", "start": 2182.06, "duration": 2.67}, {"text": "the starting vertex,\nsmall s, out.", "start": 2184.73, "duration": 2.94}, {"text": "And is going to assign\nit to this u value.", "start": 2187.67, "duration": 3.99}, {"text": "And we're going to\nset s to be-- capital", "start": 2191.66, "duration": 3.38}, {"text": "S-- to be capital S union u.", "start": 2195.04, "duration": 7.48}, {"text": "And then, all we have to do is\nrelax the edges from the vertex", "start": 2202.52, "duration": 6.83}, {"text": "that we just added.", "start": 2209.35, "duration": 1.29}, {"text": "So, for each vertex, v\nbelonging to adjacent", "start": 2210.64, "duration": 7.27}, {"text": "s, so that you can reach from u.", "start": 2217.91, "duration": 2.76}, {"text": "We relax u, v, w.", "start": 2220.67, "duration": 5.118}, {"text": "All right?", "start": 2228.476, "duration": 0.904}, {"text": "That's it.", "start": 2229.38, "duration": 0.68}, {"text": "That's Dijkstra.", "start": 2230.06, "duration": 0.856}, {"text": "It's a greedy algorithm.", "start": 2234.89, "duration": 2.57}, {"text": "It's iterative.", "start": 2237.46, "duration": 1.47}, {"text": "And the reason it's greedy\nis because of this step here.", "start": 2238.93, "duration": 2.76}, {"text": "It's just picking\nthe min priority", "start": 2241.69, "duration": 3.9}, {"text": "from the un-processed\nvertices, Q. And, essentially,", "start": 2245.59, "duration": 5.17}, {"text": "claiming that this min value\nis something that you already", "start": 2250.76, "duration": 6.83}, {"text": "computed the shortest paths for.", "start": 2257.59, "duration": 2.57}, {"text": "So, when you're putting\nsomething into S,", "start": 2260.16, "duration": 2.64}, {"text": "you're saying, I'm done.", "start": 2262.8, "duration": 2.31}, {"text": "I know the shortest path\nto this particular vertex.", "start": 2265.11, "duration": 3.11}, {"text": "And I need to now process\nit, in the sense that I", "start": 2268.22, "duration": 3.36}, {"text": "have to relax the edges that\nare coming out of this vertex.", "start": 2271.58, "duration": 3.67}, {"text": "And update the priority\nvalues because relax", "start": 2275.25, "duration": 3.36}, {"text": "is going to go change\nthe d values, as we know,", "start": 2278.61, "duration": 4.17}, {"text": "corresponding to the vertex,\nv. It might change the value.", "start": 2282.78, "duration": 4.5}, {"text": "It might not.", "start": 2287.28, "duration": 1.03}, {"text": "But there's a possibility\nthat it would.", "start": 2288.31, "duration": 2.64}, {"text": "And you're going to do\nthis for all of the edges", "start": 2290.95, "duration": 2.33}, {"text": "that are emanating\nout of the vertex, u.", "start": 2293.28, "duration": 2.657}, {"text": "And so you may be changing a\nbunch of different priority", "start": 2295.937, "duration": 2.333}, {"text": "values.", "start": 2298.27, "duration": 0.5}, {"text": "So the next time\naround, you will", "start": 2298.77, "duration": 2.17}, {"text": "get a different minimum\npriority vertex.", "start": 2300.94, "duration": 6.33}, {"text": "For two reasons.", "start": 2307.27, "duration": 0.7}, {"text": "One is that you've extracted\nout the minimum priority vertex.", "start": 2307.97, "duration": 3.08}, {"text": "You've deleted it from\nQ. And the second reason", "start": 2311.05, "duration": 3.1}, {"text": "is that these\npriority values change", "start": 2314.15, "duration": 2.19}, {"text": "as you go through the loop.", "start": 2316.34, "duration": 1.86}, {"text": "All right?", "start": 2318.2, "duration": 0.91}, {"text": "And so, in our demo,\nessentially what happened was,", "start": 2319.11, "duration": 2.85}, {"text": "the first time, the process\nof lifting the green vertex,", "start": 2321.96, "duration": 4.16}, {"text": "corresponding to choosing\nit as a starting vertex.", "start": 2326.12, "duration": 3.1}, {"text": "And the first thing\nthat was closest", "start": 2329.22, "duration": 2.35}, {"text": "to it, which had the taught\nstring hanging from it,", "start": 2331.57, "duration": 3.98}, {"text": "has the min priority value.", "start": 2335.55, "duration": 1.624}, {"text": "And you pull that out.", "start": 2337.174, "duration": 0.916}, {"text": "And then so on and so\nforth, as you go down.", "start": 2338.09, "duration": 3.33}, {"text": "And I'm not going to go\nthrough and prove this.", "start": 2341.42, "duration": 3.025}, {"text": "But it's certainly something\nthat is worth reading.", "start": 2344.445, "duration": 2.125}, {"text": "It's half of page proof,\nmaybe a page in CLRS.", "start": 2346.57, "duration": 4.04}, {"text": "And you should read\nthe proof for Dijkstra,", "start": 2350.61, "duration": 1.87}, {"text": "the formal proof for Dijkstra.", "start": 2352.48, "duration": 1.311}, {"text": "Which just, essentially,\ndoes all the accounting", "start": 2353.791, "duration": 1.999}, {"text": "and gets things right.", "start": 2355.79, "duration": 1.15}, {"text": "And uses the lemma that we have,\nwith respect to the relaxation", "start": 2356.94, "duration": 3.35}, {"text": "operation being safe.", "start": 2360.29, "duration": 4.25}, {"text": "OK?", "start": 2364.54, "duration": 0.83}, {"text": "Any questions about Dijkstra?", "start": 2365.37, "duration": 1.4}, {"text": "Or about the pseudocode,\nin particular?", "start": 2366.77, "duration": 2.371}, {"text": "I guess you guys are going\nto code this at some point.", "start": 2369.141, "duration": 2.249}, {"text": "Yeah?", "start": 2371.39, "duration": 0.21}, {"text": "AUDIENCE: How are the\nvertices comparable?", "start": 2371.6, "duration": 1.75}, {"text": "In what way?", "start": 2373.35, "duration": 0.9}, {"text": "PROFESSOR: Oh, so\nthat's a good question.", "start": 2374.25, "duration": 1.765}, {"text": "And I should have\nmade that clearer.", "start": 2376.015, "duration": 1.5}, {"text": "So, Q is a priority queue.", "start": 2380.81, "duration": 2.61}, {"text": "And the priorities of the\nvertices are the d values, OK?", "start": 2383.42, "duration": 4.42}, {"text": "s being null is clear, I hope.", "start": 2392.89, "duration": 3.01}, {"text": "That's clear.", "start": 2395.9, "duration": 1.02}, {"text": "And then Q being the set of\nvertices are clear, as well.", "start": 2396.92, "duration": 2.66}, {"text": "Now, Q is a priority queue, OK?", "start": 2399.58, "duration": 3.45}, {"text": "And we'll talk about how\nwe'll implement this priority", "start": 2403.03, "duration": 3.5}, {"text": "queue, and the\ncomplexity of Dijkstra,", "start": 2406.53, "duration": 2.04}, {"text": "before we're done here.", "start": 2408.57, "duration": 1.27}, {"text": "But, as an ADT, as an\nAbstract Data Type,", "start": 2409.84, "duration": 2.6}, {"text": "think of Q as being\na priority queue.", "start": 2412.44, "duration": 1.79}, {"text": "And there's\npriorities associated", "start": 2414.23, "duration": 1.42}, {"text": "with each vertex that's in Q.\nAnd these priorities change.", "start": 2415.65, "duration": 4.0}, {"text": "And they're the d values.", "start": 2419.65, "duration": 1.561}, {"text": "All right?", "start": 2421.211, "duration": 0.499}, {"text": "So the priorities.", "start": 2421.71, "duration": 0.75}, {"text": "So, initially, d of\ns-- small s-- is 0.", "start": 2430.72, "duration": 4.14}, {"text": "And all of the other\nones are infinity.", "start": 2434.86, "duration": 2.42}, {"text": "So it's clear that, the\nvery first time, you're", "start": 2437.28, "duration": 2.07}, {"text": "going to set u to be small s,\nwhich is a starting vertex.", "start": 2439.35, "duration": 3.24}, {"text": "And then you relax the\nedges coming out of s,", "start": 2442.59, "duration": 2.39}, {"text": "potentially change some of\nthese other infinity values", "start": 2444.98, "duration": 2.91}, {"text": "of the vertices\nthat you can reach", "start": 2447.89, "duration": 1.64}, {"text": "from s to be less than infinity.", "start": 2449.53, "duration": 2.32}, {"text": "And you're going\nto, essentially,", "start": 2451.85, "duration": 3.57}, {"text": "change the values of\nthe priority queue.", "start": 2455.42, "duration": 3.16}, {"text": "And go around.", "start": 2458.58, "duration": 0.607}, {"text": "And then select the min\nvalue the next time.", "start": 2459.187, "duration": 1.833}, {"text": "And so on and so forth.", "start": 2461.02, "duration": 1.21}, {"text": "OK?", "start": 2462.23, "duration": 1.63}, {"text": "Thanks for the question.", "start": 2463.86, "duration": 1.0}, {"text": "Any other questions?", "start": 2464.86, "duration": 0.833}, {"text": "OK.", "start": 2469.32, "duration": 0.98}, {"text": "So, let's just go through a\ncouple of steps in an example.", "start": 2470.3, "duration": 9.05}, {"text": "I'm not going to go\nthrough the whole thing.", "start": 2479.35, "duration": 3.35}, {"text": "But you'll see an execution\nof Dijkstra in the nodes.", "start": 2482.7, "duration": 5.16}, {"text": "I think it's worth spending\njust a couple of minutes going", "start": 2487.86, "duration": 2.93}, {"text": "through the first few steps\nof a Dijkstra execution.", "start": 2490.79, "duration": 5.51}, {"text": "Just so how this priority\nqueue works is clear,", "start": 2496.3, "duration": 9.04}, {"text": "let's take a look at a directed\ngraph that has five vertices.", "start": 2505.34, "duration": 3.4}, {"text": "So that's 7.", "start": 2522.4, "duration": 0.71}, {"text": "So let's start with a\nbeing the starting vertex.", "start": 2534.04, "duration": 4.72}, {"text": "And so d of a is 0.", "start": 2538.76, "duration": 2.73}, {"text": "And d of b through\ne are all infinity.", "start": 2541.49, "duration": 4.7}, {"text": "Your s is null to begin with.", "start": 2546.19, "duration": 5.39}, {"text": "And Q has all of the\nfive vertices in it.", "start": 2551.58, "duration": 3.52}, {"text": "So extract-min is\ngoing to select a.", "start": 2559.71, "duration": 4.011}, {"text": "That's the only one that is a 0.", "start": 2563.721, "duration": 3.109}, {"text": "Because you've got 0, infinity,\ninfinity, infinity, infinity.", "start": 2566.83, "duration": 4.72}, {"text": "And so, you select that,\nand you set s to be a.", "start": 2571.55, "duration": 4.58}, {"text": "And once you set s\nto be a, you relax", "start": 2576.13, "duration": 1.84}, {"text": "the edges coming out of a.", "start": 2577.97, "duration": 1.67}, {"text": "And there's two of them.", "start": 2579.64, "duration": 1.36}, {"text": "So you end up with 0, 10,\n3, infinity, infinity.", "start": 2581.0, "duration": 6.01}, {"text": "And the next extract-min\nis going to select 3.", "start": 2587.01, "duration": 3.4}, {"text": "And you're going to\nset s to be a comma c.", "start": 2590.41, "duration": 4.41}, {"text": "And so you're,\nessentially, doing", "start": 2594.82, "duration": 1.75}, {"text": "kind of a breadth-first search.", "start": 2596.57, "duration": 2.72}, {"text": "But you're being greedy.", "start": 2599.29, "duration": 1.81}, {"text": "It's a mixed breadth-first\ndepth-first search.", "start": 2601.1, "duration": 2.13}, {"text": "You do a breadth-first\nsearch when", "start": 2603.23, "duration": 1.5}, {"text": "you're given a\nparticular vertex,", "start": 2604.73, "duration": 1.22}, {"text": "and you look at\nall of the vertices", "start": 2605.95, "duration": 1.458}, {"text": "that you can reach\nfrom that vertex.", "start": 2607.408, "duration": 1.912}, {"text": "And then you say, I'm\na greedy algorithm.", "start": 2609.32, "duration": 2.49}, {"text": "I'm going to pick the\nvertex in this frontier", "start": 2611.81, "duration": 2.9}, {"text": "that I've just created, that\nis the shortest distance", "start": 2614.71, "duration": 2.95}, {"text": "away from me, that has\nthe lowest priority value.", "start": 2617.66, "duration": 2.69}, {"text": "And, in this case, it would be\nc because this other one is 10.", "start": 2620.35, "duration": 2.68}, {"text": "And this is shorter.", "start": 2623.03, "duration": 1.08}, {"text": "Right?", "start": 2624.11, "duration": 0.5}, {"text": "So that's why we\npick c over here.", "start": 2624.61, "duration": 2.08}, {"text": "And one last one.", "start": 2626.69, "duration": 1.93}, {"text": "Once you process c,\nyou're going to end up", "start": 2628.62, "duration": 4.32}, {"text": "processing this\nedge going out here.", "start": 2632.94, "duration": 1.68}, {"text": "This edge going out there.", "start": 2634.62, "duration": 1.22}, {"text": "This edge going out this way.", "start": 2635.84, "duration": 1.72}, {"text": "And you're going to end\nup with 0, 7, 3, 11, 5.", "start": 2637.56, "duration": 7.51}, {"text": "And you've processed a bunch\nof edges coming out of c.", "start": 2645.07, "duration": 3.21}, {"text": "And, at this point, 0\nis gone and 3 is gone.", "start": 2648.28, "duration": 3.45}, {"text": "I'm just writing\nthe values here,", "start": 2651.73, "duration": 1.58}, {"text": "just so you know what they are.", "start": 2653.31, "duration": 1.58}, {"text": "But these are out of the picture\nbecause, in s, those values", "start": 2654.89, "duration": 2.78}, {"text": "should never change.", "start": 2657.67, "duration": 1.25}, {"text": "Dijkstra essentially guarantees.", "start": 2658.92, "duration": 2.58}, {"text": "And that's the\nproof of correctness", "start": 2661.5, "duration": 1.6}, {"text": "that takes a bit of doing,\nis that this value is never", "start": 2663.1, "duration": 5.28}, {"text": "going to reduce anymore.", "start": 2668.38, "duration": 1.24}, {"text": "The pre-value is\nnever going to reduce.", "start": 2669.62, "duration": 2.19}, {"text": "And it's been put into s.", "start": 2671.81, "duration": 1.9}, {"text": "But what's remaining now is 5.", "start": 2673.71, "duration": 2.09}, {"text": "And that corresponds\nto the e vertex.", "start": 2675.8, "duration": 3.29}, {"text": "So s becomes a, c, e.", "start": 2679.09, "duration": 6.04}, {"text": "The 5 gets stuck in there.", "start": 2685.13, "duration": 1.84}, {"text": "And so on and so forth.", "start": 2686.97, "duration": 1.61}, {"text": "All right?", "start": 2688.58, "duration": 1.64}, {"text": "So, that's Dijkstra.", "start": 2690.22, "duration": 1.492}, {"text": "And now, let's start complexity.", "start": 2691.712, "duration": 1.333}, {"text": "So, it we have the code\nfor Dijkstra on the left,", "start": 2695.63, "duration": 3.01}, {"text": "we have an ADT associated\nwith the priority queue.", "start": 2698.64, "duration": 4.89}, {"text": "And now, we're back\nto talking like we", "start": 2703.53, "duration": 3.02}, {"text": "did early on in the term,\nwhere we compared linked lists,", "start": 2706.55, "duration": 4.86}, {"text": "and arrays, and\nheaps, and trees.", "start": 2711.41, "duration": 3.76}, {"text": "And said, for a particular\nset of operations,", "start": 2715.17, "duration": 6.41}, {"text": "which one is going\nto be the best?", "start": 2721.58, "duration": 2.44}, {"text": "OK?", "start": 2724.02, "duration": 1.11}, {"text": "So, if you analyze Dijkstra,\nand you look at the pseudocode", "start": 2725.13, "duration": 3.97}, {"text": "first, and you say, what are the\noperations that I'm performing?", "start": 2729.1, "duration": 5.22}, {"text": "I got an operation here,\ncorresponding to theta v", "start": 2737.81, "duration": 5.63}, {"text": "inserts into the priority queue.", "start": 2743.44, "duration": 4.23}, {"text": "And that's inserting\nthings into Q.", "start": 2753.76, "duration": 3.68}, {"text": "I got theta v\nextract-min operations.", "start": 2757.44, "duration": 5.42}, {"text": "I'm only going to delete a\nvertex once, process of vertex", "start": 2768.29, "duration": 2.78}, {"text": "once.", "start": 2771.07, "duration": 1.09}, {"text": "And that's why I have\ntheta v extract operations.", "start": 2772.16, "duration": 3.62}, {"text": "And I have theta e, what\ndecrease key or update", "start": 2775.78, "duration": 7.06}, {"text": "key operations because\nwhen I do, I relax here.", "start": 2782.84, "duration": 6.85}, {"text": "I'm decreasing the key.", "start": 2789.69, "duration": 2.53}, {"text": "It's in particular,\nit's not an update key.", "start": 2794.719, "duration": 1.791}, {"text": "It happens to be a decrease\nkey, which is not a big deal.", "start": 2796.51, "duration": 2.819}, {"text": "We don't need to get into that.", "start": 2799.329, "duration": 1.291}, {"text": "But you are reducing\nthe d value.", "start": 2800.62, "duration": 1.91}, {"text": "So it's a decrease\nkey operation.", "start": 2802.53, "duration": 2.51}, {"text": "And, again, it's theta e\nbecause, in a directed graph,", "start": 2805.04, "duration": 6.255}, {"text": "you're only going to\nprocess each edge that's", "start": 2811.295, "duration": 1.875}, {"text": "coming out of the vertex once.", "start": 2813.17, "duration": 2.342}, {"text": "Since you're processing\neach vertex once,", "start": 2815.512, "duration": 1.708}, {"text": "and you're looking at\nall of the outgoing edges", "start": 2817.22, "duration": 2.71}, {"text": "from that vertex.", "start": 2819.93, "duration": 1.54}, {"text": "OK?", "start": 2821.47, "duration": 1.06}, {"text": "So that's what you can get\nlooking at the pseudocode.", "start": 2822.53, "duration": 3.81}, {"text": "And now, you're a data\nstructure designer.", "start": 2826.34, "duration": 2.89}, {"text": "And you have some choices\nhere, with respect", "start": 2829.23, "duration": 2.89}, {"text": "to actually implementing\nthe priority queue.", "start": 2832.12, "duration": 2.79}, {"text": "And let's look at the complexity\nof Dijkstra for arrays.", "start": 2834.91, "duration": 6.12}, {"text": "So, suppose I ended\nup using an array", "start": 2841.03, "duration": 4.39}, {"text": "structure for the\npriority queue.", "start": 2845.42, "duration": 2.62}, {"text": "But then, what do I have?", "start": 2848.04, "duration": 3.76}, {"text": "I have, if I look at\nthis, my extract-min, what", "start": 2851.8, "duration": 5.77}, {"text": "is the complexity of\nextract-min in an array?", "start": 2857.57, "duration": 3.15}, {"text": "AUDIENCE: Theta v.", "start": 2860.72, "duration": 0.82}, {"text": "PROFESSOR: Theta v. And\nwhat's the complexity", "start": 2861.54, "duration": 2.73}, {"text": "of a decrease key in an array?", "start": 2864.27, "duration": 4.02}, {"text": "I just go access that element.", "start": 2868.29, "duration": 1.92}, {"text": "And I change it.", "start": 2870.21, "duration": 1.39}, {"text": "State of one, right?", "start": 2871.6, "duration": 1.54}, {"text": "So I have theta v\nfor extract-min.", "start": 2873.14, "duration": 5.87}, {"text": "I'll just call it ex-min.", "start": 2879.01, "duration": 1.8}, {"text": "Theta one for decrease key.", "start": 2880.81, "duration": 5.94}, {"text": "And if I go do the\nmultiplication,", "start": 2886.75, "duration": 3.14}, {"text": "I get theta v times v plus\ne times 1, or a constant,", "start": 2889.89, "duration": 7.4}, {"text": "which is theta v squared.", "start": 2897.29, "duration": 2.57}, {"text": "Because I know that\ne is order v squared.", "start": 2899.86, "duration": 3.4}, {"text": "Right?", "start": 2903.26, "duration": 0.5}, {"text": "If I have a simple graph,\nit may be a complete graph,", "start": 2903.76, "duration": 3.34}, {"text": "but-- we talked\nabout this last time.", "start": 2907.1, "duration": 2.36}, {"text": "e is, at most, v squared.", "start": 2909.46, "duration": 2.35}, {"text": "So I can just call\nthis theta v squared.", "start": 2911.81, "duration": 2.635}, {"text": "All right?", "start": 2914.445, "duration": 0.895}, {"text": "So we have a theta v squared\nDijkstra implementation", "start": 2915.34, "duration": 3.66}, {"text": "that uses an array structure.", "start": 2919.0, "duration": 3.012}, {"text": "But do we want to use\nan array structure?", "start": 2922.012, "duration": 1.708}, {"text": "What data structure\nshould we use?", "start": 2923.72, "duration": 5.57}, {"text": "Yeah?", "start": 2929.29, "duration": 0.91}, {"text": "AUDIENCE: Heap.", "start": 2930.2, "duration": 0.629}, {"text": "PROFESSOR: You can\nuse it a min-heap.", "start": 2930.829, "duration": 1.541}, {"text": "Exactly right.", "start": 2932.37, "duration": 1.62}, {"text": "So, if you use a\nbinary min-heap,", "start": 2933.99, "duration": 6.85}, {"text": "then my extract-min is\nfinding the min is a constant", "start": 2940.84, "duration": 15.99}, {"text": "because you just pick\nit up from the top.", "start": 2956.83, "duration": 2.08}, {"text": "But we know that, if you\nwant to update the heap,", "start": 2958.91, "duration": 3.86}, {"text": "and delete it, then it's going\nto take that theta log v.", "start": 2962.77, "duration": 5.45}, {"text": "And decrease key\nis the same thing.", "start": 2968.22, "duration": 3.24}, {"text": "Theta log v. So that's\nworse than array.", "start": 2971.46, "duration": 3.876}, {"text": "And if I go do the\nmultiplication again,", "start": 2977.88, "duration": 2.12}, {"text": "I get v log v plus e log v. OK?", "start": 2980.0, "duration": 5.92}, {"text": "And this is not quite the\ncomplexity that I put up,", "start": 2985.92, "duration": 3.67}, {"text": "as some of you may\nremember, last time.", "start": 2989.59, "duration": 4.74}, {"text": "This is not the optimum\ncomplexity of Dijkstra.", "start": 2994.33, "duration": 3.46}, {"text": "Or an optimal\ncomplexity of Dijkstra.", "start": 2997.79, "duration": 3.49}, {"text": "You can actually take this out\nby using a data structure that", "start": 3001.28, "duration": 4.52}, {"text": "we won't talk about in 006.", "start": 3005.8, "duration": 2.66}, {"text": "But you can read about it.", "start": 3008.46, "duration": 2.73}, {"text": "It's not 6006 level material.", "start": 3011.19, "duration": 4.47}, {"text": "You're not responsible\nfor this in 006.", "start": 3015.66, "duration": 2.75}, {"text": "But it's got a Fibonacci heap.", "start": 3018.41, "duration": 2.07}, {"text": "And you might learn\nabout it in 6046.", "start": 3020.48, "duration": 2.3}, {"text": "The Fibonacci heap is an\namortized data structure", "start": 3022.78, "duration": 4.66}, {"text": "that has theta log\nv for extract-min.", "start": 3027.44, "duration": 4.54}, {"text": "And theta one amortized\ntime for decrease key.", "start": 3031.98, "duration": 11.11}, {"text": "And what's nice\nabout it is that,", "start": 3043.09, "duration": 1.8}, {"text": "once you do that, you end up\nwith theta v log v plus e time.", "start": 3044.89, "duration": 7.43}, {"text": "And that's the complexity\nI put up way back, I guess,", "start": 3052.32, "duration": 4.53}, {"text": "last Thursday.", "start": 3056.85, "duration": 2.76}, {"text": "So that's to show you, with\nrespect to two special cases,", "start": 3059.61, "duration": 4.39}, {"text": "we have the DAGs, which are\nlinear time, essentially.", "start": 3064.0, "duration": 4.93}, {"text": "And Dijkstra, with amortized,\nand their proper data", "start": 3068.93, "duration": 4.49}, {"text": "structure, also,\nessentially, linear time.", "start": 3073.42, "duration": 2.681}, {"text": "Right?", "start": 3076.101, "duration": 0.499}, {"text": "Next time, we'll look\nat the general case", "start": 3076.6, "duration": 1.708}, {"text": "where we have potentially\nnegative cycles.", "start": 3078.308, "duration": 2.242}, {"text": "And we end up with algorithms\nthat have greater complexity.", "start": 3080.55, "duration": 3.52}, {"text": "See you next time.", "start": 3084.07, "duration": 2.15}]