[{"text": "The following content is\nprovided under a Creative", "start": 0.04, "duration": 2.42}, {"text": "Commons license.", "start": 2.46, "duration": 1.41}, {"text": "Your support will help MIT\nOpenCourseWare continue to", "start": 3.87, "duration": 3.04}, {"text": "offer high quality educational\nresources for free.", "start": 6.91, "duration": 3.65}, {"text": "To make a donation or view\nadditional materials from", "start": 10.56, "duration": 2.9}, {"text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at", "start": 13.46, "duration": 4.98}, {"text": "ocw.mit.edu.", "start": 18.44, "duration": 1.25}, {"text": "PROFESSOR: Good morning.", "start": 22.8, "duration": 1.14}, {"text": "AUDIENCE: Good morning.", "start": 23.94, "duration": 1.46}, {"text": "PROFESSOR: Thank you.", "start": 25.4, "duration": 1.88}, {"text": "OK.", "start": 27.28, "duration": 1.16}, {"text": "So we're about to launch into\nlearning some basic elements", "start": 28.44, "duration": 4.52}, {"text": "of Python today.", "start": 32.96, "duration": 2.47}, {"text": "The elements I'm going to talk\nabout are common to every", "start": 35.43, "duration": 3.79}, {"text": "programming language that I\nknow, at least in concept, and", "start": 39.22, "duration": 4.81}, {"text": "of course slightly different\nin detail.", "start": 44.03, "duration": 2.92}, {"text": "But as I said last time,\neverything you're going to", "start": 46.95, "duration": 2.61}, {"text": "learn about Python should\nbe readily transferable.", "start": 49.56, "duration": 3.565}, {"text": "I'll be using, for all of the\nexamples I present, something", "start": 55.72, "duration": 7.67}, {"text": "called an integrated development\nenvironment, and", "start": 63.39, "duration": 4.42}, {"text": "in particular, one that's built\nfor Python called IDLE.", "start": 67.81, "duration": 5.965}, {"text": "Usually we talk about these\nthings as IDEs.", "start": 82.03, "duration": 3.155}, {"text": "I'm told, I don't know if it's\ntrue, that the IDE for Python", "start": 99.01, "duration": 6.15}, {"text": "is called IDLE after Eric Idle\nof Monty Python, which was", "start": 105.16, "duration": 6.34}, {"text": "also, I'm told, the inspiration\nfor the name of", "start": 111.5, "duration": 2.3}, {"text": "the programming language.", "start": 113.8, "duration": 1.25}, {"text": "So what is an integrated\nprogramming environment?", "start": 117.96, "duration": 2.9}, {"text": "In this case, it includes a\nspecialized text editor that", "start": 120.86, "duration": 9.399}, {"text": "provides highlighting,\nauto-completion, smart indent,", "start": 130.259, "duration": 5.501}, {"text": "and you'll see shortly why all\nthat's very important, and a", "start": 135.76, "duration": 3.26}, {"text": "few other amenities that make it\neasier to use this to type", "start": 139.02, "duration": 4.2}, {"text": "Python than typing it into\na generic text editor.", "start": 143.22, "duration": 5.47}, {"text": "It includes something called\na shell, which is the", "start": 148.69, "duration": 6.46}, {"text": "environment that actually\ninterprets the Python code.", "start": 155.15, "duration": 4.095}, {"text": "And the nice thing about it\nis it includes syntax", "start": 162.0, "duration": 4.95}, {"text": "highlighting.", "start": 166.95, "duration": 1.25}, {"text": "So the shell gives you some\ninformation about the syntax,", "start": 170.15, "duration": 4.15}, {"text": "as does the text editor\nof course.", "start": 174.3, "duration": 4.35}, {"text": "And finally, it includes\nan integrated debugger.", "start": 178.65, "duration": 3.3}, {"text": "This could be useful in the\nunlikely event that your", "start": 185.64, "duration": 2.83}, {"text": "programs have errors when\nyou write them.", "start": 188.47, "duration": 4.47}, {"text": "Though truth be told, I've been\nprogramming in Python for", "start": 192.94, "duration": 3.92}, {"text": "years and I don't know that I've\never used the debugger.", "start": 196.86, "duration": 3.9}, {"text": "It's not that I don't make\nmistakes, it's just that I'm", "start": 200.76, "duration": 2.44}, {"text": "kind of a Luddite, and I\ntypically use print statements", "start": 203.2, "duration": 3.46}, {"text": "for debugging.", "start": 206.66, "duration": 1.77}, {"text": "And in fact, almost every\nprogrammer that I know, when", "start": 208.43, "duration": 3.37}, {"text": "push comes to shove, ends up\nusing print statements.", "start": 211.8, "duration": 3.48}, {"text": "But the debugger is there,\nshould you care to take a try.", "start": 215.28, "duration": 5.52}, {"text": "All right.", "start": 220.8, "duration": 0.89}, {"text": "So you'll see on the screen\nhere an IDLE shell.", "start": 221.69, "duration": 5.25}, {"text": "In the shell, we can\ntype things.", "start": 226.94, "duration": 3.86}, {"text": "What are we going to type?", "start": 230.8, "duration": 2.3}, {"text": "Well the first thing to\nunderstand is that at the core", "start": 233.1, "duration": 5.581}, {"text": "of Python, and probably the\nmost important thing to", "start": 238.681, "duration": 4.289}, {"text": "understand, are something\ncalled objects.", "start": 242.97, "duration": 3.265}, {"text": "Everything in Python\nis an object.", "start": 250.38, "duration": 4.61}, {"text": "So every kind of entity that you\ncan create in Python is an", "start": 254.99, "duration": 3.589}, {"text": "object, and in fact, Python\ncode itself is an object.", "start": 258.579, "duration": 5.461}, {"text": "You'll remember, we talked about\nstored program computers", "start": 264.04, "duration": 2.79}, {"text": "last time, and the concept that\na program is data, just", "start": 266.83, "duration": 4.65}, {"text": "like a number is data.", "start": 271.48, "duration": 3.54}, {"text": "Each object has a type that\ntells us the kind of object it", "start": 275.02, "duration": 11.23}, {"text": "is, and in particular, what\nwe can do with it.", "start": 286.25, "duration": 6.66}, {"text": "And then there's a built-in\nfunction, called type, that", "start": 292.91, "duration": 5.11}, {"text": "can be used to find out\nthe type of an object.", "start": 298.02, "duration": 2.35}, {"text": "As we'll see, there are two\nfundamental kinds of types.", "start": 304.52, "duration": 4.99}, {"text": "Scalar and non-scalar.", "start": 313.5, "duration": 3.14}, {"text": "We'll start with talking\nabout scalar types.", "start": 321.07, "duration": 4.26}, {"text": "And the key thing to think about\nthere is that they are", "start": 325.33, "duration": 3.7}, {"text": "indivisible.", "start": 329.03, "duration": 1.25}, {"text": "Think of them as the atoms of\nthe programming language.", "start": 333.66, "duration": 3.64}, {"text": "Now, I know that some of you\nhave studied physics and know", "start": 337.3, "duration": 2.8}, {"text": "that atoms are in principle\ndivisible, but of course, only", "start": 340.1, "duration": 4.11}, {"text": "at great expense and with\nserious consequences.", "start": 344.21, "duration": 3.81}, {"text": "And we've seen the\nsame thing here.", "start": 348.02, "duration": 1.48}, {"text": "You can, if you're desperate,\nchop up these scalar types,", "start": 349.5, "duration": 4.89}, {"text": "but it almost always leads\nto something bad.", "start": 354.39, "duration": 5.64}, {"text": "All right.", "start": 360.03, "duration": 0.35}, {"text": "Well let's look at some.", "start": 360.38, "duration": 1.85}, {"text": "Well, the first one you'll see\nis used to represent integers,", "start": 362.23, "duration": 5.66}, {"text": "and that's called int.", "start": 367.89, "duration": 2.21}, {"text": "For every type, or every\nbuilt-in type, there's the", "start": 370.1, "duration": 4.04}, {"text": "notion of a literal, which\nis how we type it.", "start": 374.14, "duration": 2.97}, {"text": "So for example, we can type 3,\nand that will now tell us it", "start": 377.11, "duration": 7.36}, {"text": "is the value 3.", "start": 384.47, "duration": 2.93}, {"text": "You'll note it's typed\nit in blue.", "start": 387.4, "duration": 2.03}, {"text": "And I can ask what\nthe type of 3 is.", "start": 389.43, "duration": 3.23}, {"text": "So you'll notice as I type\nthings into the shell, it's", "start": 392.66, "duration": 3.28}, {"text": "using colors to give\nme a hint.", "start": 395.94, "duration": 2.72}, {"text": "So it's this fuchsia color for\nthe word type, telling me", "start": 398.66, "duration": 4.19}, {"text": "that's a built-in function.", "start": 402.85, "duration": 3.47}, {"text": "And now if I ask it, it will\ntell me that the type of the", "start": 406.32, "duration": 4.05}, {"text": "literal 3 is \"int\".", "start": 410.37, "duration": 4.56}, {"text": "So it's an integer.", "start": 414.93, "duration": 3.0}, {"text": "And I can use other\nsorts of things.", "start": 417.93, "duration": 2.48}, {"text": "All right.", "start": 426.43, "duration": 0.47}, {"text": "There's also a type float.", "start": 426.9, "duration": 4.03}, {"text": "So those correspond to\nthe real numbers.", "start": 430.93, "duration": 3.2}, {"text": "So I can do something\nlike that.", "start": 434.13, "duration": 4.34}, {"text": "And we'll talk about this in a\nsecond, but you'll notice if I", "start": 438.47, "duration": 3.7}, {"text": "do type of 3.2, it tells\nme it's a float.", "start": 442.17, "duration": 4.04}, {"text": "And for that matter, I can do\ntype of 3.0, and it will tell", "start": 446.21, "duration": 5.77}, {"text": "me it's a float.", "start": 451.98, "duration": 3.08}, {"text": "So there's a difference\nbetween 3 and 3.0.", "start": 455.06, "duration": 2.936}, {"text": "One is an int, and\none is a float.", "start": 457.996, "duration": 3.944}, {"text": "Now you'll notice something\nkind of weird here.", "start": 461.94, "duration": 4.69}, {"text": "When the interpreter printed\nback the value of the literal", "start": 466.63, "duration": 5.31}, {"text": "3.2, it gave me 3.2 and a bunch\nof zeroes, and then this", "start": 471.94, "duration": 5.65}, {"text": "funny 2 standing at the end.", "start": 477.59, "duration": 3.99}, {"text": "In a few lectures, I'll explain\nwhy it does this, but", "start": 481.58, "duration": 4.46}, {"text": "for now, you should just take\nthis as a warning that floats", "start": 486.04, "duration": 5.58}, {"text": "are not the same thing\nas real numbers.", "start": 491.62, "duration": 4.03}, {"text": "You learned about reals,\npresumably in middle school or", "start": 495.65, "duration": 2.84}, {"text": "high school.", "start": 498.49, "duration": 2.9}, {"text": "Floats are a computer\nscientist's approximation to", "start": 501.39, "duration": 3.79}, {"text": "reals, but they're not\nquite the same.", "start": 505.18, "duration": 3.81}, {"text": "The good news is almost all the\ntime, you can pretend that", "start": 508.99, "duration": 3.79}, {"text": "a floating point number is a\nreal, but as we'll see in a", "start": 512.78, "duration": 3.8}, {"text": "few lectures, every once in a\nwhile it can really sit up and", "start": 516.58, "duration": 4.459}, {"text": "bite you, if you believe that.", "start": 521.039, "duration": 2.481}, {"text": "But for now, we'll just pretend\nthat they're reals.", "start": 523.52, "duration": 2.49}, {"text": "There's Booleans, a nice scalar\ntype of which there are", "start": 531.66, "duration": 3.37}, {"text": "only two values.", "start": 535.03, "duration": 1.25}, {"text": "One of them is true, and what\ndo you think the other", "start": 539.96, "duration": 3.24}, {"text": "Boolean value is?", "start": 543.2, "duration": 1.695}, {"text": "AUDIENCE: False?", "start": 544.895, "duration": 1.305}, {"text": "PROFESSOR: Thank you.", "start": 546.2, "duration": 1.03}, {"text": "So somebody said false.", "start": 547.23, "duration": 1.34}, {"text": "I have no idea who, but\nwhoever it is, there's", "start": 548.57, "duration": 3.43}, {"text": "probably some candy to be had.", "start": 552.0, "duration": 2.3}, {"text": "Oh, I managed to find the one\nplace in the room where there", "start": 554.3, "duration": 2.64}, {"text": "was an empty.", "start": 556.94, "duration": 1.58}, {"text": "I'm hoping that people will now\nscramble and fight for it,", "start": 558.52, "duration": 2.7}, {"text": "like a foul ball at\na baseball game.", "start": 561.22, "duration": 3.85}, {"text": "No, people are too\npolite thus far.", "start": 565.07, "duration": 2.25}, {"text": "All right.", "start": 567.32, "duration": 1.2}, {"text": "So we have true and false\nas the type Booleans.", "start": 568.52, "duration": 3.32}, {"text": "And then we can do operations\non them.", "start": 571.84, "duration": 2.03}, {"text": "So for example, true and false\nis false, as you might guess.", "start": 573.87, "duration": 8.78}, {"text": "Finally, there's this funny\nvalue, none, which doesn't", "start": 582.65, "duration": 7.0}, {"text": "print anything when I type it.", "start": 589.65, "duration": 1.97}, {"text": "And if I look at the type\nof none, we'll see", "start": 591.62, "duration": 4.53}, {"text": "it's the none type.", "start": 596.15, "duration": 2.98}, {"text": "Not very interesting.", "start": 599.13, "duration": 1.94}, {"text": "Fundamentally, as we'll see,\nthat gets used when you want", "start": 601.07, "duration": 3.93}, {"text": "to put in something temporary.", "start": 605.0, "duration": 1.7}, {"text": "When you don't yet know what its\nvalue is going to be, you", "start": 606.7, "duration": 3.06}, {"text": "know it's going to eventually\nhave one, so maybe you start", "start": 609.76, "duration": 3.41}, {"text": "out calling it none.", "start": 613.17, "duration": 2.01}, {"text": "And then you can check,\nand we'll see", "start": 615.18, "duration": 2.26}, {"text": "how we might do that.", "start": 617.44, "duration": 2.74}, {"text": "So those are the fundamental\nscalar types,", "start": 620.18, "duration": 5.745}, {"text": "the indivisible ones.", "start": 625.925, "duration": 3.875}, {"text": "Interestingly enough, Python\ndoes not have what is a common", "start": 629.8, "duration": 5.49}, {"text": "scalar type in every other\nlanguage called char, short", "start": 635.29, "duration": 4.36}, {"text": "for character.", "start": 639.65, "duration": 2.09}, {"text": "Instead, what it has is strings\nthat can be used to", "start": 641.74, "duration": 6.45}, {"text": "represent strings\nof characters.", "start": 648.19, "duration": 3.17}, {"text": "So for example, I can write the\nstring \"a\", and if I ask", "start": 651.36, "duration": 7.14}, {"text": "for the type of it, it\ntells me it's an", "start": 658.5, "duration": 4.7}, {"text": "str, short for string.", "start": 663.2, "duration": 2.285}, {"text": "Happens to be a string of\nlength 1, which we might", "start": 669.45, "duration": 3.32}, {"text": "usually think of as\na character, but", "start": 672.77, "duration": 2.96}, {"text": "there is no type char.", "start": 675.73, "duration": 1.78}, {"text": "So it's not a problem.", "start": 677.51, "duration": 1.57}, {"text": "We just have to remember it.", "start": 679.08, "duration": 2.84}, {"text": "Literals of type string can be\nwritten with single quotes or", "start": 681.92, "duration": 6.35}, {"text": "with double quotes.", "start": 688.27, "duration": 1.25}, {"text": "There's no difference.", "start": 692.11, "duration": 2.61}, {"text": "Just convenient that you can do\nit either way, and we can", "start": 694.72, "duration": 4.53}, {"text": "build strings of things.", "start": 699.25, "duration": 3.35}, {"text": "It's worth noting that the type\nof, say, the string 123", "start": 702.6, "duration": 7.34}, {"text": "is str, whereas the type of 123\nwithout the quotes is int.", "start": 709.94, "duration": 10.45}, {"text": "So we have to be a little bit\ncareful sometimes as to", "start": 720.39, "duration": 2.63}, {"text": "whether we're dealing with\nstrings or ints when we look", "start": 723.02, "duration": 4.84}, {"text": "at these literals.", "start": 727.86, "duration": 1.25}, {"text": "You can only get so far with\nliterals, things you can type.", "start": 731.53, "duration": 5.53}, {"text": "So of course, Python has in\nit something called an", "start": 737.06, "duration": 3.25}, {"text": "expression.", "start": 740.31, "duration": 1.56}, {"text": "Again, this shouldn't\nsurprise anybody.", "start": 741.87, "duration": 1.75}, {"text": "And an expression\nis a sequence of", "start": 751.185, "duration": 9.645}, {"text": "operands and operators.", "start": 760.83, "duration": 4.475}, {"text": "The operands are objects.", "start": 770.95, "duration": 1.39}, {"text": "So for example, we can write\nthe expression 3 plus 2.", "start": 779.61, "duration": 6.29}, {"text": "And when we type an expression\ninto IDLE, it automatically", "start": 785.9, "duration": 3.28}, {"text": "evaluates it and prints the\nvalue of the expression.", "start": 789.18, "duration": 4.06}, {"text": "In this case, of\ncourse it's 5.", "start": 793.24, "duration": 2.365}, {"text": "One thing to be a little careful\nabout is if I type the", "start": 798.23, "duration": 4.27}, {"text": "expression 3/2, slash is the\ndivide operator, I get 1.", "start": 802.5, "duration": 6.505}, {"text": "Whereas if I type the expression\n3.0 divided", "start": 812.15, "duration": 3.47}, {"text": "by 2.0, I get 1.5.", "start": 815.62, "duration": 7.69}, {"text": "So dividing two integers\nin Python 2.x gives you", "start": 823.31, "duration": 6.45}, {"text": "essentially a floor operator.", "start": 829.76, "duration": 1.645}, {"text": "In 3.0, by the way, integer\ndivision is not allowed.", "start": 833.94, "duration": 5.18}, {"text": "It always converts it to floats\nand does a floating", "start": 839.12, "duration": 2.66}, {"text": "point division.", "start": 841.78, "duration": 1.89}, {"text": "But for many of you this will\nbe something that will trip", "start": 843.67, "duration": 2.7}, {"text": "you up as a bug.", "start": 846.37, "duration": 2.15}, {"text": "If you want to get real\ndivision, write", "start": 848.52, "duration": 4.45}, {"text": "floating point numbers.", "start": 852.97, "duration": 2.06}, {"text": "Otherwise, unpleasant\nthings may happen.", "start": 855.03, "duration": 5.61}, {"text": "Some other interesting things\nI can type, just as I could", "start": 860.64, "duration": 3.6}, {"text": "type 3 plus 2, I can\ntype a plus b.", "start": 864.24, "duration": 7.81}, {"text": "What do you think\nI'll get there?", "start": 872.05, "duration": 1.25}, {"text": "It does concatenation.", "start": 877.16, "duration": 1.33}, {"text": "So what we see here is that\nthe operator plus is", "start": 881.68, "duration": 7.51}, {"text": "overloaded.", "start": 889.19, "duration": 1.25}, {"text": "So overloaded operators have a\nmeaning that depends upon the", "start": 899.06, "duration": 12.06}, {"text": "type of the operands.", "start": 911.12, "duration": 1.25}, {"text": "And of course, we've already\nseen that with the slash", "start": 925.71, "duration": 2.46}, {"text": "operator, which means one thing\nfor ints and another", "start": 928.17, "duration": 3.26}, {"text": "things for floats.", "start": 931.43, "duration": 1.88}, {"text": "And of course, we see the\nsame thing with plus.", "start": 933.31, "duration": 2.275}, {"text": "What do you think will\nhappen here?", "start": 939.7, "duration": 1.79}, {"text": "3 blank 3?", "start": 941.49, "duration": 3.32}, {"text": "Any guesses?", "start": 944.81, "duration": 1.25}, {"text": "I get a syntax error.", "start": 948.39, "duration": 1.73}, {"text": "Remember, we talked about\nthat on Tuesday.", "start": 950.12, "duration": 2.69}, {"text": "It's not a valid Python\nexpression,", "start": 952.81, "duration": 4.68}, {"text": "so we get an error.", "start": 957.49, "duration": 3.18}, {"text": "How about this one?", "start": 960.67, "duration": 1.25}, {"text": "That is syntactically valid.", "start": 966.38, "duration": 3.02}, {"text": "It's got operand, operator,\noperand.", "start": 969.4, "duration": 3.88}, {"text": "What do you think it will do\nwhen I hit Return here?", "start": 973.28, "duration": 4.55}, {"text": "Somebody?", "start": 977.83, "duration": 2.21}, {"text": "AUDIENCE: A static\nsemantics error?", "start": 980.04, "duration": 1.96}, {"text": "PROFESSOR: Pardon?", "start": 982.0, "duration": 0.49}, {"text": "AUDIENCE: A static\nsemantics error?", "start": 982.49, "duration": 1.96}, {"text": "PROFESSOR: A static\nsemantics error.", "start": 984.45, "duration": 1.96}, {"text": "And because of these--", "start": 986.41, "duration": 0.49}, {"text": "Wait, I can't see\nwho said that.", "start": 986.9, "duration": 1.6}, {"text": "Raise your hand?", "start": 988.5, "duration": 1.495}, {"text": "Oh, come on.", "start": 989.995, "duration": 1.485}, {"text": "All the way back there?", "start": 991.48, "duration": 2.475}, {"text": "All right.", "start": 993.955, "duration": 0.99}, {"text": "I have the most chance of\ncarrying with one of these.", "start": 994.945, "duration": 2.97}, {"text": "I'm going to lie.", "start": 1003.87, "duration": 1.39}, {"text": "Those of you who are watching\nOpenCourseWare, it was a", "start": 1005.26, "duration": 2.2}, {"text": "perfect throw.", "start": 1007.46, "duration": 1.25}, {"text": "OK.", "start": 1011.45, "duration": 0.76}, {"text": "So indeed, we get a static\nsemantic error of a particular", "start": 1012.21, "duration": 6.1}, {"text": "kind, called the type error,\nsaying you cannot concatenate", "start": 1018.31, "duration": 3.46}, {"text": "an str and an int.", "start": 1021.77, "duration": 2.67}, {"text": "Type errors are actually\ngood things.", "start": 1028.14, "duration": 4.205}, {"text": "The language does type checking\nin order to reduce", "start": 1035.19, "duration": 4.34}, {"text": "the probability that a\nprogrammer will write a", "start": 1039.53, "duration": 2.92}, {"text": "program with a meaning that\nwill surprise its author.", "start": 1042.45, "duration": 6.53}, {"text": "So it looks at it and says,\nsomebody might have a weird", "start": 1048.98, "duration": 3.4}, {"text": "guess what this means, but just\nto be safe, we're going", "start": 1052.38, "duration": 3.38}, {"text": "to disallow it rather than--", "start": 1055.76, "duration": 2.8}, {"text": "it could, of course, make\nup some funny meaning", "start": 1058.56, "duration": 2.19}, {"text": "if it wanted to.", "start": 1060.75, "duration": 1.85}, {"text": "But it doesn't.", "start": 1062.6, "duration": 1.37}, {"text": "And I think you'll find type\nchecking saves you from a lot", "start": 1063.97, "duration": 4.77}, {"text": "of careless programming\nerrors as you go on.", "start": 1068.74, "duration": 6.28}, {"text": "All right, let's continue.", "start": 1075.02, "duration": 1.39}, {"text": "Let's look at some\nother things.", "start": 1076.41, "duration": 2.43}, {"text": "I can write this.", "start": 1078.84, "duration": 1.25}, {"text": "Because that's just two\nstrings, and it just", "start": 1084.92, "duration": 2.53}, {"text": "concatenates them, the string\na and the string 3.", "start": 1087.45, "duration": 4.92}, {"text": "Or interestingly,\nI can do this.", "start": 1092.37, "duration": 1.94}, {"text": "So now what we're seeing is\nthat you can take any type", "start": 1098.69, "duration": 3.84}, {"text": "name, use it as a conversion\nfunction to attempt to convert", "start": 1102.53, "duration": 6.73}, {"text": "one type to another.", "start": 1109.26, "duration": 2.69}, {"text": "So this has now converted the\nint 3 to the str \"3\".", "start": 1111.95, "duration": 5.38}, {"text": "Similarly, I can do something\nlike this.", "start": 1121.69, "duration": 3.125}, {"text": "And here, it's converted the\nstr \"3\" to the int 3.", "start": 1131.01, "duration": 5.42}, {"text": "On the other hand,\nI could do this.", "start": 1140.25, "duration": 1.615}, {"text": "And it will tell me it's a\nstatic semantic error.", "start": 1152.28, "duration": 5.39}, {"text": "It can't convert 0.0\ninto an int.", "start": 1157.67, "duration": 5.78}, {"text": "Similarly, it can't\nconvert 2.1.", "start": 1163.45, "duration": 8.39}, {"text": "Or can it?", "start": 1171.84, "duration": 1.83}, {"text": "So now I've given it the float\n2.1, and I've tried to", "start": 1173.67, "duration": 3.79}, {"text": "convert it to int.", "start": 1177.46, "duration": 1.66}, {"text": "Not the string 2.1,\nbut the float.", "start": 1179.12, "duration": 2.64}, {"text": "And it succeeds.", "start": 1181.76, "duration": 1.25}, {"text": "And it succeeded by essentially\ntruncating it.", "start": 1185.58, "duration": 3.53}, {"text": "Is this a good thing\nor a bad thing?", "start": 1193.28, "duration": 2.0}, {"text": "To me, it's kind\nof a bad thing.", "start": 1197.96, "duration": 2.73}, {"text": "If I've typed something like\nthat or I've evaluated some", "start": 1200.69, "duration": 3.36}, {"text": "expression that happened to\nwork that way, more likely", "start": 1204.05, "duration": 4.56}, {"text": "than not, I'm confused.", "start": 1208.61, "duration": 1.4}, {"text": "And I would probably have\npreferred to get a type error,", "start": 1210.01, "duration": 3.65}, {"text": "rather than it deciding\nhow to do it.", "start": 1213.66, "duration": 3.52}, {"text": "It's one of the things I don't\nlike about Python.", "start": 1217.18, "duration": 3.56}, {"text": "It's too generous.", "start": 1220.74, "duration": 1.86}, {"text": "It lets me get away with\nstuff it shouldn't", "start": 1222.6, "duration": 2.16}, {"text": "let me get away with.", "start": 1224.76, "duration": 1.8}, {"text": "Other languages, for example\nJava, are much stricter.", "start": 1226.56, "duration": 4.46}, {"text": "This is a design decision and\nit is the way it is, and we", "start": 1231.02, "duration": 4.29}, {"text": "have to live with it.", "start": 1235.31, "duration": 1.586}, {"text": "AUDIENCE: Professor?", "start": 1236.896, "duration": 0.934}, {"text": "Yes?", "start": 1237.83, "duration": 0.46}, {"text": "AUDIENCE: Is that the same\nreason that 3 divided by 2", "start": 1238.29, "duration": 2.43}, {"text": "turned into 1 up top?", "start": 1240.72, "duration": 1.944}, {"text": "PROFESSOR: Yeah.", "start": 1242.664, "duration": 0.486}, {"text": "Exactly.", "start": 1243.15, "duration": 1.47}, {"text": "If it's the same reason that\nthat happens, this will never", "start": 1244.62, "duration": 4.345}, {"text": "go that far.", "start": 1248.965, "duration": 3.339}, {"text": "[UNINTELLIGIBLE].", "start": 1252.304, "duration": 1.431}, {"text": "Yeah, exactly.", "start": 1253.735, "duration": 1.705}, {"text": "It's the same reason.", "start": 1255.44, "duration": 1.15}, {"text": "The question was, is it the same\nreason that 3 divided by", "start": 1256.59, "duration": 2.79}, {"text": "2 doesn't give you the\nanswer you would get", "start": 1259.38, "duration": 3.56}, {"text": "with floating point.", "start": 1262.94, "duration": 0.94}, {"text": "And it's because Python\nhas tried to help you.", "start": 1263.88, "duration": 4.25}, {"text": "Again, Python 3.0 is a little\nstricter about these things.", "start": 1268.13, "duration": 5.08}, {"text": "We'll talk much more about\nthis during the term.", "start": 1273.21, "duration": 2.38}, {"text": "This is close to the last time\nyou'll see me typing things", "start": 1278.6, "duration": 3.77}, {"text": "directly into IDLE.", "start": 1282.37, "duration": 2.57}, {"text": "For the most part, as you write\nprograms, you'll use the", "start": 1284.94, "duration": 3.28}, {"text": "text editor to produce them\nand then go to the", "start": 1288.22, "duration": 4.0}, {"text": "shell to run them.", "start": 1292.22, "duration": 1.86}, {"text": "But you want to--", "start": 1294.08, "duration": 2.1}, {"text": "obviously, if I had a 100 line\nprogram, I wouldn't want to", "start": 1296.18, "duration": 2.74}, {"text": "sit here and retype it every\ntime I needed to change it.", "start": 1298.92, "duration": 3.77}, {"text": "So instead, I use the editor\nin IDLE to produce the", "start": 1302.69, "duration": 2.63}, {"text": "programs, and then\nI can run them.", "start": 1305.32, "duration": 4.0}, {"text": "And that's what I wanted\nto start doing.", "start": 1309.32, "duration": 2.88}, {"text": "I should probably mention that\nwhat most people call a", "start": 1312.2, "duration": 5.96}, {"text": "program, some Python programmers\ncall a script.", "start": 1318.16, "duration": 5.49}, {"text": "Think of those two things\nas synonyms.", "start": 1327.13, "duration": 3.66}, {"text": "But you will see people\nuse both of them.", "start": 1330.79, "duration": 4.23}, {"text": "I will typically call\nthem a program.", "start": 1335.02, "duration": 4.16}, {"text": "All right.", "start": 1339.18, "duration": 0.35}, {"text": "Let's look at an example.", "start": 1339.53, "duration": 3.26}, {"text": "So the first thing to say is\nthat things look a little bit", "start": 1342.79, "duration": 4.66}, {"text": "different when they're executed\nfrom a script than", "start": 1347.45, "duration": 3.5}, {"text": "when you execute them directly\nin the interpreter.", "start": 1350.95, "duration": 4.09}, {"text": "So I happen to have\na script here.", "start": 1355.04, "duration": 2.785}, {"text": "If a line in a script starts\nwith a sharp sign or a number", "start": 1360.9, "duration": 3.54}, {"text": "sign, that makes it a comment.", "start": 1364.44, "duration": 2.92}, {"text": "So it's not executed.", "start": 1367.36, "duration": 1.94}, {"text": "So I've started here just by\ncommenting out everything.", "start": 1369.3, "duration": 4.065}, {"text": "But now--", "start": 1377.07, "duration": 1.59}, {"text": "whoops--", "start": 1378.66, "duration": 1.25}, {"text": "what happens if I just put\nthe number 3 here?", "start": 1385.23, "duration": 3.02}, {"text": "We saw when I typed it into\nIDLE, it echoed it in some", "start": 1388.25, "duration": 4.35}, {"text": "sense and gave me what it was.", "start": 1392.6, "duration": 2.015}, {"text": "Or just to be clear, I'm\ngoing to put in the", "start": 1394.615, "duration": 3.555}, {"text": "expression type of 3.", "start": 1398.17, "duration": 3.46}, {"text": "I'll save it, and then I'll\nhit F5 to run it.", "start": 1401.63, "duration": 5.75}, {"text": "And it does nothing.", "start": 1407.38, "duration": 1.46}, {"text": "Right?", "start": 1408.84, "duration": 0.35}, {"text": "You saw it move.", "start": 1409.19, "duration": 1.28}, {"text": "It didn't print anything.", "start": 1410.47, "duration": 1.89}, {"text": "So when you type an expression\ninto the shell,", "start": 1412.36, "duration": 2.41}, {"text": "it prints the value.", "start": 1414.77, "duration": 1.92}, {"text": "But when it executes a script\nwith an expression, it", "start": 1416.69, "duration": 3.07}, {"text": "evaluates the expression\nbut does not", "start": 1419.76, "duration": 2.67}, {"text": "display it on the screen.", "start": 1422.43, "duration": 3.16}, {"text": "Well, so what do we\ndo about that?", "start": 1425.59, "duration": 2.83}, {"text": "There is something called\na print command.", "start": 1428.42, "duration": 4.1}, {"text": "So I can do this, Print type of\n3, and now if I run it, it", "start": 1432.52, "duration": 8.74}, {"text": "will actually appear.", "start": 1441.26, "duration": 2.63}, {"text": "So whenever you want to get\nsomething to appear, you have", "start": 1443.89, "duration": 2.31}, {"text": "to use the Print command.", "start": 1446.2, "duration": 3.4}, {"text": "Not a very complicated\nconcept.", "start": 1449.6, "duration": 1.715}, {"text": "A program, or a script, is\na sequence of commands.", "start": 1456.22, "duration": 9.02}, {"text": "Each one tells the interpreter\nto do something.", "start": 1468.61, "duration": 4.49}, {"text": "So a command is Print,\nfor example.", "start": 1473.1, "duration": 2.56}, {"text": "OK.", "start": 1482.47, "duration": 0.46}, {"text": "So that's there.", "start": 1482.93, "duration": 1.05}, {"text": "That's kind of boring.", "start": 1483.98, "duration": 0.98}, {"text": "I'll get rid of that.", "start": 1484.96, "duration": 1.25}, {"text": "The next command is a really\ninteresting one.", "start": 1489.48, "duration": 5.56}, {"text": "It's an assignment statement.", "start": 1495.04, "duration": 3.71}, {"text": "A key concept in almost every\nprogramming language is that", "start": 1498.75, "duration": 6.1}, {"text": "of a variable.", "start": 1504.85, "duration": 1.25}, {"text": "Different languages have\ndifferent notions of what a", "start": 1508.57, "duration": 3.44}, {"text": "variable means.", "start": 1512.01, "duration": 2.93}, {"text": "In Python, a variable is simply\na name for an object.", "start": 1514.94, "duration": 6.6}, {"text": "And what an assignment statement\ndoes in Python, is", "start": 1543.88, "duration": 3.64}, {"text": "it binds the name\nto an object.", "start": 1547.52, "duration": 3.795}, {"text": "So the assignment stetement you\nsee here binds the name x", "start": 1565.86, "duration": 5.53}, {"text": "to the object 3.", "start": 1571.39, "duration": 1.325}, {"text": "The next statement rebinds the\nname x to the value of the", "start": 1577.65, "duration": 5.1}, {"text": "expression x times x.", "start": 1582.75, "duration": 2.78}, {"text": "So it takes the old value of x,\nevaluates the expression,", "start": 1585.53, "duration": 4.66}, {"text": "and then binds the name\nx to the new value.", "start": 1590.19, "duration": 3.01}, {"text": "So at the end of the\nsecond statement, x", "start": 1593.2, "duration": 3.67}, {"text": "will be bound to 9.", "start": 1596.87, "duration": 1.69}, {"text": "By the way, these are really\nstupid comments", "start": 1598.56, "duration": 2.46}, {"text": "I've written here.", "start": 1601.02, "duration": 2.3}, {"text": "I put them in just to\nshow you what these", "start": 1603.32, "duration": 1.6}, {"text": "statements are doing.", "start": 1604.92, "duration": 1.47}, {"text": "For goodness sake, when you\nwrite comments in your", "start": 1606.39, "duration": 2.82}, {"text": "programs, assume that the reader\ncan read Python, and", "start": 1609.21, "duration": 4.86}, {"text": "you don't have to explain\nthe programming", "start": 1614.07, "duration": 1.62}, {"text": "language in your comments.", "start": 1615.69, "duration": 2.62}, {"text": "That's not to say you shouldn't\nwrite any comments.", "start": 1618.31, "duration": 3.05}, {"text": "The purpose of a comment\nis to make the", "start": 1621.36, "duration": 2.91}, {"text": "program easier to read.", "start": 1624.27, "duration": 3.76}, {"text": "And so typically, comments are\nthere to explain things.", "start": 1628.03, "duration": 3.36}, {"text": "Not to explain the language or\nits semantics, but to explain", "start": 1633.95, "duration": 4.48}, {"text": "your thinking when you\nwrote the program.", "start": 1638.43, "duration": 4.1}, {"text": "What is the algorithm\nyou've used?", "start": 1642.53, "duration": 3.92}, {"text": "And we'll see some useful\nexamples of comments, probably", "start": 1646.45, "duration": 3.5}, {"text": "not today, but later.", "start": 1649.95, "duration": 2.66}, {"text": "All right.", "start": 1652.61, "duration": 0.34}, {"text": "So let's execute this script.", "start": 1652.95, "duration": 1.62}, {"text": "Sure enough, it printed 9.", "start": 1658.82, "duration": 3.07}, {"text": "Just what we would have hoped.", "start": 1661.89, "duration": 1.475}, {"text": "All right.", "start": 1669.41, "duration": 0.36}, {"text": "Now let's try some\nother things.", "start": 1669.77, "duration": 2.2}, {"text": "Print lets us output things.", "start": 1677.22, "duration": 3.62}, {"text": "Raw input lets us\ninput things.", "start": 1680.84, "duration": 4.4}, {"text": "Get things from the keyboard,\nessentially.", "start": 1685.24, "duration": 4.83}, {"text": "So this statement here is making\na request to whoever is", "start": 1690.07, "duration": 4.76}, {"text": "using the program to\nenter a number.", "start": 1694.83, "duration": 2.45}, {"text": "There are two kinds of input\nstatements in Python 2.x.", "start": 1699.91, "duration": 6.19}, {"text": "There's raw input, which is the\nonly one you will see me", "start": 1706.1, "duration": 3.17}, {"text": "use, and input.", "start": 1709.27, "duration": 3.59}, {"text": "Raw input, by the way, is the\nonly one that exists in 3.0.", "start": 1712.86, "duration": 5.91}, {"text": "So please, just use raw input.", "start": 1718.77, "duration": 5.31}, {"text": "The difference is, raw input\nalways expects, interprets", "start": 1724.08, "duration": 4.63}, {"text": "what the user types\nas a string.", "start": 1728.71, "duration": 3.98}, {"text": "So it will see here, it says,\ny equals float of raw input.", "start": 1732.69, "duration": 9.47}, {"text": "Enter a number.", "start": 1742.16, "duration": 1.44}, {"text": "So let's run it.", "start": 1743.6, "duration": 3.15}, {"text": "So it's taken the argument to\nraw input, the string enter a", "start": 1746.75, "duration": 5.47}, {"text": "number asked me to\nenter a number.", "start": 1752.22, "duration": 2.52}, {"text": "I'll enter a number.", "start": 1754.74, "duration": 1.25}, {"text": "And then it's converted\nit to a float.", "start": 1760.28, "duration": 8.11}, {"text": "Suppose I get rid of that.", "start": 1768.39, "duration": 1.455}, {"text": "Suppose I do this.", "start": 1772.6, "duration": 1.25}, {"text": "That should work.", "start": 1790.56, "duration": 1.25}, {"text": "So now something has happened.", "start": 1806.17, "duration": 1.45}, {"text": "It's printed both\nof them as 3.0.", "start": 1807.62, "duration": 3.52}, {"text": "It looks like they're\nthe same, but in", "start": 1811.14, "duration": 3.34}, {"text": "fact, they're not.", "start": 1814.48, "duration": 3.4}, {"text": "And this is something\nto beware of.", "start": 1817.88, "duration": 2.4}, {"text": "What we've seen here is when\nit prints a string, it does", "start": 1820.28, "duration": 7.72}, {"text": "not print the quotation marks.", "start": 1828.0, "duration": 3.76}, {"text": "So even though, if I were to put\nthis in here, I'll put in", "start": 1831.76, "duration": 7.17}, {"text": "two print types of y.", "start": 1838.93, "duration": 1.55}, {"text": "And I'll comment this out\nbecause I'm getting kind of", "start": 1847.52, "duration": 3.07}, {"text": "tired of seeing 9.", "start": 1850.59, "duration": 1.36}, {"text": "You'll note that one\nis a string and", "start": 1863.23, "duration": 1.75}, {"text": "the other is a float.", "start": 1864.98, "duration": 2.88}, {"text": "Again, I point this out because\nthis is something that", "start": 1867.86, "duration": 2.27}, {"text": "can confuse people when they're\ndebugging programs.", "start": 1870.13, "duration": 3.91}, {"text": "Because you think it's\na float, when", "start": 1874.04, "duration": 2.49}, {"text": "in fact it's a string.", "start": 1876.53, "duration": 1.25}, {"text": "OK.", "start": 1880.75, "duration": 0.43}, {"text": "Nothing deep, but these are the\nthings that sort of get", "start": 1881.18, "duration": 3.65}, {"text": "people in trouble.", "start": 1884.83, "duration": 2.82}, {"text": "Now the kinds of programs we've\nbeen looking at so far", "start": 1887.65, "duration": 4.94}, {"text": "are what are called straight\nline programs.", "start": 1892.59, "duration": 2.14}, {"text": "What distinguishes a straight\nline program is it's a", "start": 1903.74, "duration": 5.01}, {"text": "sequence of commands you execute\none after another.", "start": 1908.75, "duration": 4.11}, {"text": "You execute every command\nwithout making any deviations,", "start": 1912.86, "duration": 4.14}, {"text": "without going back with any\nloops to execute a command", "start": 1917.0, "duration": 3.34}, {"text": "more than once.", "start": 1920.34, "duration": 1.59}, {"text": "So in a straight line program,\nevery command gets executed", "start": 1921.93, "duration": 4.01}, {"text": "exactly once.", "start": 1925.94, "duration": 1.295}, {"text": "There is a very elegant, and\neven useful theory that talks", "start": 1930.43, "duration": 5.58}, {"text": "about different layers of,\nlevels of complexity of", "start": 1936.01, "duration": 3.04}, {"text": "programs and says, for\nexample, what kind of", "start": 1939.05, "duration": 4.17}, {"text": "functions can you compute with\nstraight line programs.", "start": 1943.22, "duration": 4.16}, {"text": "We'll talk more about that\nfield, which is called", "start": 1947.38, "duration": 2.91}, {"text": "complexity theory, later\nin this semester.", "start": 1950.29, "duration": 3.95}, {"text": "But for now, the thing to\nrealize is that straight line", "start": 1954.24, "duration": 2.89}, {"text": "programs are just dead boring.", "start": 1957.13, "duration": 3.37}, {"text": "You can't compute anything\ninteresting with one.", "start": 1960.5, "duration": 4.51}, {"text": "Last time we talked about\na recipe as an", "start": 1965.01, "duration": 2.23}, {"text": "analogy for a program.", "start": 1967.24, "duration": 3.46}, {"text": "Imagine a recipe\nwith no tests.", "start": 1970.7, "duration": 4.15}, {"text": "So every recipe, or almost\nevery recipe I", "start": 1974.85, "duration": 2.47}, {"text": "know, has some decisions.", "start": 1977.32, "duration": 3.38}, {"text": "Taste it and add salt\nif you need it.", "start": 1980.7, "duration": 2.54}, {"text": "Or poke at the meat and\nsee if it's done.", "start": 1983.24, "duration": 3.4}, {"text": "Or cook it until the\nthermometer says", "start": 1986.64, "duration": 2.13}, {"text": "some degree on it.", "start": 1988.77, "duration": 3.11}, {"text": "Those are the kinds of\ntests we need to", "start": 1991.88, "duration": 2.5}, {"text": "make interesting programs.", "start": 1994.38, "duration": 3.28}, {"text": "The most primitive kind of test\nwe see is what's called a", "start": 1997.66, "duration": 4.97}, {"text": "conditional statement.", "start": 2002.63, "duration": 1.25}, {"text": "And those are written using the\nword if, and optionally as", "start": 2011.94, "duration": 4.46}, {"text": "we'll see, the words else or\nelif, standing for else, if.", "start": 2016.4, "duration": 8.4}, {"text": "So let's look at an\nexample here.", "start": 2024.8, "duration": 1.97}, {"text": "Where'd my mouse,\noh there it is.", "start": 2032.42, "duration": 1.61}, {"text": "Yes?", "start": 2045.54, "duration": 1.25}, {"text": "Somebody has a question?", "start": 2048.53, "duration": 1.32}, {"text": "Shout it out.", "start": 2049.85, "duration": 1.75}, {"text": "AUDIENCE: Sorry.", "start": 2051.6, "duration": 0.389}, {"text": "I was wondering, when the user's\nprompted to put in the", "start": 2051.989, "duration": 3.333}, {"text": "raw input, instead of putting\nin a float, puts in string,", "start": 2055.322, "duration": 3.332}, {"text": "could you define it as\na floating integer?", "start": 2058.654, "duration": 2.808}, {"text": "How would you interpret\nthat input?", "start": 2061.462, "duration": 1.578}, {"text": "PROFESSOR: I didn't\nget the question.", "start": 2063.04, "duration": 2.23}, {"text": "So this is an argument to\nraw input, or their", "start": 2065.27, "duration": 3.04}, {"text": "response to raw input.", "start": 2068.31, "duration": 2.77}, {"text": "AUDIENCE: So yeah, for the\nraw input where you", "start": 2071.08, "duration": 1.869}, {"text": "define it as a quote--", "start": 2072.949, "duration": 1.331}, {"text": "PROFESSOR: Yeah.", "start": 2074.28, "duration": 0.492}, {"text": "AUDIENCE: It usually\nputs in a string.", "start": 2074.772, "duration": 1.476}, {"text": "How does Python interpret\nthat?", "start": 2076.248, "duration": 2.462}, {"text": "PROFESSOR: It will interpret\nit as a string containing", "start": 2078.71, "duration": 1.89}, {"text": "quotation marks.", "start": 2080.6, "duration": 2.006}, {"text": "AUDIENCE: OK.", "start": 2082.606, "duration": 0.414}, {"text": "PROFESSOR: So typically you\ndon't type a string, because", "start": 2083.02, "duration": 3.4}, {"text": "it interprets everything you\ntype as if it were a string.", "start": 2086.42, "duration": 3.85}, {"text": "So don't bother typing\nstrings.", "start": 2090.27, "duration": 2.984}, {"text": "Good question.", "start": 2093.254, "duration": 0.925}, {"text": "Thank you.", "start": 2094.179, "duration": 2.866}, {"text": "All right.", "start": 2097.045, "duration": 0.445}, {"text": "So let's look at this.", "start": 2097.49, "duration": 1.25}, {"text": "So here I'm going to get an\nint, or at least a string.", "start": 2103.67, "duration": 4.45}, {"text": "I'll convert it to an int.", "start": 2108.12, "duration": 2.49}, {"text": "Then I'll say, if x remainder\ntwo, that's what the percent", "start": 2110.61, "duration": 4.08}, {"text": "sign is, it's a remainder\nor a mod operator,", "start": 2114.69, "duration": 3.29}, {"text": "is equal equal zero.", "start": 2117.98, "duration": 3.12}, {"text": "That's important.", "start": 2121.1, "duration": 1.36}, {"text": "You'll notice that we used an\nequal sign to do assignments.", "start": 2122.46, "duration": 6.64}, {"text": "If we want to do a comparison,\nwhether two objects have the", "start": 2129.1, "duration": 4.48}, {"text": "same value, we don't write\na single equal.", "start": 2133.58, "duration": 3.13}, {"text": "We write a double equal.", "start": 2136.71, "duration": 2.58}, {"text": "So whenever you're testing for\nequality of objects, you use", "start": 2139.29, "duration": 3.64}, {"text": "double equal.", "start": 2142.93, "duration": 2.66}, {"text": "So it says, if the object x mod\n2 has the same value as", "start": 2145.59, "duration": 5.45}, {"text": "the object zero, print even.", "start": 2151.04, "duration": 4.48}, {"text": "Else, print odd.", "start": 2155.52, "duration": 3.18}, {"text": "And then, just for fun, I'm\ngoing to see whether or not", "start": 2158.7, "duration": 3.38}, {"text": "it's divisible by three.", "start": 2162.08, "duration": 2.07}, {"text": "Why did I do that?", "start": 2164.15, "duration": 1.86}, {"text": "Just to show you that I can\nnest conditionals inside", "start": 2166.01, "duration": 3.09}, {"text": "conditionals.", "start": 2169.1, "duration": 2.09}, {"text": "So in one of the branches of\nthe conditionals, I'm now", "start": 2171.19, "duration": 2.47}, {"text": "doing a test.", "start": 2173.66, "duration": 2.43}, {"text": "So what this does, is if comes\ndown, it does the test.", "start": 2176.09, "duration": 4.87}, {"text": "If the value of the test is\ntrue, it executes the block of", "start": 2180.96, "duration": 6.29}, {"text": "code following the if, in\nthis case, just print.", "start": 2187.25, "duration": 5.84}, {"text": "And then it skips the else.", "start": 2193.09, "duration": 1.77}, {"text": "It does not execute the else.", "start": 2194.86, "duration": 2.07}, {"text": "So it executes one\nor the other.", "start": 2196.93, "duration": 3.32}, {"text": "If the test is false, it skips\nthe block of code following", "start": 2200.25, "duration": 4.24}, {"text": "the if and executes the block\nof code following the else.", "start": 2204.49, "duration": 5.38}, {"text": "So it does a or b,\nbut not both.", "start": 2209.87, "duration": 3.571}, {"text": "The indentation is important.", "start": 2213.441, "duration": 3.839}, {"text": "Python is very unusual in that\nthe way you indent things", "start": 2217.28, "duration": 5.99}, {"text": "actually affects the\nmeaning of them.", "start": 2223.27, "duration": 2.36}, {"text": "And you can tell that, if I\nwere to type this in the", "start": 2229.46, "duration": 3.13}, {"text": "editor, you'll note here it's\non that line, but if I hit", "start": 2232.59, "duration": 5.49}, {"text": "Return, it automatically\nindents it.", "start": 2238.08, "duration": 2.97}, {"text": "That's the auto indent feature\nI mentioned earlier in the", "start": 2241.05, "duration": 2.74}, {"text": "editor of IDLE.", "start": 2243.79, "duration": 3.1}, {"text": "And this tells me how these\nthings line up.", "start": 2246.89, "duration": 4.03}, {"text": "So the fact that this is here\ntells me I execute it only as", "start": 2250.92, "duration": 6.4}, {"text": "part of the else clause.", "start": 2257.32, "duration": 3.14}, {"text": "The program would mean something\nquite different if I", "start": 2260.46, "duration": 3.12}, {"text": "wrote this.", "start": 2263.58, "duration": 1.25}, {"text": "Then it would mean, if x mod\n2 is zero, print even.", "start": 2268.52, "duration": 6.79}, {"text": "Otherwise, print odd.", "start": 2275.31, "duration": 2.03}, {"text": "And whether or not it was\neven or odd, do this", "start": 2277.34, "duration": 3.03}, {"text": "test in the if statement.", "start": 2280.37, "duration": 1.25}, {"text": "So the indentation actually\naffects the", "start": 2284.26, "duration": 4.18}, {"text": "meaning of the program.", "start": 2288.44, "duration": 3.31}, {"text": "Now a lot of other languages,\nalmost all other languages,", "start": 2291.75, "duration": 3.37}, {"text": "don't do that.", "start": 2295.12, "duration": 1.38}, {"text": "They have some punctuation.", "start": 2296.5, "duration": 2.33}, {"text": "For example, c uses set braces\nto designate what's called a", "start": 2298.83, "duration": 4.35}, {"text": "block of code.", "start": 2303.18, "duration": 1.25}, {"text": "If you look, however, at a\nwell-written piece of C code,", "start": 2309.85, "duration": 4.87}, {"text": "or Java code, or any other\nlanguage that I know,", "start": 2314.72, "duration": 4.1}, {"text": "programmers are trained to use\nindentation to show the", "start": 2318.82, "duration": 4.62}, {"text": "structure of the program.", "start": 2323.44, "duration": 2.33}, {"text": "Even though you don't need, it\nyou could line up everything", "start": 2325.77, "duration": 2.53}, {"text": "right at the left edge and\njust use the punctuation.", "start": 2328.3, "duration": 5.03}, {"text": "People don't do that.", "start": 2333.33, "duration": 1.24}, {"text": "And the reason they don't do\nthat is programs are intended", "start": 2334.57, "duration": 5.31}, {"text": "to be read, not just executed.", "start": 2339.88, "duration": 11.59}, {"text": "Why are they intended\nto be read?", "start": 2351.47, "duration": 3.16}, {"text": "Because the only reason, the\nonly way you can debug a", "start": 2354.63, "duration": 3.26}, {"text": "program is reading\nthe code in it.", "start": 2357.89, "duration": 2.03}, {"text": "Typically, you want to write\nyour program so that if you", "start": 2363.92, "duration": 2.98}, {"text": "look at it from a distance, the\nvisual structure of the", "start": 2366.9, "duration": 4.32}, {"text": "program reflects the semantics\nof the program.", "start": 2371.22, "duration": 4.49}, {"text": "And that's why people use\nindentation when they don't", "start": 2375.71, "duration": 2.63}, {"text": "need to, so that you can see the\nstructure of the program", "start": 2378.34, "duration": 3.67}, {"text": "by looking at it on your screen\nand not having to parse", "start": 2382.01, "duration": 4.84}, {"text": "each symbol.", "start": 2386.85, "duration": 2.94}, {"text": "The authors of Python made what\nI think is a very good", "start": 2389.79, "duration": 2.97}, {"text": "design decision.", "start": 2392.76, "duration": 1.5}, {"text": "They said, well, if that's the\nway you ought to write your", "start": 2394.26, "duration": 2.42}, {"text": "programs, let's force people to\nwrite their programs that", "start": 2396.68, "duration": 3.63}, {"text": "way and guarantee that the\nvisual structure of the", "start": 2400.31, "duration": 6.09}, {"text": "program actually matches\nthe semantic structure.", "start": 2406.4, "duration": 4.57}, {"text": "The problem with languages like\nC and Java is that you", "start": 2410.97, "duration": 4.34}, {"text": "can indent things and fool the\nreader of the program by", "start": 2415.31, "duration": 4.66}, {"text": "making it look like something is\nunder something else, when", "start": 2419.97, "duration": 4.21}, {"text": "in fact it really isn't, because\nof the punctuation.", "start": 2424.18, "duration": 4.47}, {"text": "So here we have a guarantee\nthat the visual structure", "start": 2428.65, "duration": 3.14}, {"text": "matches the semantic structure,\nand I think that", "start": 2431.79, "duration": 3.23}, {"text": "was one of the really good\ndesign decisions in Python.", "start": 2435.02, "duration": 5.67}, {"text": "OK, people see that?", "start": 2440.69, "duration": 2.94}, {"text": "So we could execute\nthis program.", "start": 2443.63, "duration": 2.55}, {"text": "Let me get back to what\nit was before.", "start": 2446.18, "duration": 4.6}, {"text": "Control z is the go back.", "start": 2450.78, "duration": 2.3}, {"text": "And now we can enter an integer,\nsay 14, and it will", "start": 2456.66, "duration": 4.24}, {"text": "tell us it's even.", "start": 2460.9, "duration": 3.25}, {"text": "I can run it again, and now I'll\nput 15 in, and it will", "start": 2464.15, "duration": 6.66}, {"text": "tell me it's odd.", "start": 2470.81, "duration": 3.33}, {"text": "We'll try it once more.", "start": 2474.14, "duration": 3.63}, {"text": "We'll put in 17.", "start": 2477.77, "duration": 2.52}, {"text": "It was odd and it's not\ndivisible by three.", "start": 2480.29, "duration": 4.87}, {"text": "These kinds of programs are\ncalled branching programs.", "start": 2485.16, "duration": 4.285}, {"text": "And that's because the structure\nof them, as you go", "start": 2501.22, "duration": 2.16}, {"text": "down you execute some\nstatements, and then there's a", "start": 2503.38, "duration": 3.31}, {"text": "branch which says execute these\nstatements or execute", "start": 2506.69, "duration": 4.51}, {"text": "those statements.", "start": 2511.2, "duration": 2.33}, {"text": "And then typically it comes back\ntogether and continues.", "start": 2513.53, "duration": 7.0}, {"text": "Of course, branches can\nhave sub-branches.", "start": 2520.53, "duration": 3.09}, {"text": "We could do this and then\njoin further down,", "start": 2523.62, "duration": 5.84}, {"text": "as we've seen here.", "start": 2529.46, "duration": 1.25}, {"text": "Now branching programs are much\nmore interesting than", "start": 2533.04, "duration": 3.78}, {"text": "straight line programs.", "start": 2536.82, "duration": 2.27}, {"text": "We can do a lot of things with\nthem, but fundamentally", "start": 2539.09, "duration": 5.36}, {"text": "nothing really interesting.", "start": 2544.45, "duration": 3.68}, {"text": "And we can think about that by\nthinking about how long it", "start": 2548.13, "duration": 5.06}, {"text": "takes a branching\nprogram to run.", "start": 2553.19, "duration": 3.63}, {"text": "So let's first ask the question,\nhow long does it", "start": 2556.82, "duration": 2.83}, {"text": "take a straight line\nprogram to run?", "start": 2559.65, "duration": 3.66}, {"text": "14 seconds?", "start": 2563.31, "duration": 1.47}, {"text": "No, that's not the way\nto think about it.", "start": 2564.78, "duration": 2.8}, {"text": "How would we think about how\nlong it takes it to run?", "start": 2567.58, "duration": 2.68}, {"text": "What governs the length\nof time a straight", "start": 2570.26, "duration": 2.99}, {"text": "line program can take?", "start": 2573.25, "duration": 2.885}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 2576.135, "duration": 1.395}, {"text": "PROFESSOR: Exactly.", "start": 2577.53, "duration": 1.1}, {"text": "The number of statements or\ncommands in the program.", "start": 2578.63, "duration": 3.98}, {"text": "Since it executes every command\nexactly once, if you", "start": 2582.61, "duration": 4.5}, {"text": "have 100 command, it will\nhave 100 steps in it.", "start": 2587.11, "duration": 4.24}, {"text": "Now there's some variation on\nhow long each step will be.", "start": 2591.35, "duration": 2.84}, {"text": "Some commands might take longer\nthan others, but the", "start": 2594.19, "duration": 4.21}, {"text": "length of time it can take\nto run has nothing", "start": 2598.4, "duration": 2.92}, {"text": "to do with its input.", "start": 2601.32, "duration": 2.02}, {"text": "It has to do only with the\nnumber of lines of code.", "start": 2603.34, "duration": 5.59}, {"text": "And that tells us it's not very\nuseful because, well, we", "start": 2608.93, "duration": 5.3}, {"text": "can only type so many lines\nin our lifetime.", "start": 2614.23, "duration": 3.41}, {"text": "Well branching programs\nhave the same problem.", "start": 2617.64, "duration": 2.54}, {"text": "In a branching program,\neach command is", "start": 2622.89, "duration": 2.31}, {"text": "executed at most once.", "start": 2625.2, "duration": 4.09}, {"text": "So again, the length of time\nit takes to execute the", "start": 2629.29, "duration": 3.88}, {"text": "program is governed strictly\nby the size of the program.", "start": 2633.17, "duration": 6.65}, {"text": "Why isn't that good enough?", "start": 2639.82, "duration": 2.23}, {"text": "Well, think about a program,\nsay, to compute the GPA of all", "start": 2642.05, "duration": 5.28}, {"text": "the students at MIT.", "start": 2647.33, "duration": 1.25}, {"text": "Well how long is that\ngoing to take?", "start": 2651.46, "duration": 2.13}, {"text": "Think instead about a program to\ncompute the GPA of all the", "start": 2656.72, "duration": 4.91}, {"text": "students at the University of\nMichigan, which is probably 10", "start": 2661.63, "duration": 4.99}, {"text": "times bigger than MIT.", "start": 2666.62, "duration": 2.11}, {"text": "Well you would expect that\nto take longer, right?", "start": 2668.73, "duration": 2.69}, {"text": "Because you have to look\nat more students.", "start": 2671.42, "duration": 3.85}, {"text": "And in fact, it's true.", "start": 2675.27, "duration": 1.89}, {"text": "Most programs that are\ninteresting, the amount of", "start": 2677.16, "duration": 3.23}, {"text": "time they take to run should\ndepend not on the length of", "start": 2680.39, "duration": 3.41}, {"text": "the program, but on the size of\nthe data that you want to", "start": 2683.8, "duration": 4.33}, {"text": "evaluate using the program.", "start": 2688.13, "duration": 3.06}, {"text": "So you would argue that the\namount of time taken to", "start": 2691.19, "duration": 3.31}, {"text": "compute the GPA of the students\nat MIT should be", "start": 2694.5, "duration": 3.83}, {"text": "proportional to the number of\nstudents, not proportional to", "start": 2698.33, "duration": 3.93}, {"text": "the length of the program\nused to do it.", "start": 2702.26, "duration": 3.63}, {"text": "We'll talk a lot more about that\nlater in the term in a", "start": 2705.89, "duration": 2.89}, {"text": "much more thorough way.", "start": 2708.78, "duration": 3.4}, {"text": "But it's important to get that\nas something you think about.", "start": 2712.18, "duration": 5.93}, {"text": "So the fact that branching\nprograms are not proportional", "start": 2718.11, "duration": 3.71}, {"text": "in time to the input means that\nthey're limited in what", "start": 2721.82, "duration": 3.57}, {"text": "they can do.", "start": 2725.39, "duration": 2.61}, {"text": "So that gets us to the final\nconcept we need to write every", "start": 2728.0, "duration": 5.15}, {"text": "program that could ever be\nwritten, or at least to", "start": 2733.15, "duration": 3.2}, {"text": "compute every function that\ncould ever be computed.", "start": 2736.35, "duration": 5.3}, {"text": "And that's some sort of\na looping construct.", "start": 2741.65, "duration": 2.56}, {"text": "Once we add loops, we get to a\nclass of programming languages", "start": 2756.6, "duration": 5.55}, {"text": "or programming constructs that's\ncalled Turing Complete.", "start": 2762.15, "duration": 5.24}, {"text": "And I mentioned this\nlast time.", "start": 2767.39, "duration": 3.26}, {"text": "Any program that can be written,\nor any function that", "start": 2770.65, "duration": 2.5}, {"text": "can be computed, rather, can\nbe computed in a Turing", "start": 2773.15, "duration": 3.99}, {"text": "Complete language.", "start": 2777.14, "duration": 2.96}, {"text": "So let's look at an\nexample here.", "start": 2780.1, "duration": 1.735}, {"text": "This concept, by the way,\nis called iteration.", "start": 2784.41, "duration": 3.103}, {"text": "And if we look at languages with\niteration, what we'll see", "start": 2793.62, "duration": 7.23}, {"text": "is a more complicated\nflow of control.", "start": 2800.85, "duration": 3.28}, {"text": "You execute some statements,\nmaybe you do some", "start": 2804.13, "duration": 3.15}, {"text": "branching if you want.", "start": 2807.28, "duration": 1.25}, {"text": "But then you're allowed to go\nback and execute statements", "start": 2813.52, "duration": 5.96}, {"text": "you've already executed.", "start": 2819.48, "duration": 2.58}, {"text": "Typically what you have\nis another branch.", "start": 2822.06, "duration": 1.985}, {"text": "One branch goes back\nand one continues.", "start": 2829.45, "duration": 2.03}, {"text": "So now we see we can execute\na statement more than once.", "start": 2835.2, "duration": 5.37}, {"text": "Suddenly we have enormous\npower at our disposal.", "start": 2840.57, "duration": 5.25}, {"text": "So let's look at an\nexample of that.", "start": 2845.82, "duration": 1.84}, {"text": "By the way, I'm skipping some\nof the code in your handout,", "start": 2863.64, "duration": 2.86}, {"text": "but that's probably fine because\nit's there for you to", "start": 2866.5, "duration": 7.03}, {"text": "be able to read.", "start": 2873.53, "duration": 0.84}, {"text": "And what I would recommend by\nthe way, is that we will post", "start": 2874.37, "duration": 3.92}, {"text": "the handouts on the web, but\nat the end of every lecture", "start": 2878.29, "duration": 4.59}, {"text": "within a few hours or a few days\nat least, go through the", "start": 2882.88, "duration": 3.68}, {"text": "handouts and make sure you\nunderstand everything in.", "start": 2886.56, "duration": 4.59}, {"text": "Because if you don't, you're\nprobably missing something", "start": 2891.15, "duration": 3.23}, {"text": "you'll need to understand\nto do the problem sets.", "start": 2894.38, "duration": 1.97}, {"text": "So here's a little program that\nfinds the cube root of a", "start": 2899.25, "duration": 3.61}, {"text": "perfect cube.", "start": 2902.86, "duration": 2.34}, {"text": "This, by the way, is a useful\ncomment here, right?", "start": 2905.2, "duration": 3.08}, {"text": "Tells you what the program\nis intended to do.", "start": 2908.28, "duration": 3.49}, {"text": "So we get an integer.", "start": 2911.77, "duration": 2.0}, {"text": "We set the variable\nans to zero.", "start": 2913.77, "duration": 3.06}, {"text": "And then while ans times ans\ntimes ans is less than the", "start": 2916.83, "duration": 4.99}, {"text": "absolute value of x,\nwe're going to set", "start": 2921.82, "duration": 3.99}, {"text": "ans to ans plus 1.", "start": 2925.81, "duration": 2.42}, {"text": "We could print where we are.", "start": 2928.23, "duration": 2.13}, {"text": "I put those sort of things in\nas debugging statements.", "start": 2930.36, "duration": 3.82}, {"text": "If ans times ans times ans is\nnot equal to the absolute", "start": 2934.18, "duration": 5.39}, {"text": "value of x when I finish the\nloop, then I'll print x is not", "start": 2939.57, "duration": 7.23}, {"text": "a perfect cube.", "start": 2946.8, "duration": 3.05}, {"text": "Otherwise I have to do something\nto deal with", "start": 2949.85, "duration": 2.2}, {"text": "positive and negative values.", "start": 2952.05, "duration": 2.73}, {"text": "Now I know that this was fast\nand that most of you probably", "start": 2954.78, "duration": 5.84}, {"text": "don't fully assimilate\nthis program.", "start": 2960.62, "duration": 2.87}, {"text": "Do not worry.", "start": 2963.49, "duration": 1.8}, {"text": "It will be discussed in\nrecitations tomorrow.", "start": 2965.29, "duration": 4.75}, {"text": "So tomorrow, the recitations\nwill review the Python", "start": 2970.04, "duration": 3.97}, {"text": "concepts we've discussed today,\nbut we'll start by", "start": 2974.01, "duration": 4.86}, {"text": "emphasizing how these\nloops work.", "start": 2978.87, "duration": 2.7}, {"text": "OK.", "start": 2981.57, "duration": 0.75}, {"text": "Thanks for coming.", "start": 2982.32, "duration": 1.7}, {"text": "Enjoy recitation tomorrow.", "start": 2984.02, "duration": 1.34}]