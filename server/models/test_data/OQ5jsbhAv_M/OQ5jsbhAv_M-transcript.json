[{"text": "The following\ncontent is provided", "start": 0.05, "duration": 1.72}, {"text": "under a Creative\nCommons license.", "start": 1.77, "duration": 2.24}, {"text": "Your support will help MIT\nOpenCourseWare continue", "start": 4.01, "duration": 2.85}, {"text": "to offer high quality\neducational resources for free.", "start": 6.86, "duration": 3.86}, {"text": "To make a donation or\nview additional materials", "start": 10.72, "duration": 2.6}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.32, "duration": 3.887}, {"text": "at ocw.mit.edu.", "start": 17.207, "duration": 0.625}, {"text": "PROFESSOR: We're going to start\na brand new, exciting topic,", "start": 21.13, "duration": 2.5}, {"text": "dynamic programming.", "start": 23.63, "duration": 1.657}, {"text": "AUDIENCE: Yes!", "start": 25.287, "duration": 0.583}, {"text": "PROFESSOR: Yeah!", "start": 25.87, "duration": 0.96}, {"text": "So exciting.", "start": 26.83, "duration": 1.415}, {"text": "Actually, I am really excited\nbecause dynamic programming", "start": 28.245, "duration": 2.375}, {"text": "is my favorite thing in\nthe world, in algorithms.", "start": 30.62, "duration": 3.2}, {"text": "And it's going to be\nthe next four lectures,", "start": 33.82, "duration": 3.25}, {"text": "it's so exciting.", "start": 37.07, "duration": 1.57}, {"text": "It has lots of different facets.", "start": 38.64, "duration": 1.74}, {"text": "It's a very general,\npowerful design technique.", "start": 40.38, "duration": 4.34}, {"text": "We don't talk a lot about\nalgorithm design in this class,", "start": 44.72, "duration": 2.67}, {"text": "but dynamic programming is\none that's so important.", "start": 47.39, "duration": 2.67}, {"text": "And also takes a little\nwhile to settle in.", "start": 50.06, "duration": 1.94}, {"text": "We like to injected it\ninto you now, in 006.", "start": 52.0, "duration": 5.51}, {"text": "So in general, our motivation\nis designing new algorithms", "start": 57.51, "duration": 8.41}, {"text": "and dynamic programming,\nalso called DP,", "start": 65.92, "duration": 4.68}, {"text": "is a great way-- or a\nvery general, powerful way", "start": 70.6, "duration": 7.24}, {"text": "to do this.", "start": 77.84, "duration": 0.525}, {"text": "It's especially good, and\nintended for, optimization", "start": 93.86, "duration": 3.68}, {"text": "problems, things\nlike shortest paths.", "start": 97.54, "duration": 1.56}, {"text": "You want to find the\nbest way to do something.", "start": 99.1, "duration": 2.174}, {"text": "Shortest path is you\nwant to find the shortest", "start": 101.274, "duration": 1.916}, {"text": "path, the minimum-length path.", "start": 103.19, "duration": 3.41}, {"text": "You want to minimize,\nmaximize something, that's", "start": 106.6, "duration": 2.01}, {"text": "an optimization\nproblem, and typically", "start": 108.61, "duration": 2.71}, {"text": "good algorithms to solve them\ninvolve dynamic programming.", "start": 111.32, "duration": 2.77}, {"text": "It's a bit of a broad statement.", "start": 114.09, "duration": 2.3}, {"text": "You can also think of\ndynamic programming", "start": 116.39, "duration": 1.93}, {"text": "as a kind of exhaustive search.", "start": 118.32, "duration": 3.38}, {"text": "Which is usually\na bad thing to do", "start": 121.7, "duration": 1.57}, {"text": "because it leads to\nexponential time.", "start": 123.27, "duration": 1.99}, {"text": "But if you do it in a clever\nway, via dynamic programming,", "start": 125.26, "duration": 4.189}, {"text": "you typically get\npolynomial time.", "start": 129.449, "duration": 4.221}, {"text": "So one perspective is\nthat dynamic programming", "start": 133.67, "duration": 3.76}, {"text": "is approximately\ncareful brute force.", "start": 137.43, "duration": 5.74}, {"text": "It's kind of a\nfunny combination.", "start": 143.17, "duration": 2.48}, {"text": "A bit of an oxymoron.", "start": 145.65, "duration": 3.69}, {"text": "But we take the idea of\nbrute force, which is,", "start": 149.34, "duration": 2.26}, {"text": "try all possibilities\nand you do it carefully", "start": 151.6, "duration": 4.09}, {"text": "and you get it to\npolynomial time.", "start": 155.69, "duration": 1.42}, {"text": "There are a lot of\nproblems where essentially", "start": 157.11, "duration": 1.875}, {"text": "the only known polynomial\ntime algorithm is", "start": 158.985, "duration": 2.665}, {"text": "via dynamic programming.", "start": 161.65, "duration": 1.0}, {"text": "It doesn't always work,\nthere's some problems", "start": 162.65, "duration": 1.79}, {"text": "where we don't think there are\npolynomial time algorithms,", "start": 164.44, "duration": 2.416}, {"text": "but when it's possible\nDP is a nice, sort of,", "start": 166.856, "duration": 3.914}, {"text": "general approach to it.", "start": 170.77, "duration": 3.267}, {"text": "And we're going to be talking a\nlot about dynamic programming.", "start": 174.037, "duration": 2.583}, {"text": "There's a lot of different\nways to think about it.", "start": 176.62, "duration": 3.23}, {"text": "We'll look at a few today.", "start": 179.85, "duration": 2.84}, {"text": "We're going to warm up today\nwith some fairly easy problems", "start": 182.69, "duration": 3.064}, {"text": "that we already\nknow how to solve,", "start": 185.754, "duration": 1.416}, {"text": "namely computing\nFibonacci numbers.", "start": 187.17, "duration": 2.52}, {"text": "It's pretty easy.", "start": 189.69, "duration": 1.52}, {"text": "And computing shortest paths.", "start": 191.21, "duration": 1.882}, {"text": "And then in the\nnext three lectures", "start": 193.092, "duration": 1.458}, {"text": "we're going to get to\nmore interesting examples", "start": 194.55, "duration": 1.98}, {"text": "where it's pretty\nsurprising that you can even", "start": 196.53, "duration": 3.68}, {"text": "solve the problem\nin polynomial time.", "start": 200.21, "duration": 3.95}, {"text": "Probably the first burning\nquestion on your mind,", "start": 204.16, "duration": 2.31}, {"text": "though, is why is it\ncalled dynamic programming?", "start": 206.47, "duration": 2.81}, {"text": "What does that even mean?", "start": 209.28, "duration": 1.96}, {"text": "And I used to have this\nspiel about, well, you", "start": 211.24, "duration": 3.52}, {"text": "know, programming\nrefers to the-- I think", "start": 214.76, "duration": 2.72}, {"text": "it's the British\nnotion of the word,", "start": 217.48, "duration": 2.07}, {"text": "where it's about optimization.", "start": 219.55, "duration": 2.49}, {"text": "Optimization in American\nEnglish is something", "start": 222.04, "duration": 2.71}, {"text": "like programming\nin British English,", "start": 224.75, "duration": 2.94}, {"text": "where you want to\nset up the program--", "start": 227.69, "duration": 2.66}, {"text": "the schedule for your\ntrains or something,", "start": 230.35, "duration": 2.45}, {"text": "where programming\ncomes from originally.", "start": 232.8, "duration": 2.05}, {"text": "But I looked up the\nactual history of,", "start": 234.85, "duration": 2.825}, {"text": "why is it called\ndynamic programming.", "start": 237.675, "duration": 3.055}, {"text": "Dynamic programming was invented\nby a guy named Richard Bellman.", "start": 240.73, "duration": 4.23}, {"text": "You may have heard of Bellman\nin the Bellman-Ford algorithm.", "start": 244.96, "duration": 2.89}, {"text": "So this is actually the\nprecursor to Bellman-Ford.", "start": 247.85, "duration": 2.51}, {"text": "And we're going to see\nBellman-Ford come up naturally", "start": 250.36, "duration": 2.93}, {"text": "in this setting.", "start": 253.29, "duration": 2.19}, {"text": "So here's a quote about him.", "start": 255.48, "duration": 2.039}, {"text": "It says, Bellman\nexplained that he", "start": 257.519, "duration": 1.781}, {"text": "invented the name dynamic\nprogramming to hide the fact", "start": 259.3, "duration": 2.95}, {"text": "that he was doing\nmathematical research.", "start": 262.25, "duration": 3.59}, {"text": "He was working at this\nplace called Rand,", "start": 265.84, "duration": 2.11}, {"text": "and under a secretary of defense\nwho had a pathological fear", "start": 267.95, "duration": 3.94}, {"text": "and hatred for\nthe term research.", "start": 271.89, "duration": 3.206}, {"text": "So he settled on the\nterm dynamic programming", "start": 275.096, "duration": 1.874}, {"text": "because it would be\ndifficult to give", "start": 276.97, "duration": 2.48}, {"text": "a pejorative meaning to it.", "start": 279.45, "duration": 2.55}, {"text": "And because it was\nsomething not even", "start": 282.0, "duration": 1.87}, {"text": "a congressman could object to.", "start": 283.87, "duration": 1.96}, {"text": "Basically, it sounded cool.", "start": 285.83, "duration": 3.6}, {"text": "So that's the origin of the\nname dynamic programming.", "start": 289.43, "duration": 3.11}, {"text": "So why is the called that?", "start": 292.54, "duration": 1.09}, {"text": "Who knows.", "start": 293.63, "duration": 1.82}, {"text": "I mean, now you know.", "start": 295.45, "duration": 1.33}, {"text": "But it's not--\nit's a weird term.", "start": 296.78, "duration": 2.65}, {"text": "Just take it for what it is.", "start": 299.43, "duration": 1.29}, {"text": "It may make some\nkind of sense, but--", "start": 304.15, "duration": 2.67}, {"text": "All right.", "start": 306.82, "duration": 0.68}, {"text": "So we are going to start\nwith this example of how", "start": 307.5, "duration": 7.07}, {"text": "to compute Fibonacci numbers.", "start": 314.57, "duration": 2.23}, {"text": "And maybe before\nwe actually start", "start": 316.8, "duration": 1.9}, {"text": "I'm going to give you\na sneak peak of what", "start": 318.7, "duration": 4.55}, {"text": "you can think of\ndynamic programming as.", "start": 323.25, "duration": 3.23}, {"text": "And this equation,\nso to speak, is", "start": 326.48, "duration": 11.35}, {"text": "going to change throughout\ntoday's lecture.", "start": 337.83, "duration": 4.57}, {"text": "In the end we'll\nsettle on a sort", "start": 342.4, "duration": 1.57}, {"text": "of more accurate perspective.", "start": 343.97, "duration": 2.79}, {"text": "The basic idea of\ndynamic programming", "start": 346.76, "duration": 2.26}, {"text": "is to take a problem,\nsplit it into subproblems,", "start": 349.02, "duration": 4.1}, {"text": "solve those subproblems,\nand reuse the solutions", "start": 353.12, "duration": 2.66}, {"text": "to your subproblems.", "start": 355.78, "duration": 0.94}, {"text": "It's like a lesson in recycling.", "start": 356.72, "duration": 2.8}, {"text": "So we'll see that in\nFibonacci numbers.", "start": 359.52, "duration": 3.77}, {"text": "So you remember\nFibonacci numbers, right?", "start": 363.29, "duration": 2.98}, {"text": "The number of rabbits you have\non day n, if they reproduce.", "start": 366.27, "duration": 4.175}, {"text": "We've mentioned them before,\nwe're talking about AVL trees,", "start": 375.02, "duration": 3.61}, {"text": "I think.", "start": 378.63, "duration": 1.28}, {"text": "So this is the\nusual-- you can think", "start": 379.91, "duration": 3.38}, {"text": "of it as a recursive definition\nor recurrence on Fibonacci", "start": 383.29, "duration": 3.42}, {"text": "numbers.", "start": 386.71, "duration": 1.06}, {"text": "It's the definition of what\nthe nth Fibonacci number is.", "start": 387.77, "duration": 3.12}, {"text": "So let's suppose our goal--\nan algorithmic problem is,", "start": 390.89, "duration": 3.92}, {"text": "compute the nth\nFibonacci number.", "start": 394.81, "duration": 4.41}, {"text": "And I'm going to assume here\nthat that fits in a word.", "start": 399.22, "duration": 3.49}, {"text": "And so basic\narithmetic, addition,", "start": 402.71, "duration": 2.27}, {"text": "whatever's constant\ntime per operation.", "start": 404.98, "duration": 3.12}, {"text": "So how do we do it?", "start": 408.1, "duration": 2.49}, {"text": "You all know how to do it.", "start": 410.59, "duration": 1.61}, {"text": "Anyways-- but I'm going to give\nyou the dynamic programming", "start": 412.2, "duration": 4.41}, {"text": "perspective on things.", "start": 416.61, "duration": 1.18}, {"text": "So this will seem\nkind of obvious,", "start": 417.79, "duration": 2.71}, {"text": "but it is-- we're going to apply\nexactly the same principles", "start": 420.5, "duration": 3.11}, {"text": "that we will apply over and\nover in dynamic programming.", "start": 423.61, "duration": 3.0}, {"text": "But here it's in a\nvery familiar setting.", "start": 426.61, "duration": 5.3}, {"text": "So we're going to start with\nthe naive recursive algorithm.", "start": 431.91, "duration": 4.52}, {"text": "And that is, if you want to\ncompute the nth Fibonacci", "start": 444.85, "duration": 4.3}, {"text": "number, you check whether\nyou're in the base case.", "start": 449.15, "duration": 2.86}, {"text": "I'm going to write it this way.", "start": 455.89, "duration": 2.63}, {"text": "So f is just our return value.", "start": 475.23, "duration": 2.09}, {"text": "You'll see why I write\nit this way in a moment.", "start": 477.32, "duration": 2.15}, {"text": "Then you return f.", "start": 479.47, "duration": 1.8}, {"text": "In the base case\nit's 1, otherwise", "start": 481.27, "duration": 1.76}, {"text": "you recursively call\nFibonacci of n minus 1.", "start": 483.03, "duration": 2.83}, {"text": "You recursively call\nFibonacci of n minus 2.", "start": 485.86, "duration": 2.66}, {"text": "Add them together, return that.", "start": 488.52, "duration": 2.08}, {"text": "This is a correct algorithm.", "start": 490.6, "duration": 2.162}, {"text": "Is it a good algorithm?", "start": 492.762, "duration": 2.398}, {"text": "No.", "start": 495.16, "duration": 1.095}, {"text": "It's very bad.", "start": 496.255, "duration": 0.975}, {"text": "Exponential time.", "start": 497.23, "duration": 1.03}, {"text": "How do we know it's\nexponential time,", "start": 503.45, "duration": 2.03}, {"text": "other than from experience?", "start": 505.48, "duration": 2.25}, {"text": "Well, we can write the\nrunning time as recurrence.", "start": 507.73, "duration": 4.15}, {"text": "T of n represents the time\nto compute the nth Fibonacci", "start": 511.88, "duration": 3.11}, {"text": "number.", "start": 514.99, "duration": 0.79}, {"text": "How can I write the recurrence?", "start": 515.78, "duration": 3.66}, {"text": "You're gonna throwback to\nthe early lectures, divide", "start": 519.44, "duration": 2.19}, {"text": "and conquer.", "start": 521.63, "duration": 0.976}, {"text": "I hear whispers.", "start": 528.95, "duration": 1.94}, {"text": "Yeah?", "start": 530.89, "duration": 0.5}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 531.39, "duration": 0.976}, {"text": "PROFESSOR: Yeah.", "start": 535.32, "duration": 1.761}, {"text": "T of n minus 1 plus t of\nn minus 2 plus constant.", "start": 537.081, "duration": 6.259}, {"text": "I don't know how\nmany you have by now.", "start": 547.19, "duration": 1.675}, {"text": "So to create the\nnth Fibonacci number", "start": 551.51, "duration": 2.03}, {"text": "we have to compute the n\nminus first Fibonacci number,", "start": 553.54, "duration": 2.25}, {"text": "and the n minus second\nFibonacci number.", "start": 555.79, "duration": 1.666}, {"text": "That's these two recursions.", "start": 557.456, "duration": 2.434}, {"text": "And then we take\nconstant time otherwise.", "start": 559.89, "duration": 1.87}, {"text": "We do constant number of\nadditions, comparisons.", "start": 561.76, "duration": 3.15}, {"text": "Return all these operations--\ntake constant time.", "start": 564.91, "duration": 3.01}, {"text": "So that's a recurrence.", "start": 567.92, "duration": 1.63}, {"text": "How do we solve this recurrence?", "start": 569.55, "duration": 1.84}, {"text": "Well one way is to see this\nis the Fibonacci recurrence.", "start": 571.39, "duration": 4.33}, {"text": "So it's the same thing.", "start": 575.72, "duration": 1.63}, {"text": "There's this plus whatever.", "start": 577.35, "duration": 1.62}, {"text": "But in particular, this is at\nleast the nth Fibonacci number.", "start": 578.97, "duration": 2.75}, {"text": "And if you know\nFibonacci stuff, that's", "start": 581.72, "duration": 1.63}, {"text": "about the golden ratio\nto the nth power.", "start": 583.35, "duration": 5.09}, {"text": "Which is bad.", "start": 588.44, "duration": 2.21}, {"text": "We had a similar\nrecurrence in AVL trees.", "start": 590.65, "duration": 2.28}, {"text": "And so another way\nto solve it-- it's", "start": 592.93, "duration": 2.92}, {"text": "just good review--\nsay, oh well, that's", "start": 595.85, "duration": 3.25}, {"text": "at least 2 times t of n minus 2.", "start": 599.1, "duration": 4.5}, {"text": "Because it's going\nto be monotone.", "start": 603.6, "duration": 1.42}, {"text": "The bigger n is, the\nmore work you have to do.", "start": 605.02, "duration": 2.311}, {"text": "Because to do the\nnth thing you have", "start": 607.331, "duration": 1.499}, {"text": "to do the n minus first thing.", "start": 608.83, "duration": 1.94}, {"text": "So we could just reduce t of\nn minus 1 to t of n minus 2.", "start": 610.77, "duration": 3.49}, {"text": "That will give us a lower bound.", "start": 614.26, "duration": 2.36}, {"text": "And now these two terms-- now\nthis is sort of an easy thing.", "start": 616.62, "duration": 3.08}, {"text": "You see that you're\nmultiplying by 2 each time.", "start": 619.7, "duration": 3.25}, {"text": "You're subtracting\n2 from n each time.", "start": 622.95, "duration": 1.72}, {"text": "How many times can\nI subtract 2 from n?", "start": 624.67, "duration": 2.6}, {"text": "N/2 times, before I\nget down to a constant.", "start": 627.27, "duration": 3.12}, {"text": "And so this is equal\nto 2 to the n over 2--", "start": 630.39, "duration": 7.35}, {"text": "I mean, times some\nconstant, which", "start": 637.74, "duration": 1.72}, {"text": "is what you get\nin the base case.", "start": 639.46, "duration": 2.44}, {"text": "So I guess I should say theta.", "start": 641.9, "duration": 4.07}, {"text": "This thing is theta that.", "start": 645.97, "duration": 2.92}, {"text": "OK.", "start": 648.89, "duration": 0.5}, {"text": "So it's at least that big.", "start": 649.39, "duration": 1.93}, {"text": "And the right constant is phi.", "start": 651.32, "duration": 4.982}, {"text": "And the base of the exponent.", "start": 656.302, "duration": 2.318}, {"text": "OK.", "start": 658.62, "duration": 0.5}, {"text": "So that's a bad algorithm.", "start": 659.12, "duration": 1.083}, {"text": "We all know it's\na bad algorithm.", "start": 660.203, "duration": 3.487}, {"text": "But I'm going to give you a\ngeneral approach for making", "start": 663.69, "duration": 2.98}, {"text": "bad algorithms like this good.", "start": 666.67, "duration": 2.33}, {"text": "And that general approach\nis called memoization.", "start": 669.0, "duration": 2.036}, {"text": "We'll go over here.", "start": 674.17, "duration": 2.43}, {"text": "And this is a technique\nof dynamic programming.", "start": 679.91, "duration": 1.99}, {"text": "So I'm going to call this the\nmemoized dynamic programming", "start": 684.708, "duration": 3.662}, {"text": "algorithm.", "start": 688.37, "duration": 0.5}, {"text": "So did I settle on\nusing memo in the notes?", "start": 696.84, "duration": 7.43}, {"text": "Yeah.", "start": 704.27, "duration": 0.5}, {"text": "The idea is simple.", "start": 708.57, "duration": 1.95}, {"text": "Whenever we compute\na Fibonacci number", "start": 710.52, "duration": 2.35}, {"text": "we put it in a dictionary.", "start": 712.87, "duration": 2.297}, {"text": "And then when we need to\ncompute the nth Fibonacci", "start": 715.167, "duration": 2.083}, {"text": "number we check, is it\nalready in the dictionary?", "start": 717.25, "duration": 1.575}, {"text": "Did we already\nsolve this problem?", "start": 718.825, "duration": 1.416}, {"text": "If so, return that answer.", "start": 720.241, "duration": 2.779}, {"text": "Otherwise, computer it.", "start": 723.02, "duration": 2.065}, {"text": "You'll see the transformation\nis very simple.", "start": 725.085, "duration": 1.875}, {"text": "OK.", "start": 777.81, "duration": 1.23}, {"text": "These two lines are\nidentical to these two lines.", "start": 779.04, "duration": 5.61}, {"text": "So you can see how\nthe transformation", "start": 784.65, "duration": 1.67}, {"text": "works in general.", "start": 786.32, "duration": 1.41}, {"text": "You could do this with\nany recursive algorithm.", "start": 787.73, "duration": 3.126}, {"text": "The memoization transformation\non that algorithm--", "start": 790.856, "duration": 3.844}, {"text": "which is, we initially make an\nempty dictionary called memo.", "start": 794.7, "duration": 4.35}, {"text": "And before we actually do\nthe computation we say,", "start": 799.05, "duration": 3.9}, {"text": "well, check whether this version\nof the Fibonacci problem,", "start": 802.95, "duration": 3.87}, {"text": "computing f of n, is\nalready in our dictionary.", "start": 806.82, "duration": 4.612}, {"text": "So if that key is already\nin the dictionary,", "start": 811.432, "duration": 1.833}, {"text": "we return the corresponding\nvalue in the dictionary.", "start": 813.265, "duration": 2.67}, {"text": "And then once we've computed\nthe nth Fibonacci number,", "start": 818.96, "duration": 2.63}, {"text": "if we bothered to do this,\nif this didn't apply,", "start": 821.59, "duration": 3.19}, {"text": "then we store it\nin the memo table.", "start": 824.78, "duration": 2.36}, {"text": "So we say well, if you ever\nneed to compute f of n again,", "start": 827.14, "duration": 3.76}, {"text": "here it is.", "start": 830.9, "duration": 1.47}, {"text": "And then we return that value.", "start": 832.37, "duration": 2.45}, {"text": "So this is a general procedure.", "start": 834.82, "duration": 2.372}, {"text": "It can apply to any\nrecursive algorithm", "start": 837.192, "duration": 3.718}, {"text": "with no side effects\nI guess, technically.", "start": 840.91, "duration": 3.99}, {"text": "And it turns out, this makes\nthe algorithm efficient.", "start": 844.9, "duration": 2.889}, {"text": "Now there's a lot of ways\nto see why it's efficient.", "start": 847.789, "duration": 2.166}, {"text": "In general, maybe it's helpful\nto think about the recursion", "start": 852.68, "duration": 2.58}, {"text": "tree.", "start": 855.26, "duration": 0.96}, {"text": "So if you want to compute\nfn in the old algorithm,", "start": 856.22, "duration": 3.44}, {"text": "we compute fn minus\n1 and fn minus two", "start": 859.66, "duration": 2.89}, {"text": "completely separately.", "start": 862.55, "duration": 1.39}, {"text": "To compute fn minus 1 we compute\nfn minus 2 and fn minus 3.", "start": 863.94, "duration": 5.88}, {"text": "To compute fn minus 2 we compute\nfn minus 3 and fn minus 4.", "start": 869.82, "duration": 4.9}, {"text": "And so on.", "start": 874.72, "duration": 0.9}, {"text": "And you can see why\nthat's exponential in n.", "start": 875.62, "duration": 3.87}, {"text": "Because we're only decrementing\nn by one or two each time.", "start": 879.49, "duration": 4.76}, {"text": "But then you observe, hey,\nthese fn minus 3's are the same.", "start": 884.25, "duration": 3.95}, {"text": "I should really only have\nto compute them once.", "start": 888.2, "duration": 2.735}, {"text": "And that's what\nwe're doing here.", "start": 890.935, "duration": 1.375}, {"text": "The first time you call\nfn minus 3, you do work.", "start": 892.31, "duration": 3.35}, {"text": "But once it's done and you go\nover to this other recursive", "start": 895.66, "duration": 3.12}, {"text": "call, this will\njust get cut off.", "start": 898.78, "duration": 1.98}, {"text": "There's no tree here.", "start": 900.76, "duration": 1.28}, {"text": "Here we might have\nsome recursive calling.", "start": 902.04, "duration": 2.14}, {"text": "Here we won't, because it's\nalready in the memo table.", "start": 904.18, "duration": 4.52}, {"text": "In fact, this already\nhappens with fn minus 2.", "start": 908.7, "duration": 3.23}, {"text": "This whole tree disappears\nbecause fn minus 2", "start": 911.93, "duration": 3.67}, {"text": "has already been done.", "start": 915.6, "duration": 2.01}, {"text": "OK.", "start": 917.61, "duration": 0.5}, {"text": "So it's clear why\nit improves things.", "start": 918.11, "duration": 2.98}, {"text": "So in fact you can argue\nthat this call will be free", "start": 921.09, "duration": 3.66}, {"text": "because you already\ndid the work in here.", "start": 924.75, "duration": 2.79}, {"text": "But I want to give you a very\nparticular way of thinking", "start": 927.54, "duration": 3.16}, {"text": "about why this is efficient,\nwhich is following.", "start": 930.7, "duration": 9.315}, {"text": "So you could write down a\nrecurrence for the running time", "start": 966.55, "duration": 3.25}, {"text": "here.", "start": 969.8, "duration": 0.5}, {"text": "But in some sense recurrences\naren't quite the right way", "start": 970.3, "duration": 2.75}, {"text": "of thinking about\nthis because recursion", "start": 973.05, "duration": 2.19}, {"text": "is kind of a rare thing.", "start": 975.24, "duration": 1.98}, {"text": "If you're calling\nFibonacci of some value, k,", "start": 977.22, "duration": 3.62}, {"text": "you're only going to make\nrecursive calls the first time", "start": 980.84, "duration": 2.86}, {"text": "you call Fibonacci of k.", "start": 983.7, "duration": 1.23}, {"text": "Because henceforth,\nyou've put it", "start": 984.93, "duration": 3.32}, {"text": "in the memo table\nyou will not recurse.", "start": 988.25, "duration": 2.61}, {"text": "So you can think of\nthere being two versions", "start": 990.86, "duration": 4.51}, {"text": "of calling Fibonacci of k.", "start": 995.37, "duration": 1.27}, {"text": "There's the first time, which\nis the non-memoized version that", "start": 996.64, "duration": 4.31}, {"text": "does recursion-- does some work.", "start": 1000.95, "duration": 2.01}, {"text": "And then every time\nhenceforth you're", "start": 1002.96, "duration": 3.13}, {"text": "doing memoized calls\nof Fibonacci of k,", "start": 1006.09, "duration": 1.99}, {"text": "and those cost constant time.", "start": 1008.08, "duration": 3.54}, {"text": "So the memoized calls\ncost constant time.", "start": 1011.62, "duration": 8.2}, {"text": "So we can think of\nthem as basically free.", "start": 1019.82, "duration": 3.3}, {"text": "That's when you call\nFibonacci of n minus 2,", "start": 1023.12, "duration": 3.09}, {"text": "because that's a\nmemoized call, you really", "start": 1026.21, "duration": 3.0}, {"text": "don't pay anything for it.", "start": 1029.21, "duration": 1.78}, {"text": "I mean, you're already\npaying constant time", "start": 1030.99, "duration": 1.791}, {"text": "to do addition and whatever.", "start": 1032.781, "duration": 1.469}, {"text": "So you don't have to\nworry about the time.", "start": 1034.25, "duration": 1.839}, {"text": "There's no recursion here.", "start": 1036.089, "duration": 2.811}, {"text": "And then what we care\nabout is that the number", "start": 1038.9, "duration": 2.77}, {"text": "of non-memorized calls,\nwhich is the first time you", "start": 1041.67, "duration": 5.28}, {"text": "call Fibonacci of k, is n.", "start": 1046.95, "duration": 6.975}, {"text": "No theta is even necessary.", "start": 1053.925, "duration": 1.715}, {"text": "We are going to\ncall Fibonacci of 1.", "start": 1055.64, "duration": 3.35}, {"text": "At some point we're going\nto call Fibonacci of 2", "start": 1058.99, "duration": 2.87}, {"text": "at some point, and the original\ncall is Fibonacci of n.", "start": 1061.86, "duration": 4.179}, {"text": "All of those things will\nbe called at some point.", "start": 1066.039, "duration": 2.041}, {"text": "That's pretty easy to see.", "start": 1068.08, "duration": 1.57}, {"text": "But in particular,\ncertainly at most this,", "start": 1069.65, "duration": 2.4}, {"text": "we never call\nFibonacci of n plus 1", "start": 1072.05, "duration": 1.85}, {"text": "to compute Fibonacci of n.", "start": 1073.9, "duration": 1.92}, {"text": "So it's at most n calls.", "start": 1075.82, "duration": 1.64}, {"text": "Indeed it will be exactly n\ncalls that are not memoized.", "start": 1077.46, "duration": 3.42}, {"text": "Those ones we have to pay for.", "start": 1080.88, "duration": 1.25}, {"text": "How much do we have to pay?", "start": 1082.13, "duration": 1.52}, {"text": "Well, if you don't count\nthe recursion-- which", "start": 1083.65, "duration": 3.96}, {"text": "is what this recurrence\ndoes-- if you ignore", "start": 1087.61, "duration": 2.23}, {"text": "recursion then the total amount\nof work done here is constant.", "start": 1089.84, "duration": 3.395}, {"text": "So I will say the non-recursive\nwork per call is constant.", "start": 1096.11, "duration": 14.52}, {"text": "And therefore I claim\nthat the running time is", "start": 1110.63, "duration": 3.38}, {"text": "constant-- I'm sorry, is linear.", "start": 1114.01, "duration": 3.86}, {"text": "Constant would be\npretty amazing.", "start": 1117.87, "duration": 3.52}, {"text": "This is actually not the\nbest algorithm-- as an aside.", "start": 1121.39, "duration": 2.92}, {"text": "The best algorithm for computing\nthe nth Fibonacci number", "start": 1124.31, "duration": 2.41}, {"text": "uses log n arithmetic\noperations.", "start": 1126.72, "duration": 3.579}, {"text": "So you can do better,\nbut if you want", "start": 1130.299, "duration": 1.541}, {"text": "to see that you\nshould take 6046.", "start": 1131.84, "duration": 3.59}, {"text": "OK.", "start": 1135.43, "duration": 0.52}, {"text": "We're just going to get\nto linear today, which", "start": 1135.95, "duration": 1.916}, {"text": "is a lot better\nthan exponential.", "start": 1137.866, "duration": 3.564}, {"text": "So why linear?", "start": 1141.43, "duration": 2.46}, {"text": "Because there's n non-memoize\ncalls, and each of them", "start": 1143.89, "duration": 3.81}, {"text": "cost constant.", "start": 1147.7, "duration": 0.99}, {"text": "So it's the product\nof those two numbers.", "start": 1148.69, "duration": 3.64}, {"text": "This is an important idea.", "start": 1152.33, "duration": 2.49}, {"text": "And it's so important\nI'm going to write it", "start": 1154.82, "duration": 3.5}, {"text": "down again in a slightly\nmore general framework.", "start": 1158.32, "duration": 6.76}, {"text": "In general, in\ndynamic programming--", "start": 1165.08, "duration": 12.32}, {"text": "I didn't say why it's\ncalled memoization.", "start": 1177.4, "duration": 3.14}, {"text": "The idea is you have\nthis memo pad where", "start": 1180.54, "duration": 1.823}, {"text": "you write down all\nyour scratch work.", "start": 1182.363, "duration": 2.447}, {"text": "That's this memo dictionary.", "start": 1184.81, "duration": 1.685}, {"text": "And to memoize is to write\ndown on your memo pad.", "start": 1186.495, "duration": 2.895}, {"text": "I didn't make it up.", "start": 1189.39, "duration": 1.14}, {"text": "Another crazy term.", "start": 1190.53, "duration": 2.1}, {"text": "It means remember.", "start": 1192.63, "duration": 2.82}, {"text": "And then you remember all the\nsolutions that you've done.", "start": 1195.45, "duration": 4.16}, {"text": "And then you reuse\nthose solutions.", "start": 1199.61, "duration": 2.77}, {"text": "Now these solutions are\nnot really a solution", "start": 1202.38, "duration": 2.08}, {"text": "to the problem\nthat I care about.", "start": 1204.46, "duration": 2.01}, {"text": "The problem I care about is\ncomputing the nth Fibonacci", "start": 1206.47, "duration": 2.5}, {"text": "number.", "start": 1208.97, "duration": 0.88}, {"text": "To get there I had to compute\nother Fibonacci numbers.", "start": 1209.85, "duration": 3.38}, {"text": "Why?", "start": 1213.23, "duration": 1.83}, {"text": "Because I had a\nrecursive formulation.", "start": 1215.06, "duration": 1.67}, {"text": "This is not always the\nway to solve a problem.", "start": 1216.73, "duration": 2.49}, {"text": "But usually when you're\nsolving something", "start": 1219.22, "duration": 3.33}, {"text": "you can split it into parts,\ninto subproblems, we call them.", "start": 1222.55, "duration": 5.48}, {"text": "They're not always\nof the same flavor", "start": 1228.03, "duration": 1.67}, {"text": "as your original goal\nproblem, but there's", "start": 1229.7, "duration": 1.75}, {"text": "some kind of related parts.", "start": 1231.45, "duration": 2.84}, {"text": "And this is the big challenge\nin designing a dynamic program,", "start": 1234.29, "duration": 3.75}, {"text": "is to figure out what\nare the subproblems.", "start": 1238.04, "duration": 3.37}, {"text": "Let's say, the\nfirst thing I want", "start": 1241.41, "duration": 1.67}, {"text": "to know about a dynamic program,\nis what are the subproblems.", "start": 1243.08, "duration": 2.541}, {"text": "Somehow they are designed to\nhelp solve your actual problem.", "start": 1247.61, "duration": 4.03}, {"text": "And the idea of memoization is,\nonce you solve a subproblem,", "start": 1258.65, "duration": 3.0}, {"text": "write down the answer.", "start": 1261.65, "duration": 1.0}, {"text": "If you ever need to solve\nthat same problem again", "start": 1262.65, "duration": 2.7}, {"text": "you reuse the answer.", "start": 1265.35, "duration": 2.05}, {"text": "So that is the core idea.", "start": 1267.4, "duration": 1.734}, {"text": "And so in this sense\ndynamic programming", "start": 1269.134, "duration": 1.666}, {"text": "is essentially recursion\nplus memoization.", "start": 1270.8, "duration": 5.225}, {"text": "And so in this case these\nare the subproblems.", "start": 1283.49, "duration": 3.96}, {"text": "Fibonacci of 1 through\nFibonacci of n.", "start": 1287.45, "duration": 2.5}, {"text": "The one we care about\nis Fibonacci of n.", "start": 1289.95, "duration": 1.727}, {"text": "But to get there we solve\nthese other subproblems.", "start": 1291.677, "duration": 2.083}, {"text": "In all cases, if this\nis the situation-- so", "start": 1296.29, "duration": 3.89}, {"text": "for any dynamic program,\nthe running time", "start": 1300.18, "duration": 3.1}, {"text": "is going to be equal to the\nnumber of different subproblems", "start": 1303.28, "duration": 3.28}, {"text": "you might have to solve,\nor that you do solve,", "start": 1306.56, "duration": 4.03}, {"text": "times the amount of time\nyou spend per subproblem.", "start": 1310.59, "duration": 3.89}, {"text": "OK.", "start": 1320.95, "duration": 0.5}, {"text": "In this situation we\nhad n subproblems.", "start": 1321.45, "duration": 5.51}, {"text": "And for each of them\nwe spent constant time.", "start": 1326.96, "duration": 3.94}, {"text": "And when I measure the\ntime per subproblem", "start": 1330.9, "duration": 2.68}, {"text": "which, in the Fibonacci\ncase I claim is constant,", "start": 1333.58, "duration": 2.31}, {"text": "I ignore recursive calls.", "start": 1335.89, "duration": 2.9}, {"text": "That's the key.", "start": 1338.79, "duration": 1.124}, {"text": "We don't have to\nsolve recurrences", "start": 1339.914, "duration": 1.416}, {"text": "with dynamic programming.", "start": 1341.33, "duration": 1.3}, {"text": "Yay.", "start": 1342.63, "duration": 0.725}, {"text": "No recurrences necessary.", "start": 1343.355, "duration": 1.895}, {"text": "OK.", "start": 1345.25, "duration": 0.5}, {"text": "Don't count recursions.", "start": 1345.75, "duration": 4.09}, {"text": "Obviously, don't count\nmemoized recursions.", "start": 1354.28, "duration": 2.52}, {"text": "The reason is, I only\nneed to count them once.", "start": 1356.8, "duration": 2.95}, {"text": "After the first time\nI do it, it's free.", "start": 1359.75, "duration": 2.79}, {"text": "So I count how many different\nsubproblems do I need to do?", "start": 1362.54, "duration": 3.295}, {"text": "These are they going to be\nthe expensive recursions where", "start": 1365.835, "duration": 2.375}, {"text": "I do work, I do\nsome amount of work,", "start": 1368.21, "duration": 1.6}, {"text": "but I don't count the\nrecursions because otherwise I'd", "start": 1369.81, "duration": 2.25}, {"text": "be double counting.", "start": 1372.06, "duration": 1.54}, {"text": "I only want to count\neach subproblem once,", "start": 1373.6, "duration": 3.33}, {"text": "and then this will solve it.", "start": 1376.93, "duration": 2.08}, {"text": "So a simple idea.", "start": 1379.01, "duration": 1.83}, {"text": "In general, dynamic programming\nis a super simple idea.", "start": 1380.84, "duration": 3.02}, {"text": "It's nothing fancy.", "start": 1383.86, "duration": 1.53}, {"text": "It's basically just memoization.", "start": 1385.39, "duration": 2.05}, {"text": "There is one extra trick\nwe're going to pull out,", "start": 1387.44, "duration": 3.29}, {"text": "but that's the idea.", "start": 1390.73, "duration": 2.04}, {"text": "All right.", "start": 1392.77, "duration": 1.34}, {"text": "Let me tell you\nanother perspective.", "start": 1394.11, "duration": 9.9}, {"text": "This is the one maybe\nmost commonly taught.", "start": 1404.01, "duration": 4.04}, {"text": "Is to think of-- but I'm\nnot a particular fan of it.", "start": 1408.05, "duration": 3.21}, {"text": "I really like memoization.", "start": 1411.26, "duration": 1.21}, {"text": "I think it's a simple idea.", "start": 1412.47, "duration": 2.77}, {"text": "And as long as you\nremember this formula here,", "start": 1415.24, "duration": 3.26}, {"text": "it's really easy to work with.", "start": 1418.5, "duration": 1.4}, {"text": "But some people like to\nthink of it this way.", "start": 1423.24, "duration": 2.32}, {"text": "And so you can pick whichever\nway you find most intuitive.", "start": 1425.56, "duration": 3.755}, {"text": "Instead of thinking of a\nrecursive algorithm, which", "start": 1429.315, "duration": 2.125}, {"text": "in some sense starts at the\ntop of what you want to solve", "start": 1431.44, "duration": 4.5}, {"text": "and works its way down,\nyou could do the reverse.", "start": 1435.94, "duration": 2.72}, {"text": "You could start at the\nbottom and work your way up.", "start": 1438.66, "duration": 2.169}, {"text": "And this is probably\nhow you normally", "start": 1440.829, "duration": 1.541}, {"text": "think about computing\nFibonacci numbers", "start": 1442.37, "duration": 1.624}, {"text": "or how you learned it before.", "start": 1443.994, "duration": 1.76}, {"text": "I'm going to write it\nin a slightly funny way.", "start": 1445.754, "duration": 1.916}, {"text": "The point I want to make\nis that the transformation", "start": 1471.655, "duration": 2.125}, {"text": "I'm doing from the naive\nrecursive algorithm,", "start": 1473.78, "duration": 5.06}, {"text": "to the memoized algorithm,\nto the bottom-up algorithm", "start": 1478.84, "duration": 3.24}, {"text": "is completely automated.", "start": 1482.08, "duration": 1.95}, {"text": "I'm not thinking,\nI'm just doing.", "start": 1484.03, "duration": 2.62}, {"text": "OK.", "start": 1486.65, "duration": 0.82}, {"text": "It's easy.", "start": 1487.47, "duration": 2.03}, {"text": "This code is exactly\nthe same as this code", "start": 1489.5, "duration": 2.97}, {"text": "and as that code, except\nI replaced n by k.", "start": 1492.47, "duration": 4.12}, {"text": "Just because I needed a couple\nof different n values here.", "start": 1496.59, "duration": 3.26}, {"text": "Or I want to iterate\nover n values.", "start": 1499.85, "duration": 1.53}, {"text": "And then there's this\nstuff around that code", "start": 1504.11, "duration": 2.38}, {"text": "which is just formulaic.", "start": 1506.49, "duration": 1.2}, {"text": "A little bit of thought\ngoes into this for loop,", "start": 1511.0, "duration": 2.46}, {"text": "but that's it.", "start": 1513.46, "duration": 1.7}, {"text": "OK.", "start": 1515.16, "duration": 0.5}, {"text": "This does exactly the same\nthing as the memoized algorithm.", "start": 1515.66, "duration": 3.45}, {"text": "Maybe it takes a\nlittle bit of thinking", "start": 1522.525, "duration": 1.625}, {"text": "to realize, if you unroll all\nthe recursion that's happening", "start": 1524.15, "duration": 2.69}, {"text": "here and just write\nit out sequentially,", "start": 1526.84, "duration": 2.51}, {"text": "this is exactly\nwhat's happening.", "start": 1529.35, "duration": 2.48}, {"text": "This code does exactly the\nsame additions, exactly", "start": 1531.83, "duration": 2.75}, {"text": "the same computations as this.", "start": 1534.58, "duration": 2.44}, {"text": "The only difference\nis how you get there.", "start": 1537.02, "duration": 2.67}, {"text": "Here we're using a loop,\nhere we're using recursion.", "start": 1539.69, "duration": 2.62}, {"text": "But the same things\nhappen in the same order.", "start": 1542.31, "duration": 3.249}, {"text": "It's really no difference\nbetween the code.", "start": 1545.559, "duration": 1.791}, {"text": "This code's probably going\nto be more efficient practice", "start": 1547.35, "duration": 2.333}, {"text": "because you don't make\nfunction calls so much.", "start": 1549.683, "duration": 3.297}, {"text": "In fact I made a\nlittle mistake here.", "start": 1552.98, "duration": 2.86}, {"text": "This is not a\nfunction call, it's", "start": 1555.84, "duration": 1.4}, {"text": "just a lookup into a table.", "start": 1557.24, "duration": 2.23}, {"text": "Here I'm using a hash\ntable to be simple,", "start": 1559.47, "duration": 1.71}, {"text": "but of course you\ncould use an array.", "start": 1561.18, "duration": 1.541}, {"text": "But they're both constant\ntime with good hashing.", "start": 1565.92, "duration": 4.41}, {"text": "All right.", "start": 1570.33, "duration": 0.5}, {"text": "So is it clear\nwhat this is doing?", "start": 1570.83, "duration": 1.55}, {"text": "I think so.", "start": 1572.38, "duration": 1.2}, {"text": "I think I made a little typo.", "start": 1573.58, "duration": 2.83}, {"text": "So we have to compute--\noh, another typo.", "start": 1576.41, "duration": 5.22}, {"text": "We have to compute f1 up to\nfn, which in python is that.", "start": 1581.63, "duration": 5.38}, {"text": "And we compute it\nexactly how we used to.", "start": 1587.01, "duration": 4.85}, {"text": "Except now, instead\nof recursing,", "start": 1591.86, "duration": 2.16}, {"text": "I know that when I'm computing\nthe k Fibonacci number-- man.", "start": 1594.02, "duration": 4.15}, {"text": "So many typos.", "start": 1598.17, "duration": 0.965}, {"text": "AUDIENCE: [LAUGHTER]", "start": 1599.135, "duration": 1.369}, {"text": "PROFESSOR: You\nguys are laughing.", "start": 1600.504, "duration": 2.416}, {"text": "When I compute the\nkth Fibonacci number", "start": 1602.92, "duration": 2.31}, {"text": "I know that I've already\ncomputed the previous two.", "start": 1605.23, "duration": 3.0}, {"text": "Why?", "start": 1608.23, "duration": 0.5}, {"text": "Because I'm doing them\nin increasing order.", "start": 1608.73, "duration": 1.82}, {"text": "Nothing fancy.", "start": 1610.55, "duration": 2.07}, {"text": "Then I can just do\nthis and the solutions", "start": 1612.62, "duration": 2.61}, {"text": "will just be waiting there.", "start": 1615.23, "duration": 1.52}, {"text": "If they work, I'd\nget a key error.", "start": 1616.75, "duration": 1.7}, {"text": "So I'd know that there's a bug.", "start": 1618.45, "duration": 1.67}, {"text": "But in fact, I won't\nget a key error.", "start": 1620.12, "duration": 1.55}, {"text": "I will have always computed\nthese things already.", "start": 1621.67, "duration": 3.42}, {"text": "Then I store it in my table.", "start": 1625.09, "duration": 1.52}, {"text": "Then I iterate.", "start": 1626.61, "duration": 0.68}, {"text": "Eventually I've solved all the\nsubproblems, f1 through fn.", "start": 1627.29, "duration": 3.96}, {"text": "And the one I cared\nabout was the nth one.", "start": 1631.25, "duration": 2.89}, {"text": "OK.", "start": 1634.14, "duration": 0.5}, {"text": "So straightforward.", "start": 1634.64, "duration": 2.85}, {"text": "I do this because\nI don't really want", "start": 1637.49, "duration": 1.942}, {"text": "to have to go through\nthis transformation", "start": 1639.432, "duration": 1.708}, {"text": "for every single problem we do.", "start": 1641.14, "duration": 1.73}, {"text": "I'm doing it in Fibonacci\nbecause it's super easy", "start": 1642.87, "duration": 2.28}, {"text": "to write the code\nout explicitly.", "start": 1645.15, "duration": 1.93}, {"text": "But you can do it for all\nof the dynamic programs", "start": 1647.08, "duration": 2.12}, {"text": "that we cover in the\nnext four lectures.", "start": 1649.2, "duration": 3.93}, {"text": "OK.", "start": 1653.13, "duration": 0.5}, {"text": "I'm going to give you\nnow the general case.", "start": 1653.63, "duration": 2.18}, {"text": "This was the special\nFibonacci version.", "start": 1655.81, "duration": 3.45}, {"text": "In general, the bottom-up does\nexactly the same computation", "start": 1659.26, "duration": 4.97}, {"text": "as the memoized version.", "start": 1664.23, "duration": 1.335}, {"text": "And what we're doing is\nactually a topological sort", "start": 1671.27, "duration": 8.65}, {"text": "of the subproblem\ndependency DAG.", "start": 1679.92, "duration": 5.275}, {"text": "So in this case, the\ndependency DAG is very simple.", "start": 1693.84, "duration": 3.4}, {"text": "In order to compute--\nI'll do it backwards.", "start": 1697.24, "duration": 4.09}, {"text": "In order to compute fn,\nI need to know fn minus 1", "start": 1701.33, "duration": 5.12}, {"text": "and fn minus 2.", "start": 1706.45, "duration": 2.37}, {"text": "If I know those\nI can compute fn.", "start": 1708.82, "duration": 3.27}, {"text": "Then there's fn\nminus 3, which is", "start": 1712.09, "duration": 2.99}, {"text": "necessary to compute this\none, and that one, and so on.", "start": 1715.08, "duration": 3.37}, {"text": "So you see what\nthis DAG looks like.", "start": 1718.45, "duration": 2.02}, {"text": "Now, I've drawn\nit conveniently so", "start": 1720.47, "duration": 1.69}, {"text": "all the edges go left to right.", "start": 1722.16, "duration": 1.35}, {"text": "So this is a topological\norder from left to right.", "start": 1723.51, "duration": 2.91}, {"text": "And so I just need to do\nf1, f2, up to fn in order.", "start": 1726.42, "duration": 4.34}, {"text": "Usually it's totally\nobvious what order", "start": 1730.76, "duration": 3.09}, {"text": "to solve the subproblems in.", "start": 1733.85, "duration": 1.71}, {"text": "But in general, what\nyou should have in mind", "start": 1735.56, "duration": 2.76}, {"text": "is that we are doing\na topological sort.", "start": 1738.32, "duration": 2.11}, {"text": "Here we just did it in our\nheads because it's so easy.", "start": 1740.43, "duration": 2.64}, {"text": "And usually it's so easy.", "start": 1743.07, "duration": 1.15}, {"text": "It's just a for loop.", "start": 1744.22, "duration": 1.26}, {"text": "Nothing fancy.", "start": 1745.48, "duration": 0.95}, {"text": "All right.", "start": 1749.9, "duration": 0.6}, {"text": "I'm missing an arrow.", "start": 1753.404, "duration": 1.046}, {"text": "All right.", "start": 1760.03, "duration": 2.524}, {"text": "Let's do something a little\nmore interesting, shall we?", "start": 1762.554, "duration": 2.291}, {"text": "All right.", "start": 1777.971, "duration": 0.499}, {"text": "One thing you can do from\nthis bottom-up perspective", "start": 1778.47, "duration": 3.3}, {"text": "is you can save space.", "start": 1781.77, "duration": 1.005}, {"text": "Storage space in the algorithm.", "start": 1786.31, "duration": 2.262}, {"text": "We don't usually worry\nabout space in this class,", "start": 1788.572, "duration": 2.538}, {"text": "but it matters in reality.", "start": 1791.11, "duration": 4.8}, {"text": "So here we're\nbuilding a table size,", "start": 1795.91, "duration": 1.59}, {"text": "n, but in fact we\nreally only need", "start": 1797.5, "duration": 2.33}, {"text": "to remember the last two values.", "start": 1799.83, "duration": 2.45}, {"text": "So you could just store\nthe last two values,", "start": 1802.28, "duration": 1.91}, {"text": "and each time you make a\nnew one delete the oldest.", "start": 1804.19, "duration": 3.43}, {"text": "so by thinking a\nlittle bit here you", "start": 1807.62, "duration": 2.48}, {"text": "realize you only\nneed constant space.", "start": 1810.1, "duration": 2.37}, {"text": "Still linear time,\nbut constant space.", "start": 1812.47, "duration": 3.32}, {"text": "And that's often the case.", "start": 1815.79, "duration": 1.654}, {"text": "From the bottom-up\nperspective you", "start": 1817.444, "duration": 1.416}, {"text": "see what you really\nneed to store,", "start": 1818.86, "duration": 1.839}, {"text": "what you need to keep track of.", "start": 1820.699, "duration": 1.291}, {"text": "All right.", "start": 1824.83, "duration": 1.529}, {"text": "I guess another nice thing\nabout this perspective", "start": 1826.359, "duration": 2.041}, {"text": "is, the running time\nis totally obvious.", "start": 1828.4, "duration": 2.31}, {"text": "This is clearly constant time.", "start": 1830.71, "duration": 1.72}, {"text": "So this is clearly linear time.", "start": 1832.43, "duration": 2.3}, {"text": "Whereas, in this\nmemoized algorithm", "start": 1834.73, "duration": 2.3}, {"text": "you have to think\nabout, when's it", "start": 1837.03, "duration": 3.08}, {"text": "going to be memoized,\nwhen is it not?", "start": 1840.11, "duration": 2.04}, {"text": "I still like this perspective\nbecause, with this rule,", "start": 1842.15, "duration": 2.829}, {"text": "just multiply a\nnumber of subproblems", "start": 1844.979, "duration": 1.541}, {"text": "by time per subproblem,\nyou get the answer.", "start": 1846.52, "duration": 2.59}, {"text": "But it's a little less\nobvious than code like this.", "start": 1849.11, "duration": 5.19}, {"text": "So choose however you\nlike to think about it.", "start": 1854.3, "duration": 2.76}, {"text": "All right.", "start": 1860.34, "duration": 0.5}, {"text": "We move onto shortest paths.", "start": 1860.84, "duration": 1.86}, {"text": "So I'm again, as usual, thinking\nabout single-source shortest", "start": 1888.89, "duration": 3.42}, {"text": "paths.", "start": 1892.31, "duration": 1.67}, {"text": "So we want to compute the\nshortest pathway from s", "start": 1893.98, "duration": 3.06}, {"text": "to v for all v. OK.", "start": 1897.04, "duration": 4.51}, {"text": "I'd like to write this initially\nas a naive recursive algorithm,", "start": 1901.55, "duration": 4.49}, {"text": "which I can then memoize,\nwhich I can then bottom-upify.", "start": 1906.04, "duration": 3.86}, {"text": "I just made that up.", "start": 1909.9, "duration": 3.14}, {"text": "So how could I write this as\na naive recursive algorithm?", "start": 1913.04, "duration": 4.04}, {"text": "It's not so obvious.", "start": 1917.08, "duration": 2.63}, {"text": "But first I'm going to tell you\nhow, just as an oracle tells", "start": 1919.71, "duration": 7.14}, {"text": "you, here's what you should do.", "start": 1926.85, "duration": 1.62}, {"text": "But then we're going to think\nabout-- go back, step back.", "start": 1928.47, "duration": 2.48}, {"text": "Actually, it's up to you.", "start": 1930.95, "duration": 1.042}, {"text": "I could tell you\nthe answer and then", "start": 1931.992, "duration": 1.499}, {"text": "we could figure out\nhow we got there,", "start": 1933.491, "duration": 1.579}, {"text": "or we could just\nfigure out the answer.", "start": 1935.07, "duration": 3.311}, {"text": "Preferences?", "start": 1938.381, "duration": 0.499}, {"text": "Figure it out.", "start": 1942.35, "duration": 0.584}, {"text": "All right.", "start": 1942.934, "duration": 0.499}, {"text": "Good.", "start": 1943.433, "duration": 0.617}, {"text": "No divine inspiration allowed.", "start": 1944.05, "duration": 2.09}, {"text": "So let me give you a tool.", "start": 1946.14, "duration": 11.444}, {"text": "The tool is guessing.", "start": 1957.584, "duration": 1.176}, {"text": "This may sound silly, but\nit's a very powerful tool.", "start": 1962.66, "duration": 3.22}, {"text": "The general idea is, suppose\nyou don't know something", "start": 1968.5, "duration": 2.82}, {"text": "but you'd like to know it.", "start": 1971.32, "duration": 2.04}, {"text": "So what's the answer\nto this question?", "start": 1973.36, "duration": 1.99}, {"text": "I don't know.", "start": 1975.35, "duration": 1.28}, {"text": "Man, I really want a cushion.", "start": 1976.63, "duration": 1.23}, {"text": "How am I going to\nanswer the question?", "start": 1977.86, "duration": 1.79}, {"text": "Guess.", "start": 1979.65, "duration": 0.79}, {"text": "OK?", "start": 1980.44, "duration": 0.5}, {"text": "AUDIENCE: [LAUGHTER]", "start": 1980.94, "duration": 1.59}, {"text": "PROFESSOR: It's a\ntried and tested method", "start": 1982.53, "duration": 1.78}, {"text": "for solving any problem.", "start": 1984.31, "duration": 1.18}, {"text": "I'm kind of belaboring\nthe point here.", "start": 1996.92, "duration": 2.8}, {"text": "The algorithmic concept is,\ndon't just try any guess.", "start": 1999.72, "duration": 3.89}, {"text": "Try them all.", "start": 2003.61, "duration": 2.35}, {"text": "OK?", "start": 2005.96, "duration": 0.787}, {"text": "AUDIENCE: [LAUGHTER]", "start": 2006.747, "duration": 2.743}, {"text": "PROFESSOR: Also pretty simple.", "start": 2009.49, "duration": 1.32}, {"text": "I said dynamic\nprogramming was simple.", "start": 2010.81, "duration": 2.071}, {"text": "OK.", "start": 2012.881, "duration": 0.499}, {"text": "Try all guesses.", "start": 2018.4, "duration": 4.63}, {"text": "This is central to the\ndynamic programming.", "start": 2023.03, "duration": 2.4}, {"text": "I know it sounds obvious, but if\nI want to fix my equation here,", "start": 2025.43, "duration": 7.04}, {"text": "dynamic programming is roughly\nrecursion plus memoization.", "start": 2032.47, "duration": 5.79}, {"text": "This should really\nbe, plus guessing.", "start": 2038.26, "duration": 3.54}, {"text": "Memoization, which is obvious,\nguessing which is obvious,", "start": 2041.8, "duration": 4.54}, {"text": "are the central concepts\nto dynamic programming.", "start": 2046.34, "duration": 2.588}, {"text": "I'm trying to make it sound\neasy because usually people", "start": 2048.928, "duration": 2.291}, {"text": "have trouble with\ndynamic programming.", "start": 2051.219, "duration": 1.583}, {"text": "It is easy.", "start": 2052.802, "duration": 2.508}, {"text": "Try all the guesses.", "start": 2055.31, "duration": 1.482}, {"text": "That's something a\ncomputer can do great.", "start": 2056.792, "duration": 1.708}, {"text": "This is the brute force part.", "start": 2058.5, "duration": 1.611}, {"text": "OK.", "start": 2060.111, "duration": 0.499}, {"text": "But we're going to\ndo it carefully.", "start": 2060.61, "duration": 3.08}, {"text": "Not that carefully.", "start": 2063.69, "duration": 0.999}, {"text": "I mean, we're just\ntrying all the guesses.", "start": 2064.689, "duration": 2.001}, {"text": "Take the best one.", "start": 2066.69, "duration": 0.9}, {"text": "That's kind of important\nthat we can choose one", "start": 2073.96, "duration": 2.02}, {"text": "to be called best.", "start": 2075.98, "duration": 0.884}, {"text": "That's why dynamic\nprogramming is", "start": 2076.864, "duration": 1.375}, {"text": "good for optimization problems.", "start": 2078.239, "duration": 1.371}, {"text": "You want to maximize\nsomething, minimize something,", "start": 2079.61, "duration": 2.5}, {"text": "you try them all and then you\ncan forget about all of them", "start": 2082.11, "duration": 3.02}, {"text": "and just reduce it\ndown to one thing which", "start": 2085.13, "duration": 1.89}, {"text": "is the best one, or a best one.", "start": 2087.02, "duration": 3.87}, {"text": "OK.", "start": 2090.89, "duration": 0.499}, {"text": "So now I want you\nto try to apply", "start": 2091.389, "duration": 2.441}, {"text": "this principle to\nshortest paths.", "start": 2093.83, "duration": 2.809}, {"text": "Now I'm going to draw a\npicture which may help.", "start": 2096.639, "duration": 2.741}, {"text": "We have the source, s,\nwe have some vertex,", "start": 2099.38, "duration": 9.41}, {"text": "v. We'd like to\nfind the shortest--", "start": 2108.79, "duration": 2.58}, {"text": "a shortest path from s to v.", "start": 2111.37, "duration": 2.5}, {"text": "Suppose I want to know\nwhat this shortest path is.", "start": 2113.87, "duration": 2.38}, {"text": "Suppose this was it.", "start": 2116.25, "duration": 1.842}, {"text": "You have an idea already?", "start": 2118.092, "duration": 1.698}, {"text": "Yeah.", "start": 2119.79, "duration": 1.455}, {"text": "AUDIENCE: What you could do is\nyou could look at everywhere", "start": 2121.245, "duration": 6.305}, {"text": "you can go from s.", "start": 2127.55, "duration": 1.94}, {"text": "[INAUDIBLE] shortest path\nof each of those notes.", "start": 2129.49, "duration": 3.584}, {"text": "PROFESSOR: Good.", "start": 2133.074, "duration": 0.666}, {"text": "So I can look at all the\nplaces I could go from s,", "start": 2133.74, "duration": 4.18}, {"text": "and then look at the shortest\npaths from there to v.", "start": 2137.92, "duration": 3.87}, {"text": "So we could call this s prime.", "start": 2141.79, "duration": 3.81}, {"text": "So here's the idea.", "start": 2145.6, "duration": 1.13}, {"text": "There's some hypothetical\nshortest path.", "start": 2146.73, "duration": 3.99}, {"text": "I don't know where\nit goes first,", "start": 2150.72, "duration": 2.74}, {"text": "so I will guess\nwhere it goes first.", "start": 2153.46, "duration": 2.62}, {"text": "I know the first\nedge must be one", "start": 2156.08, "duration": 2.72}, {"text": "of the outgoing edges from s.", "start": 2158.8, "duration": 1.29}, {"text": "I don't know which one.", "start": 2160.09, "duration": 1.01}, {"text": "Try them all.", "start": 2161.1, "duration": 2.11}, {"text": "Very simple idea.", "start": 2163.21, "duration": 1.269}, {"text": "Then from each of\nthose, if somehow I", "start": 2164.479, "duration": 1.541}, {"text": "can compute the shortest\npath from there to v,", "start": 2166.02, "duration": 4.57}, {"text": "just do that and\ntake the best choice", "start": 2170.59, "duration": 3.15}, {"text": "for what that first edge was.", "start": 2173.74, "duration": 1.91}, {"text": "So this would be the\nguess first edge approach.", "start": 2175.65, "duration": 3.02}, {"text": "It's a very good idea.", "start": 2182.34, "duration": 1.35}, {"text": "Not quite the one I wanted\nbecause unfortunately", "start": 2183.69, "duration": 4.78}, {"text": "that changes s.", "start": 2188.47, "duration": 2.119}, {"text": "And so this would\nwork, it would just", "start": 2190.589, "duration": 1.541}, {"text": "be slightly less\nefficient if I'm", "start": 2192.13, "duration": 1.374}, {"text": "solving single-source\nshortest paths.", "start": 2193.504, "duration": 2.586}, {"text": "So I'm going to tweak\nthat idea slightly", "start": 2196.09, "duration": 1.92}, {"text": "by guessing the last edge\ninstead of the first edge.", "start": 2198.01, "duration": 2.3}, {"text": "They're really equivalent.", "start": 2200.31, "duration": 1.652}, {"text": "If I was doing this\nI'd essentially", "start": 2201.962, "duration": 1.458}, {"text": "be solving a single-target\nshortest paths,", "start": 2203.42, "duration": 3.06}, {"text": "which we talked about before.", "start": 2206.48, "duration": 3.34}, {"text": "So I'm going to draw\nthe same picture.", "start": 2209.82, "duration": 1.825}, {"text": "I want to get to v. I'm\ngoing to guess the last edge,", "start": 2216.51, "duration": 2.92}, {"text": "call it uv.", "start": 2219.43, "duration": 2.13}, {"text": "I know it's one of the incoming\nedges to v-- unless s equals v,", "start": 2221.56, "duration": 4.7}, {"text": "then there's a special case.", "start": 2226.26, "duration": 1.52}, {"text": "As long as this path has\nlength of at least 1,", "start": 2227.78, "duration": 2.13}, {"text": "there's some last edge.", "start": 2229.91, "duration": 1.38}, {"text": "What is it?", "start": 2231.29, "duration": 0.75}, {"text": "I don't know.", "start": 2232.04, "duration": 0.8}, {"text": "Guess.", "start": 2232.84, "duration": 1.23}, {"text": "Guess all the possible\nincoming edges to v, and then", "start": 2234.07, "duration": 4.94}, {"text": "recursively compute the\nshortest path from s to u.", "start": 2239.01, "duration": 4.12}, {"text": "And then add on the edge v.", "start": 2243.13, "duration": 2.741}, {"text": "OK.", "start": 2245.871, "duration": 0.499}, {"text": "So what is this shortest path?", "start": 2246.37, "duration": 1.38}, {"text": "It's delta of s comma\nu, which looks the same.", "start": 2247.75, "duration": 4.41}, {"text": "It's another subproblem\nthat I want to solve.", "start": 2252.16, "duration": 2.75}, {"text": "There's v subproblems\nhere I care about. .", "start": 2254.91, "duration": 2.87}, {"text": "So that's good.", "start": 2257.78, "duration": 0.88}, {"text": "I take that.", "start": 2258.66, "duration": 1.12}, {"text": "I add on the weight\nof the edge uv.", "start": 2259.78, "duration": 2.025}, {"text": "And that should hopefully\ngive me delta of s comma v.", "start": 2264.8, "duration": 5.22}, {"text": "Well, if I was lucky and I\nguessed the right choice of u.", "start": 2270.02, "duration": 3.44}, {"text": "In reality, I'm not lucky.", "start": 2273.46, "duration": 2.03}, {"text": "So I have to minimize\nover all edges uv.", "start": 2275.49, "duration": 7.3}, {"text": "So this is the--\nwe're minimizing", "start": 2282.79, "duration": 2.58}, {"text": "over the choice of u.", "start": 2285.37, "duration": 1.21}, {"text": "V is already given here.", "start": 2286.58, "duration": 1.84}, {"text": "So I take the minimum over\nall edges of the shortest", "start": 2288.42, "duration": 3.71}, {"text": "path from s to u, plus\nthe weight of the edge uv.", "start": 2292.13, "duration": 5.194}, {"text": "That should give me the shortest\npath because this gave me", "start": 2297.324, "duration": 2.416}, {"text": "the shortest path from s to u.", "start": 2299.74, "duration": 1.84}, {"text": "Then I added on the edge\nI need to get there.", "start": 2301.58, "duration": 2.53}, {"text": "And wherever the shortest path\nis, it uses some last edge, uv.", "start": 2304.11, "duration": 6.01}, {"text": "There's got to be some choice\nof u that is the right one.", "start": 2310.12, "duration": 2.53}, {"text": "That's the good guess\nthat we're hoping for.", "start": 2312.65, "duration": 2.595}, {"text": "We don't know what\nthe good guess", "start": 2315.245, "duration": 1.375}, {"text": "is so we just try them all.", "start": 2316.62, "duration": 2.03}, {"text": "But whatever it is, this will\nbe the weight of that path.", "start": 2318.65, "duration": 4.615}, {"text": "It's going to take\nthe best path from s", "start": 2323.265, "duration": 1.625}, {"text": "to u because sub\npaths are shortest", "start": 2324.89, "duration": 1.76}, {"text": "paths are shortest paths.", "start": 2326.65, "duration": 1.041}, {"text": "Optimal substructure.", "start": 2327.691, "duration": 1.209}, {"text": "So this part will\nbe delta of su.", "start": 2328.9, "duration": 2.556}, {"text": "This part is obviously w of uv.", "start": 2331.456, "duration": 2.494}, {"text": "So this will give\nthe right answer.", "start": 2333.95, "duration": 3.81}, {"text": "Hopefully.", "start": 2337.76, "duration": 1.85}, {"text": "OK.", "start": 2339.61, "duration": 1.255}, {"text": "It's certainly\ngoing to-- I mean,", "start": 2340.865, "duration": 1.375}, {"text": "this is the analog of the\nnaive recursive algorithm", "start": 2342.24, "duration": 2.86}, {"text": "for Fibonacci.", "start": 2345.1, "duration": 0.73}, {"text": "So it's not going to be\nefficient if I-- I mean,", "start": 2345.83, "duration": 2.36}, {"text": "this is an algorithm, right?", "start": 2348.19, "duration": 1.66}, {"text": "You could say-- this\nis a recursive call.", "start": 2349.85, "duration": 3.87}, {"text": "We're going to treat this\nas recursive call instead", "start": 2353.72, "duration": 3.8}, {"text": "of just a definition.", "start": 2357.52, "duration": 2.39}, {"text": "Then this is a\nrecursive algorithm.", "start": 2359.91, "duration": 3.38}, {"text": "How good or bad is this\nrecursive algorithm?", "start": 2363.29, "duration": 3.796}, {"text": "AUDIENCE: Terrible.", "start": 2367.086, "duration": 0.924}, {"text": "PROFESSOR: Terrible.", "start": 2368.01, "duration": 0.84}, {"text": "Very good.", "start": 2368.85, "duration": 1.11}, {"text": "Very bad, I should say.", "start": 2369.96, "duration": 1.28}, {"text": "It's definitely going\nto be exponential", "start": 2374.0, "duration": 4.08}, {"text": "without memoization.", "start": 2378.08, "duration": 1.04}, {"text": "But we know.", "start": 2379.12, "duration": 0.837}, {"text": "We know how to make\nalgorithms better.", "start": 2379.957, "duration": 1.583}, {"text": "We memoize.", "start": 2381.54, "duration": 1.1}, {"text": "OK.", "start": 2382.64, "duration": 0.5}, {"text": "So I think you know how to write\nthis as a memoized algorithm.", "start": 2383.14, "duration": 3.71}, {"text": "To define the function delta\nof sv, you first check,", "start": 2386.85, "duration": 4.97}, {"text": "is s comma v in the memo table?", "start": 2391.82, "duration": 2.26}, {"text": "If so return that value.", "start": 2394.08, "duration": 1.48}, {"text": "Otherwise, do this computation\nwhere this is a recursive call", "start": 2395.56, "duration": 3.89}, {"text": "and then stored it\nin the memo table.", "start": 2399.45, "duration": 3.37}, {"text": "OK.", "start": 2402.82, "duration": 0.64}, {"text": "I don't think I need\nto write that down.", "start": 2403.46, "duration": 1.666}, {"text": "It's just like the\nmemoized code over there.", "start": 2405.126, "duration": 2.234}, {"text": "Just there's now two\narguments instead of one.", "start": 2407.36, "duration": 3.83}, {"text": "In fact, s isn't changing.", "start": 2411.19, "duration": 1.2}, {"text": "So I only need to store\nwith v instead of s comma v.", "start": 2412.39, "duration": 6.11}, {"text": "Is that a good algorithm?", "start": 2418.5, "duration": 1.345}, {"text": "I claim memoization\nmakes everything faster.", "start": 2419.845, "duration": 3.725}, {"text": "Is that a fast algorithm?", "start": 2423.57, "duration": 2.13}, {"text": "Not so obvious, I guess.", "start": 2436.56, "duration": 1.08}, {"text": "Yes?", "start": 2451.08, "duration": 1.49}, {"text": "How many people think, yes,\nthat's a good algorithm?", "start": 2452.57, "duration": 2.42}, {"text": "AUDIENCE: Better.", "start": 2454.99, "duration": 0.76}, {"text": "PROFESSOR: Better.", "start": 2455.75, "duration": 0.28}, {"text": "Definitely better.", "start": 2456.03, "duration": 1.06}, {"text": "Can't be worse.", "start": 2457.09, "duration": 1.25}, {"text": "How many people think it's\na bad algorithm still?", "start": 2458.34, "duration": 2.62}, {"text": "OK.", "start": 2460.96, "duration": 0.5}, {"text": "So three for yes, zero for no.", "start": 2461.46, "duration": 3.3}, {"text": "How many people aren't sure?", "start": 2464.76, "duration": 4.08}, {"text": "Including the yes votes?", "start": 2468.84, "duration": 1.031}, {"text": "Good.", "start": 2469.871, "duration": 0.499}, {"text": "All right.", "start": 2472.97, "duration": 0.6}, {"text": "It's not so tricky.", "start": 2473.57, "duration": 0.84}, {"text": "Let me draw you a graph.", "start": 2474.41, "duration": 1.005}, {"text": "Something like that.", "start": 2487.372, "duration": 2.978}, {"text": "So we wanted to commit\ndelta of s comma", "start": 2490.35, "duration": 1.98}, {"text": "v. Let me give these\nguys names, a and b.", "start": 2492.33, "duration": 4.34}, {"text": "So we compute delta of\ns comma v. To compute", "start": 2496.67, "duration": 2.71}, {"text": "that we need to know delta\nof s comma a and delta", "start": 2499.38, "duration": 6.45}, {"text": "of s comma v. All right?", "start": 2505.83, "duration": 2.28}, {"text": "Those are the two ways-- sorry,\nactually we just need one.", "start": 2508.11, "duration": 3.88}, {"text": "Only one incoming edge to v.\nSo its delta of s comma a.", "start": 2511.99, "duration": 5.65}, {"text": "Sorry-- I should have\nput a base case here too.", "start": 2520.95, "duration": 3.14}, {"text": "Delta of s comma s equals 0.", "start": 2524.09, "duration": 3.06}, {"text": "OK.", "start": 2530.2, "duration": 0.5}, {"text": "Delta of s comma\na plus the edge.", "start": 2530.7, "duration": 2.101}, {"text": "OK.", "start": 2532.801, "duration": 0.499}, {"text": "There is some\nshortest path to a.", "start": 2533.3, "duration": 1.64}, {"text": "To compute the\nshortest path to a we", "start": 2534.94, "duration": 1.58}, {"text": "look at all the\nincoming edges to a.", "start": 2536.52, "duration": 1.5}, {"text": "There's only one.", "start": 2538.02, "duration": 1.38}, {"text": "So delta of s comma b.", "start": 2539.4, "duration": 2.92}, {"text": "Now I want to compute the\nshortest paths from b.", "start": 2542.32, "duration": 2.3}, {"text": "Well, there's two\nways to get to b.", "start": 2544.62, "duration": 1.6}, {"text": "One of them is delta of s\ncomma b-- sorry, s comma s.", "start": 2546.22, "duration": 7.51}, {"text": "Came from s.", "start": 2553.73, "duration": 1.74}, {"text": "The other way is delta of s\ncomma v. Do you see a problem?", "start": 2555.47, "duration": 7.29}, {"text": "Yeah.", "start": 2562.76, "duration": 1.78}, {"text": "Delta of s comma v is what\nwe were trying to figure out.", "start": 2564.54, "duration": 2.88}, {"text": "Now you might say, oh,\nit's OK because we're", "start": 2570.08, "duration": 1.91}, {"text": "going to memoize our\nanswer to delta s comma v", "start": 2571.99, "duration": 2.07}, {"text": "and then we can reuse it here.", "start": 2574.06, "duration": 1.249}, {"text": "Except, we haven't finished\ncomputing delta of s", "start": 2575.309, "duration": 2.221}, {"text": "comma v. We can only put it in\nthe memo table once we're done.", "start": 2577.53, "duration": 4.81}, {"text": "So when this call happens the\nmemo table has not been set.", "start": 2582.34, "duration": 4.09}, {"text": "And we're going to\ndo the same thing", "start": 2586.43, "duration": 1.5}, {"text": "over and over and over again.", "start": 2587.93, "duration": 1.91}, {"text": "This is an infinite algorithm.", "start": 2589.84, "duration": 3.05}, {"text": "Oops.", "start": 2592.89, "duration": 1.85}, {"text": "Not so hot.", "start": 2594.74, "duration": 0.82}, {"text": "So it's going to be infinite\ntime on graphs with cycles.", "start": 2599.41, "duration": 10.75}, {"text": "OK.", "start": 2615.155, "duration": 0.5}, {"text": "For DAGs, for acyclic graphs, it\nactually runs in v plus e time.", "start": 2615.655, "duration": 6.745}, {"text": "This is the good case.", "start": 2622.4, "duration": 1.27}, {"text": "In this situation we\ncan use this formula.", "start": 2623.67, "duration": 3.26}, {"text": "The time is equal to the\nnumber of subproblems", "start": 2626.93, "duration": 2.01}, {"text": "times the time per subproblem.", "start": 2628.94, "duration": 3.38}, {"text": "So I guess we have to think\nabout that a little bit.", "start": 2632.32, "duration": 2.72}, {"text": "Where's my code?", "start": 2635.04, "duration": 0.68}, {"text": "Here's my code.", "start": 2635.72, "duration": 1.47}, {"text": "Number of subproblems\nis v. There's", "start": 2637.19, "duration": 3.47}, {"text": "v different subproblems\nthat I'm using here.", "start": 2640.66, "duration": 2.45}, {"text": "I'm always reusing\nsubproblems of the form delta", "start": 2643.11, "duration": 2.25}, {"text": "s comma something.", "start": 2645.36, "duration": 1.04}, {"text": "The something could be\nany of the v vertices.", "start": 2646.4, "duration": 3.91}, {"text": "How much time do I\nspend per subproblem?", "start": 2650.31, "duration": 4.31}, {"text": "That's a little tricky.", "start": 2654.62, "duration": 1.17}, {"text": "It's the number\nof incoming edges", "start": 2655.79, "duration": 1.85}, {"text": "to v. So time for a\nsub problem delta of sv", "start": 2657.64, "duration": 13.07}, {"text": "is the indegree of v. The\nnumber of incoming edges to v.", "start": 2670.71, "duration": 6.14}, {"text": "So this depends on\nv. So I can't just", "start": 2676.85, "duration": 2.38}, {"text": "take a straightforward\nproduct here.", "start": 2679.23, "duration": 1.82}, {"text": "What this is really\nsaying is, you", "start": 2681.05, "duration": 1.416}, {"text": "should sum up over\nall sub problems", "start": 2682.466, "duration": 1.664}, {"text": "of the time per sub problem.", "start": 2684.13, "duration": 2.47}, {"text": "So total time is the sum over\nall v and v, the indegree of v.", "start": 2686.6, "duration": 11.76}, {"text": "And we know this\nis number of edges.", "start": 2698.36, "duration": 4.56}, {"text": "It's really-- so indegree\nplus 1, indegree plus 1.", "start": 2702.92, "duration": 3.73}, {"text": "So this is v plus v. OK.", "start": 2706.65, "duration": 4.35}, {"text": "Handshaking again.", "start": 2711.0, "duration": 3.06}, {"text": "OK.", "start": 2714.06, "duration": 0.62}, {"text": "Now we already knew an algorithm\nfor shortest paths and DAGs.", "start": 2714.68, "duration": 2.66}, {"text": "And it ran a v plus e time.", "start": 2717.34, "duration": 1.31}, {"text": "So it's another way\nto do the same thing.", "start": 2718.65, "duration": 2.72}, {"text": "If you think about\nit long enough,", "start": 2721.37, "duration": 2.56}, {"text": "this algorithm\nmemoized, is essentially", "start": 2723.93, "duration": 3.41}, {"text": "doing a depth first search\nto do a topological sort", "start": 2727.34, "duration": 3.43}, {"text": "to run one round\nof Bellman-Ford.", "start": 2730.77, "duration": 2.67}, {"text": "So we had topological sort\nplus one round of Bellman-Ford.", "start": 2733.44, "duration": 2.68}, {"text": "This is kind of it\nall rolled into one.", "start": 2736.12, "duration": 2.04}, {"text": "This should look kind of like\nthe Bellman Ford relaxation", "start": 2738.16, "duration": 2.47}, {"text": "step, or shortest\npaths relaxation step.", "start": 2740.63, "duration": 2.33}, {"text": "It is.", "start": 2742.96, "duration": 1.19}, {"text": "This min is really\ndoing the same thing.", "start": 2744.15, "duration": 2.574}, {"text": "So it's really the\nsame algorithm.", "start": 2746.724, "duration": 1.416}, {"text": "But we come at it from\na different perspective.", "start": 2748.14, "duration": 1.958}, {"text": "OK.", "start": 2752.4, "duration": 1.07}, {"text": "But I claim I can use\nthis same approach", "start": 2753.47, "duration": 2.4}, {"text": "to solve shortest paths in\ngeneral graphs, even when they", "start": 2755.87, "duration": 2.96}, {"text": "have cycles.", "start": 2758.83, "duration": 2.71}, {"text": "How am I going to do that?", "start": 2761.54, "duration": 2.63}, {"text": "DAGs seem fine-- oh, what\nwas the lesson learned here?", "start": 2764.17, "duration": 4.81}, {"text": "Lesson learned is that\nsubproblem dependencies", "start": 2768.98, "duration": 9.42}, {"text": "should be acyclic.", "start": 2778.4, "duration": 1.05}, {"text": "Otherwise, we get an\ninfinite algorithm.", "start": 2779.45, "duration": 2.79}, {"text": "For memoization to work\nthis is what you need.", "start": 2782.24, "duration": 2.75}, {"text": "It's all you need.", "start": 2784.99, "duration": 1.06}, {"text": "OK.", "start": 2789.59, "duration": 0.5}, {"text": "We've almost seen this already.", "start": 2790.09, "duration": 2.37}, {"text": "Because I said that, to\ndo a bottom up algorithm", "start": 2792.46, "duration": 2.63}, {"text": "you do a topological sort of\nthis subproblem dependency DAG.", "start": 2795.09, "duration": 4.05}, {"text": "I already said it\nshould be acyclic.", "start": 2799.14, "duration": 1.501}, {"text": "OK.", "start": 2800.641, "duration": 0.499}, {"text": "We just forgot.", "start": 2801.14, "duration": 1.35}, {"text": "I didn't tell you yet.", "start": 2802.49, "duration": 1.382}, {"text": "So for that to work\nit better be acyclic.", "start": 2803.872, "duration": 1.708}, {"text": "For DP to work, for memoization\nto work, it better be acyclic.", "start": 2805.58, "duration": 3.29}, {"text": "If you're acyclic then\nthis is the running time.", "start": 2808.87, "duration": 6.66}, {"text": "So that's all general.", "start": 2815.53, "duration": 4.06}, {"text": "OK.", "start": 2819.59, "duration": 0.5}, {"text": "So somehow I need to\ntake a cyclic graph", "start": 2820.09, "duration": 1.97}, {"text": "and make it acyclic.", "start": 2822.06, "duration": 0.945}, {"text": "We've actually done this\nalready in recitation.", "start": 2828.047, "duration": 1.958}, {"text": "So if I have a\ngraph-- let's take", "start": 2838.74, "duration": 4.09}, {"text": "a very simple cyclic graph.", "start": 2842.83, "duration": 3.02}, {"text": "OK.", "start": 2845.85, "duration": 0.5}, {"text": "One thing I could do is explode\nit into multiple layers.", "start": 2846.35, "duration": 3.22}, {"text": "We did this on quiz\ntwo in various forms.", "start": 2849.57, "duration": 2.83}, {"text": "It's like the only cool thing\nyou can do with shortest paths,", "start": 2852.4, "duration": 2.62}, {"text": "I feel like.", "start": 2855.02, "duration": 2.862}, {"text": "If you want to make a\nshortest path problem harder,", "start": 2857.882, "duration": 2.318}, {"text": "require that you reduce your\ngraph to k copies of the graph.", "start": 2860.2, "duration": 5.397}, {"text": "I'm going to do it\nin a particular way", "start": 2865.597, "duration": 1.583}, {"text": "here-- which I think you've\nseen in recitation-- which", "start": 2867.18, "duration": 3.4}, {"text": "is to think of this axis as\ntime, or however you want,", "start": 2870.58, "duration": 3.78}, {"text": "and make all of the\nedges go from each layer", "start": 2874.36, "duration": 2.73}, {"text": "to the next layer.", "start": 2877.09, "duration": 0.96}, {"text": "This should be a\nfamiliar technique.", "start": 2881.08, "duration": 2.39}, {"text": "So the idea is,\nevery time I follow", "start": 2883.47, "duration": 1.87}, {"text": "an edge I go down\nto the next layer.", "start": 2885.34, "duration": 2.1}, {"text": "This makes any graph acyclic.", "start": 2887.44, "duration": 2.3}, {"text": "Done.", "start": 2889.74, "duration": 1.77}, {"text": "What in the world\ndoes this mean?", "start": 2891.51, "duration": 2.13}, {"text": "What is it doing?", "start": 2893.64, "duration": 0.91}, {"text": "What does it mean?", "start": 2900.07, "duration": 1.89}, {"text": "Double rainbow.", "start": 2901.96, "duration": 1.14}, {"text": "All right.", "start": 2903.1, "duration": 0.5}, {"text": "AUDIENCE: [LAUGHTER]", "start": 2903.6, "duration": 0.833}, {"text": "PROFESSOR: So-- I\ndon't know how I've", "start": 2904.433, "duration": 2.261}, {"text": "gone so long in the\nsemester without referring", "start": 2906.694, "duration": 1.916}, {"text": "to double rainbow.", "start": 2908.61, "duration": 0.75}, {"text": "It used to be my favorite.", "start": 2909.36, "duration": 1.32}, {"text": "All right.", "start": 2910.68, "duration": 0.5}, {"text": "So here's what it means.", "start": 2911.18, "duration": 3.39}, {"text": "Delta sub k of sv.", "start": 2914.57, "duration": 2.449}, {"text": "I'm going to define\nthis first-- this", "start": 2917.019, "duration": 1.541}, {"text": "is a new kind of\nsubproblem-- which", "start": 2918.56, "duration": 3.08}, {"text": "is, what is the shortest-- what\nis the weight of the shortest", "start": 2921.64, "duration": 7.58}, {"text": "s to v path that uses,\nat most, k edges.", "start": 2929.22, "duration": 5.305}, {"text": "So I want it to be shortest\nin terms of total weight,", "start": 2938.732, "duration": 2.208}, {"text": "but I also want it to\nuse few edges total.", "start": 2940.94, "duration": 2.15}, {"text": "So this is going to be 0.", "start": 2943.09, "duration": 2.11}, {"text": "In some sense, if you\nlook at-- so here's s", "start": 2945.2, "duration": 3.38}, {"text": "and I'm always going\nto make s this.", "start": 2948.58, "duration": 3.31}, {"text": "And then this is going to\nbe v in the zero situation.", "start": 2951.89, "duration": 3.48}, {"text": "This is going to be v\nin the one situation,", "start": 2955.37, "duration": 2.09}, {"text": "v-- so if I look at this\nv, I look at the shortest", "start": 2957.46, "duration": 3.14}, {"text": "path from s to v, that\nis delta sub 0 of sv.", "start": 2960.6, "duration": 3.44}, {"text": "So maybe I'll call this v\nsub 0, v sub 1, v sub 2.", "start": 2964.04, "duration": 4.42}, {"text": "OK.", "start": 2968.46, "duration": 0.5}, {"text": "Shortest path from\nhere to here is,", "start": 2968.96, "duration": 1.625}, {"text": "there's no way to\nget there on 0 edges.", "start": 2970.585, "duration": 1.805}, {"text": "Shortest path from\nhere to here, that", "start": 2972.39, "duration": 1.58}, {"text": "is the best way to get there\nwith, at most, one edge.", "start": 2973.97, "duration": 4.196}, {"text": "Shortest path from\nhere to here--", "start": 2978.166, "duration": 1.374}, {"text": "well, if I add some\nvertical edges too,", "start": 2979.54, "duration": 2.23}, {"text": "I guess, cheating a little bit.", "start": 2981.77, "duration": 1.666}, {"text": "Then this is the best\nway to get from s", "start": 2983.436, "duration": 1.624}, {"text": "to v using at most two edges.", "start": 2985.06, "duration": 1.9}, {"text": "And then you get\na recurrence which", "start": 2986.96, "duration": 4.04}, {"text": "is the min over all last edges.", "start": 2991.0, "duration": 3.75}, {"text": "So I'm just copying\nthat recurrence,", "start": 2994.75, "duration": 1.82}, {"text": "but realizing that the s to\nu part uses one fewer edge.", "start": 2996.57, "duration": 6.47}, {"text": "And then I use the edge uv.", "start": 3003.04, "duration": 1.291}, {"text": "OK.", "start": 3007.198, "duration": 0.5}, {"text": "That's our new recurrence.", "start": 3007.698, "duration": 1.632}, {"text": "By adding this k\nparameter I've made", "start": 3009.33, "duration": 2.05}, {"text": "this recurrence on\nsubproblems acyclic.", "start": 3011.38, "duration": 2.8}, {"text": "Unfortunately, I've increased\nthe number of subproblems.", "start": 3014.18, "duration": 2.87}, {"text": "The number of subproblems\nnow is v squared.", "start": 3017.05, "duration": 11.2}, {"text": "Technically, v times v minus 1.", "start": 3028.25, "duration": 2.59}, {"text": "Because I really--\nactually, v squared.", "start": 3030.84, "duration": 2.04}, {"text": "Sorry.", "start": 3032.88, "duration": 1.25}, {"text": "I start at 0.", "start": 3034.13, "duration": 2.73}, {"text": "And what I care about, my goal,\nis delta sub v minus 1 of sv.", "start": 3036.86, "duration": 9.35}, {"text": "Because by\nBellman-Ford analysis I", "start": 3046.21, "duration": 1.69}, {"text": "know that I only care about\nsimple paths, paths of length", "start": 3047.9, "duration": 3.37}, {"text": "at most v minus 1.", "start": 3051.27, "duration": 0.77}, {"text": "I'm assuming here no\nnegative weight cycles.", "start": 3052.04, "duration": 1.833}, {"text": "I should've said that earlier.", "start": 3053.873, "duration": 1.577}, {"text": "If you assume that, then\nthis is what I care about.", "start": 3055.45, "duration": 3.17}, {"text": "So k ranges from 0 to v minus 1.", "start": 3058.62, "duration": 1.76}, {"text": "So there are v choices for k.", "start": 3060.38, "duration": 1.78}, {"text": "There are v choices for v.\nSo the number of subproblems", "start": 3062.16, "duration": 2.7}, {"text": "is v squared.", "start": 3064.86, "duration": 0.65}, {"text": "How much time do I\nspend per subproblem?", "start": 3065.51, "duration": 1.72}, {"text": "Well, the same as before.", "start": 3067.23, "duration": 1.041}, {"text": "The indegree-- where\ndid I write it?", "start": 3068.271, "duration": 1.619}, {"text": "Up here-- the indegree\nof that problem.", "start": 3069.89, "duration": 3.122}, {"text": "So what I'm really\ndoing is summing", "start": 3073.012, "duration": 1.458}, {"text": "over all v of the indegree.", "start": 3074.47, "duration": 2.93}, {"text": "And then I multiply it by\nv. So the running time,", "start": 3077.4, "duration": 2.45}, {"text": "total running time is ve.", "start": 3079.85, "duration": 5.39}, {"text": "Sound familiar?", "start": 3085.24, "duration": 1.5}, {"text": "This is Bellman-Ford's\nalgorithm again.", "start": 3086.74, "duration": 2.92}, {"text": "And this is actually where\nBellman-Ford algorithm", "start": 3089.66, "duration": 2.75}, {"text": "came from is this view\non dynamic programming.", "start": 3092.41, "duration": 3.4}, {"text": "So we're seeing yet another\nway to do Bellman-Ford.", "start": 3095.81, "duration": 2.83}, {"text": "It may seem familiar.", "start": 3098.64, "duration": 1.02}, {"text": "But in the next\nthree lectures we're", "start": 3099.66, "duration": 1.5}, {"text": "going to see a whole\nbunch of problems", "start": 3101.16, "duration": 1.583}, {"text": "that can succumb to\nthe same approach.", "start": 3102.743, "duration": 1.907}, {"text": "And that's super cool.", "start": 3104.65, "duration": 2.39}]