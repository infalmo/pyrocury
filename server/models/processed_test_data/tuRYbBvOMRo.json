[{"text": "ANNOUNCER: Open content is\nprovided under a creativecommons license.Your support will help MIT\nOpenCourseWare continue tooffer high quality educational\nresources for free.To make a donation, or view\nadditional materials fromhundreds of MIT courses, visit\nMIT OpenCourseWare atocw.mit.edu .PROFESSOR JOHN GUTTAG: OK.I finished up last time\ntalking about lists.And I pointed out that lists are\nmutable, showed you someexamples of mutation.We can look at it here; we\nlooked at append, which addedthings to lists, we looked at\ndelete, deleting things from alist. You can also assign to a\nlist, or to an element of alist. So ivy sub 1, for example,\ncould be assignedminus 15, and that will actually\nmutate the list.So heretofore, when we wrote\nassignment, what we alwaysmeant, was changing the binding\nof a variable to adifferent object.Here, we are overloading the\nnotation to say, no, no, ivysis still bound to the same\nobject, but an element of ivysis bound to a different\nobject.If you think about it, that\nmakes sense, because when wehave a list, what a list is,\nis a sequence of objects.And what this says is, is the\nobject named by the expressionivys sub 1, is now bound to the\nobject, if you will, named", "start": 0.0, "heat": 1.0}, {"text": "by the constant minus 15.So we can watch this run here.Idle can-- that's exciting.I hadn't expected that answer.All right, your question.STUDENT: [INAUDIBLE] four\nelements to ivys, and you tellit to change the fifth element\nof ivys to negative 15, willit add it or [INAUDIBLE]PROFESSOR JOHN GUTTAG: Well,\nI'll tell you how ol-- let'sanswer that the easy way.We'll start up a shell\nand we'll try it.All right, we'll just get out\nof what we were doing here.And so, we now have some things,\nso we, for example,have ivys, I can print ivys\n, and it's only got threeelements but your question\nprobably is just as good foradding the fourth as adding\nthe fifth, so what wouldhappen if we say ivys sub 3--\nbecause that of course is thefourth element, right?Let's find out.OK.Because what that does is, it's\nchanging the binding ofthe name ivys, in this\ncase, sub 1.What it looked at here, with the\nname ivys sub 3, and saidthat name doesn't-- isn't\nbound, right?That isn't there.So it couldn't do it, so instead\nthat's what append is", "start": 120.0, "heat": 0.1}, {"text": "for, is to stick things on to\nthe end of the list. But avery good question.So we can see what we did here,\nand, but of course I cannow, if I choose, say something\nlike, ivys sub 1 isassigned minus 15, and now if\nI print ivys, there it is.And again, this points out\nsomething I wanted to me--I mentioned last time, list can\nbe heterogeneous, in thesense that the elements can be\nmultiple different types.As you see here, some of the\nelements are strings and someof the elements are integers.Let's look at another example.Let's suppose, we'll start\nwith the list,I'll call it l 1.This, by the way, is a really\nbad thing I just did.What was-- what's really bad\nabout calling a list l 1?STUDENT: [INAUDIBLE]PROFESSOR JOHN GUTTAG: Is it l\n1, or is it 11, or is it l l?It's a bad habit to get into\nwhen you write programs, so Inever use lowercase L except\nwhen I'm spelling the wordwhere it's obvious, because\notherwise I get all sorts ofcrazy things going on.All right, so let's make\nit the list 123.All right?Now, I'll say L 2 equals L 1.Now I'll print L 2.Kind of what you'd guess, but\nhere's the interestingquestion: if I say L 1 is\nassigned 0, L 1 sub 0 is", "start": 240.0, "heat": 0.1}, {"text": "assigned 4, I'll print L 1.That's what you expect, but\nwhat's going to happenif I print L 2?423 as well, and that's because\nwhat happened is I hadthis model, which we looked at\nlast time, where I had thelist L 1, which was bound to\nan object, and then theassignment L 2 gets L 1, bound\nthe name L 2 to the sameobject, so when I mutated this\nobject, which I reachedthrough the name L 1 to make\nthat 4, since this name wasbound to the same object, when\nI print it, I got 423.So that's the key thing to--\nto realize; that what theassignment did was\nhave two separatepaths to the same object.So I could get to that object\neither through this path orthrough that path, it didn't\nmatter which path I use tomodify it, I would see it when\nI looked at the other.Yes.STUDENT: [INAUDIBLE]PROFESSOR JOHN GUTTAG: So the\nquestion, if I said a isassigned 2, b is assigned a,\nand then a is assigned 3.Is that your question?So the question is, a is\nassigned 1, b is assigned a, a", "start": 360.0, "heat": 0.1}, {"text": "is assigned 2, and then if\nI print b, I'll get 1.Because these are not mutable,\nthis is going to be assignedto an object in the store, so\nwe'll draw the picture overhere, that we had initially a\nis bound to an object with 1in it, and then b got bound to\nthe same object, but then whenI did the assignment, what that\ndid was it broke thisconnection, and now had a\nassigned to a differentobject, with the number,\nin this case, 2 in it.Whereas the list assignment you\nsee here did not rebindthe object l 1, it\nchanged this.OK?Now formally I could have had\nthis pointing off to anotherobject containing 4, but that\njust seemed excessive, right?But you see the difference.Great question, and a very\nimportant thing to understand,and that's why I'm belaboring\nthis point, since this iswhere people tend to get pretty\nconfused, and this iswhy mutation is very important\nto understand.Yeah.STUDENT: [UNINTELLIGIBLE]PROFESSOR JOHN GUTTAG:\nI'm just assumingit'll be a great question.STUDENT: [INAUDIBLE]PROFESSOR JOHN GUTTAG:\nExactly.So if-- very good question-- so,\nfor example, we can just", "start": 480.0, "heat": 0.1}, {"text": "do it here.The question was, suppose I now\ntype L 1 equals the emptylist. I can print L 1, and I can\nprint L 2, because again,that's analogous to this\nexample, where I just swungthe binding of the identifier.So this is important, it's a\nlittle bit subtle, but if youdon't really understand this\ndeeply, you'll find yourselfgetting confused a lot.All right?OK.Let me move on, and I want to\ntalk about one more type.By the way, if you look at the\nhandout from last time, you'llsee that there's some other\nexamples of mutation,including a function\nthat does mutation.It's kind of interesting, but I\ndon't think we need-- thinkwe've probably done\nenough here that Ihope it now make sense.That one type I want to talk\nabout still is dictionaries.Like lists, dictionaries are\nmutable, like lists, they canbe heterogeneous, but unlike\nlists, they're not ordered.The elements in them don't\nhave an order, and", "start": 600.0, "heat": 0.1}, {"text": "furthermore, we have generalized\nthe indexing.So lists and strings, we can\nonly get at elements bynumbers, by integers, really.Here what we use is, think\nof every element of thedictionary as a key value pair,\nwhere the keys are usedas the indices.So we can have an example,\nlet's look at it.So, if you look at the function\nshow dics here,you'll see I've declared a\nvariable called e to f, ah,think of that as English to\nFrench, and I've defined adictionary to do translations.And so, we see that the string\none corresponds the-- the keyone corresponds to the value un\nthe key soccer correspondsto the French word football,\net cetera.It's kind of bizarre, but the\nFrench call soccer football.And then I can index in it.So if I print e to f of soccer,\nit will print thestring football.So you can imagine that this is\na very powerful mechanism.", "start": 720.0, "heat": 0.1}, {"text": "So let's look what happens\nwhen I run--start to run this.All right.So, it says not defined-- and\nwhy did it say not defined,there's an interesting\nquestion.Let's just make sure we get this\nright, and we start theshow up again--All right, so, I run\nit, and sureenough, it shows football.What happens if I\ngo e to f of 0?I get a key error.Because, remember, these\nthings are not ordered.There is no 0th element.0 is not a key of this\nparticular object.Now I could have made 0 a key,\nkeys don't have to be strings,but as it happened, I didn't.So let's comment that out, so\nwe don't get stuck again.Where we were before, I've\nprinted it here, you might bea little surprised\nof the order.", "start": 840.0, "heat": 0.1}, {"text": "Why is soccer first?Because the order of this\ndoesn't matter.That's why it's using\nset braces, sodon't worry about that.The next thing I'm doing is--\nso that's that, and then--I'm now going to create another\none, n to s, fornumbers to strings, where my\nkeys are numbers, in this casethe number 1 corresponds\nto the word one, andinterestingly enough, I'm also\ngoing to have the word onecorresponding to the number 1.I can use anything I want for\nkeys, I can use anything Iwant for values.And now if we look at this,\nwe see, I can get this.All right.So these are extremely\nvaluable.I can do lots of things with\nthese, and you'll see that aswe get to future assignments,\nwe'll make heavy use ofdictionaries.Yeah.Question.STUDENT: [INAUDIBLE]PROFESSOR JOHN GUTTAG: You can,\nbut you don't know whatorder you'll get them in.What you can do is you can\niterate keys, which gives youthe keys in the dictionary, and\nthen you can choose them,but there's no guarantee\nin the order inwhich you get keys.Now you might wonder, why\ndo we have dictionaries?It would be pretty easy to\nimplement them with lists,because you could have a list\nwhere each element of the listwas a key value pair, and if\nI wanted to find the valuecorresponding to a key, I could\nsay for e in the list,if the first element of e is the\nkey, then I get the value,otherwise I look at the next\nelement in the list.So adding dictionaries, as\nProfessor Grimson said with somany other things, doesn't\ngive you any morecomputational power.", "start": 960.0, "heat": 0.1}, {"text": "It gives you a lot of expressive\nconvenience, youcan write the programs much\nmore cleanly, but mostimportantly, it's fast.Because if you did what I\nsuggested with the list, thetime to look up the key would be\nlinear in the length of thelist. You'd have to look\nat each element untilyou found the key.Dictionaries are implemented\nusing a magic technique calledhashing, which we'll look at a\nlittle bit later in the term,which allows us to retrieve\nkeys in constant time.So it doesn't matter how big\nthe dictionary is, you caninstantaneously retrieve the\nvalue associated with the key.Extremely powerful.Not in the next problems set but\nin the problem set afterthat, we'll be exploiting that\nfacility of dictionaries.All right.Any questions about this?If not, I will turn the podium\nover to Professor Grimson.PROFESSOR ERIC GRIMSON:\nI've stolen it.This is like tag team\nwrestling, right?Professor Guttag has you\non the ropes, I getto finish you off.Try this again.OK.We wanted to finish up that\nsection, we're now going tostart on a new section, and I\nwant to try and do one and ahalf things in the\nremaining time.I'm going to introduce one topic\nthat we're going to dealwith fairly quickly, and then\nwe tackle the second topic,it's going to start today, and\nwe're going to carry on.So let me tell the two\nthings I want to do.I want to talk a little bit\nabout how you use the thingswe've been building in terms\nof functions to help youstructure and organize\nyour code.", "start": 1080.0, "heat": 0.1}, {"text": "It's a valuable tool that you\nwant to have as a programmer.And then we're going to turn to\nthe question of efficiency.How do we measure efficiency\nof algorithms?Which is going to be a really\nimportant thing that we wantto deal with, and we'll start\nit today, it's undoubtedlygoing to take us a couple more\nlectures to finish it off.Right, so how do you\nuse the idea offunctions to organize code?We've been doing it implicitly,\never since weintroduced functions.I want to make it a little more\nexplicit, and I want toshow you a tool for\ndoing that.And I think the easy way\nto do is-- is todo it with an example.So let's take a really\nsimple example.I want to compute the\nlength of thehypotenuse of a right triangle.And yeah, I know you know how\nto do it, but let's thinkabout what might happen if\nI wanted to do that.And in particular, if I think\nabout that problem-- actuallyI want to do this-- if I think\nabout that problem, I'm goingto write a little piece\nof pseudo code.Just to think about how I would\nbreak that problem up.Pseudo code.Now, you're all linguistic\nmajors, pseudo means false,this sounds like code that ain't\ngoing to run, and that'snot the intent of the term.When I say pseudo code, what I\nmean is, I'm going to write adescription of the steps,\nbut not in a particularprogramming language.I'm going to simply write\na description of whatdo I want to do.So if I were to solve this\nproblem, here's the way Iwould do it.I would say, first thing I want\nto do, is I want to inputa value for the base\nas a float.Need to get the base in.Second thing I want to do, I\nneed to get the height, so I'mgoing to input a value for the\nheight, also as a float, afloating point.OK.I get the two values in, what\ndo I need to do, well, yousort of know that, right?I want to then do, I need to\nfind the square root-- b", "start": 1200.0, "heat": 0.1}, {"text": "squared plus h squared, right?The base plus the height, that's\nthe thing I want forthe hypotenuse-- and I'm going\nto save that as a float inhyp, for hypotenuse.And then finally I need to print\nsomething out, using thevalue in hyp.OK.Whoop-dee-doo, right?Come on.We know how to do this.But notice what I did.First of all, I've used the\nnotion of modularity.I've listed a sequence of\nmodules, the things that Iwant to do.Second thing to notice, is that\nlittle piece of pseudocode is telling me things\nabout values.I need to have a float.I need to have another float\nhere, it's giving me someinformation.Third thing to notice is,\nthere's a flow of control.The order which these things\nare going to happen.And the fourth thing to notice\nis, I've used abstraction.I've said nothing about how I'm\ngoing to make square root.I'm using it as an abstraction,\nsaying I'm goingto have square root from\nsomewhere, maybe I'll build itmyself, maybe somebody gives it\nto me as part of a library,so I'm burying the details\ninside of it.I know this is a simple example,\nbut when you matureas a programmer, one of the\nfirst things you should dowhen you sit down to tackle\nsome problem is writesomething like this\npseudo code.I know Professor Guttag\ndoes it all the time.I know, for a lot of\nyou, it's like, OK,I got a heavy problem.Let's see, def Foobar open\nparen, a bunch of parameters.Wrong way to start.Start by thinking about what\nare the sequences.This also, by the way, in some\nsense, gives me the beginningsof my comments for what\nthe structure of mycode is going to be.OK.If we do that, if you look at\nthe handout then, I can nowstart implementing this.I wanted to show you that, so,\nfirst thing I'm going to do issay, all right, I know I'm going\nto need square root inhere, so I'm going to,\nin fact, import math.", "start": 1320.0, "heat": 0.1}, {"text": "That's a little different from\nother import statements.This says I'm going to get the\nentire math library and bringit in so I can use it.And then, what's the first\nthing I wanted to do?I need to get a value\nfor base as a float.Well OK, and that sounds like\nI'm going to need to do inputof something, you can see that\nstatement there, it's-- gotthe wrong glasses on\nbut right there--I'm going to do an input with\na little message, and I'mgoing to store it in base.But here's where I'm going to\npractice a little bit ofdefensive programming.I can't rely on Professor Guttag\nif I give this-- ifthis code to him, I can't rely\non him to type in a float.Actually I can, because he's a\nsmart guy, but in general, Ican't rely on the user--PROFESSOR JOHN GUTTAG: I\nwouldn't do it rightto see if you did.PROFESSOR ERIC GRIMSON:\nActually,he's right, you know.He would not do it, just to\nsee if I'm doing it right.I can't rely on the user.I want to make sure I\nget a float in it,so how do I do that?Well, here's one nice\nlittle trick.First of all, having read in\nthat value, I can check tosee, is it of the right type?Now, this is not the nicest way\nto do it but it'll work.I can look at the type of the\nvalue of base and compare itto the type of an actual float\nand see, are they the same?Is this a real or a float?If it is, I'm done.How do I go back if it isn't?Well, I'm going to create\na little infinite loop.Not normally a good idea.I set up a variable here,\ncalled input OK.Initially it's false, because\nI have no input.And then I run a loop in which\nI read something in, I checkto see if it's the right type,\nif it is, I change thatvariable to say it's now the\ncorrect type, which means thenext time through the loop, I'm\ngoing to say I'm all setand I'm going to bounce out.But if it is not, it's going\nto print out a message heresaying, you screwed up, somewhat\npolitely, and it'sgoing to go back around.So it'll just cycle until\nI get somethingof the right type.Nice way of doing it.Right, what's the second\nthing I do?Well, I get the same sort of\nthing to read in the height,once I have that I'm going to\ntake base squared plus heightsquared, and there's a form\nthat we've just seen oncebefore, and it's going to repeat\nit, that is math.SQRT", "start": 1440.0, "heat": 0.1}, {"text": "and it says the following: it\nsays, take from the mathlibrary the function\ncalled sqrt.OK.We're going to come back to this\nwhen we get to objects,it's basically picking up that\nobject and it's applying that,putting that value into hype,\nand then just printingsomething out.And again, if I just run this,\njust to show that it's goingto do the right thing, it says\nenter base, I'm obnoxious, itsays oops, wasn't a float, so\nwe'll be nice about it, and Ienter a height, and it prints\nout what I expected.I just concatenated those\nstrings together, by the way,at the end.All right.Notice what I did.OK.I went from this description,\nit gives me [UNINTELLIGIBLE]some information.I need to have a particular\ntype.I made sure I had the\nparticular type.I've used some abstraction to\nsuppress some details here.Now if you look at that list,\nthere is actually something Ididn't seem to check, which is,\nI said I wanted a floatstored in hyp.How do I know I've got\na float in hyp?Well I'm relying on the\ncontract, if you like, thatthe manufacturer of square root\nput together, which is,if I know I'm giving it two\nfloats, which I do because Imake sure they're floats, the\ncontract, if you like, ofsquare root says I'll give\nyou back a float.So I can guarantee I've got\nsomething of the right type.OK.I know this is boring\nas whatever.But there's an important\npoint here.Having now used this pseudo code\nto line things up, I canstart putting some additional\nstructure on this.And in particular, I'm sure\nyou're looking at this going--will look at it if we look\nat the right piece--going, wait a minute.This chunk of code and this\nchunk of code, they're reallydoing the same thing.And this is something\nI want to use.If I look at those two pieces\nof computation, I can see apattern there.It's an obvious pattern\nof what I'm doing.And in particular, I can then\nask the following question,which is, what's different\nbetween those", "start": 1560.0, "heat": 0.1}, {"text": "two pieces of code?And I suggest two\nthings, right?One is, what's the thing\nI print out whenI ask for the input?The second thing is, what do I\nprint out if I actually don'tget the right input in?And so the only two differences\nare, right there,and there versus\nhere and here.So this is a good place to\nthink about, OK, let mecapture that.Let me write a function, in fact\nthe literal thing I woulddo is to say, identify the\nthings that change, give eachof them a variable name because\nI want to refer tothem, and then write a function\nthat captures therest of that computation\njust with thosevariable names inside.And in fact, if you look down--\nand I'm just going tohighlight this portion, I'm not\ngoing to run it-- but ifyou look down here, that's\nexactly what that does.I happen to have it commented\nout, right?What does it do?It has height, it says, I've got\ntwo names of things: therequest message and\nthe error message.The body of that function\nlooks exactly like thecomputation up above, except\nI'm simply using those inplace of the specific message\nI had before.And then the only other\ndifference is obviously, it'sa function I need to\nreturn a value.So when I'm done, I'm going to\ngive the value back out.All right?And that then let's me get\nto, basically, this code.Having done that, I simply call\nbase with get float, Icall height with get float, and\ndo the rest of the work.All right.What's the point\nof doing this?Well, notice again.What have I done?I've captured a module\ninside of a function.And even though it's a simple\nlittle thing here, there'ssome a couple of really nice\nadvantages to this.All right?First one is there's\nless code to read.It's easier to debug.I don't have as much\nto deal with.But the more important thing\nis, I've now separated outimplementation from\nfunctionality, orimplementation from use.What does that mean?It means anybody using that\nlittle function get floatdoesn't have to worry about\nwhat's inside of it.So for example, I decide I want\nto change the message Iprint out, I don't have to\nchange the function, I just", "start": 1680.0, "heat": 0.1}, {"text": "pass in a different parameter.Well if I-- you know, with\n[UNINTELLIGIBLE PHRASE sorry,let me say it differently.I don't need to worry about\nhow checking is done, it'shandled inside of\nthat function.If I decide there's a better\nway to get input, and thereis, then I can make it to change\nwhat I don't have tochange the code that\nuses the input.So, if you like, I've built a\nseparation between the userand the implementer.And that's exactly one of the\nreasons why I want to have thefunctions, because I've\nseparated those out.Another way of saying it is,\nanything that uses get floatdoesn't care what the details\nare inside or shouldn't, andif I change that definition, I\ndon't have to change anythingelsewhere in my code, whereas if\nI just have the raw code inthere, I have to go\noff and do it.Right, so the things we want\nyou to take away from thisare, get into the habit of using\npseudo code when you sitdown to start a problem, write\nout what are the steps.I will tell you that a good\nprogrammer, at least in mymind, may actually go back and\nmodify the pseudo code as theyrealize they're missing things,\nbut it's easier to dothat when you're looking at a\nsimple set of steps, than whenyou're in the middle\nof a pile of code.And get into the habit of using\nit to help you definewhat is the flow of control.What are the basic modules, what\ninformation needs to bepassed between those\nmodules in order tomake the code work.OK.That was the short topic.I will come back to this some\nmore and you're going to getlots of practice with this.What I want to do is\nto start talkingabout a different topic.Which is efficiency.And this is going to sound\nlike a weird topic, we'regoing to see why it's of\nvalue in a second.I want to talk about efficiency,\nand we're goingto, or at least I'm going to, at\ntimes also refer to this asorders of growth, for reasons\nthat you'll see over the nextfew minutes.Now, efficiency is obviously\nan important considerationwhen you're designing code,\nalthough I have to admit, at", "start": 1800.0, "heat": 0.1}, {"text": "least for me, I usually want\nto at least start initiallywith code that works, and then\nworry about how I might goback and come up with more\nefficient implementation.I like to have something I\ncan rely on, but it is animportant issue.And our goal over the next\ncouple of lectures, isbasically to give you\na sense of this.So we're not going to turn\nyou into an expert oncomputational efficiency.That's, there are whole courses\non that, there's somegreat courses here on that,\nit takes some mathematicalsophistication, we're going to\npush that off a little bit.But what we-- what we do want\nto do, is to give you someintuition about how to\napproach questions ofefficiency.We want you to have a sense of\nwhy some programs completealmost before you're\ndone typing it.Some programs run overnight.Some programs won't stop\nuntil I'm old and gray.Some programs won't stop until\nyou're old and gray.And these are really different\nefficiencies, and we want togive you a sense of how do you\nreason about those differentkinds of programs.And part of it is we want you\nto learn how to have acatalog, if you like, of\ndifferent classes ofalgorithms, so that when you get\na problem, you try and mapit into an appropriate class,\nand use the leverage, if youlike, of that classof algorithms. Now.It's a quick sidebar, I've got\nto say, I'm sure talking aboutefficiency to folks like you\nprobably seems really strange.I mean, you grew up in an age\nwhen computers were blazinglyfast, and have tons of memory,\nso why in the world do youcare about efficiency?Some of us were not so lucky.So I'll admit, my first computer\nI program was a PDP6,only Professor Guttag even knows\nwhat PDP stands for, itwas made by Digital Equipment\nCompany, which does not existanymore, is now long gone.It had, I know, this is\nold guy stories, butit had 160k of memory.Yeah.160k.160 kilobits of memory.I mean, your flash cards have\nmore than that, right?It had a processor speed\nof one megahertz.It did a million operations\nper second.", "start": 1920.0, "heat": 0.1}, {"text": "So let's think about it.This sucker, what's\nit got in there?That Air Mac, it's, see, it's\ngot, its go-- my Air Mac, Idon't know about John's, his is\nprobably better, mine has1.8 gigahertz speed.That's 1800 times faster.But the real one that blows me\naway is, it has 2 gig ofmemory inside of it.That's 12 thousand times\nmore memory.Oh, and by the way?The PDP6, it was in a rack\nabout this tall.From the floor, not\nfrom the table.All right, so you didn't grow\nup in the late 1800s like Idid, you don't have to\nworry about thissort of stuff, right?But a point I'm trying to make\nis, it sounds like anymorecomputers have gotten so\nblazingly fast, why should youworry about it?Let me give you one other\nanecdote that I can't resist.This is the kind of thing you\ncan use at cocktail parties toimpress your friends\nfrom Harvard.OK.Imagine I have a little lamp, a\nlittle goose-- one of thoselittle gooseneck lamps, I'd put\nit on the table here, I'dput the height about a f-- about\na foot off the table.And if I was really good, I\ncould hit, or time it so thatwhen I hurt-- yeah, try again.When I turn this on switch on\nin the lamp, at exactly thesame time, I'm going to hit a\nkey on my computer and startit running.OK.In the length of time it takes\nfor the light to get from thatbulb to the table, this\nmachine processes twooperations.Oh come on, that's amazing.Two operations.You know, you can do the\nsimple numbers, right?[UNINTELLIGIBLE PHRASE]Light travels basically a\nfoot in a nanosecond.Simple rule of thumb.Now, the nanosecond is what,\n10 to the minus 9 seconds.This thing does 2 gig\nworth of operations.A gig is 10 to the 9, so it\ndoes two operations in thelength of time it takes light\nto get from one foot off thetable down to the table.That's amazing.So why in the world do you\ncare about efficiency?Well the problem is that the\nproblems grow faster than thecomputers speed up.I'll give you two examples.I happen to work in\nmedical imaging.Actually, so does Professor\nGuttag.In my in my area of research,\nit's common for us to want to", "start": 2040.0, "heat": 0.1}, {"text": "process about 100 images a\nsecond in order to get realtime display.Each image has about a million\nelements in it.I've got to process about a half\na gig of data a second inorder to get anything\nout of it.Second example.Maybe one that'll hit a little\nmore home to you.I'm sure you all use Google, I'm\nsure it's a verb in yourvocabulary, right?Now, Google processes--\nten million?Ten billion pages?John?I think ten billion was the\nlast number I heard.Does that sound about right?PROFESSOR JOHN GUTTAG:\nI think it mightactually be more by now.PROFESSOR ERIC GRIMSON:\nMaybe more by now.But let's, for the sake of\nargument, ten billion pages.Imagine you want to search\nthrough Google to find aparticular page.You want to do it in a second.And you're going to just do it\nthe brute force way, assumingyou could even reach all of\nthose pages in that time.Well, if you're going to do\nthat, you've got to be able tofind what you're looking for\nin a page in two steps.Where a step is a comparison\nor an arithmetic operation.Ain't going to happen, right?You just can't do it.So again, part of the point here\nis that things grow-- orto rephrase it, interesting\nthings grow atan incredible rate.And as a consequence, brute\nforce methods are typicallynot going to work.OK.So that then leads to the\nquestion about what should wedo about this?And probably the obvious thing\nyou'll think about is, we'llcome up with a clever\nalgorithm.And I want to disabuse\nyou of that notion.It's a great idea if\nyou can do it,The guy who--I think I'm going to say this\nright, John, right?Sanjay?Ghemawat?-- with a guy who was\na graduate of our department,who is the heart and soul behind\nGoogle's really fastsearch, is an incredibly smart\nguy, and he did come up with areally clever algorithm about\nhow you structure that search,in order to make it happen.And he probably made a lot\nof money along the way.So if you have a great idea,\nyou know, talk to a goodpatent attorney and get\nit locked away.But in general, it's hard\nto come up with thereally clever algorithm.What you're much better at doing\nis saying how do I takethe problem I've got and map it\ninto a class of algorithmsabout which I know and use the\nefficiencies of those to tryand figure out how\nto make it work.", "start": 2160.0, "heat": 0.1}, {"text": "So what we want to do, is, I\nguess another way of saying itis, efficiency is really about\nchoice of algorithm.And we want to help you learn\nhow to map a problem into aclass of algorithms of\nsome efficiency.That's our goal.OK.So to do this, we need a little\nmore abstract way oftalking about efficiency, and\nso, the question is, how do wethink about efficiency?Typically there's two things\nwe want to measure.Space and time.Sounds like an astrophysics\ncourse, right?Now, space usually we--\nach, try it again.When we talk about space, what\nwe usually refer to is, howmuch computer memory does it\ntake to complete a computationof a particular size?So let me write that down, it's\nhow much memory do I needto complete a computation.And by that, I mean, not how\nmuch memory do I need to storethe size of the input, it's\nreally how much internalmemory do I use up as I go\nthrough the computation?I've got some internal variables\nI have to store,what kinds of things do I\nhave to keep track of?You're going to see the\narguments about space if youtake some of the courses that\nfollow on, and again, somenice courses about that.For this course, we're\nnot going to worryabout space that much.What we're really going\nto focus on is time.OK.So we're going to focus here.And the obvious question I\ncould start with is, andsuppose I ask you, how long does\nthe algorithm implementedby this program take to run?How might I answer\nthat question?Any thoughts?", "start": 2280.0, "heat": 0.1}, {"text": "Yeah.STUDENT: [INAUDIBLE]PROFESSOR ERIC GRIMSON:\nAh, you're jumpingahead of me, great.The answer was, find a\nmathematical expressiondepending on the number\nof inputs.It was exactly where\nI want to go.Thank you.I was hoping for a simpler\nanswer, which is, just run it.Which is, yeah I know,\nseems like a dumbthing to say, right?One of the things you could\nimagine is just try it on andinput, see how long it takes.You're all cleverer than that,\nbut I want to point out whythat's not a great idea.First of all, that depends on\nwhich input I've picked.All right?Obviously the algorithm is\nlikely to depend on the sizeof the input, so this\nis not a great idea.Second one is, it depends on\nwhich machine I'm running on.If I'm using a PDP6, it's going\nto take a whole lotlonger than if I'm\nusing an Air Mac.All right?Third one is, it may depend\non which versionof Python I'm running.Depends on how clever the\nimplementer of Python was.Fourth one is, it may depend on\nwhich programming languageI'm doing it in.So I could do it empirically,\nbut I don't want to do thattypically, it's just not a\ngreat way to get at it.And so in fact, what we\nwant is exactly whatthe young lady said.I'm going to ask the following\nquestion, which is-- let mewrite it down-- what is the\nnumber of the basic stepsneeded as a function\nof the input size?That's the question we're going\nto try and address.If we can do this, this is good,\nbecause first of all, itremoves any questions about what\nmachine I'm running on,it's talking about\nfundamentally, how hard isthis problem, and the second\nthing is, it is going to do itspecifically in terms\nof the input.Which is one of the things\nthat I was worried about.OK.So to do this, we're going to\nhave to do a couple of things.All right, the first one is,\nwhat do we mean by input size?And unfortunately, this depends\non the problem.", "start": 2400.0, "heat": 0.1}, {"text": "It could be what's the size of\nthe integer I pass in as anargument, if that's what\nI'm passing in.It could be, how long is the\nlist, if I'm processing a listor a tuple It could\nbe, how many bitsare there in something.So it-- that is something where\nwe have to simply beclear about specifying what\nwe're using as input size.And we want to characterize it\nmathematically as some number,or some variable rather, the\nlength of the list, the sizeof the integer, would be the\nthing we'd want to do.Second thing we've got\nto worry about is,what's a basic step?All right, if I bury a whole lot\nof computation inside ofsomething, I can say, wow, this\nprogram, you know, runsin one step.Unfortunately, that one step\ncalls the Oracle at Delphi andgets an answer back.Maybe not quite what you want.We're typically going to use\nas basic steps the built-inprimitives that a machine\ncomes with.Or another way of saying it is,\nwe're going to use as thebasic steps, those operations\nthat run in constant time, soarithmetic operations.Comparisons.Memory access, and in fact one\nof the things we're going todo here, is we're going to\nassume a particular model,called a random access model,\nwhich basically says, we'regoing to assume that the length\nof time it takes me toget to any location in\nmemory is constant.It's not true, by the way, of\nall programming languages.In fact, Professor Guttag\nalready talked about that, insome languages lists take\na time linear with thelength to get to it.So we're to assume we can get\nto any piece of data, anyinstruction in constant time,\nand the second assumptionwe're going to make is that the\nbasic primitive steps takeconstant time, same amount\nof time to compute.Again, not completely true,\nbut it's a good model, soarithmetic operations,\ncomparisons, things of thatsort, we're all going to assume\nare basically in thatin that particular model.OK.Having done that, then, there\nare three things that we'regoing to look at.As I said, what we want to do\nis, we want to count thenumber of basic steps it takes\nto compute a computation as a", "start": 2520.0, "heat": 0.1}, {"text": "function of input size.And the question is, what\ndo we want to count?Now, one possibility\nis to do best case.Over all possible inputs to\nthis function, what's thefastest it runs?The fewest, so the minimum,\nif you like.It's nice, but not particularly\nhelpful.The other obvious one to\ndo would be worst case.Again, over all possible inputs\nto this function,what's the most number of\nsteps it takes to do thecomputation?And the third possibility, is\nto do the expected case.The average.I'm going to think\nof it that way.In general, people focus\non worst case.For a couple of reasons.In some ways, this would be\nnicer, do expected cases, it'sgoing to tell you on average how\nmuch you expect to take,but it tends to be hard to\ncompute, because to computethat, you have to know a\ndistribution on input.How likely are all the inputs,\nare they all equally likely,or are they going to depend\non other things?And that may depend on the\nuser, so you can'tkind of get at that.We're, as a consequence, going\nto focus on worst case.This is handy for a\ncouple of reasons.One, it means there\nare no surprises.All right?If you run it, you have a sense\nof the upper bound,about how much time it's going\nto take to do thiscomputation, so you're not\ngoing to get surprised bysomething showing up.The second one is, a lot of the\ntime, the worst case isthe one that happens.Professor Guttag used an example\nof looking in thedictionary for something.Now, imagine that dictionary\nactually has something that'sa linear search to go through\nit, as opposed to the hashinghe did, so it's a list,\nfor example.If it's in there, you'll find\nit perhaps very quickly.If it's not there, you've got\nto go through everything tosay it's not there.And so the worst case often\nis the one that shows up,especially in things\nlike search.So, as a consequence, we're\ngoing to stick with the worstcase analysis.Now, I've got two\nminutes left.I was going to start showing\nyou some examples, but I", "start": 2640.0, "heat": 0.1}, {"text": "think, rather than doing that,\nI'm going to stop here, I'mgoing to give you two minutes\nback of time, but I want tojust point out to you that we\nare going to have fun nextweek, because I'm going to show\nyou what in the worldthat has to do with\nefficiency.So with that, we'll\nsee you next time.", "start": 2760.0, "heat": 0.1}]