[{"text": "The following content is\nprovided under a CreativeCommons license.Your support will help\nMIT OpenCourseWarecontinue to offer high quality\neducational resources for free.To make a donation, or to\nview additional materialsfrom hundreds of MIT courses,\nvisit MIT OpenCourseWareat ocw.mit.edu.PROFESSOR: Now look\nat how the web usescryptographic protocols to\nprotect network communicationand deal with network\nfactors in general.So before we dive\ninto the details,I want to remind you\nthere's a quiz on Wednesday.And that's not in this room.It's in Walker.But it's at the\nregular lecture time.Any questions about that?Hopefully straightforward.Third floor, I\nthink it is usually.All right.So today we're going to talk\nabout how the web sort of usescryptography to protect\nnetwork communication.And we'll look at two sort\nof closely related topics.One is, how do you just\ncryptographically protect nevercommunication in a larger\nscale than the Kerberos systemwe looked at in last lecture?And then also, we're going to\nlook at how do you actuallyintegrate this cryptographic\nprotection provided to youat the network level into\nthe entire application.So how does the web\nbrowser make senseof whatever guarantees the\ncryptographic protocol isproviding to it?And these are closely\nrelated, and it turns outthat protecting network\ncommunications is rather easy.Cryptography mostly just works.And integrating it in,\nand currently using itat a higher level\nin the browser,is actually that\nmuch trickier part,how to actually build a\nsystem around cryptography.Before we dive into\nthis whole discussion,I want to remind\nyou of the kindsof cryptographic primitives\nwe're going to use here.So in last lecture on\nKerberos, we basicallyused something called\nsymmetric crypto, or encryption", "start": 0.0, "heat": 0.1}, {"text": "and decryption.And the plan there is that\nyou have a secret key k,and you have two functions.So you can take\nsome piece of data,let's call it p for\nplain text, and youcan apply an encryption\nfunction, that'sa function of some key k.And if you encrypt this plain\ntext, you get a Cypher text c.And similarly, there's a\ndescription function calledd, that given the same key k.And the cipher text will give\nyou back your plain text.So this is the primitive that\nKerberos was all built around.But it turns out there's\nother primitives, as well,that will be useful\nfor today's discussion.And this is called asymmetric\nencryption and decryption.And here the idea is to have\ndifferent keys for encryptionand decryption.We'll see why this is so useful.And in particular, the\nfunctions that you getis, you can encrypt to\na particular public keywith a sum message and\nget a cipher text text.And in order to\ndecrypt, you justsupply the corresponding secret\nkey to get the plain text back.And the cool thing now as you\ncan publish this public keyanywhere on the\ninternet, and peoplecan encrypt messages for you,\nbut you need the secret keyin order to decrypt\nthe messages.And we'll see how this\nis used in the protocol.And in practice you'll\noften use public key cryptoin a slightly different way.So instead of encrypting\nand decrypting messages,you might actually want to\nsign or verify messages.Turns out that at the\nimplementation levelthese are related operations,\nbut at an API levelthey might look all\nlittle bit different.So you might find a message\nwith your secret key,and you get some sort\nof a signature s.And then you can also\nverify this message usingthe corresponding public key.And you get the message, and\nthe signature, and outcomes,", "start": 120.0, "heat": 0.1}, {"text": "and some Boolean flags\nsaying whether thisis the correct signature\nnot on that message.And there are some relatively\nintuitive guaranteesthat these functions provide\nif you, for example, gotthis signature and it\nverifies correctly,then it must have been\ngenerated by someonewith the correct secret key.Make sense, in terms of\nthe primitives we have?All right.So now let's actually\ntry to figure out--How would we protect\nnetwork communicationat a larger scale in Kerberos.In Kerberos, we had\nthe fairly simple modelwhere we had all the\nusers and servershave some sort of a relation\nwith this KDC entity.And this KDC entity\nhas this giant tableof principles and their keys.And whenever a user wants\nto talk to some server,they have to ask the KDC\nto generate a ticket basedon those giant\ntable the KDC has.So this seems like a reasonably\nstraightforward model.So why do we need\nsomething more?Why is Kerberos not\nenough for the web?Why doesn't the web use\njust Kerberos for securingall communications?AUDIENCE: [INAUDIBLE]PROFESSOR: Yeah.So there a sort of a single\nKDC, has to be trusted by all.So this is, perhaps, not great.So you might have\ntrouble really believingthat some machine out there\nis secure for everyonein the world to use.Like, yeah, maybe\npeople at MIT arewilling to trust\nsomeone at [? ISNT ?]to run the KDC there.All right.So that's plausible, yeah.AUDIENCE: [INAUDIBLE]PROFESSOR: Yes.A key management is\nhard, I guess, yeah.So what I mean in particular\nby key management--AUDIENCE: [INAUDIBLE]", "start": 240.0, "heat": 0.1}, {"text": "PROFESSOR: Yes.It might actually be a hard\njob to build a KDC that wecan manage a billion keys,\nor ten billion keys, for allthe people in the world.So it might be a\ntricky proposition.If that's not the\ncase, then I guessanother bummer with Kerberos\nis that all users actuallyhave to have a key, or have\nto be known to the KDC.So, you can't even\nuse Kerberos at MITto connect to some servers,\nunless you yourselfhave an account in\nthe Kerberos database.Whereas on the web, it's\ncompletely reasonableto expect the you walk\nup to some computer,the computer has no\nidea who you are,but you can still go to\nAmazon's website protectedwith cryptography.Yeah?AUDIENCE: [INAUDIBLE]PROFESSOR: That's our idea.So there's these kinds\nof considerations.So there's private\nforward secrecies.There are a couple\nof other thingsyou want from the\ncryptographic protocol,and we'll look at them and\nhow they sort of show upin SSL, as well.But the key there is that\nthe solution is actuallyexactly the same as what\nyou would do Kerberos,and what you would do in SSL\nor TLS to address those guys.But you're absolutely right.There Kerberos deep\nprotocols we read aboutin the paper is pretty dated.So, even if you were\nusing it for the web,you would want to apply\nsome changes to it.Those are not huge though,\nat the [INAUDIBLE] level.Any other thoughts on why\nwe should use Kerberos?Yeah?AUDIENCE: [INAUDIBLE]PROFESSOR: This is\nactually not so scalable.Yeah, recovery.Maybe registration\neven, as well,like you have to go to\nsome accounts officeand get an account.Yeah?AUDIENCE: [INAUDIBLE]\nneeds to be online.PROFESSOR: Yeah, so\nthat's another problem.These are sort of\nmanagement issues,but at the protocol\nlevel, the KDChas to be online\nbecause it has actually", "start": 360.0, "heat": 0.1}, {"text": "mediate every interaction\nyou have with the service.It means that in the web, every\ntime you go to a new website,you'd have to talk to\nsome KDC first, whichwould be a bit of a\nperformance bottleneck.So like another\nkind of scalability,this is like\nperformance scalability.This is more management\nscalability kind of stuff.Make sense?So, how can we\nsolve this problemwith these better primitives?Well, the idea is to use\npublic key cryptography to givethis KDC out of the loop.So let's first\nfigure out whether wecan establish secure\ncommunication if you just knowsome other party's public key.And then we'll\nsee how we plug-ina public key version of a\nKDC to authenticate partiesin this protocol.If you don't want\nto use a KDC, whatyou could do with\npublic key cryptois maybe you can somehow\nlearn the public keyof the public key of the\nother value on a connector.So in Kerberos, if I want\nto connect to a file server,maybe I just know the\nfile server's public keyfrom somewhere.Like me as a freshman I get\na printout saying the fileserver's public key is this.And then you can go\nahead and connect it.And the way you might\nactually do this is youcould just encrypt a message\nfor the public key of the fileserver that you\nwant to connect to.But it turns out\nthat in practice,these public key\noperations are pretty slow.They are several\norders of magnitudeslower than symmetric\nkey cryptography.So almost always you want to get\nout of the use of public cryptoas soon as practical.So a typical protocol\nmight look like thiswhere you have a and b, and\nthey want to communicate.And a knows b's public key.So what might happen is\nthat a might generatesome sort of session s.Just pick a random number.And then it's going to send\nto b the session key s.So this is kind of\nlooking like Kerberos.And we're going to encrypt\nthe session s for b's key.", "start": 480.0, "heat": 0.1}, {"text": "And remember in Kerberos,\nin order to do this,we have to have the\nKDC do this for usbecause a didn't\nknow the key for b,or couldn't have been allowed to\nknow because that is a secret.But only b should've known.With public key cyrptor\nyou can actually this now.We can just encrypt the secret\ns using these public keys.And we send this\nmessage over to b.B can now decrypt this\nmessage, and say Ishould be using this secret key.And now we can have a\ncommunication channel whereall the messages\nare just encryptedunder this secret key s.Does this Make sense?So there are some nice\nproperties about this protocol.One is that we got\nrid of having to havea KDC be online and generate\nour session key for us.We could just have\none of the partiesgenerate it and then\nencrypt it for another partywithout the use of the KDC.Another nice thing\nis we're probablypretty confident that\nmessages sent by a to bwill only be read by b.Because only b could have\ndecrypted this message.And therefore,\nonly b should havethat corresponding secret key s.But this is pretty nicely.Any questions about\nthis protocol?Yeah?AUDIENCE: Does it matter\nwhether the user or the servergenerates the pass code?PROFESSOR: Well, maybe.I think it depends on\nexactly the considerations,or the properties you\nwant out of this protocol.So here, certainly if a is\nbuggy or picks bad randomness,the server then sends some\ndata back to a, thinking,oh, this is now the only data\nthat is going to be seen by a.Well, maybe that's not\ngoing to be quite right.So you might care a little bit.There's a couple of other\nproblems with this protocol,as well.Question?AUDIENCE: I was gonna say\nthat in this protocol,a you could just do [INAUDIBLE].PROFESSOR: Yes, that's\nactually not great.So there's actually\nseveral problems with this.", "start": 600.0, "heat": 0.1}, {"text": "One is the replay.So the problem here\nis that I can justsend these messages\nagain, and itlooks like a is sending these\nmessages to b, and so on.So typically the\nsolution to thisis to have both\nparties participatein the generation of\ns, and that ensuresthat the key we're\nusing is now fresh.Because here, because b didn't\nactually generating anything,these protocol messages look\nexactly the same every time.So typically, what happens\nis that, one party picksa random number like s, and\nthen another party b alsopicks some random number,\ntypically called a non.But, whatever.There's two numbers.And then the key they\nagreed to use in the thingthat one party picked,\nbut actually isthe hash of the things\nthat both of them picked.So you could do that.You could also do\n[? DP Helmond ?] kind of stufflike we looked at\nin the last lecturewhere you get forward secrecy.It was a little bit more\ncomplicated math rather thanjust hashing two random numbers\nthat two parties picked.But then you get\nsome nice properties,like forward secrecy.So replay attacks\nyou typically fixedby having b generate some nons.And then you set\nthe real secret keythat you're going to use\nto hash of the secret keyfrom one guy concatenated\nwith this non.And, of course, b would\nhave to send the nons backto a in order to\nfigure out what'sgoing on for both of\nthem to agree on a key.All right.So another problem here is that\nthere's no real authenticationof a here, all right?So a knows who b\nis, or at least aknows who will be able\nto decrypt the data.But b has no idea who\nis on the other side,whether it's a or some adversary\nimpersonating a, et cetera.So how would we fix it\nint his public key world?Yeah?AUDIENCE: You have been assigned\nsomething and [INAUDIBLE].", "start": 720.0, "heat": 0.1}, {"text": "PROFESSOR: Yeah.There's a couple of ways\nyou could go about this.One possibility\nis a maybe shouldsign this message\ninitially, because wehave this nice sign primitive.So we could maybe have a sign\nthis thing with a's secret key.And that sign just\nprovides the signature,but presumably you\nassign it and alsoprovide the message, as well.And then b would have to\nknow a is public key in orderto verify the signature.But if b knows a is\npublic key, then b'sgoing to be reasonably\nconfident that a is the one thatsent this message over.Make sense?Another thing you could\ndo is rely on encryption.So maybe b could send the\nnons back to a encryptedunder a's public key.And then only a would be\nable to decrypt the nonsand generate the final\nsession key s prime.So there are a couple\nof tricks you could do.This is roughly how\nclient certificateswork in web browsers today.So a has a secret\nkey, so when getan MIT personal certificate,\nwhat happens is your browsergenerates a long\nlived secret keyand gets a certificate for it.And whenever you send\nto request a web server,you're going to prove\nthe fact that youknow the secret key in\nyour user certificate,and then establish the\nsecret key s for the restthe communication.Make Sense?All right.These are sort of all fixable\nproblems at the protocol levelthat are reasonably\neasy to V addressby adding extra messages.The big assumption here, of\ncourse, that we're going underis that all the parties know\neach other's public keys.So do you actually discover\nsomeone's public key?for, you know, it a wants\nto connect a website,I have a URL that I want to\nconnect to, or a host name,how do I know what pub\nkey that corresponds to?Or similarly, if I connect to\nwebsis to look at my grades,how does the server know\nwhat my public key should be,", "start": 840.0, "heat": 0.1}, {"text": "as opposed to the public key\nof some other at person MIT?So this is the main problem\nthat the KDC was addressing.I guess the KDC was solving\ntwo problems for us before.One it that is was\ngenerating this message.It was generating\nthe session keyand encrypting it\nfor the server.We fixed that by doing\npublic key crypto now.But we also need to get this\nmapping from string principalnames to cryptographic keys\nof the Kerberos previouslyprovided to us.And the way that\nis going to happenin this the https world,\nthis protocol called TLC,is that we're going to\nstill rely on some partiesto maintain, of to\na least logicallymaintain those giant tables\nmapping principal namesonto cryptographic keys.And the plan is, we're\ngoing to have somethingcalled a certificate authority.This is often abbreviated\nas CA in all kindsof security literature.This thing is also going\nto logically maintainthe stable of, here's\nthe name of a principle,and here's the public\nkey for that principle.And the main difference from\nthe way Kerberos worked,is that this\ncertificate authoritything isn't going to have to\nbe online for all transactions.So in Kerberos you have\nto talk to those KDCsto get a connection or\nto look up someone's key.Instead, what's going to\nhappen in this CA world,is that if you have some\nname here, and a public key,the certificate\nauthority is goingto just sign messages stating\nthat certain rows existin this table.So the certificate\nauthority is goingto have its own sort of\nsecret and public key here.", "start": 960.0, "heat": 0.1}, {"text": "And it's going to\nuse the secret keyto find messages for other\nusers in the system to rely on.So if you have a\nparticular entry like this,in this CA's\ndatabase, then the CAis going to find a\nmessage saying this namecorresponds to this public key.And it's going to sign\nthis whole messagewith CA's secret key.Make sense?So this is going to allow us to\ndo very similar things to whatKerberos was doing,\nbut we are nowgoing to get rid of\nthe CA having to beonline for all transactions.And in fact, it's now going\nto be much more scalable.So this is what's usually\ncalled a certificate.And the reason this is going\nto be much more scalableis that, in fact, to a client,\nor anyone using this system,a certificate provided\nfrom one sourceis as good as a certificate\nprovided from any other source.It's signed by\nthe CA secret key.So you can verify its\nvalidity without havingto actually contact\nthe certificateauthority, or any other\ndesignated party here.And typically, the way\nthis works is that a serverthat you want to talk to\nstores the certificate that itoriginally got from the\ncertificate authority.And whenever you connect\nto it, the serverwill tell you, well,\nhere's my certificate.It was signed by this CA.You can check the\nsignature and just verifythat this is, in fact, my\npublic key and that's my name.And on the flip\nside, the same thinghappens on client certificates.So when you the user connect to\na web server, what's actuallygoing on is that your\nclient certificate actuallytalks about the public key\ncorresponding to the secret keythat you originally\ngenerated in your browser.And this way when you\nconnect to a server,you're going to present\na certificate signedby MIT's certificate authority\nsaying your user namecorresponds to this public key.And this is how the server\nis going to be convinced", "start": 1080.0, "heat": 0.1}, {"text": "that a message signed\nwith your secret keyis proof that this is the right\nAthena user connecting to me.Does that make sense?Yeah.AUDIENCE: Where does\nthe [? project ?] getthe certificate [INAUDIBLE]?PROFESSOR: Ah, yes.Like the chicken\nand the egg problem.It keeps going down.Where do you get\nthese public keys?At some point you have\nto hard code these in,or that's typically\nwhat most systems do.So today what\nactually happens isthat when you download\na web browser,or you get a computer\nfor the first time,it actually comes with\npublic keys of hundredsof these certificate\nauthorities.And there's many of them.Some are run by security\ncompanies like VeriSign.The US Postal Service has\na certificate authority,for some reason.There's many entities there\nthat could, in principal, issuethese certificates and are\nfully trusted by the system.These mini certificate\nauthoritiesare now replacing the trust\nthat we had in this KDC.And sometimes, we\nhaven't actuallyaddressed all the problems\nwe listed with Kerberos.So previously were worried\nthat, oh man, how arewe going to trust?How is everyone\nin the word goingto trust a single KDC machine?But now, it's actually worse.This is actually worse that\nin some ways, because insteadof trusting a\nsingle KDC machine,everyone is now trusting\nthese hundreds or certificateauthorities because all of\nthem are equally as powerful.Any of them could sign\na message like thisand it would be\naccepted by clientsas a correct statement\nsaying this principlehas this public key.So you have to only break\ninto one of these guys insteadof the one KDSC.Yeah?AUDIENCE: Is there a\nmechanism to open the keys?PROFESSOR: Yeah.That's another hard problem.It turns out to be that\nbefore we talked to the KDC,and if you screwed\nup, you could tellthe KDC to stop giving\nout my key, or change it.Now the certificates are\nactually potentially validforever.So the typical\nsolution is twofold.One is, sort of expectedly,\nthese certificates", "start": 1200.0, "heat": 0.1}, {"text": "include an expiration time.So this way you can at\nleast bound the damage.Is This is kind of like a\nKerberos ticket's lifetime,except in practice, these\ntend to be to several ordersof magnitude higher.So in Kerberos, your\nticket's lifetimecould be a couple hours.Here it's typically a year\nor something like this.So the CAs really don't want\nto be talked to very often.So you want to get\nyour money oncea year for the\ncertificate, and thengive you out this\nblob of signed bytes,and you're good\nto go for a year.You don't have to\nconduct them again.So this is good for scalability,\nbut not so good for security.And there's two problems\nthat you might worry aboutwith certificates.One is that Maybe\nthe CA's screwed up.So maybe the CA issued a\ncertificate for the wrong name.Like, they weren't very careful.And accidentally, I\nask them to give youa certificate for amazon.com,\nand they just slipped upand said, all right, sure.That's amazon.com.I will give you a\ncertificate for that.So that seems like a\nproblem on the CA side.So they miss-issued\na certificate.And that's one way that you\ncould end up with a certificatethat you wish no longer\nexisted, because yousigned the wrong thing.Another possibility\nis that they CAdoes the right thing,\nbut then the person whohad the certificate I\naccidentally disclosedthe secret key, or someone stole\nthe secret key correspondingto the public key\nin the certificate.So this means that\ncertificate no longer sayswhat you think it might mean.Even though this says\namazon.com's key is this,actually every one\nin the world hasthe corresponding secret\nkey because posted iton the internet.So you can't really\nlearn much from someonesending you a message signed by\nthe corresponding secret key,because it could've been anyone\nthat stole the secret key.So that's another\nreason why you mightwant to revoke a certificate.And revoking certificates\nis pretty messy.There's not really\na great plan for it.The two alternatives\nthat people have triedare to basically publish\na list of all revoked", "start": 1320.0, "heat": 0.148}, {"text": "certificates in the world.This Is something called\ncertificate revocationlist, or CRLs.And the way this works\nis that every certificateauthority issues\nthese certificates,but then on the side, it\nmaintains a list of mistakes.These are things\nthat it realizedthey screwed up and\nissued a certificateunder the wrong name, or\nour customers come to themand say, hey, you\nissued me a certificate.Everything was going great.But someone then got\nrude on my machineand stole the private key.Please tell the world that my\ncertificate is no good anymore.So this certificate\nauthority, in principle,could add stuff to this CRL, and\nthen clients like web browsersare supposed to download\nthis CRL periodically.And then whenever they're\npresented with a certificate,they should check\nif the certificateappears in this revoked list.And it shows up\nthere, then shouldsay that certificate's no good.You better give me a new one.I'm not going to trust\nthis particular signmessage anymore.So that's one plan.It's not great.If you really used, it\nwould be a giant list.And it would be quite a lot\nof overhead for everyonein the world to download this.The other problem is\nthat no one actuallybothers doing this stuff. so\nthe lists in practice are empty.If you actually ask all\nthese CAs, most of themwill give you back an empty CRL\nbecause no one's ever botheredto add anything to this list.Because, why would you?It will only break\nthings because itwill reduce the number of\nconnections that will succeed.So it's not clear whether there\nis a great motivations for CAsto maintain this CRL.The other thing that\npeople have triedis to query online the CAs.Like in the Kerberos world, we\ncontact the KDC all the time.And in the CA world we try\nto get out of this businessand say, well, the\nCA's only goingto sign these\nmessages once a year.That's sort of a bummer.So there's an\nalternative protocolcalled online certificate\nstatus protocol, or OCSP.And this protocol pushes\nus back from the CA worldto the KDC world.So whenever a client\ngets a certificate", "start": 1440.0, "heat": 0.1}, {"text": "and they're curious, is this\nreally a valid certificate?Even though it's before\nthe expiration time,maybe something went wrong.So using this OCSP protocol,\nyou can contact some serverand just say, hey, I\ngot this certificate.Do you think it's still valid?So basically, offloading the\njob of maintaining this CRLto a particular server.So instead of downloading\na whole list yourself,you're going to ask\nthe server, hey, isthis thing in that list?So that's another plan\nthat people have tried.It's also not used very\nwidely because of two factors.One is that it adds latency to\nevery request that you make.So every time you want\nto connect to a server,now you have to first\nconnect, get the certificatefrom the server.Now you have to talk\nto this OCSP guyand then wait for him to respond\nand then do something else.So for latency reasons,\nthis is actuallynot a super popular plan.Another problem\nis that you don'twant this OCSP thing being down\nfrom affecting your abilityto browse the web.Suppose this OSCP\nserver goes down.You could, like, disable\nthe whole internetbecause you can't check\nanyone's certificate.Like, it could be all bad.And then all your\nconnections stop working.So no one wants that.So most clients\ntreat the OCSP serverbeing down as sort\nof an OK occurrence.This is really bad from\na security perspectivebecause if you're\nan attacker and youwant to convince\nsomeone that you havea legitimate certificate, but\nit's actually been revoked,all you have to do\nis somehow preventthat client from talking\nto the OCSP server.And then the client will say,\nwell, I do the certificate.I'll try to check\nit, but this guydoesn't seem to be around,\nso I'll just go for it.So that's basically the\nsort of lay of the landas far as verification goes.So there's no real great answer.The thing that\npeople do in practiceas an alternative to this\nis that clients just hardcode in really bad mistakes.So for example, the Chrome\nweb browser actually", "start": 1560.0, "heat": 0.1}, {"text": "ships inside of it with\na list of certificatesthat Google really\nwants to revoke.So if someone\nmis-issues a certificatefor Gmail or for some other\nimportant site-- like Facebook,Amazon, or whatever-- then\nthe next release of Chromewill contain that thing in\nits verification list bakedinto Chrome.So this way, you don't have\nto contact the CRL server.You don't have to\ntalk to this OCSP guy.It's just baked in.Like, this certificate\nis no longer valid.The client rejects it.Yeah.AUDIENCE: Sorry, one last thing.PROFESSOR: Yeah.AUDIENCE: So let's say\nI've stolen the secret keyon the certificate [INAUDIBLE].All public keys are\n[? hard coded-- ?]PROFESSOR: Oh, yeah.That's [INAUDIBLE] really bad.I don't think there's any\nsolution baked into the systemright now for this.There have been\ncertainly situationswhere certificate\nauthorities appearto have been compromised.So in 2011, there\nwere two CAs thatwere compromised in the\nissue, or they were somehowtricked into issuing\ncertificates for Gmail,for Facebook, et cetera.And it's not clear.Maybe someone did\nsteal their secret key.So what happened is I\nthink those CAs actuallygot removed from a\nset of trusted CAsby browsers from that point on.So the next release of Chrome\nis just like, hey, you'rereally screwed up.We're going to kick you\nout of the sort of CAs thatare trusted.And it was actually\nkind of a bummerbecause all of the\nlegitimate people thathad certificates from\nthat certificate authorityare now out of luck.They have to get\nnew certificates.So this is a somewhat\nmessy system,but that's sort of what happens\nin practice with certificates.Make sense?Other questions\nabout how this works?All right.So this is the sort of general\nplan for how certificates work.And as we were\ntalking about, they'resort of better than\nKerberos in the sensethat you don't have to\nhave this guy be online.It might be a little\nbit more scalablebecause you can\nhave multiple KDCs,and you don't have\nto talk to them.Another cool thing\nabout this protocolis that unlike Kerberos,\nyou're not forced", "start": 1680.0, "heat": 0.1}, {"text": "to authenticate both parties.So you could totally\nconnect to a web serverwithout having a\ncertificate for yourself.This happens all the time.If you just go to\namazon.com, youare going to check that\nAmazon is the right entity,but Amazon has no idea who you\nare necessarily, or at leastnot until you log in later.So the crypto protocol level,\nyou have no certificate.Amazon has a certificate.So that was actually\nmuch better than Kerberoswhere in order to connect\nto a Kerberos service,you have to be an entry in\nthe Kerberos database already.One thing that's a little bit\nof a bummer with this protocolas we've described it is\nthat in fact, the server doeshave to have a certificate.So you can't just\nconnect to a serverand say, hey, let's\njust encrypt our stuff.I have no idea who you\nare, or not really,and you don't have\nany idea who I am,but let's encrypt it anyway.So this is called\nopportunistic encryption,and it's of course vulnerable\nto man in the middle attacksbecause you're connecting\nto someone and saying,well, let's encrypt\nour stuff, but youhave no idea who it really is\nthat you're encrypting stuffwith.Both might be a\ngood idea anyway.If someone is not actively\nmounting an attack against you,at least the packets later on\nwill be encrypted and protectedfrom snooping.So it's a bit of\na shame that thisprotocol that we're looking\nat here-- SSL, TLS, whatever--doesn't offer this kind of\nopportunistic encryption thing.But such is life.So I guess the server\n[INAUDIBLE] in this protocol.The client sometimes can and\nsometimes doesn't have to.Make sense?Yeah.AUDIENCE: I'm just curious.What's to stop\nsomeone from-- I mean,let's just say that\nonce a year, theycreate using new name key pairs.So why couldn't you kind of\ntry to spend that entire yearfor that specific key?PROFESSOR: Huh?AUDIENCE: Why does that\nnot work with this?PROFESSOR: I think it does work.So OK, so it's like what\ngoes wrong with this scheme.Like, one of the\nthings that we haveto do with the\ntopography of good here,and as with Kerberos, people\nstart off using good crypto,but it gets worse\nand worse over time.Computers get faster.There's better algorithms\nthat are breaking this stuff.And if people are not\ndiligent about increasing", "start": 1800.0, "heat": 0.1}, {"text": "their standards, then\nthese problems do creep up.So for example, it used to be\nthe case that many certificateswere signed.Well, there's two\nthings going on.There's a public key\nsignature scheme.And then because the public key\ncrypto has some limitations,you typically-- actually,\nwhen you sign a message,you actually take a\nhash of the messageand then you sign the\nhash itself because it'shard to sign a gigantic\nmessage, but it'seasy to sign a compact hashAnd one thing that\nactually went wrongis that people used to\nuse MD5 as a hash functionfor collapsing the big message\nhere signing into a 128 bitthing that you're\ngoing to actually signwith a crypto system.MD5 was good maybe 20 years\nago, and then over time,people discovered weaknesses\nin MD5 that could be exploited.So actually, at some\npoint, someone did actuallyask for a certificate with\na particular MD5 hash,and then they\ncarefully figured outanother message that hashes\nto the same MD5 value.And as a result, now you have a\nsignature by a CA on some hash,and then you have a different\nmessage, a different key,or a different\nname that you couldconvince someone was signed.And this does happen.Like, if you spend a lot of time\ntrying to break a single key,than you will\nsucceed eventually.If that certificate\nwas using crypto,that could be brute force.Another example of something\nthat's probably not so greatnow is if you're using RSA.We haven't really\ntalked about RSA,but RSA is one of\nthese public key cryptosystems that allows us to\neither encrypt messages or signmessages.With RSA, these\ndays, it's probablyfeasible to spend lots of money\nand break 1,000 bit RSA keys.You'd probably have to\nspend a fair amount of work,but it's doable, probably\nwithin a year easily.From there, absolutely.You can ask a certificate\nauthority to sign some message,or you can even take\nsomeone's existing public keyand try to brute force the\ncorresponding secret key, or[? manual hack. ?]So you have to keep up with\nthe attackers in some sense.", "start": 1920.0, "heat": 0.1}, {"text": "You have to use\nlarger keys with RSA.Or maybe you have to use\na different crypto scheme.For example, now people\ndon't use MD5 hashesand certificates.They use SHA-1, but that\nwas good for a while.Now SHA-1 is also weak,\nand Google is actually nowactively trying to push web\ndevelopers and browser vendorset cetera to discontinue\nthe use of SHA-1and use a different hash\nfunction because it's prettyclear that maybe in\n5 or 10 years time,there will be relatively\neasy attacks on SHA-1.It's already been\nshown to be weaker.So I guess there is no\nmagic bullet, per se.You just have to\nmake sure that youkeep evolving with the hackers.Yeah.There is a problem, absolutely.Like, all of this stuff\nthat we're talking aboutrelies on crypto being correct,\nor sort of being s to break.So you have to pick\nparameters suitably.At least here, there's\nan expiration time.So well, let's pick\nsome parametersthat are good for a year\nas opposed to for 10 years.The CA has a much\nbigger problem.This key, there's no\nexpiration on it, necessarily.So that's less clear\nwhat's going on.So probably, you would pick\nreally aggressively sortof safe parameters.So 4,000 or 6,000\nbit RSA or something.Or another scheme all together.Don't use SHA-1 at all here.Yeah.No real clear answer.You just have to do it.All right.Any other questions?All right.So let's now look at-- so\nthis is just like the protocolside of things.Let's now look at how\ndo we integrate thisinto a particular application,\nnamely the web browser?So I guess if you want to secure\nnetwork communication, or sortof websites, with\ncryptography, there'sreally three things we\nhave to protect in browser.So the first thing we have to\nprotect is data on the network.And this is almost the easy\npart because well, we'rejust going to run a\nprotocol very much like whatI've been describing so far.We'll encrypt all the\nmessages, sign them,", "start": 2040.0, "heat": 0.1}, {"text": "make sure they haven't\nbeen tampered with,all this great stuff.So that's how we're\ngoing to protect data.But then there's two other\nthings in a web browserthat we really have\nto worry about.So the first of them\nis anything thatactually runs in the browser.So code that's running\nin the browser,like JavaScript or\nimportant data that'sstored in the browser.Maybe your cookies, or local\nstorage, or lots of other stuffthat goes on in a\nmodern browser allhas to be somehow protected\nfrom network [? of hackers. ?]And we'll see the\nkinds of thingswe have to worry about\nhere in a second.And then the last thing that you\nmight not think about too muchbut turns out to be a\nreal issue in practiceis protecting the\nuser interface.And the reason for this\nis that ultimately,much of the confidential data\nthat we care about protectingcomes from the user.And the user is typing this\nstuff into some website,and the user probably\nhas multiple websitesopen on their computer\nso that the user hasto be able to distinguish\nwhich site they're actuallyinteracting with at\nany moment in time.If they accidentally typed their\nAmazon password into some webdiscussion forum, it's\ngoing to be disastrousdepending on how much you care\nabout your Amazon password,but still.So you really want to\nhave good user interfacesort of elements that\nhelp the user figure outwhat are they doing?Am I typing this confidential\ndata into the right website,or what's going to happen to\nthis data when I submit it?So this turns out to be a pretty\nimportant issue for protectingweb applications.All right.Make sense?So let's talk actually\nwhat the current webbrowsers do on this front.So as I mentioned, here\nfor protecting [INAUDIBLE],we're just going to use this\nprotocol called SSL or TLS nowthat encrypts and\nauthenticates data.It looks very similar to the\nkind of discussion we've hadso far.It includes the certificate\nauthorities, et cetera.And then of course,\nmany more details.Like, TLS is hugely\ncomplicated, but it's not", "start": 2160.0, "heat": 0.1}, {"text": "particularly interesting\nfrom this [INAUDIBLE] angle.All right, so protecting,\n[? stopping ?] the browserturns out to be much\nmore interesting.And the reason is that\nwe need to make surethat any code or data delivered\nover non-encrypted connectionscan't tamper with\ncode and data thatcame from an\nencrypted connectionbecause our threat model is\nthat anything that's unencryptedcould potentially be tampered\nwith by a network [? backer. ?]So we have to make\nsure that if wehave some unencrypted JavaScript\ncode running on our browser,then we should assume\nthat that could'vebeen tampered with an attacker\nbecause it wasn't encrypted.It wasn't authenticated\nover the network.And consequently,\nwe should prevent itfrom tampering with any\npages that were deliveredover an encrypted connection.So the general plan\nfor this is we're goingto introduce a new URL scheme.Let's call HTTPS.So you often see this in URLs,\npresumably in your own life.And there's going to be two\nthings that-- well, firstof all, the cool thing about\nintroducing a new URL schemeis that now, these URLs are\njust different from HTTP URLs.So if you have a URL that's\nHTTPS colon somethingsomething, it's a\ndifferent originas far as the same origin policy\nis concerned from regular HTTPURLs.So HTTP URLs go over\nunencrypted corrections.These things are\ngoing over SSL/TLS.So you'll never confuse\nthe two if the same originpolicy does its job correctly.So that's one bit of a puzzle.But then you have\nto also make surethat you correctly distinguish\ndifferent encrypted sitesfrom one another.It then turns out cookies\nhave a different policyfor historical reasons.So let's first talk\nabout how we'regoing to distinguish\ndifferent encrypted sitesfrom one another.So the plan for that\nis that actually,the host name via the URL has to\nbe the name in the certificate.", "start": 2280.0, "heat": 0.1}, {"text": "So that's what\nactually turns outthat the certificate\nauthorities aregoing to sign at\nthe end of the daySo we're going to literally\nsign the host name that shows upin your URL as the name for\nyour web server's public key.So Amazon presumably has a\ncertificate for www.amazon.com.That's the name,\nand then whateverthe public key corresponding\nto their secret key is.And this is what the\nbrowser's going to look for.So if it gets a\ncertificate-- well,if it tries to connect or get\na URL that's https://foo.com,it better be the case that the\nserver presents a certificatefor foo.com exactly.Otherwise, we'll say, well, we\ntried to connect to one guy,but we actually\nhave another guy.That's a different\nname in the certificatethat we connected to.And that'll be a\ncertificate mismatch.So that's how we are going to\ndistinguish different sitesfrom one another.We're basically\ngoing to get the CAsto help us tell\nthese sites apart,and the CAs are going to\npromise to issue certificatesto only the right entities.So that's on the\nsame margin policyside, how we're going to\nseparate the code apart.And then as it turns out--\nwell, as you might remember,cookies have a slightly\ndifferent policy.Like, it's almost the same\norigin, but not quite.So cookies have a\nslightly different plan.So cookies have this secure flag\nthat you can set on a cookie.So the rules are, if a\ncookie has a secure flag,then it gets sent only\nto HTTPS requests,or along with HTTPS requests.And if a cookie doesn't\nhave a secure flag,then it applies to both\nHTTP and HTTPS requests.Well, it's a little\nbit complicated, right.It would be cleaner\nif cookies just said,well, this is a cookie\nfor an HTTPS post,and this is a cookie\nfor HTTP host.And they're just\ncompletely different.", "start": 2400.0, "heat": 0.1}, {"text": "That would be very clear in\nterms of isolating secure sitesfrom insecure sites.Unfortunately, for\nhistorical reasons,cookies have this weird\nsort of interaction.So if a cookie is marked\nsecure, then it onlyapplies to HTTPS sites.Well, there's a host\nalso as well, right.So secure cookies apply\nonly to HTTPS host URLs,and insecure cookies\napply to both.So that will be some source of\nproblems for us in a second.Make sense?All right.And the final bit\nthat web browsersdo to try to help us along in\nthis plan is for the UI aspect,they're going to introduce\nsome kind of a lock iconthat users are supposed to see.So there's a lock\nicon in your browser,plus you're supposed to look\nat the URL to figure outwhich site you're on.Now that's how web\nbrowser developers expectyou to think of the world.Like, if you're ever\nentering confidential stuffinto some website, then\nyou should look at the URL,make sure that's\nthe actual host namethat you want to be\ntalking to, and then lookfor some sort of a\nlock icon, and then youshould assume things\nare good to go.So that's the UI aspect of it.It's not great.It turns out that many\nphishing sites will justinclude an image of a lock\nicon in the site itselfand have a different URL.And if you don't know\nexactly what to look foror what's going on, a user\nmight be fooled by this.So this UI side\nis a little messy,partly because users\nare messy, like humans.And it's really\nhard to tell what'sthe right thing to do here.So we'll focus mostly\non this aspect of it,which is much easier\nto discuss precisely.Make sense?Any questions about\nthis stuff so far?Yeah.AUDIENCE: I noticed\nsome websitesthat our HTTPS [INAUDIBLE].PROFESSOR: Yeah.So it turns out that the\nbrowsers evolve over time whatit means to get a lock icon.So one thing that\nsome browsers do", "start": 2520.0, "heat": 0.1}, {"text": "is they give you\na lock icon onlyif all of the content or the\nresources within your pagewere also served over HTTPS.So this is one of\nthe problems thatforced HTTPS tries to\naddress is this mixedcontent or insecure\nembedding kinds of problems.So sometimes, you will be fail\nto get a lock icon becauseof that check.Other times, maybe\nyour certificateisn't quite good enough.So for example, Chrome will\nnot give you a lock iconif it thinks your certificate\nuses weak cryptography.But also, it varies\nwith browsers.So maybe Chrome will not\ngive you a lock icon,but Firefox will.So it's, again,\nthere's no clear specon what this lock icon means.Just people sweep stuff\nunder this lock icon.Other questions?All right.So let's look at h guess\nwhat kinds of problemswe run into with this plan.So one thing I guess we\nshould maybe first talk aboutis, OK, so in\nregular HTTP, we usedto rely on DNS to\ngive us the correct IPaddress on the server.So how much do we have to\ntrust DNS for these HTTPS URLs?Are DNS servers trusted,\nor are these DNS mappingsimportant for us anymore?Yeah.AUDIENCE: They are\nbecause the certificateis signing the domain name.I don't think you sign an\nIP address [INAUDIBLE].PROFESSOR: That's right.Yeah.So the certificate\nsigns the domain name.So this is like amazon.com.So [INAUDIBLE].AUDIENCE: Say someone steals\namazon.com's private keyand [INAUDIBLE] another server\nwith another IP address,and combines [INAUDIBLE]\nIP address [INAUDIBLE].But then you already\nstole the private key.PROFESSOR: That's right.Yeah.So in fact, you're\ndescribing after bothsteal the private key and\nredirect DNS to yourself.", "start": 2640.0, "heat": 0.1}, {"text": "So is DNS in itself sensitive\nenough for us to care about?I guess in some\nsense you're right,that we need DNS\nto find the idea,or otherwise we'd be lost\nbecause this is just the hostname, and we still need to\nfind IP address to talk to it.What if someone\ncompromised the DNS serverand points us at a\ndifferent IP address?Is it going to be bad?Yeah.AUDIENCE: Well, maybe\njust [INAUDIBLE] HTTPS.PROFESSOR: So potentially\nworrisome, right.So they might just refuse\nthe connection altogether.AUDIENCE: Well, no.They just redirect\nyou to the HTTP URL.PROFESSOR: Well, so\ncertainly, if youconnect to it over HTTPS,\nthen they can't redirect.But yeah.Yeah.AUDIENCE: You can [INAUDIBLE]\nand try to fool the user.That's [INAUDIBLE].PROFESSOR: That's right, yeah.So the thing that\nyou mentioned isthat you could try to serve\nup a different certificate.So maybe you-- well, one\npossibility is you somehowcompromised the CA, in\nwhich case all right,you're in business.Another possibility is\nmaybe you'll just signthe certificate by yourself.Or maybe you have some old\ncertificate for this guythat you gotten the\nprivate key for.And it turns out\nthat web browsers,as this sort of forced HTTPS\npaper we're reading touched on,most web browsers actually ask\nthe user if something doesn'tlook right with the\ncertificate, whichseems like a fairly\nstrange thingto do because here's the rule.The host name has to match\nthe name of the certificate,and it has to be valid.It has to be unexpired,\nall these very clear rules.But because of historically the\nway HTTPS has been deployed,it's often been the case\nthat web server operatorsmis-configure HTTPS.So maybe they just forget\nto renew their certificate.Things were going\nalong great and youdidn't notice that your\ncertificate was expiredand you just forgot to renew it.So it seems to web\nbrowser developers, thatseems like a bit of a bummer.Oh, man.It's just expired.Let's just let\nthe user continue.So they offer a dialogue\nbox for the user saying,well, I got a\ncertificate, but itdoesn't look right in some way.", "start": 2760.0, "heat": 1.0}, {"text": "[INAUDIBLE] go ahead\nanyway and continue.So web browsers will allow\nusers to sort of overridethis decision on things like\nexpiration of certificates.Also for host names,\nit might be the casethat your website has many name.Like for Amazon,\nyou might connectto amazon.com, or maybe\nwww.amazon.com, or maybeother host names.And if you are not careful\nwith the website operator,you might not know\nto get certificatesfor every possible name\nthat your website has.And then a user is sort\nof stuck saying, well,the host name doesn't\nlook quite right,but maybe let's go anyway.So this is the reason\nwhy web browsers allowusers to accept more\nbroadly, or a broader rangeof certificates, than these\nrules might otherwise dictate.So that's [INAUDIBLE] problem.And then if you\nhijack DNS, then youmight be able to\nredirect the userto one of these\nsites that serves upa incorrect certificate.And if the user isn't\ncareful, they'regoing to potentially approve\nthe browser acceptingyour certificate, and then\nyou're in trouble then.That's a bit of a gray area\nwith respect to how muchyou should really trust DNS.So you certainly don't want to\ngive arbitrary users controlof your DNS name [INAUDIBLE].But certainly, the goal\nof SSL/TLS and HTTPS,all this stuff, is to\nhopefully not trust DNS at all.If everything works\nhere correctly,then DNS shouldn't be trusted.You can [INAUDIBLE].You should never be able\nto intercept any dataor corrupt data, et cetera.Make sense?That's if everything\nworks, of course.It's a little bit\nmessier than that.All right.So I guess one interesting\nquestion to talk aboutis I guess how bad\ncould an attack beif the user mis-approves\na certificate?So as we were saying,\nif the user acceptsa certificate for the wrong\nhost or accepts an expired", "start": 2880.0, "heat": 0.1}, {"text": "certificate, what\ncould go wrong?How much should we worry about\nthis mistake from the user?Yeah.AUDIENCE: Well, [INAUDIBLE].But it could be,\n[? in example ?], not the sitethe user wants to visit.So they could do things like\npretend to be the user's name.PROFESSOR: Right.So certainly, the user\nmight then I guessbe fooled into thinking,\noh, I have all this money,or you have no money at all\nbecause the result page comesback saying here's your balance.So maybe the user\nwill assume somethingabout what that bank has\nor doesn't have basedon the result. Well,\nit still seems bad,but not necessarily\nso disastrous.Yeah.AUDIENCE: I think\nthat an [INAUDIBLE]get all the user's\ncookies and [INAUDIBLE].PROFESSOR: Right.So this is your fear, yeah.This is much more\nworrisome, actually,or has a much more longer\nlasting impact on you.And the reason this works out\nis because the browser, whenit figures out [INAUDIBLE]\nmakes a decisionas to who is allowed to get\na particular set of cookiesor not just looks at\nthe host name in the URLthat you were supposed\nto be connected to.So if you connect to some\nattackers' web server,and then you just accept their\ncertificate for amazon.comas the real thing,\nthen the browserwill think, yeah, the entity\nI'm talking to is amazon.com,so I will treat them as I\nwould a normal amazon.comserver, which means that\nthey should get accessto all the cookies that\nyou have for that host.And presumably they could\nrun a JavaScript codein your browser in that\nsame origin principle.So if you have\nanother site open thatwas connecting to the\nreal website-- like maybeyou had a tab open\nin your browser.You closed your laptop,\nthen you opened iton a different network, all of\na sudden, someone interceptedyour connection to\namazon.com and injectedtheir own response.If you approve it,\nthen they'll beable to access\nthe old amazon.compage you have open because\nas far as the browser is", "start": 3000.0, "heat": 0.1}, {"text": "concerned, these\nare the same originbecause they have\nthe same host name.That's going to be troublesome.So this is potentially\nquite a unfortunate attackif the user makes\nthe wrong choiceon approving that certificate.Make sense?Any questions about that?All right.So that's one sort of, I guess,\nissue that this forced HTTPSpaper is worried\nabout is users makinga mistake in the decision,\nusers having too much leewayin accepting certificates.Another problem that\nshows up in practiceis that-- we sort of\nbriefly talked about this--but this is one of the\nthings that also forcedHTTPS, I think, is\nsomewhat concerned aboutis this notion of insecure\nembedding, or mixed content.And the problem that\nthis term refers tois that a secure site, or\nany website for that matter,can embed other pieces of\ncontent into a web page.So if you have some sort of\na site, foo.com/index.html,this site might be\nserved from HTTPS,but inside of this HTML page,\nyou could have many tags thatinstruct the browser to go\nand fetch other stuff as partof this page.So the easiest thing\nto sort of think aboutis probably script\ntags where youcan say script source\nequals http jquery.com.So this is a popular\nJavaScript librarythat makes it easier to\ninteract with lots of stuffin your browser.But many web developers\njust reference a URLon another site like this.So we should be fairly\nstraightforward,but what's the problem\nwith this kind of set up?Suppose you have a secure\nsite and you just load jQuery.Yeah.AUDIENCE: It could\nbe fake jQuery.", "start": 3120.0, "heat": 0.1}, {"text": "PROFESSOR: Yeah.So there are actually\ntwo ways that youcould get the wrong thing\nthat you're not expecting.One possibility is that\njQuery itself is compromised.So that seems like, well,\nyou get what you asked for.You asked for this\nsite from jquery.comand that's what you get.If jQuery is compromised,\nthat's too bad.Another problem is\nthat this requestis going to be sent without any\nencryption or authenticationover the network.So if an adversary is in control\nover your network connection,then they could\nintercept this requestand serve back some other\nJavaScript code in response.Now, this JavaScript\ncode is goingto run as part of this page.And now, because it's running\nin this HTTPS foo.com domain,it has access to your\nsecure cookies for foo.comand any other stuff you have\nin that page, et cetera.So it seems like a\nreally bad thing.So you should be careful not to.Or a web developer\ncertainly shouldbe careful not to make\nthis kind of a mistake.So one solution is to ensure\nthat all content embeddedin a secure page is also secure.So this seems like a good\nguideline for many webdevelopers to follow.So maybe you should just\ndo https colon jquery.com.Or it turns out that URLs\nsupport these origin relativeURLs, which means you could omit\nthe HTTPS part and just say,[INAUDIBLE] script source\nequals //jquery.com/ something.And what this means is to\nuse whatever URL schemeyour own URL came from.So this tag will translate\nto https jquery.comif it's on an HTTPS page, and\nto regular http jquery.comif it's on a non-HTTPS,\njust regular HTTP URL.So that's one way to\navoid this problem.Another thing that actually\nrecently got introduced.So this field is\nsomewhat active.People are trying to\nmake things better.", "start": 3240.0, "heat": 0.1}, {"text": "One alternative way of\ndealing with this problemis perhaps to include a hash or\nsome sort of an [? indicator ?]right here in the tag, because\nif you know exactly whatcontent you want to load,\nmaybe you don't actuallyhave to load it all over HTTPS.You don't actually care who\nserves it to you, as long as itmatches a particular hash.So there's actually\na new spec out therefor being able to\nspecify basicallyhashes in these kinds of tags.So instead of having to refer\nto jquery.com with an HTTPS URL,maybe what you\ncould do is just sayscript source equals\njquery.com, maybe even HTTP.But here, you're going to\ninclude some sort of a tagattribute, like\nhash equals here,you're going to put in a--\nlet's say a shell one hashor a shell two\nhash of the contentthat you're expecting to\nget back from the server.AUDIENCE: [INAUDIBLE].PROFESSOR: Question?AUDIENCE: [INAUDIBLE].PROFESSOR: Ah, man.There's some\ncomplicated name for it.I have the URL, actually, in the\nlecture notes, so [INAUDIBLE].Subresource integrity\nor something like this.I can actually slowly\nbe-- well, hopefullywill be deployed probably\nsoon in various browsers.Feels like another way to\nactually authenticate contentwithout relying on data, or data\nencryption of the [INAUDIBLE].So here, we have this\nvery generic planusing SSL and TLS to\nauthenticate connectionsto particular servers.This is almost like\nan alternative wayof thinking of sort of securing\nyour network communication.If the thing you just\ncare about is integrity,then maybe you don't need\na secure, encrypted channelover the network.All you need is to\nspecify exactly what youwant at the end of the day.Yeah.AUDIENCE: So doesn't\nthis [INAUDIBLE]?PROFESSOR: Doesn't this\ncode sit at the client?Well, it runs at the client,\nbut the client fetches this codefrom some server.AUDIENCE: [INAUDIBLE].Can't anybody just [INAUDIBLE]?", "start": 3360.0, "heat": 0.1}, {"text": "PROFESSOR: Yeah.So I think the\npoint of the hash isto protect the containing page\nfrom attackers that injecteddifferent JavaScript code here.So for jQuery, this\nmakes a lot of sensebecause jQuery is well known.You're not trying to hide\nwhat jQuery source code is.Well, what you do want to\nmake sure is that the networkattacker cannot intercept\nyour connection and supplya malicious version of\njQuery that's going to leakyour cookies.AUDIENCE: [? Oh, ?] OK.PROFESSOR: That make sense?It's absolutely true that\nanyone can compute the hashof these things for themselves.So this is a solution\nfor integrity problems,not for confidentiality.All right.So this is sort of what I guess\ndevelopers have to watch outfor when writing pages, or\nincluding content in their HTMLpages on a HTTPS URL.Another worrisome problem\nis dealing with cookies.And here's where this difference\nbetween secure flags and justorigins comes into play.So one thing, of course,\nthe developer could screw upis maybe they just forget\nto set the secure flagon a cookie in the first place.This happens.Maybe you're thinking my users\nonly ever go to the HTTPS URL.My cookies are\nnever [INAUDIBLE].Why should I set the\nsecure flag on the cookie?And they might\n[? also have the ?]secure flag, or maybe\nthey just forget about it.Is this a problem?What if your users\nare super diligent?They always visit the\nHTTPS URL, and you don'thave any problems like this.Do you still leave the\nsecure flag on your cookies?[INAUDIBLE]Yeah.AUDIENCE: Could the\nattacker connect to your URLand redirect you\nto a [INAUDIBLE]?PROFESSOR: Yeah.So even if the user doesn't\nexplicitly, manuallygo to some plain text URL, the\nattacker could give you a link,", "start": 3480.0, "heat": 0.1}, {"text": "or maybe ask you to load an\nimage from a non-HTTPS URL.And then non-secure\ncookie is justgoing to be sent along\nwith the network request.So that seems like\na bit of a problem.So you really do\nneed the secure flag,even if your users and your\napplication is super careful.AUDIENCE: But I'm\nassuming there'san HTTP URL [INAUDIBLE].PROFESSOR: That's right, yeah.So again, so how could\nthis [? break? ?] SupposeI have a site.It doesn't even\nlisten on port 80.There's no way to\nconnect to me on port 80,so why is it a problem if\nI have a non-secure cookie?AUDIENCE: Because the\nbrowser wouldn't havecookies for another domain.PROFESSOR: That's right.So the browser wouldn't\nsend your cookieto a different domain,\nbut yet it stillseems worrisome that an\nattacker might load a URL.So suppose that amazon.com only\never served stuff over SSL.It's not even\nlistening on port 80.There's no way to connect it.So in this case,\nand as a result,they don't set their\nsecure flag on a cookie.So how could a hacker\nthen steal their cookieif Amazon isn't even\nlistening at port 80?Yeah.AUDIENCE: Can't the\nbrowser still thinkit's an HTTP connection?PROFESSOR: Well, so\nif you connect to port443 and you speak SSL\nor GLS, then it's alwaysgoing to be encrypted.So that's not a problem.Yeah.AUDIENCE: The attacker can\n[INAUDIBLE] their network.PROFESSOR: Yeah.So the attacker can actually\nintercept your packetsthat are trying to connect\nto Amazon on port 80and then appear, and make\nit appear, like you'veconnected successfully.So if the attacker has\ncontrol over your network,they could redirect\nyour packets tryingto get to Amazon to their\nown machine on port 80.They're going to\naccept the connection,and the client isn't going to\nbe able to know the difference.It will be as if Amazon\nis listening on port 80,and then your cookies will be\nsent to this adversary's webserver.AUDIENCE: Because the\nclient is unknown.PROFESSOR: That's right.Yeah, so for HTTP,\nthere's no wayto authenticate the host\nyou're connected to.This is exactly what's going on.HTTP has no authentication,\nand as a result,you have to prevent\nthe cookies from beingsent over HTTP in\nthe first place", "start": 3600.0, "heat": 0.1}, {"text": "because you have no idea\nwho that HTTP connection isgoing to go to if you're\nassuming a network adversary.AUDIENCE: So you need\nnetwork control to do this.PROFESSOR: Well, yeah.So either you have full\ncontrol over your networkso you know that adversaries\naren't going to beable to intercept your packets.But even then, it's\nactually not so great.Like look at the TCP lecture.You can do all kinds of sequence\nnumber of attacks and so on.[? That's going to be ?]\ntroublesome.All right.Any more questions about that?Yeah.AUDIENCE: I'm sorry, but\nisn't the attack interceptedin that case?Is there like a redirect?PROFESSOR: Well, what\nthat hacker presumablywould intercept is an HTTP\nrequest from the client goingto http amazon.com, and\nthat request includesall your amazon.com cookies,\nor cookies for whatever domainit is that you're\nsending your request to.So if you don't mark\nthose cookies as secure,there will be set of both\nencrypted and unencryptedconnections.AUDIENCE: So how does that\nrequest get initiated?PROFESSOR: Ah, OK.Yeah.So maybe you get the user\nto visit newyorktimes.comand you pay for an advertisement\nthat loads an imagefrom http colon amazon.com.And there's nothing\npreventing youfrom saying, please load\nan image from this URL.But when a browser\ntries to connect there,it'll send the cookies if\nthe connection succeeds.Question back there.AUDIENCE: Will it ask\nfor a change [INAUDIBLE]?PROFESSOR: Yeah.So HTTPS everywhere\nis an extensionthat is very similar to\nforced HTTPS in some ways,and it tries to prevent\nthese kinds of mistakes.So I guess one thing\nthat forced HTTP doesis they worry about\nsuch mistakes.And when you sort of opted a\nsite into this forced HTTPSplan, one thing that the\nbrowser will do for youis prevent any HTTPS\nconnections to that hostin the first place.So there's no way to make\nthis kind of mistakesof not flagging your\ncookie as secure,or having other sort of kinds\nof cookie problems as well.Another more subtle\nproblem-- so this,the problem we\ntalked about just nowis the developer\nforgetting to set", "start": 3720.0, "heat": 0.1}, {"text": "the secure flag on a cookie.So that seems fixable.OK, maybe the developer\nshould just do it.OK, fix that problem.The thing that's\nmuch more subtleis that when a secure web\nserver gets a cookie backfrom the client, it actually has\nno idea whether this cookie wassent through an encrypted\nconnection or a plain textconnection because\nwhen the server getsa cookie from the\nclient, all it getsis the key value\npair for a cookie.And as we sort of look at here,\nthe plan for the [INAUDIBLE]follows is that it'll include\nboth secure and insecurecookies when it's sending a\nrequest to a secure server,because the browser\nhere was justconcerned about the\nconfidentiality of cookies.But on the server\nside, you now don'thave any integrity guarantees.When you get a\ncookie from a user,it might have been sent over\nan encrypted connection,but it also might have been sent\nover a plain text connection.So this leads to somewhat\nmore subtle attacks,but the flavor of\nthese attacks tendto be things like\nsession fixation.What it means is that suppose I\nwant to see what emails you'resending.Or maybe I'll set a\ncookie for you thatis a copy of my Gmail, cookie.So when you go to compose\na message in Gmail,it'll actually be saved in\nmy sent folder inside of yoursent folder.It'll be as if you're\nusing my account,and then I'll be able to\nextract things from there.So if I can force a session\ncookie into your browserand sort of get you\nto use my account,maybe I can extract some\ninformation that wayfrom the victim.So that's another problem that\narises because of this greyarea [INAUDIBLE] incomplete\nseparation between HTTPand HTTPS cookies.Question.AUDIENCE: So you would need\na [INAUDIBLE] vulnerabilityto set that cookie [INAUDIBLE].PROFESSOR: No.\n[INAUDIBLE] vulnerabilityto set this cookie.You would just trick the\nbrowser into connectingto a regular HTTP host URL.And without some extension\nlike forced HTTPS or HTTPSeverywhere, you could\nthen, as an adversary,set up a key in\nthe user's browser.It's a non-secure\ncookie, but it's", "start": 3840.0, "heat": 0.1}, {"text": "going to be sent back,\neven on secure requests.AUDIENCE: So do you have to\ntrick the browser into thinkingthe domain is the same domain?PROFESSOR: That's right.Yeah.So you have to intercept\ntheir network connectionand probably do the\nsame kind of attackyou were talking about just\na couple of minutes ago.Yeah.Make sense?All right.So I guess there's\nprobably [INAUDIBLE].So what does forced HTTPS\nactually do for us now?It tries to prevent some\nsubset of these problems.So I guess I should say, so\nforced HTTPS, the paper we readwas sort of a\nresearch proposal thatwas published I guess\nfive or six years ago now.Since then, it's actually\nbeen standardizedand actually adopted.So this was like a somewhat\nsketchy plug-in thatstored stuff and some cookies.Are they worried about\ngetting evicted and so on?Now actually, most\nbrowsers look at this paperand say, OK, this\nis a great idea.We'll actually\nimplement it betterwithin the browser itself.So there's something called HTTP\nstrict transport security thatimplements most of the\nideas from forced HTTPSand actually make a good story.Like, here's how research\nactually makes an impact on Iguess security of web\napplications and browsers.But anyway, let's look\nat what forced HTTPSdoes for a website.So forced HTTPS allows a\nwebsite to set this bitfor a particular host name.And the way that forced\nHTTPS changes the behaviorof the browser is threefold.So if some website\nsets forced HTTPS,then there's sort of three\nthings that happen differently.So any certificate\nerrors are always fatal.So the user doesn't\nhave a chanceof accepting incorrect\ncertificate thathas a wrong host name, or an\nexpiration time that's passed,et cetera.So it's one thing that\nthe browser now changes.Another is that it redirects\nall HTTP requests to HTTPS.", "start": 3960.0, "heat": 0.1}, {"text": "So this is a pretty good idea.If you know a site is always\nusing HTTPS legitimately,then you should probably\nprohibit any regular HTTPrequests [? website ?],\nbecause that's probablya sign of some mistake\nor attacker tryingto trick you into connecting\nto a site without encryption.You want to make sure this\nactually happens before youissue the HTTP request.Otherwise, the HTTP request\nhas already sort of sailedonto the network.And the last thing that this\nforced HTTPS setting changes isthat it actually prohibits\nthis insecure embeddingplan that we looked\nat below herewhen you're including a\nHTTP URL in an HTTPS site.Make sense?So this is what the forced\nHTTPS sort of extension did.In terms of what's\ngoing on now isthat well, so this HTTPS\nstrict transport security HSTSprotocol basically\ndoes the same things.Most browsers now prohibit\ninsecure embedding by default.So this used to be a\nlittle controversialbecause many developers\nhave trouble with this.But I think Firefox and Chrome\nand IE all now by defaultwill refuse to load\ninsecure components,or at least secure JavaScript\nand CSS, into our pageunless you do something.Question.AUDIENCE: Don't they\nprompt the user?PROFESSOR: They used to, and\nthe user would just say, yes.So IE, for example, used to\npop up this dialogue box,and this paper\ntalks about, saying,would you like to load\nsome extra content,or something like that.AUDIENCE: [INAUDIBLE]\nbecause [INAUDIBLE].PROFESSOR: Yeah.I think if you try to\npretend to be clever,then you can bypass all\nthese security mechanisms.But don't try to\nbe clever this way.So this is mostly a\nnon-problem in modern browsers,but these two things\nare still thingsthat forced HTTPS and HTTP\nstrict transport security", "start": 4080.0, "heat": 0.1}, {"text": "provide and are useful.Yeah.AUDIENCE: What happens\nwhen a website can'tsupport HTTPS? [INAUDIBLE]\nchange their [INAUDIBLE]?PROFESSOR: So what do you\nmean can't support HTTPS?AUDIENCE: [INAUDIBLE].PROFESSOR: Well, OK.So if you have a website\nthat doesn't support HTTPSbut sets this\ncookie, what happens?AUDIENCE: [INAUDIBLE].PROFESSOR: Yeah.So this is the reason\nwhy it's an option.So if you opted everyone, then\nyou're exactly in this boat.Like, oh, all of a sudden, you\ncan't talk to most of the webbecause they don't use HTTPS.So you really wanted this\nto be selectively enabledfor sites that really want\nthis kind of protection.Yeah.AUDIENCE: But also, if\nI remember correctly,you can't set the cookie\nunless the site [INAUDIBLE].PROFESSOR: That's right, yeah.So these guys are also\nworried about denialof service attacks,\nwhere this plug incould be used to cause\ntrouble for other sites.So if you, for example,\nset this forced HTTPSbit for some unsuspecting\nwebsite, then all of a sudden,the website stops working\nbecause everyone is nowtrying to connect\nto them over HTTPS,and they don't support HTTPS.So this is one example\nof worrying about denialof service attacks.Another thing is\nthat they actuallydon't support setting forced\nHTTPS for an entire domain.So they worried that, for\nexample, at mit.edu, Iam a user at mit.edu.Maybe I'll set a forced HTTPS\ncookie for start.mit.eduin everyone's browsers.And now, only HTTPS\nthings work at MIT.That seems also a\nlittle disastrous,so you probably\nwant to avoid that.On the other hand, actually,\nHTTPS strict transfer securitywent back on this\nand said, well, we'llallow this notion of forcing\nHTTPS for an entire subdomainbecause it turns out\nto be useful becauseof these insecure cookies\nbeing sent along with a requestthat you can't tell where\nthey were sent from initially.Anyway, so there's all\nkinds of subtle interactionswith teachers at\nthe lowest level,but it's not clear what\nthe right choice is.OK, so one actually interesting\nquestion you might askis are these fundamental\nto the system we", "start": 4200.0, "heat": 0.1}, {"text": "have, or are these mostly\njust helping developers avoidmistakes?So suppose you had a\ndeveloper that's very diligentand doesn't do insecure\n[INAUDIBLE] embedding,doesn't solve any\nother problems,always gets their\ncertificates renewed,should they bother with\nforced HTTPS or not?Yeah.AUDIENCE: Well, yeah.You still have the problem with\nsomeone forcing HTTP protocol.Nothing stops the\nhacker from doing[? excessive ?]\n[INAUDIBLE] forces the userto load something\nover HTTP and thento intercept the connection.PROFESSOR: That's true, but if\nyou feel they're very diligentand all their cookies\nare marked secure,then having someone visit an\nHTTP version of your site,shouldn't be a problem.AUDIENCE: [INAUDIBLE].PROFESSOR: Yeah.So you'd probably have to\ndefend against cookie overwriteor injection attacks, and\nthat's sort of doable.It's a little tedious, but\nyou can probably do something.AUDIENCE: Yeah.I think her point is that\nalso, it didn't-- securitydidn't check the\ncertificate, right?PROFESSOR: Yeah.So that's one.I think that this\nis the biggest thingis this first point, which\nis that everything else,you can sort of defend it\nagainst by cleverly codingor being careful in\nyour application.The first thing is\nsomething that the userhas-- or the developer--\nhas no controlover because the developer\nwants to make sure, for example,that their cookie will only\nbe sent to their server assigned by this CA.And if the user is allowed\nto randomly say, oh,that's good enough,\nthen the developerhas no clue where\ntheir cookie's goingto end up because some\nuser is going to leak itto some incorrect server.So this is, I think, the main\nbenefit of this protocol.Question back there.AUDIENCE: [INAUDIBLE]\nsecond pointis also vital because the\nuser might not [INAUDIBLE].You might [INAUDIBLE]\nof the site, whichwould be right in the middle.PROFESSOR: I see.OK.So I agree in the\nsense that thisis very useful from the\npoint of view of UI securitybecause as far as the\ncookies are concerned,the developer can\nprobably be clever enoughto do something sensible.But the user might not\nbe diligently looking", "start": 4320.0, "heat": 0.1}, {"text": "at that lock icon\nand URL at all times.So if you load up\namazon.com and it asks youfor a credit card number,\nyou might just type it in.You just forgot to\nlook for a lock icon,whereas if you set forced\nHTTPS for amazon.com, thenthere's just not\nchance that you'llhave an HTTP URL for that site.It still [? causes a ?]\nproblem that maybe the userdoesn't read the URL correctly.Like it says Ammazon\nwith two Ms dot com.Probably still fool many users.But anyway, that is another\nadvantage for forced HTTPS.Make sense?Other questions\nabout this scheme?All right.So I guess one\ninteresting thing ishow do you get this\nforced HTTPS bitfor a site in the first place?Could you have intercepted\nthat as an attackerand prevent that\nbit from being setif you\n[? want to mount a fax? ?]Yeah.AUDIENCE: [INAUDIBLE] HTTPS.I mean, HTTPS, we're\n[? assuming ?] [INAUDIBLE]protocol [INAUDIBLE].PROFESSOR: That's right.So on one hand,\nthis could be good.But this forced\nhttps that can onlybe sent over HTTPS connection\nto the host in question.On other hand, the user might\nbe fooled at that point.Like, he doesn't have\nthe forced HTTPS bit yet.So maybe the user will allow\nsome incorrect certificate,or will not even know that\nthis is HTTP and not HTTPS.So it seems potentially\npossible for an attackerto prevent that forced\nHTTPS bit from beingsent in the first place.If you've never been to a site\nand you try to visit that site,you might never learn whether\nit should be forced HTTPS or notin the first place.Yeah.AUDIENCE: Will the [INAUDIBLE]\nroaming certificate there.PROFESSOR: That's right, yeah.So I guess the way to think\nof it is if they did a set,", "start": 4440.0, "heat": 0.1}, {"text": "then you know you talked to\nthe right server at some point,and then you could continue\nusing that bit correctly.On the other hand, if you don't\nhave that bit set, or maybeif you've never talked\nto a server yet,there's no clear cut\nprotocol that will alwaysgive you whether that forced\nHTTPS bit should be set or not.Maybe amazon.com always wants\nto set that forced HTTPS bit.But the first time you\npulled up your laptop,you were already on\nan attacker's network,and there's just no way for\nyou to connect to amazon.com.Everything is intercepted,\nor something like this.So it's a very hard\nproblem to solve.The bootstrapping of\nthese security settingsis pretty tricky.I guess one thing\nyou could try to dois maybe embed\nthis bit in DNSSEC.So if you have DNSSEC,\nalready in use,then maybe you could sign\nwhether you should use HTTPSor not, or forced HTTPS or\nnot, as part of your DNS name.But again, it just boils\ndown the problem to DNSSECbeing secure.So there's always this\nsort of rule of trustwhere you have to really\nassume that's correct.Question.AUDIENCE: [INAUDIBLE].PROFESSOR: Yeah.So I guess Google keeps\ntrying to improve thingsby hard coding it.So one thing that\nChrome offers isthat actually, the browser\nships with a list of sites thatshould have forced HTTPS\nenabled-- or now, well, thisHSTS thing, which is\n[INAUDIBLE] enabled.So when you actually\ndownload Chrome,you get lots of\nactually useful stuff,like somewhat up to date CRL\nand a list of forced HTTPSsites that are\nparticularly important.So this is like somewhat\nadmitting defeat.Like the protocol doesn't work.We just have to distribute\nthis a priori to everyone.And it sets up this\nunfortunate dichotomybetween sites that are\nsort of important enoughfor Google to ship\nwith the browser,and sites that don't do this.Now of course, Google\nright now tells youthat anyone can get\ntheir site includedbecause the list is so small.But if this grows to\nmillions of entries,I'm sure Google\nwill stop includingeveryone's site in there.But yeah, you could\ntotally add a domain.", "start": 4560.0, "heat": 0.1}, {"text": "And you could email\nChrome developersand get your thing included on\nthe list of forced HTTPS URLs.Anyway, any other questions\nabout forced HTTPS and SSL?All right.Good.So I'll see you guys on\nWednesday at the [INAUDIBLE].", "start": 4680.0, "heat": 0.1}]