[{"text": "The following content is\nprovided under a CreativeCommons license.Your support will help\nMIT OpenCourseWarecontinue to offer high quality\neducational resources for free.To make a donation or to\nview additional materialsfrom hundreds of MIT courses,\nvisit MIT OpenCourseWareat ocw.mit.edu.JOHN GUTTAG: Today\nwe're startinga new topic, which\nis, of course, relatedto previous topics.As usual, if you go to either\nthe 60002 or the 600 web site,you'll find both today's\nPowerPoint and today's Python.You'll discover if you\nlook at the Python filethat there is quite a\nlot of code in there.And I'll be talking\nonly about some of it.But it's probably\nall worth looking at.And a fair amount of reading\nassociated with this week.Why are we looking\nat random walks?See a picture here of, think of\nthem as molecules just bouncingaround.This is actually a\npicture of what'scalled Brownian motion,\nthough Robert Brown probablydid not discover it.We're looking at random walks\nbecause, well, first of all,they're important\nin many domains.There are people who\nwill argue, for example,that the movement of\nprices in the stock marketis best modeled\nas a random walk.There was a very popular book\ncalled A Random Walk Down WallStreet that made this argument.And a lot of modern portfolio\nanalysis is based upon that.Those of you who are not\ninterested in making money,and I presume\nthat's most of you,it's also very important\nin many physical processes.We use random walks,\nsay, to model diffusion,", "start": 0.0, "heat": 0.1}, {"text": "heat diffusion, or the\ndiffusion of moleculesin suspension, et cetera.So they're very important in a\nlot of scientific, and indeed,social disciplines.They're not the only\nimportant thing,so why are we looking at those?Because I think it provides\na really good illustrationof how we can use simulation to\nunderstand the world around us.And it does give me an excuse\nto cover some important topicsrelated to programming.You'll remember that one of\nthe subtexts of the courseis while I'm covering a\nlot of what you might thinkof as abstract\nmaterial, we're using itas an excuse to teach more\nabout programming and softwareengineering.A little practice with\nclasses and subclassing,and we're going to also\nlook at producing plots.So the first random\nwalk I want to look atis actually not a diffusion\nprocess or the stock market,but an actual walk.So imagine that you've got\na field which has somehowinexplicably been mown to look\nlike a piece of graph paper,and you've got a drunk\nwandering around the field,taking a step every once in a\nwhile in some random direction.We can then ask the\nquestion is therean interesting relationship\nbetween the number of stepsthe drunk takes and\nhow far the drunk isfrom the origin at the\nend of those steps?You could imagine that if\nthe drunk takes more steps,he's ever further\nfrom the origin.Or maybe you could\nimagine, since it's random,that he just wanders away and he\nwanders back in all directionsand more or less\nnever gets very far.So just out of curiosity,\nI'll take a poll.Who thinks that the\ndrunk doesn't muchmatter how many\nsteps he takes, he'llbe more or less the\nsame distance away?", "start": 120.0, "heat": 0.196}, {"text": "And who thinks the more steps\nhe takes, the further away he'slikely to be?It seems to be a season\nwhere when you take polls,they come out almost tied.Let's look at a small example.Suppose he takes one step only.Well, if he takes\none step, and we'llassume for simplicity\nthat he's not so drunkthat he moves at random.He either moves north\nor south, east or west.These are all the places\nhe can get to in one step.What they have in common\nis that after one step,the drunk is always exactly\none unit away from the origin.Well, how about after two steps?So without loss of\ngenerality, let's assume thatthe first step--let me use the pen\nthat you're supposedto use to write on this, rather\nthan this pen, which wouldmake a real mess on my screen.What did I do with it?Well, I won't write on it.So without loss of\ngenerality, we'llassume that the drunk\nis there after one step.Took one step to the east.Well, after two steps, those\nare all the possible placeshe could be.So on average, how far is\nthe drunk from the origin?Well, if we look, he could\neither be two steps away,if he took another step\neast, zero steps away,if he took a step west, or\nwhat do we see for the top two?Well, the top and\nthe bottom one,we can go back and use\nthe Pythagorean theorem.c squared equals a\nsquared plus b squared.", "start": 240.0, "heat": 0.263}, {"text": "And that will tell us that\nit'll be the square rootof a squared plus b squared.And that will tell us how\nfar away the upper two are,and then we can just average\nthem and get a distance.And as we can see,\non average, the drunkwill be a little bit further\naway after two steps thanafter one step.Well how about\nafter 100,000 steps?It would be a little bit\ntedious to go through the caseanalysis I just did.There are a lot of cases\nafter 100,000 steps.So we end up resorting\nto a simulation.So we'll structure it\nexactly the same waywe've been structuring\nour other simulations.We're going to simulate one\nwalk of k steps, n such walks,and then report the\naverage distancefrom the origin of the n walks.Before we do that, in line\nwith the software engineeringtheme of the course,\nwe'll start by definingsome useful abstractions.There are three of\nthem I want to look at.Location, the field\nthat the drunk is in,and the drunk him or herself.So let's first look at location.This is going to be\nan immutable type.So what we see here--as long as I can't\npoint in the screen,I'll point with a pointer--is that we'll initiate it.We'll initialize it\nwith an x and y value.That makes sense.We'll be able to have two\ngetters, getX and getY.And here's how we\nsee it's immutable.What move is doing is it's\nnot changing the location,it's returning a new location.Perhaps move is poor\nchoice of name for that.", "start": 360.0, "heat": 0.412}, {"text": "But that is what it's doing.It's just returning\na new locationwhere it adds the change\nin x and the change in yto get two new xy values.Notice, by the way,\nthat I'm not restrictingthese to be integers, or\none, or anything like that.So this would work\neven if I did notwant to take those nice little\neast-west, north-south steps.I've got a underbar\nunderbar string, _str_,and then here's my\nimplementation--you can see it's\nvery sophisticated--of the Pythagorean theorem.So I just do it\nthat way, and thatwill get me the distance\nbetween two things.It's one of the annoying things\nabout classes in, actually,all languages I know\nwith classes, isyou would like to\nthink that selfand other-- there's\na symmetry here.The distance from self to\nother is the same as from otherto self.But syntactically,\nbecause of the waythe language is structured,\nwe treat them a little bitdifferently.How about class Drunk?Well, this is kind of boring.Drunk has a name and a string.And that's all.The point of this,\nand I don't thinkwe've looked at\nthis before, is thisis not intended to be a\nuseful class on its own.It's what we call a base class.The notion here is its only\npurpose is to be inherited.It's not supposed to\nbe useful on itself,but it does give me\nsomething that willbe used for the two subclasses.And we'll look at\ntwo subclasses.The so-called usual\ndrunk, the oneI tried to simulate when\nI was wandering around,", "start": 480.0, "heat": 0.2}, {"text": "wanders around at random.And a drunk I like\nto think of itas a New Englander, or\na masochistic drunk,who tries forever to move\never northward, because heor she wants to be frozen.I do like this picture of\nentering the state of Mainein the winter.So here is the usual drunk.Subclass of drunk,\nand it can take stepsat random, one step, either\nincreasing y, a step north,decreasing y, a step south,\nincreasing x, a step east,or decreasing x a step west.So those are the choices.And it's going to return\none of those at random.I think we saw random.choice\nin the last lecture.And then our\nmasochistic drunk, it'salmost the same, except the\nchoices are slightly different.If he chooses to head north,\nhe doesn't go one step.He goes 1.1 steps north.And if he chooses to go south,\nhe only goes 9/10 of a step.So what we're seeing\nhere is what'scalled a biased random walk.And the bias here is the\ndirection of the walkthat he's moving\neither up or down.Pretty simple.How about just for\nto test things out,we'll ask the question is this\nan immutable or a mutable type?Are drunks mutable or immutable?This is a deep\nphilosophical question.But if we ignore the\nphilosophical underpinningsof that question, what\nabout the two types here?Who thinks it's immutable?", "start": 600.0, "heat": 0.0}, {"text": "Who thinks it's mutable?Why do you think it's mutable?What's getting changed?The answer is nothing.It gets created, and then\nit's returning the step,but it's not actually\nchanging the drunk.So so far we have two things\nthat are immutable, drunksand locations.Let's look at fields.Fields are a little\nbit more complicated.So field will be a\ndictionary, and the dictionaryis going to map a drunk to his\nor her location in the field.So we can add a drunk\nat some location,and we're going to check.And if the drunk\nis already there,we're not going to\nput the drunk in.We're going to raise a value\nerror, \"Duplicate drunk.\"Otherwise we're going to set\nthe value of drunkenness mappingto loc.Now you see, by the way, why I\nwanted drunks to be immutable.Because they have\nto be hashable soI can use them as a\nkey in a dictionary.So it was not an idle question\nwhether they were immutable.It was an important question.I can get the\nlocation of a drunk.If the drunk is not\nin there, then I'llraise a different value\nerror, \"Drunk not in field.\"Otherwise I'll\nreturn the locationassociated with that drunk.And finally, we're\ngoing to have moveDrunk.Again I'll check whether\nthe drunk is there.If the drunk is there, I'm\ngoing to get the distanceon x and the distance in y\nby calling drunk.takeStep.", "start": 720.0, "heat": 0.0}, {"text": "So we saw takeStep for a drunk\ndidn't move the drunk anywhere,because the drunks\nwere immutable,but returned new locations.A new x and new values.And then I'm going to use that\nto move the drunk in the field.So I'll set self.drunk, so\ndrunk to move x distance and ydistance.So it's very simple, but having\nbuilt this set of classes,we can now actually\nwrite the simulation.Oh.What about our classes?Are they mutable or immutable?Not classes.What about fields?Any votes for mutable?Yeah, exactly.Because you can see I'm\nmutating it right here.I'm changing the value\nof the dictionary.And in fact, every time I\nadd a drunk to the field,I'm changing the value\nof the dictionary, whichis to say mutating the field.So I'll have a\nbunch of locations,which are immutable objects.Makes sense that a\nlocation is immutable.A bunch of drunks, and the\nthing I'm going to changeis where the drunks\nare in the field.I said we'd start by\nsimulating a single walk.So here it is, a walk in a field\nwith a drunk, and that drunkwill take some number\nof steps in the field.And you can see this.It's very simple.I just have a loop.Drunk takes some\nnumber of random steps,and I'm going to return\nthe distance from the startto the final location\nof the drunk.", "start": 840.0, "heat": 0.0}, {"text": "So how far is the\ndrunk from the origin?I then need to simulate\nmultiple walks.Notice here that I've\ngot the number of steps,the number of trials, and dClass\nstands for class of the drunk.And that's because I want\nto use the same functionto simulate as many\ndifferent kinds of drunksas I care about.We've only seen two here,\nthe masochistic drunkand the usual drunk, but you\ncan imagine many other kindsas well.So let's do it.So here I'm going to simulate\na walk for one drunk, Homer.So we'll create a drunk named\nHomer, or the variable Homer,which is the drunk class.Then the origin,\ndistances, and for tin range number of\ntrials, we'll just do it,and then we'll\nreturn the distances.So it's initialized\nto the empty list.So we're going to return a list\nfor however many trials we do,how far the drunk ended\nup from the origin.Then we can average that,\nand we look at the mean.Maybe we'll look at\nthe min or the max.Lots of different questions we\ncould ask about the behavior.And now we can put\nit all together here.So drunkTest will take a set\nof different walk lengths,a list of different walk\nlengths, the number of trials,and the class.And for a number of\nsteps and walk lengths,distances will be\nsimWalks of numberof steps, numTrials, dClass.And then I'm going to just\nprint some statistics.You may or may not\nhave seen this.This is something that's\nbuilt in to Python.", "start": 960.0, "heat": 0.0}, {"text": "I can ask for the\nname of a class.So dClass, remember, is a\nclass, and _name_ will give methe name of the class.Might be usual, it might\nbe drunk, in this case.So let's try it.So the code we've looked at.So let's go down here,\nand we'll run it,and we'll try it for\nwalks of 10, 100, 1,000,and 10,000 steps.And we'll do 100 trials.Here's what we got.So my question to you is\ndoes this look plausible?What is it telling us here?Well, it's telling us here\nthat the length of the walkactually doesn't really affect--the number of steps doesn't\naffect how far the drunk gets.There's some randomness.8.6, 8.57, 9.2, 8.7.Not much variance.So we've done this simulation\nand we've learned something,maybe.So does this look plausible?We can look at it here.I've just transcribed it.What do you think?Well, go ahead.AUDIENCE: I was going to\nsay, it seems plausiblebecause after the\nfirst two steps,there's a 50% chance he's\ngoing closer to the origin.", "start": 1080.0, "heat": 0.0}, {"text": "And a 50% chance he's\ngoing away from it.JOHN GUTTAG: So we have at\nleast one vote for plausible,and it's certainly a\nplausible argument.Well, one of the things\nwe need to learn to dois whenever we\nbuild a simulation,we need to do what I\ncall a sanity checkto see whether or not\nthe simulation actuallymakes sense.So if we're going to\ndo a sanity check,what might we do in this case?We should try it on cases where\nwe think we know the answer.So we say, let's take\na really simple casewhere we're pretty sure we\nknow what the answer is.Let's run our\nsimulation and makesure it gives us the right\nanswer for this simple case.So if we think of a\nsanity check here,maybe we should look\nat these numbers.We just did it.We know how far the drunk\nshould get in zero steps.How far should the drunk\nmove in zero steps?Zero.How far should the\ndrunk move in one steps?We know that should be one.Two steps, well, we knew\nwhat that should be.Well, if I run\nthis sanity check,these are the numbers I get.I should be pretty suspicious.I should also be\nsuspicious they'rekind of the same numbers\nI got for 10,000 steps.What should I think about?I should think that maybe\nthere's a bug in my code.So if we now go back\nand look at the code,yes, this fails the\npants on fire testthat there's clearly something\nwrong with these numbers.What we were appending is\nwalk of Homer, numTrials, 1.", "start": 1200.0, "heat": 0.0}, {"text": "Well, numTrials is a constant.It's always 100.What I intended to write here\nwas not numTrials but numSteps.I actually did\nthis the first timeI wrote this simulation\nmany years ago.I made this typo,\nif you will, and Igot these bizarre answers.So I looked at the\ncode and I said, well,that's actually wrong.No wonder it's always\nthe same number.I'm calling it with a constant.The constant happens to be 100.So let's go fix the simulation.So this should\nhave been numSteps.Now let's run it again.Well, these results\nare pretty different.Now we see that in fact,\nthey're increasing.Should I just look\nat this and be happy?Probably not.I should run my\nsanity check againand make sure I get the right\nresults for zero, one, and two.So let's go back and do that,\njust to be a little bit safe.So I'll just change this\ntuple of values to be--", "start": 1320.0, "heat": 0.0}, {"text": "and I should feel a\nlot better about this.The mean, the max, and\nthe min are all zerowhen he doesn't take any steps.One is exactly what\nwe should expect,and two is also-- the mean is\nwhere we would guess it to be,and the max is two,\nhappened to taketwo steps in the same direction,\nand the min is zero, happenedto end up where he started.So I've passed my sanity check.Doesn't mean my\nsimulation is right,but at least I have\nreason to be hopeful.So getting back.So we saw these results, and\nnow we're getting the indicationthat in fact, contrary to\nwhat we might have thought,it does appear to be that the\nmore steps the drunk takes,the further away\nthe drunk ends up.And that was the usual drunk.We can try the\nmasochistic drunk,and then we see something\npretty interesting.I won't make you sit through\nit, but when we run it,here are the usual\ndrunks, the numbers,and I just looked at\nit for 1,000 and 10,000so it would fit on the screen.You see for the usual drunk,\nit's 26.8, roughly 90.Fair dispersion in\nthe min and the max.And the masochistic drunk seems\nto be making considerably moreprogress than the usual drunk.So we see is this\nbias actually appearsto be changing the distance.", "start": 1440.0, "heat": 0.0}, {"text": "Well, that's interesting.Now we could ask\nthe question why?What's going on?And to do that, I want to\ngo and start visualizingwhat's the trend?So rather than just looking at\ntwo numbers or three numbers,as we've been doing, I'm going\nto draw a pretty picture.Actually, I'm not going to draw.I'm a terrible artist.But Python will draw us\nsome pretty pictures.We're going to simulate\nwalks of multiple lengthsfor each kind of\ndrunk, and then plotthe distance at the\nend of each lengthwalk for each kind of drunk.I now digress for a moment to\ntalk about how we do plotting.So we're going to use\nsomething called Pylab.I've listed here four\nreally important librariesthat you will surely\nend up using extensivelyif you continue to use\nPython for research purposes.NumPy adds vectors,\nmatrices, and many high-levelmathematical functions.Actually, it might be NumPy.It might be \"Num-Pee.\"I'm not sure how\nto pronounce it.But we'll call it NumPy.So these are really\nuseful things.SciPy adds on top\nof that a bunchof mathematical classes and\nfunctions useful to scientists.Things like-- well, we'll\nlook at some of themas we go on through the term.MatPlotLib adds an\nobject-oriented programminginterface for plotting.Anybody here used MATLAB?Great.Well you'll find that MatPlotLib\nis the Mat, think MATLAB.Lets you, in Python, use\nall the plotting stuffthat you've come to either\nlike or hate in MATLAB.", "start": 1560.0, "heat": 0.0}, {"text": "So it's really convenient.If you know how to\ndo plots in MATLAB,you'll know how to\ndo it in Python.PyLab combines all\nof these to give youa MATLAB-like\ninterface to Python.So once you have PyLab,\nyou can do a lot of thingsthat you would normally\nwant to do in MATLAB,for example, produce\nweird-looking plotslike this one.I'm going to show you one of the\nmany, many plotting commands.It is called plot.It takes two arguments,\nwhich must besequences of the same length.The first argument\nis the x-coordinates,the second argument is the\ny-coordinates correspondingto the x ones.There are roughly three\nzillion optional arguments,and you'll see me use only\na small subset of them.It plots the points in order.First the first xy, then the\nsecond xy, then the third xy.Why is it important that I\nsay it plots them in order?Because by default, as\neach point is plotted,it draws a line connecting\none point to the next pointto the next point.And so the order in\nwhich they're plottedwill determine\nwhere the lines go.Now we'll see, as we go on, that\nwe often don't draw the lines,but by default they are drawn.Here's an example.You start by importing PyLab.Then I've given xVals\nand yVals1, and if I callpylab.plot of xVals, yVals1.Here is one of the\narguments I can give it.I'm saying I'd like this to be\nplotted in blue, b for blue,and I'd like it to be plotted\nas a solid line, a single dash.And I want to give that\nline a label, whichI've said is first.YVals2 is a different list.", "start": 1680.0, "heat": 0.0}, {"text": "I'll plot it again.Here I'm going to say I\nwant a red dotted line,and the label will be second.And then after\nplotting it, I'm goingto invoke pylab.legend, which\nputs this nice little box uphere in the corner,\nin this case,saying that first is a\nsolid blue line and seconda dashed red line, I should say.Now again, there are\nlots of arguments,lots of other arguments\nI could give in plot.Also legend, I can tell it\nwhere to put the legend,if I so choose.Here I've just said,\nput it whereveryou happen to want to put\nit, or PyLab wants to put it.So a very simple way\nto produce a plot.There are lots of\ndetails and many moreexamples about plotting\nin the assigned reading.We've posted a video that\nProfessor Grimson producedfor an online course, 600.1x.It's about a 50 minute video\nbroken into multiple segmentsabout how to use plotting in\nPyLab with a lot more detailthan I've given you.You'll see if you read\nthe code for this lecture.And as you see this\nlecture, there'llbe lots of other plots\nshowing up of different kinds.These are my two\nfavorite online sitesfor finding out what to do.And of course, you can\ngoogle all sorts of things.That's all I'm going to tell\nyou about how to produce plotsin class, but we're\ngoing to expectyou to learn a lot about\nit, because I thinkit's a really useful skill.And at the very\nleast, you shouldfeel comfortable that any\nplot I show you, you now--obviously not right now--but you will eventually\nknow how to produce.So if you do these\nthings, you'llbe more than up to speed.", "start": 1800.0, "heat": 0.0}, {"text": "So I started by saying I wanted\nto plot the trends in distance,and they're interesting.So here's the usual drunk\nand the masochistic drunk.So you can see, sure\nenough, the usual drunk,this fuschia line is\nprogressing very slowlyand the masochistic drunk,\nconsiderably faster.I looked at these, and\nafter looking at those two,I tried to figure\nout whether therewas some mathematical\nexplanation of whatwas going on, and\ndecided, well, itlooked to me like\nthe usual drunkwas moving at about the square\nroot of the number of steps.Not so odd to think about it,\nif you go back to old Pythagorashere.And sure enough, when I plot,\nand I ran this simulation upto 100,000 steps.When I plot the square root\nof the number of steps,it's not identical, but\nit's pretty darn close.Seems to be moving just a tad\nfaster than the square root,but not much.But who knows exactly?But pretty good.And then the\nmasochistic drunk seemsto be moving at a rate\nof numSteps times 0.05.A less intuitive answer\nthan the square root.Why do you think it\nmight be doing that?Well, what we notice is that--and we'll look at this--maybe there's not\nmuch differencebetween what the masochistic\ndrunk and the usual drunkdo on the x-axis, east and west.In fact, they shouldn't be.But there should be a\ndifference on the y-axis,because every time,\n1/4 of the time,the drunk is taking a\nstep north of 1.1 units,", "start": 1920.0, "heat": 0.0}, {"text": "and 1/4 of the time, he's taking\na step south of 0.9 units.And so 1/2 the\ntime, the steps arediverging by a small fraction.And if we think about\nit, 0.1 1/2 the time.We divide it.We get 0.05.So at least we need to\ndo some more analysis,but the data is\npretty compelling herethat it's a very good fit.Well, let's look at\nthe ending location.So here you see a rather\ndifferent kind of plot.Here I'm showing\nthat you can plotthese things without\nconnecting them by lines.And giving them\ndifferent shapes.So what here I've said is\nthat the masochistic drunkwe're going to plot\nusing red triangles,and the usual drunk I'm going\nto plot using black plus signs.And since I'm going\nto plot the locationat the end of many walks,\nit doesn't make senseto draw lines\nconnecting everything,because all we're caring\nabout here is the endpoints.So since I only\nwant the endpoints,I'm plotting them\na different way.So for example, I can write\nsomething like plot( xVals,yVals, and then if I do\nsomething like let's see.", "start": 2040.0, "heat": 0.0}, {"text": "Just 'b0' in fact.What that says is\nplot blue circles.I could have written--in fact I did write 'k+' and\nthat says black plus signs.And I don't actually\nremember whatI did to get the triangles,\nbut it's in the code.And so that's very\nflexible what you do.And as you can see\nhere, we get the insightI'd communicated earlier that\nif you look at east and west,not much difference between\nthis ball and that ball.They seem to be moving about the\nsame spread, the same outliers.But this ball is\ndisplaced north.And not surprisingly,\nafter 10,000 steps,you would not expect\nany of these pointsto be below zero, where\nyou'd expect roughly halfof these points\nto be below zero.And indeed that's about true.And we see here what's\ngoing on that if welook at the mean absolute\ndifference in x and y,we see that not\na huge differencebetween the usual drunk\nand the masochistic drunk.There happens to be a distance.But a huge difference--sorry, x and x.Comparing the two y values,\nthere's a big difference,as you see here.So what's the point of all this?It's not to learn about\ndifferent kinds of drunks.It's to show how,\nby visualization, wecan get insight into\nour data that if I just", "start": 2160.0, "heat": 0.0}, {"text": "printed spreadsheets showing\nyou all of these endpoints,it would be hard to make\nsense of what was there.So get accustomed\nto using plottingto help you understand data.Now let's play a little bit\nmore with the simulation.We looked at different\nkinds of drunks.Let's look at different\nkinds of fields.So I want to look\nat a field with whatwe'll call a wormhole in it.For those of you of\na certain generation,you will recognize the Tardis.So the idea here is\nthat the field is suchthat as you wander around\nit, everything is normal.But every once in a\nwhile you hit a placewhere you're\nmagically transportedto a different place.So it behaves very peculiarly.So let's call this an OddField.Not odd numbers, but\nodd as in strange.So it's going to be\na subclass of field.We're going to have a\nparameter that tells ushow many worm holes it has.A default value of 1,000.And we'll see how we use\nxRange and yRange shortly.So what are the\nfirst thing we do?Well, we'll call Field _init\nto initialize the fieldin the usual way.And then we're going to create\na dictionary of wormholes.So for w in the range\nnumber of worm holes,I'm going to choose a\nrandom x and a random yin xRange minus xRange to plus\nxRange, minus yRange to yRange.So this is going to be where\nthe worm holes are located.And then for each\nof those, I'm goingto get a random location\nwhere you're, in some sense,teleported to if you\nenter the wormhole.", "start": 2280.0, "heat": 0.0}, {"text": "So here we're using random\nto get random integers.We've seen that before.And so the new location\nwill be the locationof the new x and\nthe new y, and we'regoing to update this\ndictionary of wormholesto say that paired with the\nlocation x, y is newLoc.Now when we move the drunk, and\nagain this is just changing--we're overriding moveDrunk,\nso we're overriding oneof the methods in Field.So Field.moveDrunk will\ntake a self and a drunk.It's going to get the\nx value, the y value,and if that is in\nthe wormholes, it'sgoing to move the drunk\nto the location associatedwith that wormhole.So we move a drunk, and\nif the drunk ends upbeing in the wormhole,\nhe gets transported.So we're using Field.moveDrunk.So notice that we're using the\nmoveDrunk of the superclass,even though we're\noverriding it here.Because we've overridden it\nhere, I have to say Field.to indicate I want the one\nfrom the superclass, notthe subclass.And then we're doing something\npeculiar after the move.So interestingly\nhere, I've taken,I think, a usual drunk and\nplotted the usual drunkon a walk of 500 steps.One walk, and shown all the\nplaces the drunk visited.So we've seen three\nkinds of plots,one showing how far the drunk\nwould get at different lengthwalks, one showing\nall the places", "start": 2400.0, "heat": 0.0}, {"text": "the drunk would end up with\nmany walks of the same length,and here a single walk, all\nthe places the drunk visits.And as you can\nsee, the wormholesproduce a profound\neffect, in this case,on where the drunks end up.And again, you have the code.You can run this\nyourself and simulate itand see what you go.And I think I've set\nrandom.Seed to zeroin each of the\nsimulations in the code,but you should play\nwith it, change it,to just see that you'll\nactually get different resultswith different seeds.Let me summarize here,\nand say the point of goingthrough these random walks is\nnot the simulations themselves,but how we built them.That we started by\ndefining the classes.We then built\nfunctions correspondingto one trial, multiple trials,\nand reported the results.And then made a set\nof incremental changesto the simulation so\nthat we could investigatedifferent questions.So we started with\na simple simulationwith just the usual drunk\nand the simple field,and we noticed it didn't work.How did we know it?Well, not because when we\ndid the full simulationwe had great insight.I probably could have\nfooled 1/2 of youand convinced you that that\nwas a reasonable answer.But as soon as we went and\ndid the sanity check, wherewe knew the answer, we could\nknow something was wrong.And then we went\nand we fixed it.And then we went\nand we elaborated itat a step of a time.I first got a more sophistic--I shouldn't say sophisticated.", "start": 2520.0, "heat": 0.0}, {"text": "A different kind of drunk.And then we went to a\ndifferent kind of field.Finally, we spent\ntime showing howto use plots to get an insight.And in the remaining few\nminutes of the class,I want to go back and show you\nsome of the plotting commands.To show you how these\nplots were produced.So one of the things\nI did, since Iknew I was going to be producing\na lot of different plots,I decided I would actually\nnot spend time worryingabout what kind of markers--those are the things\nlike the trianglesand the plus sign-- or\nwhat colors for each oneindividually, but\ninstead I'd set upa styleIterator that\nwould just returna bunch of different styles.So once and for all, I\ncould define n styles,and then when I want to\nplot a new kind of drunk,I would just call\nthe styleIteratorto get the next style.So this is a fairly\ncommon kind of paradigmto say that I just want to\ndo this once and for all.I don't want to have to go\nthrough each time I do this.So what do the styles look like?Let me just get this window.Oh.So here it is.", "start": 2640.0, "heat": 0.0}, {"text": "I said there were going to\nbe three styles that I'mgoing to iterate through.Style one is going\nto be an m, I guessthat's maroon with a line,\na blue with a dashed line,and green with a line with\na comma and a minus sign.So these are called the styles.And you can control the\nmarker, if you have a marker.You can control the line.You can control the color.Also you can control the size.You can give the sizes\nof all these things.What you'll see when\nyou look at the codeis I don't like\nthe default stylesthings, because when they\nshow up on the screen,they're too small.So there's something\ncalled rcParams.Those of you who\nare Unix hackerscan maybe guess where\nthat name came from.And I've just said\na bunch of things,like that my default line\nwidth will be four points.The size for the\ntitles will be 20.You can put titles\non the graphs.Various kinds of things.Again, once and for all trying\nto set some of these parametersso they get used\nover and over again.And then finally\ndown here, you'llsee that I did\nthings like you wantto put titles on the slides.So on the graph.So here's the location\nat end of walk.Title is just a string.You want to label\nyour x and y-axis,so I've labeled them here.", "start": 2760.0, "heat": 0.0}, {"text": "And here I've said where I\nwant the legend to appearin the lower center.I've also set the y-limits\nand the x-limits on the axis,because I wanted a\nlittle extra room.Otherwise, by default\nit will put pointsright on the axes, which\nI find hard to read.Anyway, the point here is\nnot that you understandall of this instantaneously.The point I want to communicate\nis that it's very flexible.And so if you decide\nyou don't likethe way a plot looks and\nyou want to change it,and you know what you\nwant it to look like,there's almost surely a\nway to make it do that.So don't despair.You can look at the\nreferences I gave earlierand figure that out.Next lecture we're\ngoing to move on.No more random walks.We'll look at\nsimulating other things,and in particular, we'll look at\nthe question of how believableis a simulation?See you Wednesday if the\nworld has not come to an end.", "start": 2880.0, "heat": 0.0}]