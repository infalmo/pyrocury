[{"text": "The following content is\nprovided under a CreativeCommons license.Your support will help\nMIT OpenCourseWarecontinue to offer high quality\neducational resources for free.To make a donation or\nview additional materialsfrom hundreds of MIT courses,\nvisit MIT OpenCourseWareat ocw.mit.edu.PROFESSOR: All right.Let's get started, everyone.So, good afternoon.Welcome to the second lecture\nof 60001 and also of 600.So as always, if you'd like to\nfollow along with the lectures,please go ahead and download\nthe slides and the codethat I'll provide at least an\nhour before class every day.All right.So a quick recap of\nwhat we did last time.So last time, we talked a little\nbit about what a computer is.And I think the main takeaway\nfrom the last lectureis really that a computer only\ndoes what it is told, right?So it's not going to\nspontaneously makedecisions on its own.You, as the programmer,\nhave to tell itwhat you want it to do\nby writing programs.OK.So we talked about\nsimple objects.And these objects were\nof different types.So we saw integers,\nfloats, and Booleans.And then we did a couple of\nsimple operations with them.Today, we're going to\nlook at a different--a new type of object\ncalled a string.And then we're\ngoing to introducesome more powerful things\nin our programming toolbox.So we're going to look at how\nto branch within a program,and how to make things-- how\nto make the computer repeatcertain tasks\nwithin our program.All right.So let's begin by\nlooking at strings.So strings are a\nnew object type.We've seen so far\nintegers, whichwere whole numbers, floats,\nwhich were decimal numbers,", "start": 0.0, "heat": 0.1}, {"text": "and we have seen Booleans,\nwhich were true and false.So strings are going to be\nsequences of characters.And these characters\ncan be anything.They can be letters,\ndigits, special characters,and also spaces.And you tell Python that you're\ntalking about a string objectby enclosing it in\nquotation marks.So in this case, I'm creating an\nobject whose value is h-e-l-l-ospace t-h-e-r-e.And Python knows it's a\nstring object, because we'reenclosing it in quotations.They can be either double\nquotes or single quotes,but as long as you're\nconsistent, it doesn't matter.And this object, we're binding\nit to this variable named hi.And we're using that using\nthe equals sign, whichis the assignment operator.So from now on, whenever we\nrefer to this variable hi,Python is going to say, oh,\nI know what the value is,and it's that string\nof characters.So we're going to\nlearn about two thingsthat you can do on strings\ntoday, two operations.One is to concatenate them.And concatenation is\nreally just a fancy wordfor using this plus\noperator, whichmeans put the strings together.So I have this original\nvariable named hi,and I create a new\nvariable called name.And in it, I'm going\nto assign the stringa-n-a to the variable name.And when I use the plus\noperator in between hi and name,those two variables,\nPython is goingto look at the\nvalues of those two,and it's going to just\nput them together.OK.I'm going to switch to Spider.And this is just that\nexample from the slides.So let's see what happens.So I have the variable\nhi, the variable name,and I'm just concatenating\nthose two together.And then I'm going\nto print that out.So if I run the code, notice\nit prints out \"hello thereana.\"", "start": 120.0, "heat": 0.1}, {"text": "There's no space.And there's no space because\nthe concatenation operator,the plus, doesn't add\nany spaces implicitly.So again, another example\nof just computer justdoing what it's told.If we want to add a space,\nwe'd have to actually insertthe space manually.So that's this\nline here, line 8.And in this line,\nwe're concatenatingthe value of the\nvariable hi with a space.Notice we're putting\nit in quotation marks.Just a space.And then with name.So if we'll go ahead\nand print that value,notice this was that\ngarbage greeting there.And now we have a\nproper greeting, right?So that's the concatenation\nbetween strings.And then the other\nthing we're goingto look at related to\nstrings is the star operator.So that's this one\nhere on line 10.So Python allows you to use\nthe star operator, whichstands for multiplication,\nbetween a string and a number.And when you do that,\nPython interprets itas repeat that string\nthat many number of times.So in this case, I'm\ncreating a silly greeting,and I'm concatenating the value\nof hi, which is \"hello there\"with the space plus the name.So notice here, I'm\nusing parenthesesto tell Python, do this\noperation first, and thenmultiply whatever the\nresult of this is by 3.So if I print that\nout, it's goingto multiply the space\nwith my name three times,and it's going to concatenate\nthat with \"hello there.\"So that's exactly what\nit printed out there.", "start": 240.0, "heat": 0.1}, {"text": "Last lecture, we talked\na little bit about print.Today, I'm going to talk about\nsome nuances related to print.So you use print to\ninteract with the user.It's cool to write programs that\nprint things out to the user.So the key word\nhere being print.And then you put\nparentheses after print.And in the parentheses,\nyou put in whateveryou want to show the user.So in this little\nprogram, I have--I created a variable named x.I assigned it the value\n1, and then I print 1.Here, I'm casting.So I'm taking the number\none, the integer 1,and I'm casting it to a string.And you'll see why in a moment.So I want to bring\nto your attentiona couple of things here.So in the first print, I'm\nusing commas everywhere here.And in the second\nprint, I'm using plus.So by definition, if\nyou-- you can use commasinside a print-- inside\nthe parentheses of print.And if you use a comma, Python\nis going to automaticallyadd a space in\nbetween the two thingsthat the comma is in\nbetween, the values.So \"my fav num is\"\nis the first thing.And the second thing is\nwhatever's after the comma.Let's take x.So if you use a comma, Python\nis going to automatically inserta space for you.Sometimes, you might want\nthat, sometimes you might not.If you don't want that, you\ncan use the concatenationoperation, the plus.And you can add all\nof your little bitstogether to create\none big string.If you're using\ncommas, the items,the objects in\nbetween the commas,do not all have to be strings.That's the plus side\nof using commas.But the downside is you\nget spaces everywhere.", "start": 360.0, "heat": 0.1}, {"text": "If you use plus\noperator, the plus sideis Python does exactly\nwhat you tell it to do,but everything has to\nbe a string object.So \"my fav num is\"\nis a string object.You have to convert all of\nyour numbers to string objects,and so on.So if we look at Spider--\nThis is the same-- almostthe same code.So here, I don't\nhave spaces anywhere.So you can see that\nthe first line herehas commas everywhere.So I'm going to have spaces in\nbetween every one of the thingsthat I'm printing out.This line here is sort of a\ncombination between commasand concatenation.So depending on where\nI used the comma,I'm going to have\nan extra space.And this line here just has\nconcatenation everywhere.So if I run this, notice this\nvery first line added spaceseverywhere in between\nall my objects.The second one added\nspaces somewhere.And you can sort of trace\nthrough and see exactly wherethe spaces were added.And the last line here\ndidn't add spaces anywhere.So printing things out\nto the console is nice,but the second part of sort of\nwriting an interactive programis getting input from the user.And that's the more\ninteresting part.So if you've done problem set 0,\nyou might have sort of alreadytried to understand\nthis on your own.But here we are.So the way you get\ninput from the useris using this command\nfunction called input.", "start": 480.0, "heat": 0.12}, {"text": "And inside the parentheses,\nyou type in whatever you'dlike to prompt the user with.So in this case, in my\nexample here, I have input,and then here I said\n\"type anything.\"So the user is going\nto see this text here,and then the program\nis just going to stop.And it's going to\nwait for the userto type in something\nand hit Enter.As soon as the user\ntypes in Enter,whatever the user types\nin becomes a string.If a user types in a\nnumber, for example,that becomes the\nstring of that number.So everything the\nuser types in isgoing to be made as a string.In this line right here,\nwhatever these the user typesin becomes a string.And we're going to\nbind that string objectto this variable named text.So now, further in my\nprogram, I could do whateverI want with this variable text.In this case, I'm\ngoing to print 5*text.OK.So if the user, for\nexample, gave me \"ha,\"I'm going to print \"ha\" 5 times.If the user gave\nme 5, what do youthink the user is--\nwhat do you thinkis going to be printed out?25 or 5 five times?Great.Yes.Exactly.5 five times.Oftentimes, you don't want to\nwork with numbers as strings,right?You want to work with\nnumbers as numbers, right?So you have to cast.And we learned\nthat last lecture.You cast by just putting\nin this little bitright in front of the input.And you can cast it to\nwhatever type you want.Here I cast it to an int, but\nyou can also cast to a floatif you want to work with floats.And that converts whatever\nthe user typed in,as long as it's some number that\nPython knows how to convert,into the number itself.So in this case, if\nthe user gives me 5,", "start": 600.0, "heat": 0.23}, {"text": "I'm going to print out 5 times\n5 instead of 5 five times.So that's the code here.So the first bit\nis I'm going to getthe user to type in anything,\nand I'm going to put 555.And then when I type in the\nnumber, since I'm casting it,I'm going to do operations\nwith the number.Yeah, question.AUDIENCE: [INAUDIBLE]PROFESSOR: Why do you\nwant to cast to-- oh.The question is why do you\nwant to cast to a string?Why do you want to cast\na string to a number?AUDIENCE: [INAUDIBLE]PROFESSOR: Oh, so\nPython always--whatever you type\nin, just by default,by definition of\nthe input command,Python always makes it a string.So if you want to\nwork with numbers,you have to explicitly\ntell it, I'mgoing to work with a number.So even if you give\nit the number 5,it's going to think\nit's the string 5.Yeah.That's just how input works.The next thing we're\ngoing to look atis ways that you can start\nadding tests in your code.And before you can start\nadding tests in your code,you need to be able to\ndo the actual tests.So this is where comparison\noperators come in.So here, let's assume that\ni and j are variables.The following comparisons are\ngoing to give you a Boolean.So it's either going to say,\nthis is true or this is false.So that's going to be your test.So if i and j are\nvariables, you'reallowed to compare\nints with ints,floats with floats,\nstrings with strings.", "start": 720.0, "heat": 0.178}, {"text": "And you're allowed\nto compare intsand floats between\nthemselves, but you're notallowed to compare a\nstring with a number.In fact, if you even try to\ndo that in Python-- in Spiderhere, if I try to say, is\nthe letter a greater than 5?I get some angry\ntext right here.And this just tells\nme Python doesn'tunderstand the\nmeaning of-- how do Icompare a string with a number?OK.So just like in math, we can\ndo these usual comparisons.We can say if something\nis greater than something,greater or equal to, less\nthan, less than or equal to.I'd like to bring to your\nattention the equality.So the single equals\nsign is an assignment.So you're taking a\nvalue, and you'reassigning it to a variable.But when you're doing\nthe double equals sign,this is the test for equality.Is the value of\nvariable i the sameas the value of the variable j?And that's, again,\nalso going to give youa Boolean either true or false.And you can also test for\ninequality with the exclamationequal.So that means, is the\nvalue of the variable inot equal to the value\nof the variable j?True if yes, false if no.OK.So those are comparison\noperators on integer,floats, and strings.On Booleans, you can do\nsome logic operators.And the simplest\nis just inverting.So if a is a variable\nthat has a Boolean value,not a is just\ngoing to invert it.So if a is true, then not\na is false, and vice versa.This is a table that sort of\nrepresents what I've said here.So you can do-- you\ncan use and and or.These are key words in Python.You can use those two\nkey words on variables,on Boolean variables.And you get the result\na and b is only true", "start": 840.0, "heat": 0.1}, {"text": "if both a and b are true.And a or b is only false\nif a and b are false.And this is the complete\ntable just in caseyou need to reference it.All right.So now that we have ways to do\nlogical-- question right there.AUDIENCE: [INAUDIBLE]PROFESSOR: Yeah, great question.So what does it mean to\ncompare a string with a stringwith the greater than?So that's just going to compare\nthem, lexicographically.So does it come first\nin the alphabet?So we can even test that out.We can say, is a greater than b?And it's false.So b comes later in\nthe alphabet than a.OK.So now we have ways\nto do the tests.So we can add some branching\nto our programming toolboxnow that we have\nways to do tests.This is a map of MIT.I'm going to go through\nsort of a little exampleto motivate why we would want\nto do branching in our code.And I think after this lecture,\nyou'll be able to sort of codeup this algorithm that\nI'm going to explain.So most of us see MIT as a maze.I first did when I came here.When I first came\nhere, obviously, Isigned up for the free\nfood mailing list.And MIT, being a maze, I\nhad no idea where to go,what the shortest\npath was to free food.So one way to think about\nit is all I wanted to dowas get to the free food.A very simple algorithm to\nget there would be to say,OK, I'm going take\nmy right hand,and I'm going to make sure\nthat my right hand is alwayson a wall.And I'm going to go around\ncampus with my right handalways being at a wall.And eventually, I'll get\nto where the free food is.There might not be\nany left, right?", "start": 960.0, "heat": 0.169}, {"text": "But I'll be there.So the algorithm is as follows.If my right hand always\nhas to be on a wall,then I'm going to\nsay, if there'sno wall to my right\nside, then I'mgoing to go right\nuntil I get to a wall.Then if there's a wall to my\nright, and I can go forward,I'm just going to\nkeep going forward.If I keep going forward, and\nthere's a wall to my rightand in front of me, I'm going\nto turn around and go left.And then if there's a wall\nto my right, in front of me,and to the left, then I'm going\nto turn around and go back.So with this fairly\nsimple algorithm,I just follow the path always\nkeeping the wall to my right.And eventually, I would\nend up where I need to be.So notice, I used, just in\nplain English, a few key words.If, otherwise, things like that.So in programming, we have\nthose same constructs.And those same sort\nof intuitive wordscan be used to tell\nPython to do somethingor to do something else or to\nchoose from a different setof possibilities.And this way, we\ncan get the computerto make decisions for us.And you might be\nthinking, well, yousaid that computers can't\nmake decisions on their own.It's not.You, as programmers, are\ngoing to build these decisionsinto the program,\nand all the computeris going to do is going to reach\nthe decision point and say,OK, this is a decision\npoint, should I go leftor should I go right?Or which one do I pick?And these sort of decisions are\ncreated by you as a programmer.And the computer just\nhas to make the decisionand choose a path.OK.So in programming, there's\nthree sort of simple waysthat you can add control\nflow to your programs.And that's making one\ndecision and choosingwhether to execute something\nor execute something else.The first is a simple if.", "start": 1080.0, "heat": 0.268}, {"text": "And given a program\nthat just linearlyhas statements\nthat get executed,whenever I reach\nan if statement,you're going to\ncheck the condition.The condition is\ngoing to be somethingthat's going to get evaluated\nto either true or false.So I've reached\nthe condition here.And if the condition\nis true, then I'mgoing to additionally execute\nthis extra set of expressions.But if the condition\nis false, then I'mjust going to keep going\nthrough the programand not execute that\nextra set of instructions.How does Python know which\ninstructions to execute?They're going to be inside\nthis what we call code block.And the code block is\ndenoted by indentation.So it's going to be\neverything that'sindented is part of\nthat if code block.Typically, four\nspaces is indentation.OK.So that's how you\nwrite code thatdecides whether to execute\nthis extra thing or not.Now let's say I don't just\nwant to execute an extra thing,I want to reach a\npoint where I say,I'll either go down this path\nor I'll do something else.That's this right here.So this if else construct\nsays this is my code,I've reached my\ndecision point here,if the condition\ninside the if is true,then I'm going to execute maybe\nthis set of statements here.But if the condition\nis not true,then I'm not going to execute\nthat set of statements,and instead I'm going to\nexecute under whatever else is.", "start": 1200.0, "heat": 0.171}, {"text": "So using this\nconstruct, I'm eithergoing to do one set of\nexpressions or the other,but never both.And after I've executed\none or the other,I'm going to continue on with\njust the regular executionof the program.OK.So we're able to either\nchoose one thing,choose one thing or\nanother, but what if we wantto have more than one choice?So if some number is equal\nto zero, I want to do this.If it's equal to 1,\nI want to do this.If it's equal to 2, I want\nto do this, and so on.That's where this\nlast one comes in.And we introduced this other\nkey word here called elif.So that stands for\nshort form for else if.So first we check if\nthis condition is true.So we're going\nthrough our program,we've reached our\ndecision point,if the condition is true,\nwe're going to execute maybethis set of instructions.If the condition is\nnot true, maybe we'llcheck-- if the\ncondition is not true,we will check this\nnext condition.That's part of the\nelif right here.And if that one's\ntrue, we're goingto execute a different\nset of instructions.You can have more than one elif.And depending on\nwhich one's true,you're going to execute a\ndifferent set of instructions.And then this last else\nis sort of a catch allwhere if none of the previous\nconditions were true,then just do this last\nset of expressions.So in this case, you're\ngoing to choose between oneof these three-- one\nof these four roots,or however many you have.And then when you're\ndone making your choice,you're going to execute the\nremaining set of instructions.So the way this works is if\nmore than one condition is true,you're actually just going\nto enter one of them.And you're going to enter the\nvery first one that's true.", "start": 1320.0, "heat": 0.257}, {"text": "So you're never going\nto enter more than oneof these code blocks.You always enter one, and\nyou enter the first onethat evaluates to true.So notice that we denoted\ncode blocks using indentation.And that's actually\none of the thingsthat I really like about Python.It sort of forces you to\nwrite pretty code and nicelooking code and just\ncode that's very readable.And that forces you to indent\neverything that's a code block.So you can easily see sort of\nwhere the flow of control isand where decision making\npoints are and things like that.So in this particular example,\nwe have one if statement here,and it checks if two\nvariables are equal.And we have an if, elif, else.And in this example, we're\ngoing to enter either this codeblock or this one or\nthis one, dependingon the variables of x and y.And we're only going\ninto one code block.And we'll enter the\nfirst one that's true.Notice you can have\nnested conditionals.So inside this first if,\nwe have another if here.And this inner if is only going\nto be checked when we enterthe first-- this outter if.I do want to make\none point, though.So sometimes, you might forget\nto do the double equals signwhen you are checking for\nequality, and that's OK.If you just use one\nequals sign, Python'sgoing to give you an error.And it's going to\nsay syntax error,and it's going to\nhighlight this line.And then you're going to know\nthat there's a mistake there.And you should be\nusing equality,", "start": 1440.0, "heat": 0.112}, {"text": "because it doesn't\nmake sense to beusing-- to assign-- to be making\nan assignment inside the if.So we've learned\nabout branching.And we know about conditionals.Let's try to apply\nthis to a little game.And spoiler, we\nwon't be able to.We'll have to learn\nabout a new thing.But back in the 1980s,\nthere was the Legendof Zelda-- cool\ngraphics-- where there wasa scene with the lost woods.Oversimplification if\nanyone's a Zelda die hard fan.But the basic idea was\nif you entered the woods,you entered from the\nleft to the right.And then as long as\nyou kept going right,it would show you the same\nscreen over and over again.And the trick was you\njust had to go backward,and then you'd exit the woods.So very simple.Using what we know so far, we\ncould sort of code this up.And we'd say\nsomething like this.If the user exits right,\nthen set the backgroundto the woods background.Otherwise, set the background\nto the exit background.Now let's say the user-- and\nthen in the else, we're done.Let's say the user went right.Well, you'd show them\nthe woods background,and now ask them again,\nwhere do they want to go?If they exit right,\nset the backgroundto the woods background.Otherwise, set the background to\nthe exit background, and so on.So you notice that there's\nsort of no end to this, right?How many times-- do you\nknow how many times the usermight keep going right?They might be really\npersistent, right?And they'll be like maybe\nif I go 1,000 times,I'll get out of the woods.Maybe 1,001?Maybe.So this would probably\nbe-- who knows how deep?These nested ifs.So we don't know.", "start": 1560.0, "heat": 0.357}, {"text": "So with what we know\nso far, we can't reallycode this cute little game.But enter loops.And specifically, a while loop.So this code here that could\nbe infinitely number of nestedif statements deep\ncan be rewrittenusing these three lines.So we say while the\nuser exits right,set the background to\nthe woods background.And with a while\nloop, it's goingto do what we tell it\nto do inside the loop,and then it's going to\ncheck the condition again,and then it's\ngoing to do what wesay it should do\ninside the code block,and it's going to check\nthe condition again.And then when the condition--\nas long as a condition is true,it's going to keep doing\nthat little loop there.And as soon as the\ncondition becomes false,it's going to stop\ndoing the loopand do whatever's\nright after the while.OK.So that's basically\nhow a while loop works.We have while.That's the key word.The condition is\nsomething that getsevaluated to true or false.And once again, we have a\ncode block that's indented,and it tells Python,\nthese are the expressionsI want to do as long as\nthe condition is true.So the condition is true,\nyou evaluate every expressionin the code block.When you reach the end of the\nexpression-- end of the codeblock, you check\nthe condition again.If it's true still, you\nkeep doing the expressions.Check it again, and so on.So here's a little game.And with these lines\nof code, we wereable-- we can code up\nthe lost woods of Zelda.Even worse graphics, by the\nway than the original Zeldais this one that\nI coded up here.So I print out the\nfollowing things.\"You're in the Lost Forest.Go left or right.\"And my program's going to say,\n\"You're in the Lost Forest.Go left or right.\"It's going to get user input.It's going to say while the\nuser keeps typing in right,", "start": 1680.0, "heat": 0.356}, {"text": "show them this text,\nand ask them again.So I'm asking them again by\njust saying input here again.And that's it.That's going to just keep\ngetting input from the user.And if the user doesn't type in\nright, and maybe types in left,you're going to exit out of\nthis loop, and print out,\"You've got out of\nthe Lost Forest.\"So I have to show you this,\nbecause I spent too much timeon it.But I decided to improve on\nthe code that's in the slides.And I've written here ways that\nyou guys can also improve it.So if I run my code--\n\"You're in the Lost Forest.Go left or right.\"So if I say left, then yay,\nI got out of the Lost Forest.But if I go right,\nthen I'm stuck, right?I took down some trees.You can see there's\nno more trees here.I made a table, and\nthen I flipped it over.So the expansion to this\nif you want to try it out--I put this in the comments\nhere-- is try to use a counter.If the user types in\nright the first two times,just make that a sad face.But if the user types\nin more than two times,make them cut down some trees\nand build a table and flip it.That's a cute little\nexpansion if youwant to test yourself to make\nsure you are getting loops.OK.So so far, we've used while\nloops to ask for user input.And that's actually somewhere\nwhere it makes senseto use while loops,\nbecause you don't actuallyknow how many times the user\nis going to type in something.You can use while loops\nto keep sort of a counterand to write code\nthat counts something.If you do that, though,\nthere's two thingsyou need to take care of.The first is the\nfirst line here,", "start": 1800.0, "heat": 0.563}, {"text": "which is sort of an\ninitialization of this loopcounter.And the second is\nthis line here,which is incrementing\nyour loop counter.The reason why the\nsecond one is importantis because-- let's look\nat our condition here.So while n is less than five.If you didn't have\nthis line here,you would never increment n.So every time through the loop,\nyou just keep printing zeros.And you would have\nan infinite loop.I do want to show,\nthough, what--if you do have an infinite loop,\nit's not the end of the world.So I can say something like--\nso while true, print zero.So this is going to give me an\ninfinite loop in my program.And-- whoop.OK.So notice it's just printing the\nletter p over and over again.And if I let it go\nany longer, it'sgoing to slow down the computer.So I'm going to hit\nControl-C or Command-C maybe.And it's going to stop\nthe program from printing.So just in case you ever\nenter infinite loopsin your programs, just go to\nthe console and hit Control-C,and that's going to\nstop it from sortof slowing down the computer.OK.So going back to\nthis example, I wassaying that if you're using\ncounters-- variables in orderto sort of count up\ninside the while loop,you have to take\ncare to initializea counter variable first.And then to increment\nit, otherwise you'llenter an infinite loop.That feels a little bit tedious.And so there's a shortcut for\ndoing that exact same thing.So these four lines,\nyou can rewrite those", "start": 1920.0, "heat": 0.375}, {"text": "into these two lines right here\nusing this new type of loopcalled a for loop.So the for loop says, for some\nloop variable-- in this case,I named it n.You can name it\nwhatever you want.In range 5-- we're\ngoing to come backto what range means in\na little bit-- print n.So every time through\nthe loop, you'regoing to print out\nwhat the value of n is.Range 5 actually\ncreates internallya sequence of numbers\nstarting from 0and going to that\nnumber 5 minus 1.So the sequence is going\nto be 0, 1, 2, 3, and 4.The first time through the\nloop, you're going to say nis equal to 0.Or internally, this\nis what happens.N gets the value of 0.You're going to print n.Then you're going to\ngo back to the top.N gets the value 1.Then you're going to go\nexecute whatever is inside.So you're going to print 1.Then you're going\nto increment thatto the next value\nin the sequence.You're going to print\nout 2, and so on.So this is the general\nlook of a for loop.So we have for some\nloop variable-- again,can be named whatever you\nwant-- in range some number.Do a bunch of stuff.And again, these are part\nof this for loop code block.So you should indent\nthem to tell Pythonthat these are the things\nthat you should do.So when you're using\nrange some number,you start out with variable\ngetting the value 0.With variable having\nvalue 0, you'regoing to execute all\nof these expressions.After all the expressions\nin the code block are done,you're going to go\non to the next value.So 1.You're going to execute\nall these expressionswith the variable being\nvalue 1, and then so on", "start": 2040.0, "heat": 0.443}, {"text": "and so on until you go\nto some num minus 1.That-- so using\nrange in that wayis a little bit constraining,\nbecause you're alwaysgoing to get values\nstarting from 0and ending at some\nnum minus 1, whateveris in the parentheses in range.Sometimes you might want\nto write programs thatmaybe start at a custom value.Don't start at 0.Maybe they start at 5.Maybe they start at minus 10.And sometimes you might\nwant to write programsthat don't go with-- don't\nexpect the numbers by 1,but maybe skip\nevery other number,go every two numbers, or every\nthree numbers, and so on.So you can customize\nrange to your needs.The one thing you do need\nto give it is the stop.So if you give it only one\nvalue in the parenthesesthat stands for stop.And by default, start is\ngoing to have the value 0,and step is going\nto have the value 1.If you give it two things\nin the parentheses,you're giving it start and stop.So the first being start,\nthe second being stop.And step gets this\nvalue of 1 by default.And if you give it three\nthings in the parentheses,you're giving it start,\nstop, and step in that order.And you're always going to\nstart at the start valueand stop at-- or so you're going\nto start at the start value,and you're going to\ngo until stop minus 1.So those are the\nsequences of numbers.So in this first\ncode right here,my sum is going to\nget the value 0.And you're going\nto have a for loop.We're going to start\nfrom 7, because we'regiving it two numbers.And when you give\nit two numbers,it represents start and\nstop with step being 1.So we're starting at 7.If step is 1, the\nnext value is 8.", "start": 2160.0, "heat": 0.315}, {"text": "What's the value after that?If we're incrementing by 1?9.And since we're going\nuntil stop minus 1,we're not actually\ngoing to pick up on 10.So this loop variable,\ni, the very first timethrough the loop is going\nto have the value 7.So my sum is going\nto be 0 plus 7.That's everything that's\ninside the code block.The next time through the\nloop, i gets the value 8.So inside the for\nloop, my sum getswhatever the previous value\nwas, which was 7, plus 8.OK.The next time through\nthe loop, my sumget the value 7 plus 8 plus 9.Obviously, replacing that\nwith the previous value.So 15.Since we're not going through\n10, that's where we stop.And we're going to\nprint out my sum, whichis going to be the value\nof 7 plus 8 plus 9.Yeah?OK.Yeah.AUDIENCE: [INAUDIBLE]PROFESSOR: Do they\nhave to be integers?That's a great question.We can try that out.I'm not actually sure right\noff the top of my head.So you can go on Spider and\nsay-- let's say in this examplehere.So we can say 7.1, 10.3-- yeah.So they have to be integers.", "start": 2280.0, "heat": 0.151}, {"text": "OK.So that's that example.And let's erase that.In this particular example,\nwe have start, stop, and step.And here, we're going\nevery other value.So we're starting at 5.Tell me what the next\nvalue is supposed to be.If we're taking every other one.7, and then 9, and then--\nare we doing 11 or not?Excellent.Nice.Yeah.So we're going to\nthe end minus 1.OK.So it's possible\nthat sometimes youwrite code where you might want\nto exit out of the loop early.You don't want to go\nthrough all of the sequencesof your numbers.Maybe there's a condition\ninside there where you justwant to exit the loop early.Inside the while\nloop, maybe you wantto exit the loop before the\ncondition becomes false.So that's where the\nbreak statement comes in.So the break works like this.It's going to-- as soon\nas Python sees this breakstatement, it's\ngoing to say, OK,I'm going to look at whatever\nloop I'm currently in.I'm not evaluating\nany expressionafter it that comes\nwithin my loop.And I'm going to\nimmediately exit the loop.So I'm going inside\nthis while, this while,I'm evaluating this\none expression,and I suddenly see a break.Expression b does\nnot get evaluated.And break is going\nto immediatelyexit out of the innermost\nloop that it's in.So this while loop that\nhas condition 2, that'sthe innermost loop that\nthe break is found in.So we're going to exit out\nof this inner most loop here.And we're evaluating\nexpression c.And notice, we're\nevaluating expression c,because it's-- expression c is\npart of the outer while loop.", "start": 2400.0, "heat": 0.123}, {"text": "It's at the same\nlevel as this one.And these ones are part\nof the inner while loop.OK.Last thing I want to\nsay is just a little bitof a comparison between\nfor and while loops.So when would you\nuse one or the other.This might be useful\nin your problem sets.So for loops you\nusually use when youknow the number of iterations.While loops are very useful\nwhen, for example, you'regetting user input, and\nuser input is unpredictable.You don't know how\nmany times they'regoing to do a certain task.For both for and\nwhile loops, youcan end out of the loop\nearly using the break.The for loop uses this counter.It's inherent\ninside the for loop.A while loop you can use a\ncounter in order-- you can usea while loop to count things.But you must initialize the\ncounter before the while loop.And you have to remember to\nincrement it within the loop.Otherwise, you maybe\nlead to an infinite loop.We've seen as the very\nfirst example of a for loopthat the while--\nthe for loop couldbe rewritten as a while\nloop, but the vice versais not necessarily true.And the counterexample to\nthat is just user input.So you might not\nknow how many timesyou might do a certain task.All right.Great.That's all for today.", "start": 2520.0, "heat": 0.45}]