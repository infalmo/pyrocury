[{"text": "The following content is\nprovided under a CreativeCommons license.Your support will help MIT\nOpenCourseware continue tooffer high-quality educational\nresources for free.To make a donation, or view\nadditional materials fromhundreds of MIT courses, visit\nMIT OpenCourseware, atocw.mit.edu .PROFESSOR: Good morning.Try it again.Good morning.STUDENTS: Good morning.PROFESSOR: Thank you.This is 6.00, also known as\nIntroduction to ComputerScience and Programming.My name is Eric Grimson, I have\ntogether Professor JohnGuttag over here, we're\ngoing to be lecturingthe course this term.I want to give you a heads up;\nyou're getting some seriousfirepower this term.John was department head for\nten years, felt like acentury, and in course six,\nI'm the current departmenthead in course six.John's been lecturing for\nthirty years, roughly.All right, I'm the young guy,\nI've only been lecturing fortwenty-five years.You can tell, I have less\ngrey hair than he does.What I'm trying to say to\nyou is, we take thiscourse really seriously.We hope you do as well.But we think it's really\nimportant for the departmentto help everybody learn about\ncomputation, and that's whatthis course is about.What I want to do today is three\nthings: I'm going tostart-- actually, I shouldn't\nsay start, I'm going to do alittle bit of administrivia, the\nkinds of things you needto know about how we're going\nto run the course.I want to talk about the goal\nof the course, what it isyou'll be able to do at the end\nof this course when youget through it, and then I want\nto begin talking aboutthe concepts and tools of\ncomputational thinking, whichis what we're primarily going\nto focus on here.We're going to try and help you\nlearn how to think like acomputer scientist, and we're\ngoing to begin talking aboutthat towards the end of this\nlecture and of coursethroughout the rest of the\nlectures that carry on.Right, let's start\nwith the goals.I'm going to give you\ngoals in two levels.The strategic goals are the\nfollowing: we want to helpprepare freshmen and sophomores\nwho are interested", "start": 0.0, "heat": 0.1}, {"text": "in majoring in course six to\nget an easy entry into thedepartment, especially for those\nstudents who don't havea lot of prior programming\nexperience.If you're in that category,\ndon't panic, you'regoing to get it.We're going to help you ramp\nin and you'll certainly beable to start the course six\ncurriculum and do just fineand still finish on target.We don't expect everybody to\nbe a course six major,contrary to popular opinion,\nso for those are you not inthat category, the second thing\nwe want to do is we wantto help students who don't plan\nto major in course six tofeel justifiably confident in\ntheir ability to write andread small pieces of code.For all students, what we want\nto do is we want to give youan understanding of the role\ncomputation can and cannotplay in tackling technical\nproblems. So that you willcome away with a sense of what\nyou can do, what you can't do,and what kinds of things you\nshould use to tackle complexproblems.And finally, we want to position\nall students so thatyou can easily, if you like,\ncompete for things like youroffice and summer jobs.Because you'll have an\nappropriate level ofconfidence and competence\nin your ability to docomputational problem solving.Those are the strategic goals.Now, this course is primarily\naimed at students who havelittle or no prior programming\nexperience.As a consequence, we believe\nthat no student here isunder-qualified for this\ncourse: you're all MITstudents, you're all qualified\nto be here.But we also hope that there\naren't any students here whoare over-qualified\nfor this course.And what do I mean by that?If you've done a lot prior\nprogramming, this is probablynot the best course for you,\nand if you're in thatcategory, I would please\nencourage you to talk to Johnor I after class about what your\ngoals are, what kind ofexperience you have, and how\nwe might find you a coursethat better meets your goals.Second reason we don't want\nover-qualified students in theclass, it sounds a little nasty,\nbut the second reasonis, an over-qualified student,\nsomebody who's, I don't know,programmed for Google for the\nlast five years, is going to", "start": 120.0, "heat": 0.1}, {"text": "have an easy time in this\ncourse, but we don't want sucha student accidentally\nintimidating the rest of you.We don't want you to feel\ninadequate when you're simplyinexperienced.And so, it really is a course\naimed at students with littleor no prior programming\nexperience.And again, if you're not in that\ncategory, talk to John orI after class, and we'll help\nyou figure out where you mightwant to go.OK.Those are the top-level\ngoals of the course.Let's talk sort of at a more\ntactical level, about what dowe want you to know\nin this course.What we want you to be able\nto do by the timeyou leave this course?So here are the skills that we\nwould like you to acquire.Right, the first skill we want\nyou to acquire, is we want youto be able to use the basic\ntools of computationalthinking to write small scale\nprograms. I'm going to keepcoming back to that idea,\nbut I'm going to call itcomputational thinking.And that's so you can write\nsmall pieces of code.And small is not derogatory\nhere, by the way, it just saysthe size of things you're\ngoing to be able to do.Second skill we want you to have\nat the end of this courseis the ability to use a\nvocabulary of computationaltools in order to be\nable to understandprograms written by others.So you're going to be able\nto write, you're goingto be able to read.This latter skill, by the way,\nis incredibly valuable.Because you won't want to do\neverything from scratchyourself, you want to be able\nto look at what is beingcreated by somebody else and\nunderstand what is inside ofthere, whether it works\ncorrectly and how you canbuild on it.This is one of the\nfew places whereplagiarism is an OK thing.It's not bad to, if you like,\nlearn from the skills ofothers in order to create\nsomething you want to write.Although we'll come back\nto plagiarism as abad thing later on.Third thing we want you to\ndo, is to understand thefundamental both capabilities\nand limitations ofcomputations, and the costs\nassociated with them.And that latter statement sounds\nfunny, you don't thinkof computations having\nlimits, but they do.There're some things that\ncannot be computed.", "start": 240.0, "heat": 0.1}, {"text": "We want you to understand\nwhere those limits are.So you're going to be\nable to understandabilities and limits.And then, finally, the last\ntactical skill that you'regoing to get out of this course\nis you're going to havethe ability to map scientific\nproblems into acomputational frame.So you're going to be able to\ntake a description of aproblem and map it into\nsomething computational.Now if you think about\nit, boy, it soundslike grammar school.We're going to teach you to\nread, we're going to teach youto write, we're going to teach\nyou to understand what you canand cannot do, and most\nimportantly, we're going totry and give you the start\nof an ability to take adescription of a problem from\nsome other domain, and figureout how to map it into that\ndomain of computation so youcan do the reading and writing\nthat you want to do.OK, in a few minutes we're going\nto start talking thenabout what is computation, how\nare we going to start buildingthose tools, but that's what you\nshould take away, that'swhat you're going to gain out\nof this course by the timeyou're done.Now, let me take a sidebar for\nabout five minutes to talkabout course administration, the\nadministrivia, things thatwe're going to do in the course,\njust so you know whatthe rules are.Right, so, class is two hours\nof lecture a week.You obviously know where\nand you know when,because you're here.Tuesdays and Thursdays\nat 11:00.One hour of recitation a week,\non Fridays, and we'll comeback in a second to how you're\ngoing to get set up for that.And nine hours a week of\noutside-the-class work.Those nine hours are going to\nbe primarily working onproblem sets, and all the\nproblems sets are going toinvolve programming in Python,\nwhich is the language we'regoing to be using this term.Now, one of the things you're\ngoing to see is the firstproblem sets are pretty easy.Actually, that's probably\nwrong, John, right?They're very easy.And we're going to ramp up.By the time you get to the end\nof the term, you're going tobe dealing with some fairly\ncomplex things, so one of thethings you're going to see is,\nwe're going to make heavy use", "start": 360.0, "heat": 0.1}, {"text": "of libraries, or code\nwritten by others.It'll allow you to tackle\ninteresting problems I'll haveyou to write from scratch, but\nit does mean that this skillhere is going to be\nreally valuable.You need to be able to read that\ncode and understand it,as well as write your own.OK.Two quizzes.During the term, the dates have\nalready been scheduled.John, I forgot to look them up,\nI think it's October 2ndand November 4th, it'll be\non the course website.My point is, go check the course\nwebsite, which by theway is right there.If you have, if you know you\nhave a conflict with one ofthose quiz dates now, please\nsee John or I right away.We'll arrange something\nahead of time.But if you--The reason I'm saying that is,\nyou know, you know that you'regetting married that day for\nexample, we will excuse youfrom the quiz to get married.We'll expect you come right\nback to do the quiz by theway, but the--Boy, tough crowd.All right.If you have a conflict,\nplease let us know.Second thing is, if you have an\nMIT documented special needfor taking quizzes, please see\nJohn or I well in advance.At least two weeks\nbefore the quiz.Again, we'll arrange for this,\nbut you need to give us enoughwarning so that we can\ndeal with that.OK, the quizzes are open book.This course is not\nabout memory.It's not how well you can\nmemorize facts: in fact, Ithink both John and I are a\nlittle sensitive to memorytests, given our age,\nright John?This is not about how you\nmemorize things, it's abouthow you think.So they're open note,\nopen book.It's really going to test\nyour ability to think.The grades for the course will\nbe assigned roughly, and I usethe word roughly because we\nreserve the right to movethese numbers around a little\nbit, but basically in thefollowing percentages: 55% of\nyour grade comes from theproblem sets, the other 45%\ncome from the quizzes.And I should've said there's two\nquizzes and a final exam.I forgot, that final exam\nduring final period.So the quiz percentages\nare 10%, 15%, and 20%.Which makes up the other 45%.OK.", "start": 480.0, "heat": 0.1}, {"text": "Other administrivia.Let me just look through\nmy list here.First problem set, problem set\nzero, has already been posted.This is a really easy one.We intend it to be a really\neasy problem set.It's basically to get you to\nload up Python on your machineand make sure you understand\nhow to interact with it.The first problem set will be\nposted shortly, it's alsopretty boring-- somewhat like\nmy lectures but not John's--and that means, you know,\nwe want you just toget going on things.Don't worry, we're going to make\nthem more interesting asyou go along.Nonetheless, I want to stress\nthat none of these problemssets are intended\nto be lethal.We're not using them to weed you\nout, we're using them tohelp you learn.So if you run into a problem\nset that just, youdon't get, all right?Seek help.Could be psychiatric help,\ncould be a TA.I recommend the TA.My point being, please come\nand talk to somebody.The problems are set up so that,\nif you start down theright path, it should be pretty\nstraight-forward towork it through.If you start down a plausible\nbut incorrect path, you cansometimes find yourself stuck in\nthe weeds somewhere, and wewant to bring you back in.So part of the goal here is,\nthis should not be a grueling,exhausting kind of task, it's\nreally something that shouldbe helping you learn\nthe material.If you need help, ask John,\nmyself, or the TAs.That's what we're here for.OK.We're going to run primarily a\npaperless subject, that's whythe website is there.Please check it, that's where\neverything's going to beposted in terms of things\nyou need to know.In particular, please go to it\ntoday, you will find a formthere that you need to fill out\nto register for, or signup for rather, a recitation.Recitations are on Friday.Right now, we have them\nscheduled at 9:00, 10:00,11:00, 12:00, 1:00, and 2:00.We may drop one of the\nrecitations, just depending oncourse size, all right?So we reserve the right,\nunfortunately, to have to moveyou around.My guess is that 9:00 is not\ngoing to be a tremendouslypopular time, but maybe\nyou'll surprise me.Nonetheless, please\ngo in and sign up.We will let you sign up for\nwhichever recitation makessense for you.Again, we reserve the right to\nmove people around if we have", "start": 600.0, "heat": 0.1}, {"text": "to, just to balance load, but we\nwant you to find somethingthat fits your schedule\nrather than ours.OK.Other things.There is no required text.If you feel exposed without a\ntext book, you really have tohave a textbook, you'll find one\nrecommended-- actually I'mgoing to reuse that word, John,\nat least suggest it, onthe course website.I don't think either of us are\nthrilled with the text, it'sthe best we've probably found\nfor Python, it's OK.If you need it, it's there.But we're going to basically not\nrely on any specific text.Right.Related to that: attendance\nhere isobviously not mandatory.You ain't in high\nschool anymore.I think both of us would love to\nsee your smiling faces, orat least your faces,\neven if you're notsmiling at us every day.Point I want to make about this,\nthough, is that we aregoing to cover a lot of material\nthat is not in theassigned readings, and we do\nhave assigned readingsassociated with each one\nof these lectures.If you choose not to show up\ntoday-- or sorry, you didchoose to show up today, if you\nchoose not to show up infuture days-- we'll understand,\nbut please alsounderstand that the TAs won't\nhave a lot of patience withyou if you're asking a question\nabout something thatwas either covered in the\nreadings, or covered in thelecture and is pretty\nstraight forward.All right?We expect you to behave\nresponsiblyand we will as well.All right.I think the last thing I want\nto say is, we will not behanding out class notes.Now this sounds like a\ndraconian measure;let me tell you why.Every study I know of, and I\nsuspect every one John knows,about learning, stresses that\nstudents learn best when theytake notes.Ironically, even if they\nnever look at them.OK.The process of writing is\nexercising both halves of yourbrain, and it's actually helping\nyou learn, and sotaking notes is really\nvaluable thing.Therefore we're not going\nto distribute notes.What we will distribute for\nmost lectures is a handoutthat's mostly code examples\nthat we're going to do.I don't happen to have one today\nbecause we're not goingto do a lot of code.We will in future.Those notes are going to make\nno sense, I'm guessing,", "start": 720.0, "heat": 0.1}, {"text": "outside of the lecture,\nall right?So it's not just, you can swing\nby 11:04 and grab a copyand go off and catch\nsome more sleep.What we recommend is you use\nthose notes to take your ownannotations to help you\nunderstand what's going on,but we're not going to\nprovide class notes.We want you to take your own\nnotes to help you, if youlike, spur your own\nlearning process.All right.And then finally, I want to\nstress that John, myself, allof the staff, our job is\nto help you learn.That's what we're here for.It's what we get\nexcited about.If you're stuck, if you're\nstruggling, if you're notcertain about something,\nplease ask.We're not mind readers, we\ncan't tell when you'restruggling, other than sort of\nseeing the expression on yourface, we need your help\nin identifying that.But all of the TAs, many of whom\nare sitting down in thefront row over here, are here\nto help, so come and ask.At the same time, remember that\nthey're students too.And if you come and ask a\nquestion that you could haveeasily answered by doing the\nreading, coming to lecture, orusing Google, they're going\nto have less patience.But helping you understand\nthings that really are aconceptual difficulty is what\nthey're here for and whatwe're here for, so please\ncome and talk to us.OK.That takes care of the\nadministrivia preamble.John, things we add?PROFESSOR GUTTAG: Two\nmore quick things.This semester, your class\nis being videotaped forOpenCourseware.If any of you don't want your\nimage recorded and posted onthe web, you're supposed to sit\nin the back three rows.PROFESSOR GRIMSON:\nAh, thank you.I forgot.PROFESSOR GUTTAG: --Because\nthe camera may pan.I think you're all very\ngood-looking and give MIT agood image, so please, feel\nfree to be filmed.PROFESSOR GRIMSON: I'll turn\naround, so if you want to, youknow, move to the back,\nI won't see who moves.Right.Great.Thank you, John.PROFESSOR GUTTAG: So that, the\nother thing I want to mentionis, recitations are also\nvery important.", "start": 840.0, "heat": 0.1}, {"text": "We will be covering material in\nrecitations that're not inthe lectures, not in the\nreading, and we do expect youto attend recitations.PROFESSOR GRIMSON: Great.Thanks, John.Any questions about\nthe administrivia?I know it's boring, but we need\nto do it so you know whatthe ground rules are.Good.OK.Let's talk about computation.As I said, our strategic goal,\nour tactical goals, are tohelp you think like a computer\nscientist. Another way ofsaying it is, we want to give\nyou the skill so that you canmake the computer do what\nyou want it to do.And we hope that at the end of\nthe class, every time you'reconfronted with some technical\nproblem, one of your firstinstincts is going to be, \"How\ndo I write the piece of codethat's going to help\nme solve that?\"So we want to help you\nthink like a computerscientist. All right.And that, is an interesting\nstatement.What does it mean, to think\nlike a computer scientist?Well, let's see.The primary knowledge you're\ngoing to take away from thiscourse is this notion of\ncomputational problem solving,this ability to think incomputational modes of thought.And unlike in a lot of\nintroductory courses, as aconsequence, having the ability\nto memorize is notgoing to help you.It's really learning those\nnotions of the tools that youwant to use.What in the world does\nit mean to saycomputational mode of thought?It sounds like a hifalutin\nphrase you use when you'retrying to persuade\na VC to fund you.Right.So to answer this, we really\nhave to ask a differentquestion, a related question;\nso, what's computation?It's like a strange\nstatement, right?What is computation?And part of the reason for\nputting it up is that I wantto, as much as possible,\nanswer that question byseparating out the mechanism,\nwhich is the computer, fromcomputational thinking.Right.The artifact should not be\nwhat's driving this.It should be the notion of,\n\"What does it mean to docomputation?\"Now, to answer that, I'm going\nto back up one more level.And I'm going to pose what\nsounds like a philosophyquestion, which is, \"What is\nknowledge?\" And you'll see in", "start": 960.0, "heat": 0.1}, {"text": "about two minutes why I'm\ngoing to do this.But I'm going to suggest that I\ncan divide knowledge into atleast two categories.OK, and what is knowledge?And the two categories I'm going\nto divide them into aredeclarative and imperative\nknowledge.Right.What in the world is declarative\nknowledge?Think of it as statements\nof fact.It's assertions of truth.Boy, in this political season,\nthat's a really dangerousphrase to use, right?But it's a statement of fact.I'll stay away from the\npolitical comments.Let me give you an\nexample of this.Right.Here's a declarative\nstatement.The square root of x is that y\nsuch that y squared equals x,y's positive.You all know that.But what I want you to\nsee here, is that's astatement of fact.It's a definition.It's an axiom.It doesn't help you\nfind square roots.If I say x is 2, I want to know,\nwhat's the square rootof 2, well if you're enough of\na geek, you'll say 1.41529 orwhatever the heck it is, but in\ngeneral, this doesn't helpyou find the square root.The closest it does is it would\nlet you test. You know,if you're wandering through\nHarvard Square and you see anout-of-work Harvard grad,\nthey're handing out examplesof square roots, they'll give\nyou an example and you cantest it to see, is the\nsquare root of2, 1.41529 or whatever.I don't even get laughs at\nHarvard jokes, John, I'm goingto stop in a second\nhere, all right?All right, so what am I\ntrying to say here?It doesn't -- yeah, exactly.We're staying away from that,\nreally quickly, especiallywith the cameras rolling.All right.What am I trying to say?It tells you how you might test\nsomething but it doesn'ttell you how to.And that's what imperative\nknowledge is.Imperative knowledge\nis a description ofhow to deduce something.So let me give you an\nexample of a pieceof imperative knowledge.All right, this is actually a\nvery old piece of imperativeknowledge for computing square\nroots, it's attributed to", "start": 1080.0, "heat": 0.1}, {"text": "Heron of Alexandria, although I\nbelieve that the Babyloniansare suspected of knowing\nit beforehand.But here is a piece of\nimperative knowledge.All right?I'm going to start with a guess,\nI'm going to call it g.And then I'm going to say, if g\nsquared is close to x, stop.And return g.It's a good enough answer.Otherwise, I'm going to get a\nnew guess by taking g, x overg, adding them, and\ndividing by two.Then you take the average\nof g and x over g.Don't worry about how came\nabout, Heron found this out.But that gives me a new guess,\nand I'm going to repeat.That's a recipe.That's a description\nof a set of steps.Notice what it has, it has a\nbunch of nice things that wewant to use, right?It's a sequence of specific\ninstructionsthat I do in order.Along the way I have some tests,\nand depending on thevalue of that test, I may change\nwhere I am in thatsequence of instructions.And it has an end test,\nsomething that tells me whenI'm done and what\nthe answer is.This tells you how to\nfind square roots.it's how-to knowledge.It's imperative knowledge.All right.That's what computation\nbasically is about.We want to have ways of\ncapturing this process.OK, and that leads now to an\ninteresting question, whichwould be, \"How do I build a\nmechanical process to capturethat set of computations?\" So\nI'm going to suggest thatthere's an easy way to do it--I realized I did the boards in\nthe wrong order here-- one ofthe ways I could do it is, you\ncould imagine building alittle circuit to do this.If I had a couple of elements of\nstored values in it, I had", "start": 1200.0, "heat": 0.1}, {"text": "some wires to move things\naround, I had a little thingto do addition, little thing\nto do division, and asomething to do the testing, I\ncould build a little circuitthat would actually do\nthis computation.OK.That, strange as it sounds, is\nactually an example of theearliest computers, because the\nearliest computers werewhat we call fixed-program\ncomputers, meaning that theyhad a piece of circuitry\ndesigned to do a specificcomputation.And that's what they would do:\nthey would do that specificcomputation.You've seen these\na lot, right?A good example of this:\ncalculator.It's basically an example of\na fixed-program computer.It does arithmetic.If you want play video games\non it, good luck.If you want to do word\nprocessing on it, good luck.It's designed to do\na specific thing.It's a fixed-program computer.In fact, a lot of the other\nreally interesting early onessimilarly have this flavor, to\ngive an example: I never knowhow to pronounce this,\nAtanasoff, 1941.One of the earliest\ncomputational things was athing designed by a guy named\nAtanasoff, and it basicallysolved linear equations.Handy thing to do if you're\ndoing 1801, all right, or1806, or whatever you want\nto do those things in.All it could do, though, was\nsolve those equations.One of my favorite examples of\nan early computer was done byAlan Turing, one of the great\ncomputer scientists of alltime, called the bombe, which\nwas designed to break codes.It was actually used during\nWWII to breakGerman Enigma codes.And what it was designed\nto do, was to solvethat specific problem.The point I'm trying to make is,\nfixed-program computers iswhere we started, but it doesn't\nreally get us to wherewe'd like to be.We want to capture this idea\nof problem solving.So let's see how\nwe'd get there.", "start": 1320.0, "heat": 0.1}, {"text": "So even within this framework\nof, given a description of acomputation as a set of steps,\nin the idea that I could builda circuit to do it, let me\nsuggest for you what would bea wonderful circuit to build.Suppose you could build a\ncircuit with the followingproperty: the input to this\ncircuit would be any othercircuit diagram.Give it a circuit diagram for\nsome computation, you give itto the circuit, and that circuit\nwould wonderfullyreconfigure itself to act like\nthe circuits diagram.Which would mean, it could\nact like a calculator.Or, it could act like\nTuring's bombe.Or, it could act like a\nsquare root machine.So what would that circuit\nlook like?You can imagine these tiny\nlittle robots wanderingaround, right?Pulling wires and pulling\nout components andstacking them together.How would you build a circuit\nthat could take a circuitdiagram in and make a machine\nact like that circuit?Sounds like a neat challenge.Let me change the\ngame slightly.Suppose instead, I want a\nmachine that can take arecipe, the description of a\nsequence of steps, take thatas its input, and then that\nmachine will now act like whatis described in that recipe.Reconfigure itself, emulate it,\nhowever you want to usethe words, it's going to\nchange how it does thecomputation.That would be cool.And that exists.It's called an interpreter.It is the basic heart\nof every computer.What it is doing, is saying,\nchange the game.This is now an example of a\nstored-program computer.What that means, in a\nstored-program computer, isthat I can provide to the\ncomputer a sequence ofinstructions describing the\nprocess I want it to execute.And inside of the machine, and\nthings we'll talk about, thereis a process that will allow\nthat sequence to be executed", "start": 1440.0, "heat": 0.1}, {"text": "as described in that recipe,\nso it can behave like anything that I can describe\nin one of those recipes.All right.That actually seems like a\nreally nice thing to have, andso let me show you what that\nwould basically look like.Inside of a stored-program\ncomputer, we would have thefollowing: we have a memory,\nit's connected to two things;control unit, in what's called\nan ALU, an arithmetic logicunit, and this can take in\ninput, and spit out output,and inside this stored-program\ncomputer, excuse me, you havethe following: you have a\nsequence of instructions.And these all get\nstored in there.Notice the difference.The recipe, the sequence of\ninstructions, is actuallygetting read in, and it's\ntreated just like data.It's inside the memory of the\nmachine, which means we haveaccess to it, we can change it,\nwe can use it to build newpieces of code, as well as\nwe can interpret it.One other piece that goes\ninto this computer--I never remember where to put\nthe PC, John, control?ALU?Separate?I'll put it separate--\nyou have a thingcalled a program counter.And here's the basis\nof the computation.That program counter points to\nsome location in memory,typically to the first\ninstruction in the sequence.And those instructions, by the\nway, are very simple: they'rethings like, take the value out\nof two places in memory,and run them through the\nmultiplier in here, a littlepiece of circuitry, and\nstick them back intosomeplace in memory.Or take this value out of\nmemory, run it through someother simple operation, stick\nit back in memory.", "start": 1560.0, "heat": 0.1}, {"text": "Having executed this\ninstruction, that counter goesup by one and we move\nto the next one.We execute that instruction,\nwe move to the next one.Oh yeah, it looks a whole\nlot like that.Some of those instructions will\ninvolve tests: they'llsay, is something true?And if the test is true, it will\nchange the value of thisprogram counter to point to\nsome other place in thememory, some other point in that\nsequence of instructions,and you'll keep processing.Eventually you'll hopefully\nstop, and a value gets spitout, and you're done.That's the heart\nof a computer.Now that's a slight\nmisstatement.The process to control it is\nintriguing and interesting,but the heart of the computer is\nsimply this notion that webuild our descriptions, our\nrecipes, on a sequence ofprimitive instructions.And then we have a\nflow of control.And that flow of control is\nwhat I just described.It's moving through a sequence\nof instructions, occasionallychanging where we are\nas we move around.OK.The thing I want you to take\naway from this, then, is tothink of this as, this is,\nif you like, a recipe.And that's really what\na program is.It's a sequence of\ninstructions.Now, one of things I left\nhanging is, I said, OK, youbuild it out of primitives.So one of the questions is,\nwell, what are the rightprimitives to use?And one of the things that was\nuseful here is, that weactually know that the set of\nprimitives that you want touse is very straight-forward.OK, but before I do that, let me\ndrive home this idea of whythis is a recipe.Assuming I have a set of\nprimitive instructions that Ican describe everything on, I\nwant to know what can I build.Well, I'm going to do the same\nanalogy to a real recipe.So, real recipe.I don't know.Separate six eggs.Do something.Beat until the-- sorry,\nbeat the whitesuntil they're stiff.Do something until an\nend test is true.", "start": 1680.0, "heat": 0.1}, {"text": "Take the yolks and mix them in\nwith the sugar and water--No.Sugar and flour I guess is\nprobably what I want, sugarand water is not going to do\nanything interesting for mehere-- mix them into\nsomething else.Do a sequence of things.A traditional recipe actually\nis based on a small set ofprimitives, and a good chef\nwith, or good cook, I shouldsay, with that set of\nprimitives, can create anunbounded number of\ngreat dishes.Same thing holds true\nin programming.Right.Given a fixed set of primitives,\nall right, a goodprogrammer can program\nanything.And by that, I mean anything\nthat can be described in oneof these process, you can\ncapture in that set ofprimitives.All right, the question is, as\nI started to say, is, \"Whatare the right primitives?\" So\nthere's a little bit of, alittle piece of history\nhere, if you like.In 1936, that same guy, Alan\nTuring, showed that with sixsimple primitives, anything that\ncould be described in amechanical process, it's\nactually algorithmically,could be programmed just using\nthose six primitives.Think about that for a second.That's an incredible\nstatement.It says, with six primitives,\nI can rule the world.With six primitives, I\ncan program anything.A couple of really interesting\nconsequences of that, by theway, one of them is, it says,\nanything you can do in oneprogramming language,\nyou can do inanother programming language.And there is no programming\nlanguage that is better-- wellactually, that's not quite true,\nthere are some better atdoing certain kinds of things--\nbut there's nothingthat you can do in C that\nyou can't do in Fortran.It's called Turing\ncompatibility.Anything you can do with one,\nyou can do with another, it'sbased on that fundamental\nresult.OK.Now, fortunately we're not going\nto start with Turing'ssix primitives, this would be\nreally painful programming,because they're down at the\nlevel of, \"take this value andwrite it onto this tape.\" First\nof all, we don't have", "start": 1800.0, "heat": 0.1}, {"text": "tapes anymore in computers, and\neven if we did, you don'twant to be programming\nat that level.What we're going to see with\nprogramming language is thatwe're going to use higher-level\nabstracts.A broader set of primitives,\nbut nonetheless the samefundamental thing holds.With those six primitives,\nyou can do it.OK.So where are we here?What we're saying is, in order\nto do computation, we want todescribe recipes, we want to\ndescribe this sequence ofsteps built on some primitives,\nand we want todescribe the flow of control\nthat goes through thosesequence of steps\nas we carry on.So the last thing we need before\nwe can start talkingabout real programming\nis, we need todescribe those recipes.All right, And to describe\nthe recipes, we'regoing to want a language.We need to know not only what\nare the primitives, but how dowe make things meaningful\nin that language.Language.There we go.All right.Now, it turns out there are--I don't know, John, hundreds?Thousands?Of programming languages?At least hundreds-- of\nprogramming languages around.PROFESSOR JOHN GUTTAG:\n[UNINTELLIGIBLE]PROFESSOR ERIC GRIMSON: True.Thank you.You know, they all\nhave, you know,their pluses and minuses.I have to admit, in my career\nhere, I think I've taught inat least three languages, I\nsuspect you've taught more,five or six, John?Both of us have probably\nprogrammed in more than thosenumber of languages, at least\nprogrammed that many, since wetaught in those languages.One of the things you\nwant to realize is,there is no best language.At least I would argue that,\nI think John would agree.We might both agree we have\nour own nominees for worstlanguage, there are\nsome of those.There is no best language.All right?They all are describing\ndifferent things.Having said that, some of them\nare better suited for somethings than others.Anybody here heard of MATLAB\nMaybe programmed in MATLAB?It's great for doing things with\nvectors and matrices andthings that are easily captured\nin that framework.", "start": 1920.0, "heat": 0.1}, {"text": "But there's some things\nthat are a realpain to do in MATLAB.So MATLAB's great for\nthat kind of thing.C is a great language for\nprogramming things thatcontrol data networks,\nfor example.I happen to be, and John\nteases me about thisregularly, I'm an old-time Lisp\nprogrammer, and that'show I was trained.And I happen to like Lisp and\nScheme, it's a great languagewhen you're trying to deal with\nproblems where you havearbitrarily structured\ndata sets.It's particularly\ngood at that.So the point I want to make\nhere is that there's noparticularly best language.What we're going to do is simply\nuse a language thathelps us understand.So in this course, the\nlanguage we'regoing to use is Python.Which is a pretty new language,\nit's growing inpopularity, it has a lot of\nthe elements of some otherlanguages because it's more\nrecent, it inherits thingsfrom it's pregenitors,\nif you like.But one of the things I want to\nstress is, this course isnot about Python.Strange statement.You do need to know how to use\nit, but it's not about thedetails of, where do the\nsemi-colons go in Python.All right?It's about using it to think.And what you should take away\nfrom this course is havinglearned how to design recipes,\nhow to structure recipes, howto do things in modes\nin Python.Those same tools\neasily transferto any other language.You can pick up another language\nin a week, couple ofweeks at most, once you\nknow how to do Python.OK.In order to talk about Python\nand languages, I want to doone last thing to set the stage\nfor what we're going todo here, and that's to talk\nabout the different dimensionsof a language.And there're three I\nwant to deal with.The first one is, whether\nthis is a high-levelor low-level language.That basically says,\nhow close are youthe guts of the machine?A low-level language, we used\nto call this assemblyprogramming, you're down at the\nlevel of, your primitivesare literally moving pieces of\ndata from one location ofmemory to another, through\na very simple operation.A high-level language, the\ndesigner has created a muchricher set of primitive\nthings.In a high-level language, square\nroot might simply be a", "start": 2040.0, "heat": 0.1}, {"text": "primitive that you can use,\nrather than you having to goover and code it.And there're trade-offs\nbetween both.Second dimension is, whether\nthis is a general versus atargeted language.And by that I mean, do the set\nof primitives support a broadrange of applications, or is\nit really aimed at a veryspecific set of applications?I'd argue that MATLAB is\nbasically a targeted language,it's targeted at matrices and\nvectors and things like that.And the third one I want to\npoint out is, whether this isan interpreted versus\na compiled language.What that basically says\nis the following: in aninterpreted language, you take\nwhat's called the source code,the thing you write, it may go\nthrough a simple checker butit basically goes to the\ninterpreter, that thing insidethe machine that's going to\ncontrol the flow of goingthrough each one of\nthe instructions,and give you an output.So the interpreter is simply\noperating directly on yourcode at run time.In a compiled language, you have\nan intermediate step, inwhich you take the source code,\nit runs through what'scalled a checker or a compiler\nor both, and it creates what'scalled object code.And that does two things: one,\nit helps catch bugs in yourcode, and secondly it often\nconverts it into a moreefficient sequence of\ninstructions before youactually go off and run it.All right?And there's trade-offs\nbetween both.I mean, an interpreted language\nis often easier todebug, because you can still see\nyour raw code there, butit's not always as fast. A\ncompiled language is usuallymuch faster in terms\nof its execution.And it's one of the things you\nmay want to trade off.Right.In the case of Python, it's\na high-level language.I would argue, I think John\nwould agree with me, it'sbasically a general-purpose\nlanguage.It happens to be better suited\nfor manipulating strings thannumbers, for example,\nbut it's really ageneral-purpose language.And it's primarily--I shouldn't say primarily, it\nis an interpreted language.OK?As a consequence, it's not as\ngood as helping debug, but it", "start": 2160.0, "heat": 0.1}, {"text": "does let you-- sorry, that's the\nwrong way of saying-- it'snot as good at catching some\nthings before you run them, itis easier at some times\nin debugging as you goalong on the fly.OK.So what does Python look like?In order to talk about Python--\nactually, I'm goingto do it this way-- we need\nto talk about how towrite things in Python.Again, you have to let me back\nup slightly and set the stage.Our goal is to build recipes.You're all going to be\ngreat chefs by thetime you're done here.All right?Our goal is to take problems and\nbreak them down into thesecomputational steps, these\nsequence of instructionsthat'll allow us to capture\nthat process.To do that, we need to describe:\nnot only, what arethe primitives, but how do we\ncapture things legally in thatlanguage, and interact\nwith the computer?And so for that, we\nneed a language.We're about to start talking\nabout the elements of thelanguage, but to do that, we\nalso need to separate out onelast piece of distinction.Just like with a natural\nlanguage, we're going toseparate out syntax\nversus semantics.So what's syntax?Syntax basically says, what are\nthe legal expressions inthis language?Boy, my handwriting is\natrocious, isn't it?There's a English sequence\nof words.It's not since syntactically\ncorrect, right?It's not a sentence.There's no verb in there\nanywhere, it's justa sequence of nouns.Same thing in our languages.We have to describe how do you\nput together legally formedexpressions.OK?And as we add constructs to the\nlanguage, we're going totalk about.Second thing we want to talk\nabout very briefly as we goalong is the semantics\nof the language.And here we're going to break\nout two pieces; staticsemantics and full semantics.Static semantics basically\nsays which programs are", "start": 2280.0, "heat": 0.1}, {"text": "meaningful.Which expressions make sense.Here's an English sentence.It's syntactically correct.Right?Noun phrase, verb,\nnoun phrase.I'm not certain it's meaningful,\nunless you are inthe habit of giving your\nfurniture personal names.What's the point?Again, you can have things that\nare syntactically legalbut not semantically meaningful,\nand staticsemantics is going to be a way\nof helping us decide whatexpressions, what pieces of\ncode, actually have realmeaning to it.All right?The last piece of it is, in\naddition to having staticsemantics, we have sort\nof full semantics.Which is, what does\nthe program mean?Or, said a different way,\nwhat's going tohappen when I run it?That's the meaning of\nthe expression.That's what you want.All right?You want to know, what's the\nmeaning of this piece of code?When I run it, what's\ngoing to happen?That's what I want to build.The reason for pulling this out\nis, what you're going tosee is, that in most languages,\nand certainly inPython-- we got lots of help\nhere-- all right, Python comesbuilt-in with something that\nwill check your static, sorry,your syntax for you.And in fact, as a sidebar, if\nyou turn in a problem set thatis not syntactically correct,\nthere's a simple button thatyou push that will check\nyour syntax.If you've turned in a program\nthat's not syntacticallycorrect, the TAs give\nyou a zero.Because it said you didn't even\ntake the time to makesure the syntax is correct.The system will help\nyou find it.In Python, it'll find it,\nI think one bug ata time, right John?It finds one syntax error at\na time, so you have to be alittle patient to do it,\nbut you can check thatthe syntax is right.You're going to see that we\nget some help here on the", "start": 2400.0, "heat": 0.1}, {"text": "static semantics, and I'm going\nto do an example in asecond, meaning that the system,\nsome languages arebetter than others on it, but it\nwill try and help you catchsome things that are not\nsemantically correctstatically.In the case of Python, it does\nthat I think all at run time.I'm looking to you again,\nJohn, I think there's nopre-time checks.Its-- sorry?PROFESSOR JOHN GUTTAG:\n[UNINTELLIGIBLE]PROFESSOR ERIC GRIMSON:\nThere is some.OK.Most of them, I think though,\nare primarily caught at runtime, and that's a little bit\nof a pain because you don'tsee it until you go and run the\ncode, and there are some,actually we're going to see an\nexample I think in a secondwhere you find it, but you\ndo get some help there.The problem is, things that you\ncatch here are actuallythe least worrisome bugs.They're easy to spot, you can't\nrun the program withthem there, so you're not going\nto get weird answers.Not everything is going\nto get caught instatic semantics checking.Some things are going to\nslide through, andthat's actually a bother.It's a problem.Because it says, your program\nwill still give you a value,but it may not be what you\nintended, and you can't alwaystell, and that may propagate\nit's way down through a wholebunch of other computations\nbefore it causes somecatastrophic failure.So actually, the problem with\nstatic semantics is you'd likeit to catch everything, you\ndon't always get it.Sadly we don't get\nmuch help here.Which is where we'd like it.But that's part of your job.OK.What happens if you actually\nhave something that's bothsyntactically correct, and\nappears to have correct staticsemantics, and you run it?It could run and give you the\nright answer, it could crash,it could loop forever, it could\nrun and apparently giveyou the right answer.And you're not always going\nto be able to tell.Well, you'll know when it\ncrashes, that doesn't help youvery much, but you can't\nalways tell whethersomething's stuck in an infinite\nloop or whether it'ssimply taking a long\ntime to compute.You'd love to have a system that\nspots that for you, butit's not possible.And so to deal with\nthis last one, you", "start": 2520.0, "heat": 0.1}, {"text": "need to develop style.All right?Meaning, we're going to try to\nhelp you with how to developgood programming style, but you\nneed to write in a way inwhich it is going to be easy\nfor you to spot the placesthat cause those semantic\nbugs to occur.All right.If that sounds like a really\nlong preamble, it is.Let's start with Python.But again, my goal here is to\nlet you see what computation'sabout, why we need to do it,\nI'm going to remind you onelast time, our goal is to\nbe able to have a set ofprimitives that we combine\ninto complex expressions,which we can then abstract to\ntreat as primitives, and wewant to use that sequence of\ninstructions in this flow ofcontrol computing, in order\nto deduce new information.That imperative knowledge that\nwe talked about right there.So I'm going to start today,\nwe have about five or tenminutes left, I think, in\norder-- sorry, five minutesleft-- in order to do this\nwith some beginnings ofPython, and we're going to pick\nthis up obviously, nexttime, so; simple parts\nof Python.In order to create any kinds of\nexpressions, we're going toneed values.Primitive data elements.And in Python, we have two to\nstart with; we have numbers,and we have strings.Numbers is what you'd expect.There's a number.There's another number.All right?Strings are captured in Python\nwith an open quote and somesequence of characters followed\nby a closed quote.Associated with every data\ntype in Python is a type,which identifies the kind\nof thing it is.Some of these are obvious.Strings are just a type\non their own.But for numbers, for example,\nwe can havea variety of types.So this is something that\nwe would call aninteger, or an INT.And this is something\nwe would call afloating point, or a float.Or if you want to think of\nit as a real number.And there's some others\nthat we can see.", "start": 2640.0, "heat": 0.1}, {"text": "We're going to build up this\ntaxonomy if you like, but thereason it's relevant is,\nassociated with each one ofthose types is a set of\noperators that expect certaintypes of input in order\nto do their job.And given those types of input,\nwill get back output.All right.In order to deal with this, let\nme show you an example,and I hope that comes\nup, great.What I have here is a Python\nshell, and I'm going to justshow you some simple examples\nof how we start buildingexpressions.And this'll lead into what\nyou're going to see next timeas well as what you're\ngoing to do tomorrow.So.Starting with the shell, I\ncan type in expressions.Actually, let me back up\nand do this in video.I can type in a number, I get\nback a number, I can type in astring, I get back the string.Strings, by the way, can have\nspaces in them, they can haveother characters, it's simply\na sequence of things, andnotice, by the way, that the\nstring five-- sorry, thestring's digit five digit\ntwo is differentthan the number 52.The quotes are around them\nto make that distinction.We're going to see\nwhy in a second.What I'm doing, by the way, here\nis I'm simply typing inexpressions to that\ninterpreter.It's using its set of rules to\ndeduce the value and printthem back out.Things I might like to do in\nhere is, I might like to docombinations of things\nwith these.So we have associated with\nsimple things, a set ofoperations.So for numbers, we have the\nthings you'd expect, thearithmetics.And let me show you some\nexamples of that.And actually, I'm going to do\none other distinction here.What I typed in, things like--\nwell, let me start this way--there's an expression.And in Python the expression\nis, operand, operator,operand, when we're doing simple\nexpressions like this,and if I give it to the\ninterpreter, it gives me backexactly what you'd expect,\nwhich is that value.OK?The distinction I'm going to\nmake is, that's an expression.The interpreter is going\nto get a value for it.", "start": 2760.0, "heat": 0.1}, {"text": "When we start building\nup code, we'regoing to use commands.Or statements.Which are actually things that\ntake in a value and ask thecomputer to do something\nwith it.So I can similarly do this,\nwhich is going to look strangebecause it's going to give me\nthe same value back out, butit actually did a slightly\ndifferent thing.And notice, by the way, when I\ntyped it how print showed upin a different color?That's the Python saying, that\nis a command, that is aspecific command to get the\nvalue of the expression andprint it back out.When we start writing code,\nyou're going to see thatdifference, but for now, don't\nworry about it, I just want toplant that idea.OK.Once we've got that, we\ncan certainly, though,do things like this.Notice the quotes around it.And it treats it as a string,\nit's simply getting me backthe value of that string,\n52 times 7, rather thanthe value of it.Now, once we've got that, we\ncan start doing things.And I'm going to use print\nhere-- if I could type, inorder to just to get into that,\nI can't type, here wego-- in order to get\ninto the habit.I can print out a string.I can print out--Ah!--Here's a first example\nof something thatcaught one of my things.This is a static\nsemantic error.So what went on here?I gave it an expression that\nhad an operand in there.It expected arithmetic types.But I gave two strings.And so it's complaining at me,\nsaying, you can't do this.I don't know how to take\ntwo strings andmultiply them together.Unfortunately-- now John you may\ndisagree with me on thisone-- unfortunately in Python\nyou can, however,do things like this.What do you figure that's\ngoing to do?Look legal?The string three times\nthe number three?Well it happens to give me\nthree threes in a row.I hate this.I'm sorry, John, I hate this.Because this is overloading that\nmultiplication operatorwith two different tasks.It's saying, if you give\nme two numbers, I'lldo the right thing.If you give me a number and\na string, I'm going to", "start": 2880.0, "heat": 0.1}, {"text": "concatenate them together,\nit's really differentoperations, but nonetheless,\nit's what it's going to do.STUDENT: [UNINTELLIGIBLE]PROFESSOR ERIC GRIMSON:\nThere you go.You know, there will be a\nrebuttal phase a little lateron, just like with the political\ndebates, and helikes it as a feature, I don't\nlike it, you can tell he's nota Lisp programmer and I am.All right.I want to do just a couple\nmore quick examples.Here's another one.Ah-ha!Give you an example\nof a syntax error.Because 52A doesn't\nmake sense.And you might say, wait a\nminute, isn't that a string,and the answer's no, I didn't\nsay it's a string by puttingquotes around it.And notice how the machine\nresponds differently to it.In this case it says, this is\na syntax error, and it'sactually highlighting where\nit came from so I can goback and fix it.All right.Let's do a couple of other\nsimple examples.All right?I can do multiplication.I've already seen that.I can do addition.Three plus five.I can take something to a power,\ndouble star, just takethree to the fifth power.I can do division, right?Whoa.Right?Three divided by five is zero?Maybe in Bush econom-- no, I'm\nnot going to do any politicalcomments today, I will not\nsay that, all right?What happened?Well, this is one of\nthe places whereyou have to be careful.It's doing integer division.So, three divided by five\nis zero, with aremainder of three.So this is the correct answer.If I wanted to get full, real\ndivision, I should make one ofthem a float.And yes, you can look at that\nand say, well is that right?Well, up to some level of\naccuracy, yeah, that's .6 iswhat I'd like to get out.All right.I can do other things.In a particular, I have similar\noperations on strings.OK, I can certainly print out\nstrings, but I can actuallyadd strings together, and just\nas you saw, I can multiplystrings, you can kind of guess\nwhat this is going to do.It is going to merge them\ntogether into one thing.I want--I know I'm running you slightly\nover, I want to do", "start": 3000.0, "heat": 0.1}, {"text": "one last example, it's, I also\nwant to be able to do, havevariables to store things.And to do that, in this it says,\nif I have a value, Iwant to keep it around,\nto do that, I cando things like this.What does that statement do?It says, create a name for a\nvariable-- which I just didthere, in fact, let me type it\nin-- mystring, with an equalsign, which is saying, assign or\nbind to that name the valueof the following expression.As a consequence, I\ncan now refer tothat just by its name.If I get the value of mystring,\nthere it is, or if Isay, take mystring and add to it\nthe string, mylastname, andprint it back out.So this is the first\nstart of this.What have we done?We've got values, numbers\nand strings.We have operations to\nassociate with them.I just threw a couple up here.You're going to get a chance\nto explore them, and you'llsee not only are there the\nstandard numerics for strings,there are things like length\nor plus or other things youcan do with them.And once I have values, I want\nto get a hold of them so I cangive them names.And that's what I just did\nwhen I bound that.I said, use the name mystring\nto be bound to or have thevalue of Eric, so I can refer\nto it anywhere else that Iwant to use it.And I apologize for taking you\nover, we'll come back to thisnext time, please go to the\nwebsite to sign up forrecitation for tomorrow.", "start": 3120.0, "heat": 0.1}]