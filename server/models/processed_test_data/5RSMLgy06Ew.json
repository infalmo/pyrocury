[{"text": "The following content is\nprovided under a CreativeCommons license.Your support will help\nMIT OpenCourseWarecontinue to offer high quality\neducational resources for free.To make a donation or\nview additional materialsfrom hundreds of MIT courses,\nvisit MIT OpenCourseWareat ocw.mit.edu.PROFESSOR: OK, on Tuesday\nwe talked about sex,so today we're going\nto talk about marriage.Now, in terms of\ngraph theory, marriageis expressed as a\nmatching problem,and today we're going to talk\nabout a matching algorithm thatis used in all sorts\nof applications.It's used by online\ndating agenciesto match compatible\npeople together.It's used for\nassignment problems,for example, matching interns\nto hospitals on match day.It's used for resource\nallocation problems,for example, load balancing\ntraffic on the internet.And we'll talk about\nthe applicationsat the end of class.In its simplest form\nof a matching problem,you have a graph where the\nedges represent compatibility.Two nodes can be paired\ntogether, or married,and the goal is to\ncreate the maximum numberof compatible pairs.So let's define a\nmatching, given a graph, G,with nodes, V, and\nedges, E. In matching,you can think of it as\na collection of edges,or a subgraph of G where\nevery node has degree 1.So everybody can be\nmarried just to one person.", "start": 0.0, "heat": 0.1}, {"text": "So let's draw an example,\nmaybe not put that edge in.And let's label these nodes x1,\nx2, x3, x4, x5, x6, x7, and x8.Now x1, x6 and x2, x5 is a\nmatching, so x1, x6 and x2,x5 is a matching with two edges,\nso we say it has size two.All right, so I can pair these\nguys up and pair these guys up.Is there any bigger\nmatching in this graph?So I found one with\ntwo marriages, hereand here, two edges.Yeah?AUDIENCE: x1, x7.PROFESSOR: x1, x7.AUDIENCE: x2, x6.PROFESSOR: x2, x6.AUDIENCE: [INAUDIBLE].PROFESSOR: Good.All right, that's a\nmatching of size three.So I got three couples together.Good.Can I make a bigger matching,\none with size four--four marriages here?", "start": 120.0, "heat": 0.33}, {"text": "No.Why not?Can anybody give me a\nreason why it can't be done?Yeah?AUDIENCE: x8 and x7 would have\nto be matched with someone.PROFESSOR: Yeah, so if-- Yeah?AUDIENCE: They could\nonly be paired with x1,but x1 can't be\npaired with both.PROFESSOR: Good.If I were to have a\nmatching with four edges,well, there's only\neight nodes, so I'dhave to have all eight nodes\ninvolved in the matching.And that means x7 and x8 would\nhave to be in the matching,but they could only\nbe paired with x1,and so it's not\npossible to do that.All right, so there\nis no matchingof size four in this graph.Three is the best I can do.Now, when you get every\nnode in a matching,then it's called a\nperfect matching.And so in this case, it doesn't\nexist, but sometimes it does.So a matching is\nperfect if it hassize half the number of nodes.In other words, if the\nnumber of edges is v over 2,then every node is\nin the matching.All right, so that one doesn't\nhave a perfect matching.What about this graph?So I got b1, b2, b3,\nb4, g1, g2, g3, g4,and I'll put in the\ncompatibility edges here.", "start": 240.0, "heat": 0.419}, {"text": "OK, Does that graph\nhave a perfect matching?Can you pair up\nevery boy with a girlhere so that everybody is\ncompatible with their mate,and you have just one spouse?Can you do that?AUDIENCE: Yes.PROFESSOR: Yeah?All right, who do\nI start pairing up?AUDIENCE: 1, 1.AUDIENCE: 1, 1.AUDIENCE: b2, g3.PROFESSOR: b2, g3.AUDIENCE: b3, g2.PROFESSOR: b3, g2AUDIENCE: b4, g4.PROFESSOR: There we go.All right, so there is a\nperfect matching in this graph.Very good.Now, in some cases,\nsome pairingsare more desirable than\nothers, and this canbe represented with a weight.And so you might have\na weighted graph whereevery edge has a weight on it.For example, we might\nweight b1, g2 with 5,and b1, g1 gets a 10.And usually when you\nsee weighted graphsin the matching\ncontext, a lower weightmeans it's more desirable, so\nthat b1 and g2 would get alongbetter than b1 and g1.And then the goal is to find a\nmatching with minimum weight.Now, the weight of a\nmatching, call it M,is the sum of the weights\non the edges of M. Now,", "start": 360.0, "heat": 0.754}, {"text": "usually when you're looking\nat weighted matchings,you require yourself to\nhave a perfect matching sothat everybody gets paired up.And often in that case, you'll\nsee all the edges present,some of them with very big\nweights, maybe even infinityif they just can't\nbe put together.Because otherwise you just say,\ndon't match anybody together,and you have weight zero.So for when you look at\nminimum weight matchings,you're looking for the perfect\nmatching with minimum weight.So we say a min-weight\nmatching for a graph, G,is a perfect matching for\nG with the minimum weight,overall perfect matchings.Let's try an example.Say I've got this graph,\nand call this node Brad,here's Billy Bob, here's\nJennifer, and then Angelina.And the weights are as\nfollows-- I put a 10 here,a 10 down here, a 5\nhere, because Brad reallylikes Angelina and vice versa,\nand a 16 between Jenniferand Billy Bob.What is the weight of the min\nweight matching in that graph?20.And who gets paired\nwith who there?Who does Brad get\nhooked up with?AUDIENCE: Jan.", "start": 480.0, "heat": 0.783}, {"text": "PROFESSOR: Jan, and that\nleaves Billy Bob with Angelina,and the weight is 20.So even though Brad really likes\nAngelina, if I go that route,my weight is 21,\nwhich is not as good.So the min-weight matching\nwould be this one.OK.Now, it turns out that\nfinding the maximum matching--the maximum number of edges\nyou can put together--or finding the minimum\nweight perfect matching,those are both solvable,\ntractable problems.You don't get a million\ndollar prize for solving that.The algorithm is run in\nquadratic to cubic time,so not terrible, but\nthey're not NP-complete,so people know how to do it.Now, they are\npretty complicated,so we're not going to\ncover them in 6042.What we're going to do is look\nat a slightly different versionof the problem that\nactually turns outto be more useful in\npractice, because there'sa very nice algorithm for it.Now, in the version of\nthe problem that we'regoing to look at, everybody\nhas preferences-- a preferencelist.It's not weighted, but\nit's a priority orderof who they want to get\nmated to, or matched up with.So it would look\nnot quite like that,but it would look like this.So Brad, Billy Bob, Jennifer,\nand Angelina-- same players,but what we do is we know that\nBrad really likes Angelina,and Angelina really likes Brad,\nso they are first choices,at least was.Number two for Brad is Jennifer,\nbut Jennifer really likes Bradfirst, and Billy Bob second.Billy Bob likes Angelina\nfirst, then Jennifer.", "start": 600.0, "heat": 0.447}, {"text": "Angelina thinks Billy\nBob is number two.So it's not\nnecessarily symmetric.Jennifer has Brad\nas the first choice.Brad has Angelina\nas the first choice.All right?So it's an asymmetric situation.Now, what would happen if we set\nup our marriages so that Bradis married to Jen, and Billy\nBob is married to Angelina?What might happen if we\nmade those as our pairings,and we put them on a desert\nisland, all four of them?What's likely to happen there?AUDIENCE: Brad and Angelina are\ngoing to cheat on each other.PROFESSOR: Yeah, we're\ngoing to have a problem.Because Brad and Angelina have\nthe hots for each other here,and they like each other\nbetter than their spouse.So before you know\nit, they're goingto be doing their 6042 homework\ntogether late at night.All right?Now, when this happens, we have\nwhat's called a rogue couple.Given a matching, x and\ny, a boy and a girl,say, form a rogue couple\nif they prefer each otherover their mates\nin M. All right.So here, if we married\nBrad to Jennifer,and Billy Bob to Angelina,\nBrad and Angelinaform a rogue\ncouple, because they", "start": 720.0, "heat": 0.261}, {"text": "like each other better than\nwho they were hooked up with.And that's sort of a bad thing.It creates instability\nif you wereto make the matchings that way.In fact, we say that\na matching is stableif there aren't\nany rogue couples.And now, one thing to make\nclear is that your preferencescan't change over time.So it's not a situation where\nyou get bored with your spouse,and you change\nyour mind, and thenyou go off and create\na rogue couple.You're fixed in your\npreferences over all time,no playing the field, none\nof that stuff here, OK?So it's fixed once and for\nall, and your goal, of course,is to create or find a perfect\nmatching that's stable.That's the goal.So get everybody married\nup and make it stable.All right, is it\ndoable in that example?If I put those four\npeople on a desert island,could I make a stable matching?Yeah, who would I match Brad to?AUDIENCE: Angelina.PROFESSOR: All right.Good, and then Billy\nBob gets Jennifer.Now, I'm not saying that\nyou make everybody happy,because Billy Bob and Jennifer\nare probably not happy there.They each got their\nnumber two choice.But it's stable, because\nBrad and Angelinaaren't going anywhere.They are going to stay\ntogether because they", "start": 840.0, "heat": 0.32}, {"text": "like each other best, and so\nthere's no chance that Jenniferis going to-- that Angelina\nis going to sneak off, sorry,with Billy Bob, or\nthat Brad's goingto sneak off with Jennifer.All right?So it's stable.Not everybody's happy, but\nit's a stable set of marriages.OK.Any questions about what\nwe're trying to do here now?Yeah?AUDIENCE: [INAUDIBLE] the edges?PROFESSOR: That's\na great question.You'll see it\nreferred to both ways.Technically, it's a subgraph,\nso it has nodes and edges,but you'll see me, and you'll\nsee everybody say, oh, it'sa bunch of edges that\ndon't share any nodes,and you'll see them\nrefer to it as the edges.But really, underlying that,\nit's a subgraph, technically.Any other questions\nabout what we'retrying to do here to find\nstable, perfect matching?All right.Well, in this example, there\nwas a stable, perfect matching.But what about in general?If I have a lot more\npeople, and theyhave arbitrary preferences,\nhow many peoplethink you can always find\na stable perfect matching?There's one optimistic person.How many people think there's\nsome cases where you're justnot going to be able to do it?Wow.OK, it's a pessimistic view.Well, in some sense\nyou're both right.If you allow boys to prefer\nboys and girls to prefer girls,then it is not possible, and\nI'll give you an example.You can find examples where\nthere's always a rogue couple,but if you require boys to only\nget matched to girls and viceversa, then it is possible to\nalways find stable marriages,stable matchings.And we're going to talk\nabout an algorithm for that.But before I show\nyou the algorithm,let me show you the bad case\nwhen boys can prefer boys,or what's sort of\na unisex scenario.", "start": 960.0, "heat": 0.4}, {"text": "So here's a bad example\nwith four people,and the idea is to\ncreate a love triangle.So we have Alex, who prefers\nBobby Joe, Bobby Joe prefersRobin, and Robin prefers Alex.And their second choices\ngo in the opposite orderthere, all right?So Alex wants to\nbe with Bobby Joe.Bobby Joe wants be with Robin.Robin wants to be with Alex.And then there's Mergatoid--[LAUGHTER]--and nobody likes Mergatoid.So that's choice three\nfor all of them here.And Mergatoid's\nchoices, preferencesdon't really matter\nin this case.[LAUGHTER]I hope nobody is named\nMergatoid in the class.I would get complaints here.All right, so I want\nto claim and provea theorem that says there\nis no stable matchingfor this group of preferences.So we'll state that\nas the theorem.There does not exist a stable\nmatching for this graph.The proof is by contradiction--\nassume there is one.All right, so assume there\nexists a stable matching.We're going to find\na rogue couple in it.So call the stable\nmatching M. Well,if there's a stable\nmatching, Mergatoid's gotto get married to somebody.", "start": 1080.0, "heat": 0.545}, {"text": "Mergatoid will be\nmatched with someone.All right.Now, here I'm going\nto do somethingthat you can do in\nyour proofs, but you'vegot to be careful\nwhen you do it.I'm going to say, without\nloss of generality,assume Mergatoid is\nmatched to Alex, all right?And I can do that.So this is the\nabbreviation, without lossof generality by symmetry.And really, I should explain\nwhat I mean here in the proof.Well, that love\ntriangle is symmetric.Each one has a preference\nfor the next personaround the triangle.In terms of graph isomorphism,\nwith the weights on that,every node looks the same.So I can use symmetry.So we're going to say,\nwithout loss of generality,we're going to assume\nMergatoid is matched to Alex.And I'm implying the argument\nis going to be the same.What I say next is\nthe same no matterwho Mergatoid is matched\nto, because it's symmetric.All right.If Mergatoid is\nmatched to Alex, do yousee a rogue couple up there?So you have Robin\nmatched to Bobby Joe.Mergatoid is matched to Alex.AUDIENCE: Alex to Bobby Joe?PROFESSOR: Alex\nand Bobby Joe, no.AUDIENCE: Between\nAlex and Robin.PROFESSOR: Alex and Robin, yeah.Alex and Bobby Joe aren't rogue,\nbecause Bobby Joe likes Robin.He likes the person he\nor she is married to.", "start": 1200.0, "heat": 0.421}, {"text": "All right, so they're not\ngoing to go off with Alex,but Alex and Robin\nare a rogue couple,because Robin likes Alex\nthe best, and Alex for surelikes Robin better\nthan Mergatoid.All right?So they both prefer each\nother to their mates,and so they form a rogue couple.All right, so Alex and\nRobin form a rogue couple,and that means that\nM was not stable.The matching was not stable.And that's a contradiction,\nbecause we assumed it was.So we have a contradiction,\nand the proof is done.Any questions about that?And I'm sort of implying\nhere that you could match,you could have had Mergatoid\nmatched to Bobby Joe,and then Bobby Joe and Alex\nwould have been a rogue couple,or Mergatoid matched to Robin,\nand then Robin and Bobby Joewould be a rogue couple by the\nwithout loss of generality.So it's OK to use that,\nbut you want to be carefulthat you're doing it OK.Questions?Yeah?AUDIENCE: So the without\nloss of generality onlyworks if it's, like,\nperfectly symmetric?PROFESSOR: Yeah.Basically, the argument\nyou're going to makeis just going to be the same\nargument done in all threecases, and to save yourself\nsome effort, you're saying,don't do the three cases,\ndo one, the other two lookthe same.So technically, you could add\ncase one, case two, case three,and they would've\nlooked symmetric.OK?All right.Now, this is not very\nsurprising, as you all voted.Almost all of you said it's\nhard to find stable matchings.You might not be\nable to do it always.And in fact, you can't\nin the unisex world.The surprising thing is, you can\nalways find a stable matching", "start": 1320.0, "heat": 0.488}, {"text": "in the world where boys\ncould only be pairedwith girls and vice versa.Now, this statement, this\nresult is pretty famous.The problem itself is known as\nthe stable marriage problem.So let me just define\nit here, and then we'lltalk about an algorithm\nto find the matching.So we have N boys and N girls.And it's important we have\nthe same number of each.Now, actually, tomorrow,\nin recitation, you'regoing to look at the\nscenario where there's moregirls than boys, or vice versa.And you'll be using\na similar algorithm,but it'll be a\ndifferent context,and that's the\ncontext that comes upin matching interns to\nhospitals, and stuff like that.But for our version it's an\nequal number of boys and girls.Each boy has his own\nranked preferencelist of all the girls.So every boy sort of\nhas his dance cardof the girls that\nhe likes in order.All right?The orders can be different\nfor different boys.And each girl has\nthe same thing.She has her own list, ranked\n1 to n of all the boys.The lists are complete,\nand there's no ties,so all the ties have\nto be broken here.", "start": 1440.0, "heat": 0.439}, {"text": "And the goal is to\nfind a perfect matchingwithout rogue couples.OK, so let's try an example.Before we do the algorithm,\nlet me just do a bigger examplewith five boys and\nfive girls, and we'llget some feel for, this is\nnot completely obvious howto find it.OK, so let's put\nthe boys over here.And here's boy 1, and\nhis preference listis going to be-- the girls\nwill be C, B, E, A, D, and boy2 is going to have\nthe preference listA, B, E, C, D, and boy 3 is\ngoing to have D, C, B, A, E.Boy 4 is going to be A,\nC, D, B, E, and boy 5,I have to write his across\nlike this, A, B, D, E, C.", "start": 1560.0, "heat": 0.252}, {"text": "And the girls also have their\nlists, so let's put those up.So girl A likes the boys\nin order 3, 5, 2, 1, 4.Girl B likes them in\norder 5, 2, 1, 4, 3.Girl C has the\norder 4, 3, 5, 1, 2.Girl D, 1, 2, 3, 4, 5,\nand then the last girl, E,has 2, 3, 4, 1, 5.All right, so say that's\nour matching problem,and those are the\npreference lists.Any ideas for how we might\ntry to make an algorithmto do this?Any thoughts about\nwhat you'd do?What are some approaches\nwe could take?Yeah?AUDIENCE: Use the\nmating algorithm.PROFESSOR: Use the\ngreedy algorithm?AUDIENCE: The mating algorithm.PROFESSOR: Oh, the\nmating algorithm.Well, yeah, the mating algorithm\nis going to do very well,but I haven't told\nyou what that is,and it's a little complicated.So I sort of want to explore\nthe things you might knowfrom what we've done so far.What approaches have we seen\nso far for solving problems?Yeah?AUDIENCE: The greedy algorithm?PROFESSOR: The greedy\nalgorithm-- yep.And let's try that.So let's choose the\nfirst boy, and we'll justgo down and give each boy\nthe best choice availableand see what happens.First thing to try usually\nis the greedy algorithm,and about half the time\nit'll work in life,and half the time it won't.", "start": 1680.0, "heat": 0.175}, {"text": "So let's try greedy.So boy 1 is going to get his\nfirst choice, girl C. Whodoes boy 2 get?A. Who does boy 3 get?D. Huh, this is going well.Who does boy 4 get?Boy 4, oh yeah, boy 4 has got\nto go all the way down to B,because A, C, and D\ngot taken, so boy 4gets B. And boy 5-- who's left?E, fourth choice again.All right, well, maybe\nthat's a stable matching.All right, well let's see.To see if it's stable,\nwe've got to seeare there any rogue couples.Well, is there any rogue\ncouple involving boy 1?No, boy 1 got his first choice.You're not going anywhere.Boy 2?No-- first choice,\nsame with boy 3.These boys are quite happy.They're not doing anything.Boy 4 may not be\nso happy though,because boy 4 got paired\nwith B, so there'spossible rogue couples.Let's see, is 4,\nA a rogue couple?No.A hates boy 4, all right?No chance she's\nrunning off with boy 4.AUDIENCE: 4, C?PROFESSOR: 4, C?All right, let's see that.Where's C-- whoa, yeah.C has the hots for\nboy 4, so she likeshim better than\nwhoever her mate was,and boy 4 likes C better\nthan who he got matched with,boy B. That is now\na rogue couple,so the greedy\nalgorithm did not work.That's too bad.Well, it would be short\nlecture, I guess, if it worked.[LAUGHTER]", "start": 1800.0, "heat": 0.337}, {"text": "Well, what would you do next,\nsort of, if you were-- I mean,you could try to match 4 with\nC, and then try to patch thingsup, and you could\nstart doing that,but you might create\nother rogue couples.In fact, I don't know\nan approach-- yeah?AUDIENCE: You could\nlet it evolve and seeif it gets it more stable.PROFESSOR: Say it again.AUDIENCE: You could\nlet it evolve,let all the rogue\ncouples evolve and seeif it ends up any more stable.PROFESSOR: Yes, you could\nstart swapping aroundto get rid of rogue couples.In doing that, you might\ncreate other rogue couples.In fact, I don't know\nof an algorithm thatworks like this, that\nworks, that's known to work,where you start\npatching things up,because as you're\npatching things up,you might make other things\nmuch worse by doing that.So I don't know of\nan approach that way.What's another approach?Yeah?AUDIENCE: [INAUDIBLE]\npertaining to what orderthey have each other.PROFESSOR: And then do?AUDIENCE: And then do the\nhighest ordered [INAUDIBLE]PROFESSOR: Min-weight\nmatching kind of thing?AUDIENCE: Maybe.PROFESSOR: Maybe?I don't of an approach\nlike that that works.Also, min-weight\nmatching, that algorithmis going to be more\ncomplicated than the one I'mgoing to show you, in the end.It takes more time to run.And I don't even\nknow if it works.Like, I don't know if you\ncan take these numbersand make weights on the edges\nget a min-weight matching.AUDIENCE: Could you do like\na merge sort [INAUDIBLE]PROFESSOR: Oh, a merge sort,\nso you take the minimum weightedge, put that in, and\nrecurse on that kind of thing.I don't know.It's possible.In fact, you know what,\na recursive approachis a good idea.I don't know of a nice\nrecursive algorithm for this.It's true that if you\nfound a boy and a girl wholiked each other\nbest, you could thenmatch them safely and recurse,\nbecause you know they're notgoing to be in a rogue\ncouple, because theylike each other best.Then you could recurse.But that might not exist here.You might not have\na boy and girlthat like each other best, in\nwhich case it's hard to know.I don't know now if you pick the\nminimum weight in some sense,", "start": 1920.0, "heat": 0.229}, {"text": "like add the preference list or\nsomething to make a min-weightand recurse on\nthat, if that works.I don't know of an\napproach like that.But those are the kinds\nof things you try.And as far as I know,\nall the simple thingsfail for this problem.But there is something that's\na little more involved,but does work, and that's\nthe mating algorithm.And does everybody\nhave the handout?There, it's back up there.I got some copies down here if\nyou need it, but pull that out.So we're going to\nread this and talkabout what the\nalgorithm is, and thenprove that it performs well.So the initial condition is\nyou have each of the N boyshas an ordered list of the\nN girls and vice versa,and the ritual, we're going to\nview this is a mating ritual,and really, the\nprogram is doing it.The code is doing it.But think of it as real life.It takes place\nover several days.Now, the day is broken up into\nthree parts-- the morning,the afternoon, and the evening.In the morning, each girl\ncomes out to her balconyand stands on the balcony.Each boy goes to the balcony\nof his favorite girl whois still on his list that\nhasn't been crossed off.Now, initially, every\ngirl is on his list.So he goes to his favorite\ngirl, goes under her balcony,and serenades her.Now, if, over the\ncourse of the algorithm,the boy has nobody left on\nhis list, he's out of luck.He just stays home\nand does homework.All right?There's no serenade\nanymore for him.Now, in the afternoon,\nthe girls whohave at least one suitor--\na boy down there serenadingher-- looks at all the\nsuitors, picks her favorite,and to the favorite she\nsays, maybe I'll marry you.Come back tomorrow.Girls don't want to make it\ntoo easy here for the boys.Now, to all the other boys who\nare lower priority she says,I will never marry you.Go away.", "start": 2040.0, "heat": 0.209}, {"text": "So she writes them off for good.Now, that night, any boy who\nheard a no-- like the girlsaid no, I'll never marry you--\ncrosses that girl off his list.Because, you know, it's\nthe only practical thingto do at that point.Now, if the boy heard\nthe maybe I'll marry you,well, he's going to\ngo back tomorrow,because that's still\nhis favorite girl that'snot crossed off.So he goes back and\nserenades her againthe next day in the hopes that\neventually, she'll say yes.Now, we keep doing\nthis every day, OK?And if we ever encounter a\nday where every girl has,at most, one suitor, the\nalgorithm stops, and thenevery girl who has a suitor\nsays, yes, I will marry you.Now, if a girl\ndoesn't have a suitor,there's no one to marry her.We're going to prove\nthat doesn't happen, OK?But determination\ncondition is, you no longerhave a situation with two or\nmore boys under one balcony.OK?All right, so let's run that\nalgorithm on this example,just so we make sure\nwe understand it,because I'm going to try\nto prove theorems about it.So here are the serenades\nthat are going on,and here's the\ngirls, and the days.It's going to work over\nfour days in this case.And then we're also going to\nkeep track of the boy's lists--who's gotten crossed off.All right, so these will be\nthe cross outs down here.Actually, maybe I'll\nfit it up here if I can.", "start": 2160.0, "heat": 0.144}, {"text": "Girls, let's see, A, B-- no, I'm\ngoing to have to space it out.And the boys have\ntheir lists here,and we have boys 1, 2, 3, 4, 5.And here I'm going to\nrecord the cross outs.All right, so let's\nlook at day one.Who is under girl A's\nbalcony on day one?AUDIENCE: 2, 4, and 5?PROFESSOR: 2, 4, and 5--\neach like girl A the best,so she's got a lot of activity.These three boys show up.Anybody under girl B's balcony?No, nope, no, nothing there.C, does C have anybody?Boy 1, yeah.D?3, and E, I don't think\nthere's any action, right?Nope.All right, so that's\nthe status on day one.So the action is all up here.All right, so what\ndoes girl A do?Who does she tell\nto hang around?AUDIENCE: Number 5.PROFESSOR: Number 5, yes.She's got 5, 4, and 2,\nand she likes 5 the best.She tells 5 to come back,\nand she says to these guys,we're not going to marry him.That means that boys 2 and 4\ncross girl A off their list.So they say A is no\nlonger possible for them.All right, now we go to\nday two, and 5 goes backto girl A, and, of course,\nboys 1 and 3 stay there.Where does boy 2 go on day two?B.All right, so boy 2\nshows up here on day two,", "start": 2280.0, "heat": 0.201}, {"text": "and, let's see, boy\n5 is already there,and then we've got to get boy 4.Where does he go now?C. All right, boy\n4 shows up here.All right, so now the\naction is with girl C.And what does she do?AUDIENCE: [INAUDIBLE]PROFESSOR: Yeah, she keeps\n4, and she boots poor 1.You know, led him\nalong for a day,and then he gets the boot\nbecause boy 4 showed up, right?Because girl C likes 4\nbetter than 1, so badluck for 1 there.So now one goes home that\nnight and crosses off girl C.OK.All right, and where\ndoes 1 go on day three?All right, so he goes to-- he\ncrossed off C-- he goes to B.All right, so this is left over.We have 5, 2, 4, 3-- boy\n1 now goes to B, right?OK.And then what does girl B do?Who does she keep around?Keeps 2, boots poor 1.All right, so 1 says, all right,\nI'm crossing B off my list,got the message.And now where does\nboy 1 go on day four?AUDIENCE: Girl E?PROFESSOR: E-- third choice.OK.So 1 shows up down here, and\nthese guys keep returning.Wow, so on day four\nthere's no more fighting.Every girl has at most one.The termination\ncondition is invoked,and these are the\nmarriages that take place.The girls say yes.All right, now is everybody--[LAUGHTER]--does everybody understand\nthe algorithm we used?", "start": 2400.0, "heat": 0.251}, {"text": "Any questions on the algorithm?Yeah?AUDIENCE: [INAUDIBLE] the\nfirst case [INAUDIBLE] oris that just in\ncase the [INAUDIBLE]PROFESSOR: That's in case\nthe algorithm doesn't work.Because we haven't\nproved it works yet,and I gotta have\na possibility for,a boy crosses every\ngirl off his list,he gets rejected everywhere.That is a possibility,\nso I've gotto say what would happen\nin that possibility.Now, we will prove\nin a few minutesthat condition never arises, OK?But I'm giving you\nwhat might happen,in which so it never\ndoes, so no boy ends uphaving to stay home\nand do homework here.All right, so that's\nthe algorithm.Now let's see if we can see\nif there's any rogue couples.All right, so, for example,\nlet's look at boy 1.Boy 1 got paired to his\nthird choice, E, so 1,C might be a rogue couple.Is that possible?No, because C got 4 here,\nwhich is her first choice.She's not going with boy 1.That's not working.What about 1, B?Could that be rogue?No, B got 2, and B likes 2\nbetter than 1, so 1, C and 1,B are not rogue.And 1 got E, so there's no\nother possibility for boy 1,so boy 1 is not\nin a rogue couple.What about boy 2?2 got B, and that's\n2's second choice.What about 2, A?Let's see, A got 5, and\nA likes 5 better than 2,so that's not rogue.Boy 2 is not rogue.All right, boy 3-- boy 3\ngot his first choice, right?", "start": 2520.0, "heat": 0.167}, {"text": "3 got D, so 3 is\nnot going anywhere.Boy 4 got-- who did boy 4 get--\ngot C. 4 got his second choice.What about 4, A?A hates 4.A is not gonna get caught dead\nwith 4, so that's not rogue.So 4 is OK.4 is not in a rogue couple.And finally, boy 5--\nboy 5 is paired with A,and that is boy\n5's first choice,so he's not wandering off here.All right?So in fact, we've\njust argued that thisis a stable set of marriages,\na stable matching in this case.Any questions now about\nwhat we're trying to do?OK, because we're going\nto try to show nowit always produces\na stable matching.And to do that, we need\nto do a few things.All right, so what\nare the thingswe need to show to\nprove everythingis going to be good here?What are some facts we to prove?Yeah?AUDIENCE: Don't we need to show\nthat the algorithm, it doescome to an end?PROFESSOR: Yes.[LAUGHTER]The algorithm\nterminates, so we needto show that the marriage\nalgorithm, TMA, terminates.Otherwise, the boys\nare serenading forever,and that's not too good.All right, what else\ndo we want to show?Yeah?AUDIENCE: If it does terminate,\nthen one is left empty.PROFESSOR: Then?AUDIENCE: Everyone gets someone.PROFESSOR: Everyone\ngets married.Yep.Stability is easy if\nnobody gets married.", "start": 2640.0, "heat": 0.257}, {"text": "All right, what else do\nwe want to show here?Yeah?AUDIENCE: There are\nno rogue couples.PROFESSOR: No rogue couples.All right, what else\nmight we like to show?These are the three main ones.There's a couple of other\nthings you might like.Yeah?AUDIENCE: It runs quickly.PROFESSOR: It runs quickly.Well, you can only\nserenade for so long.In fact, it does run\nquickly, and that'swhy it's useful in practice.Anything else you might want\nto show about this algorithm?AUDIENCE: How many\npeople you crossed out?PROFESSOR: How many people\nyou crossed out-- yeah,you could, and that'll tie\ninto how long it takes.Yeah.Anything else?Yeah?AUDIENCE: The average\nlikeness between the couples.PROFESSOR: The\naverage likeness, oh.So yeah, we haven't\nhad a notion hereof how happy people\nare at the end,because we don't have a\nweighting on the edges,but you might want\nto think about that.That's actually a good point.Yeah?AUDIENCE: If they\n[INAUDIBLE] if itmatters who serenades\n[INAUDIBLE] girls or boysto get her.PROFESSOR: That's a great point.Is this algorithm good for\ngirls, or good for boys?Yeah, that's a good\npoint-- fairness.All right, so we'll take\na look at fairness also.Is it better to be a serenader,\nor be on the balcony makingyour choices?OK, so this is what\nwe've got to do.So let's start by\nshowing TMA terminates,and that it terminates\npretty quickly.Now, in fact, I'm going to\nprove a fairly crude boundon the time, but it\nactually does fairly well.", "start": 2760.0, "heat": 0.301}, {"text": "So our first theorem\nis going to bethat TMA terminates in, at\nmost, N squared plus 1 days.N is the number\nof boys and girls.The proof is going to\nbe by contradiction.This is probably\nthe only day wherewe'll do a bunch of proofs and\nnone of them use induction.They're pretty much\nall by contradiction.Suppose TMA does not terminate\nin N squared plus 1 days,because we're going to show\nthat leads to a contradiction.We need to show that\nsome kind of progressis made each day to\nshow that it terminates.Yeah?AUDIENCE: [INAUDIBLE] the\nnumber of causes that have[INAUDIBLE], so if it\nhas not terminated,then at least one girl is seeing\na group of at least one guy--PROFESSOR: Yes.AUDIENCE: --so the number\nof crosses cannot be defined[INAUDIBLE]PROFESSOR: Very good.OK, let's state that\nas a claim, and you'vegiven the proof of the\nclaim, which is great.If we don't terminate,\non a day, thatmust be because a girl had two\nboys there, or more, thereforeshe rejected some, at least one.And that night, the rejected\nboy crosses a girl off his list.So if we don't terminate,\nthen at least one boycrosses at least one\ngirl off his list.", "start": 2880.0, "heat": 0.276}, {"text": "And so we're going to measure\nprogress by the cross outs.So every day we don't\nterminate, a boycrossed a girl off his list,\nso if we didn't terminateat N squared plus\n1 days, we musthave crossed off N squared plus\n1 girls across all the lists.Well, is that possible?To have done N squared\nplus 1 cross outs?What do you think?How many names are on each list?AUDIENCE: N.PROFESSOR: N, and how\nmany lists are there?AUDIENCE: N.PROFESSOR: N, so there's N\nlists with N names impliesthere's, at most, N\nsquared cross outs ever.But we just said we had N\nsquared plus 1 cross outs.But we have also N\nsquared plus 1 cross outs,and that's a contradiction.All right?So we're done.It has to terminate within\nN squared plus 1 days.Any questions?This is a very common proof\ntechnique in computer science.You're analyzing some\nsystem, and every stepor every day or\nevery time period,you want to argue\nprogress got made,and then after you've\nmade enough progress youhave to be done, and therefore,\nthe algorithm is completed.All right, so we know\nthat TMA terminates.Now, we've still got\nto get everyone marriedand have them all be\nhappy, or at least stable.Now, to do this, we're\ngoing to use an invariant.Yeah?", "start": 3000.0, "heat": 0.29}, {"text": "AUDIENCE: If a girl\nhas some guy in frontof [INAUDIBLE] on\nsomething, then shewill always have [INAUDIBLE]PROFESSOR: That is true.Something even stronger is true.AUDIENCE: All the [INAUDIBLE]PROFESSOR: Have a--PROFESSOR: If she has a\npreference for someone who[INAUDIBLE] only better guys.PROFESSOR: Yeah, that's\na great invariant.As the girl is sitting\nthere on her balcony,things only get better,\nbecause she alwayskeeps the best one\naround that's there.And when new ones\ncome in, they'vegot to be better than the\nlast one for her to keep them.So as she rejects boys, she\nonly does that because she'sgot better ones there, and\nwhoever she says maybe toalways comes back.So an invariant\nof this algorithmis that when a girl has\na suitor, going forward,she only has suitors she\nlikes at least as well.And if she ever rejects\na boy, then she'sgot somebody better\nthere forever.All right, so let's state that\nas an invariant and prove that.OK, so we're going to let\nP be our invariant here.P is the statement that if a\ngirl, G, ever rejected a boy,B, then the girl,\nG, has a suitor,or if the algorithm\nis terminated,a husband who she\nprefers to B. All right,", "start": 3120.0, "heat": 0.314}, {"text": "that's going to\nbe our invariant,and now we've got to\nprove it's an invariant.So we'll do that with a\nlemma called lemma one.P is an invariant for TMA.All right, let's prove that.Now, what's the\nfirst thing you'vegot to prove when you're proving\nsomething as an invariant?There's two things you've got\nto do to establish a variant.What's the first one?AUDIENCE: Base case?PROFESSOR: Base case.Show it holds true\nat the beginning.Proof is going to\nbe by induction,and so we've got to show that\nP holds true at the beginning.But what are we going\nto induct on here?What's the parameter\nwe're inducting on?AUDIENCE: Time?PROFESSOR: Time,\nthe number of days.Good.The base case is day\nzero, the beginning.All right.Well, is that statement\ntrue on day zero?Yeah, it's true for\nsort of a weird reason.Nobody's been\nrejected yet, so it'swhat's called vacuously true.Because no girl, G, has\nrejected any boy, so it's true.So no one is rejected yet.So it's vacuously true.All right, next we have\nthe induction step.", "start": 3240.0, "heat": 0.157}, {"text": "So we'll assume P holds\nat the end of day d,and we need to argue\nthat it holds nowat the end of day d plus 1.So say it's true up\nto now, up to day d.Why Is it true at the\nend of the next day?Well, there's two cases\nto look at here, dependingon when G rejected B. So if\nshe rejects B on this day, dayd plus 1, well, why would\nshe reject B on day d plus 1?There's only one scenario.Yeah?AUDIENCE: There's a better boy.PROFESSOR: There's a better boy.And so she says maybe to him,\nand he becomes her suitor.So, in fact, P is true.So then there was\nsomeone better,and that implies P is\ntrue on day d plus 1.Case two is very similar.It's a very simple proof.G rejected B before\nday d, before d plus 1.Well, now we use the fact that\nP was true at the end of dayd, which means P now implies\nthat G had at least as gooda suitor.", "start": 3360.0, "heat": 0.143}, {"text": "Actually, it's better,\nbecause it was rejected.A better suitor on day d,\nthat's what the hypothesis says,the invariant says.And now we just have to look\nat what happens on d plus 1.Well, either she has the\nsame suitor on d plus 1,or somebody better came along.And so we're going to be done.She has the same or better\nsuitor on day d plus 1,and that implies P is true\non d plus 1, and we're done.All right, so I went\nthrough this proof.It was sort of\nobvious, but this isthe careful way\nyou'd write it downto show that the\ninvariant holds.Any questions about\nthe invariant dilemma?All right, so things only\nget better for the girls.If she ever rejected somebody,\nshe's got somebody better.So now we can prove\nthe main result,that everyone is married.And again the proof will\nbe by contradiction.So we assume not\neveryone was married.", "start": 3480.0, "heat": 0.112}, {"text": "Assume, for the purpose\nof contradiction,that some boy, B, we'll\ncall him, is not married.Because if everyone is not\nmarried then some boy is not.If not everyone is married\nthen some boy is not married.So when it terminates,\nB is not married.Well, what do you know\nabout B if he was notmarried at the end?PROFESSOR: He was\nrejected by everyone.PROFESSOR: He was\nrejected by everyone,because if at the end,\nhe's still under a balcony,if he still had somebody\non his list, he'd be there.And he'd be getting married,\nbecause it's the end.So this means that\nif B is not married,he's rejected by everybody.Yeah?AUDIENCE: [INAUDIBLE] list?PROFESSOR: Oh, he's\non everybody's list.AUDIENCE: Yeah.PROFESSOR: Everybody\nhas everybodyof the opposite\nsex on their list,but he had to cross\neverybody off.That's true.Yeah?AUDIENCE: That would mean\nthat everyone had somebodybetter on the same day that\n[INAUDIBLE] telling him shedidn't want to be with him.PROFESSOR: That's true.That means that B\ncrossed every girl off.B is rejected by\nevery girl, whichmeans every girl\nhas somebody betterthan B, which is not\npossible, because that wouldmean every girl was married.And therefore, the equal number\nof boys and girls, that means Bwould have been married.Good.All right, let's\nwrite that down.This means that B was\nrejected by every girl.OK, that means that\nevery girl, by lemma 1,has a better suitor, and\nthat's where we use lemma 1.", "start": 3600.0, "heat": 0.167}, {"text": "And that means that\nevery girl is married,and that means that every\nboy is married, including B,and that's a\ncontradiction, because wesaid B wasn't married.OK?Everybody buy that proof?Any questions about that?Yeah, proof by contradiction\nis a pretty powerful technique.Once you assume something\nis not going to be true,it gives you a lot of power\nto find a contradiction.All right, so now we know\nthat the algorithm ends,and everybody gets married.All's we got to do is show\nthat there's no rogue couples,so let's do that.TMA produces a stable matching.Now, how do you suppose\nwe're going to prove this?What's going to be the\napproach to prove this?Yeah?AUDIENCE: Assume that\nthere's a rogue couple.PROFESSOR: Assume that\nthere's a rogue couple,that namely this is not true,\nso there must be rogue couple.So let Bob and Gail be any\npair that are not married.I need to prove the Bob\nand Gail are not rogue,", "start": 3720.0, "heat": 0.191}, {"text": "and then we'll be fine.Because if it says everybody\nwho is not married is not rogue,then we know we have\na stable matching.Now, there's a\ncouple of cases here.Bob and Gail weren't\nmarried, so there's two waysthat could have happened.What's one of them?What's one reason\nthey might not bemarried, something that happened\nthat made that impossible?Yeah?AUDIENCE: Gail rejected Bob.PROFESSOR: Good.Case one-- Gail rejected Bob.Well, what do we know in that\ncase, if Gail rejected Bob?AUDIENCE: Gail had\nbetter suitors.PROFESSOR: Gail has another\nsuitor that she likes better.And, in fact, what do we\nknow about who Gail married?AUDIENCE: Better than Bob.PROFESSOR: Better\nthan Bob-- things onlyget better for the girls.That's the lemma one.All right, so this means that\nGail marries someone that shethinks is better than Bob.And that's by lemma one.Well, can Gail and Bob\nbe a rogue couple here?No, because Gail likes her\nspouse better than Bob,so she's not going to be\nin a rogue affair with Bob.So that means that Gail\nand Bob are not rogue.All right, case two is\nGail did not reject Bob.", "start": 3840.0, "heat": 0.144}, {"text": "She never did.That's the other case,\nshe didn't reject Bob.Could Bob have ever\nserenaded Gail in this case?No, because if he did and\nhe was never rejected,they would have\nended up married.All right?So that means the Bob\nnever serenaded Gail.What does that mean about\nhow Bob feels about Gail?Yeah?AUDIENCE: Bob must have\nnever serenaded for Gail.PROFESSOR: Yeah, Bob\nnever got far enough downon his list to serenade Gail.He got married before\nhe got down there.All right, so that\nmeans that Gail is loweron Bob's list than Bob's wife.And that means that\nthey're not rogue,because Bob likes his\nwife better than Gail.All right, so in each case, the\ncases clearly cover everything.Gail rejected Bob,\nor she didn't.Either way, Gail and\nBob are not rogue.So that means there's\nno rogue couples,and that implies M is\nstable, TMA is stable.OK?All right, so TMA\nterminates, everyone", "start": 3960.0, "heat": 0.198}, {"text": "gets married, no rogue\ncouples, nice outlook.So we're done.We actually proved it works.One issue left to\nthink about here.Any questions on that before we\nlaunch off into the last issue?AUDIENCE: Is it unique?PROFESSOR: Is it unique?TMA gives you a unique answer\nbecause it's an algorithm.It's deterministic.But there may be other\nstable matchings.OK, so there's not just one\nstable matching, necessarily.You could make examples with\nmultiple stable matchings.That's a great question.Any other questions?All right.Oh, yeah?AUDIENCE: Is there\ngenerally any other wayto assess optimality besides\nthe fact that it's stable, or--PROFESSOR: Yeah, you can\nmake up lots of them.You could put\nweights on the edgesand get a min-weight matching.You could try to get\nthe perfect matchingwith the least unfavorable\nmarriage kind of thing.There's a lot of\ncriteria you can make.This one turns out to be useful\nin practice in a variety waysthat we'll talk\nabout, and also havea nice, fast, simple\nalgorithm that can actuallyrun in a distributed\nenvironment, whichis really nice.So it is probably the\nmost practical approachto matching out there.Any other questions?OK, the last\nissue-- I don't knowif we still have the issues\nup there-- is fairness.So who thinks the TMA is\nfavorable to the boys?Just a couple.Who thinks it's\nfavorable to the girls?More, that's the\ncommon response.Who thinks you can't even\ndefine it one way or the other?It's unclear and\nhopeless to decide.OK, well, it seems like\nmaybe the girls, because they", "start": 4080.0, "heat": 0.101}, {"text": "get the best of their suitors.They sit back, and\nthey just take the bestas they come along.On the other hand,\nthe boys do tryto go out and get\ntheir first choice.The girls have to wait.And Mr. Right may\nnever come along.The boys are out there.I'm going to my first choice,\nand they get denied, OK, theyjust move right on\nto the next choice.So this is actually\none of these questionsof study in sociology.In the animal species, which is\nbetter, proposers or acceptors?What's the more powerful result?Who has the better\npower in courtship?It turns out that we can\nanswer this question in a veryclear way, and prove it here.And the answer is the boys\nhave all the power here.This is very favorable to\nthe boys, and we'll see why.Now, to prove that, we\nneed some definitions.OK, so I've got to define\na couple things hereto be able to prove this.The first is, for any\ncollection of preference lists,we're going to let S be the\nset of all stable matchings.Now, we know that S\nis not empty, right?How do we know that\nS is not empty here?AUDIENCE: [INAUDIBLE] stable.PROFESSOR: Yeah, because TMA\nproduces a stable matching,so we know that S is not empty.There's at least one.And, in fact, there\ncould be many.Now, for each person, P, we\ndefine the realm of possibility", "start": 4200.0, "heat": 0.203}, {"text": "for P to be the set of\nmates that you mighthave in a stable matching.So it's a set queue\nof people for whichthere exists a matching\nthat's stable such that you'remated to that person.So I've written this\nin some-- that'ssort of complicated\nmathematics, but somebodyis in your realm of possibility\nif there is a stable matchingwhere you married them.If it exists, there's\na stable matchingwhere you could marry them.And this is vaguely like\nyou see sometimes, you'regoing out with somebody and your\nparents say, oh, they're notin your league, or something.This is a mathematical\nformulationfor that, that there is some way\nin the world to marry everybodyup, so it's all\nstable, and you couldbe married to that person.OK?Let's do an example\nwith four people.All right, so for example, say\nwe have Brad, Jen, and Angelinaagain.And of course Brad likes\nAngelina and vice versa.Gen likes Brad, and then\nthere's Billy Bob here.All right.Now, Brad is not\nrealistic for Jen.Brad Is not in Jen's\nrealm of possibility,", "start": 4320.0, "heat": 0.183}, {"text": "because in any perfect matching\nwhere Brad marries Jen,you're going to\nhave a rogue couple.Brad's going to go for Angelina.So Brad is not within\nJen's realm of possibility.And similarly, vice\nversa-- Jen is notin Brad's realm of possibility,\nbecause there's no stablematching where they're\nmarried, in this scenario,for this problem.All right?Now that we have\nthat notion, we candefine who your optimal mate is,\nand who your pessimal mate is,the worst case.All right, so we define\na person's optimal mateis his or her favorite in\nthe realm of possibility.So your optimal mate is\nnot your favorite overall,it's just your favorite\namong those who are possible,that there is a stable\nmatching that you couldbe matched to that person.And similarly, you have\na person's pessimal mateis your least favorite from\nthe realm of possibility.OK?Because you have\nall the people youmight be married to\nin stable matchings.Your favorite is the\noptimal, your least favoriteis the pessimal.", "start": 4440.0, "heat": 0.184}, {"text": "Any questions about that?Does that make sense?And you don't count\nthe ones you can'tbe married to, because if you\nwere, it would be unstable.OK, now we can state the\nblockbuster theorems here.Theorem four says\nTMA marries every boywith his optimal mate.Theorem five,\nprobably can guess,TMA marries every girl\nwith her pessimal mate.All right, so it is\noptimal for every boy.They get the best possible they\ncould have in stable marriages,and every girl gets the\nworst possible mate.Now, you wouldn't necessarily\nthink that when you firstlook at that algorithm, where\nthe boys are working downtheir list, and the girls are\njust getting better and better.But that's the case.Now, let's see, I'm not going\nto have time to prove them both,but I will prove theorem five.And I'm going to\nassume theorem four istrue to prove theorem five.Maybe we'll do theorem four\ntomorrow in recitation.I don't know.So let's do theorem five so\nyou can see how this works.The proof is by\ncontradiction, so we'llassume theorem four\nis true, and we'llprove the proof of theorem\nfive by contradiction.", "start": 4560.0, "heat": 0.263}, {"text": "So assume there was a stable\nmatching where a girl gotworse off than in TMA.All right?Assume three and\nfive is not true,then there's some girl\nin some stable matching.So suppose, for the\npurpose of contradiction,that there exists\na stable matching,we'll call it M,\nwhere some girl,and she fares worse than in TMA.I want to show that\nresults in a contradiction.And the proof is pretty\nsimple, just a simple picture.So G did worse in M than in TMA.All right, so let's let B\nprime be the mate of G in M.So girl G did worse in M than\nin TMA, so here's her mate in M,and let B be her mate in TMA.Who does she like\nbetter, B or B prime?B, because we're saying that\nshe did worse in M than she didin TMA, so she likes B better.And let G prime be the mate\nof B in M. Now, who does", "start": 4680.0, "heat": 0.1}, {"text": "B like better, G or G prime?[INTERPOSING VOICES]PROFESSOR: Not G prime.B got married to G prime in M,\nbut what does theorem four say?Yeah, G. Theorem four\nsays that across allthe stable matchings, B gets\nhis favorite mate in TMA.So G prime is in the realm\nof possibility, and so is G,and we know from\ntheorem four B likes Gbest, better than G prime,\nbecause of theorem four.So what happened here?There's a rogue couple in M. B\nand G are a rogue couple in M.And that means that\nM is not stable,and that is a contradiction.All right?And so theorem five\nis true, because weassumed we had a stable\nmatching M where there'sa girl who did worse off.So it really pays off to be\naggressive party in courtship.Everybody lives\nhappily ever after,especially the boys in TMA.Now, TMA arises in\nlots of applications.The most famous is\nthe matching programthat's used to match MDs\nto residency programs.So how many pre-meds are here?There's one, at least.So you're going to go to\nmedical school some day,and at the end of\nmedical school,there's a big day\ncalled match day,where you get assigned to a\nhospital for your internship,and the way that works\nis using this algorithm.And who do you suppose is\nthe boy in this algorithm?AUDIENCE: The hospital.PROFESSOR: The hospital.And they want it so that\nwhen they make the matchings,that there's not some pair of an\nintern or doctor in a hospitalwhere they'd like each other\nbetter than what they got.", "start": 4800.0, "heat": 0.163}, {"text": "This is used in online dating\nfor the obvious reasons,and we actually use this\nalgorithm lot at Akamaito load balance\ntraffic on the web.And here you have the\nboys are web servers,and the girls are\nrequests for service.And the goals are to\nbalance performance,getting a server that's\nnearby you that's fast.And on the other side,\nour cost, and by whowe make a boy and a girl, we can\ntrade off cost for performancein a very nice, distributed way.All right, so\nthat's it for today.", "start": 4920.0, "heat": 0.321}]