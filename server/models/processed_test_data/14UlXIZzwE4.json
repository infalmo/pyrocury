[{"text": "SRINI DEVADAS:\nMorning, everyone.Welcome to 6.S095.Thanks for registering\nfor this class.I hope you like it.My name is Srini Devadas.I'm a professor of computer\nscience at MIT, obviously,and I've been teaching\nat MIT for 30 years.So I've been at it for a while.The reason I'm\nteaching this IAP classis because I want to try\nout this way of teachingprogramming that starts\nwith the recreational worldof mathematical puzzles,\nalgorithmic puzzles,and I want to connect it\nup to writing programs.And I have taught this\nmaterial before in 6.009that I think some of\nyou are registered for,but I wanted to teach it\nin a more interactive,informal setting.And I should mention\nthat I wrote a bookon this, which is a book\nthat's recommended, though notrequired, for 6.009.And so you might see\nthis in the MIT PressBookstore and other places.And most of the material\nI'm going to cover hereis from the book.But I don't want\nyou to read the bookbecause I want you to listen to\nmy explanations for the puzzlesand try and think\nof the solutionsyourself and then obviously\ndo some amount of codingnot during lecture but offline.And I'll show you some\nsolutions to the puzzles,and there will be\nsome exercises.So I don't want to spend a\nwhole lot of time on logistics.This is an IAP class,\nas I mentioned.I'd like this to be\ninformal and relaxed.So we meet every\nday for two weeks.We have the holiday\ncoming up on Monday,", "start": 0.0, "heat": 0.158}, {"text": "so we'll have nine total\nlectures roughly for an hour.It might spill over, but\nhopefully, you'll be OK with itbecause you don't have another\nclass to go to at noon.And if you do,\nwell, let me know,and I'll give you that\nfive minutes of overflowpersonally at a time\nof your choosing.But hopefully,\nI'll keep on time.And in terms of work,\nthis is a pass/fail.It's a for-credit class.I know some of you may be\nlisteners, but some of youare registered for it.So I'll have to\nassign you a grade,so there will be some exercises.And I'm going to\nmake it very simple.There'll be exercises\nup on the website.They'll be due two days\nfrom when I put them up.And you'll have options\nin terms of whether to doa really simple\nexercise that's probablygoing to take about five\nminutes or do something harder.And for each of\nthe puzzles, thereare two or three exercises,\nand you get to do all of themif you want.You can choose to\ndo one or the other.I'm going to have office hours\nevery day from 1:00 to 2:00.I don't plan on putting\nsolutions up to the exercises.The solutions to the\npuzzles themselves,they'll be shown\nmostly in lectureand put up on the\nStellar website,but the solutions\nto the exercises,I'm not going to put up.But if you ever get\nstuck, well, that'swhat office hours are for.And if you can't\nsolve the exercises,I'll help to solve them.So with that,\nwithout further ado,let's dive in and\ntalk about puzzlesand solving puzzles using\nalgorithms and then programs.I'd really like this\nto be interactive,so please ask questions\nand suggest solutionsthat I haven't thought of.That'd be great.", "start": 120.0, "heat": 0.118}, {"text": "In my second edition,\nwhenever that is,you'll get credit for that.So the first puzzle, I\ntried to have, I don't know,funny titles for all\nof these puzzles--intriguing.And so the first puzzle is\ncalled \"You Will All Conform.\"This is really a warm-up puzzle.As you'll see-- this\nis true for any class--things are going to get more\ncomplicated as we go along.So we'll probably do 10 or 12\npuzzles in the next two weeks.And by the end, you're going\nto see things like memoizationand dynamic\nprogramming and thingslike that towards\nthe end of next week.And if you don't know\nwhat those mean, well,that's great because\nhopefully, youwill know by the end\nof the two weeks.And a lot of these things\nare algorithmic insights,are insights that will help you\nin Course 6 classes, for sure,and perhaps even if you follow\na career outside of Course 6.So this particular puzzle is, as\nI said, a fairly simple puzzle,at least to describe.And the setting is as follows.So you're a gatekeeper\nat a baseball game.We'll just call\nit a baseball gamebecause baseball\nplayers wear caps,and most people are\nwatching games with caps on.And so you're a gatekeeper,\nand there are a bunchof people standing in line.Let's just say each of\nthem knows their number.And this is Python,\nso the numberstarts at 0 as opposed to 1.And there are a\nwhole bunch of peoplestanding in line waiting to\nget in, and they all have caps.And some of them are\nwearing their caps forward,so with the--", "start": 240.0, "heat": 0.1}, {"text": "I guess, what do you call it?What's the front\nof the cap called?The shade-- the thing that\ngives you shade up front.And so we just say--let me try and draw this out.So this person is wearing\nhis cap like that,and this lady here is\nwearing her cap like this.So that's forwards,\nand that's backwards.So your job here\nis straightforward.You can only let all of\nthese people into line--sorry-- into the stadium who\nare in line if they all conform.So they all have\nto wear their capsin a particular orientation,\nand you don't particularlycare which one.And so they all\nhave to be forwards,all, let's say, 13 of them.Or they all have\nto be backwards.Now, all of them know\ntheir position on the line.So this person knows\nthat his position is 0,this lady here knows\nthat her positionis 1, et cetera, et cetera.And so obviously, you'd like\nto minimize the amount of workthat you do, and you\ncould certainly choose--let's say you want\neveryone to be forwards.You could say, hey, lady in\nposition 1, flip your cap.Oh, I should mention\nsomething that is important.So people have a\ndifferent definitionof forwards and backwards.It's sort of what's natural\nand what's unnatural to them.So we think that this person\nhas his cap on forwards.But for all you know, he\nthinks he's got his capon backwards or vice versa.So you can't assume\nthat the definition", "start": 360.0, "heat": 0.133}, {"text": "of \"forwards\" and \"backwards\" is\nidentical for all of the peoplein line and really is the\nsame as your definition.It seems kind of unreasonable.Hey, this is a puzzle, so\nlet's not argue about that.We can argue about other\nthings, like how to writePython programs properly.So what you have\nto do now is youhave to call out commands\nthat correspond to saying,person in position\n0, flip your cap.That's all you can say.You can just say, flip your cap.You can obviously see how\nthese caps are oriented,and you can ask--let's say that you had\nsomething like that.I'm just making this up as\nI go along, in terms of I'mnot going to draw\nall the caps here.But this is what it looks like.And so according to you,\nyou see F, B, B, in termsof Forwards and Backwards.And let's say you decide\nthat you want everyoneto have their cap on forwards.Then you could say, person\nin position 1, flip your cap.Person in position\n2, flip your cap.And then person in\nposition 4, 7, et cetera.And you want to make\nit easier on yourselfbecause people do know their\nindices, their positionsin line.And so to save\nyourself some trouble,you could say, people in\npositions 1 through 2--and the implication is that\nit's inclusive-- flip your caps.And so that takes\ncare of these two.And perhaps 8 here and 9\nhad their caps on backwards,and you could say, people\nin positions 7 through 9,flip your caps.So in this particular\nexample, assuming", "start": 480.0, "heat": 0.1}, {"text": "that things ended with 10\npeople in line, 0 through 9,you could get away\nwith three commands.You could say, 1 through 2--and the implication, as I\nsaid, is this is inclusive--flip.And then you could say, 4, flip.And then you could\nsay, 7 through 9, flip.And if you did it\nthe other way, youcould also say,\nperson at 0, flip,and so this would go backwards.Person at 3, flip.Obviously, you can't\nsay, 0 through 3because that would be wrong.And then you could\nsay 5 through 6 here.So you would get three\ncommands in that case, as well.But if in fact, for\nargument's sake, let'sjust say that I'm going\nto just turn this into 10and put an F down here.Then these three\ncommands would stillwork if you wanted to focus\non the B's, on the Backwardspeople, and make them\nmake them go forwards.But if you wanted to make\nall of the forward peoplego backwards, you would need\n1, 2, 3, 4, four commands.So in this particular\ncase, you'rebetter off doing that as\nopposed to doing four commands.So first straightforward\nquestion is--and I'm not talking\nabout code yet--algorithmically, just\nin terms of pseudocode--and I'm happy with English--", "start": 600.0, "heat": 0.1}, {"text": "how would you determine the\nminimum set of commands givena particular set of people?There's an arbitrary\nset of people.You want to make sure that you\nhave the absolute minimum setof commands, and you're going\nto have to use these intervals.So you definitely\nwant to look for allthe contiguous intervals\nbecause obviously,if you say 1 followed and then\nthat's a separate command, thenyou say 2 and that's\na separate command,you end up having more\ncommands than necessary.So anyone want to tell\nme I guess roughly,in terms of pseudocode,\nhow this would work?Yeah, go ahead.AUDIENCE: Well, you\ncould go down the lineand look at the groups.So start with the 0.You've got to write 0.Group them.And then whatever\nthe second one is--so whatever the second\ngroup is, if it's F or B,those are the ones\nthat need to be flippedbecause that's going to be the\nminimum number of commands.And then so from what\nyou pass through,whenever you get to those,\nyou just tell them to flip.SRINI DEVADAS: Sounds good.Do you have anything\nto add to that?AUDIENCE: No.I was going to say, you\nfind the backwards intervalor forward interval.And whichever is\nthe lower, then--SRINI DEVADAS: Lower.That's good.Good.Excellent.And so both of you had it right.So let me explain what these two\ngentlemen-- what was your name?AUDIENCE: Ganatra.SRINI DEVADAS: Ganatra?Yours?AUDIENCE: Fadi.SRINI DEVADAS: Fadi?AUDIENCE: Yeah.SRINI DEVADAS: So\nGanatra and Fadi said--so basically, this\nis, as I said,the natural algorithm\nthat you would use.The natural algorithm\nwould be that youwalk through this\nlist, and you startcomputing what I would\ncall-- you called it\"groups,\" Ganatra.But I'd call them\n\"intervals,\" and an intervalis something that is unbroken.", "start": 720.0, "heat": 0.1}, {"text": "It's contiguous.It's a contiguous\nset of people whoall have their caps in\nthe same orientation,be it forward or backwards.And what you would do in this\ncase is you would compute the--you would say, I want to look\nat the forward intervals.And the forward\nintervals would be 0,0 because that's essentially\nwhat you have in here.And going through that\nlist, you would also say,I'm going to be computing\nthe backward intervals.And in this case, you discover\n1, 2 as the backwards interval.So I'm going to write\nthem out like that.And in general, in the\nmathematical notation,when you put square brackets,\nthese are closed intervals.So 0 is included.And we're going to\nsee a puzzle whereyou might see something\na little bit different,so I wanted to point that out.So 1, 2 are both\ninside this interval.And these two you\nwould generate as youwould go through the\nlist, and then youwould generate 3, 3 over here.And then you would generate 4--yeah, that's right, just 4--I'm sorry, 4, 4\nover here, if youwant to call it an interval.You could represent\nthis differently.There's nothing that\nstopping you in Pythonto have these slightly more\ncomplicated representationswhere you just have\n0 here as a number.And if it's just\na number, then itrepresents an\ninterval of length 1,but let's just be\nuniform about this.Usually, when you\nhave special casesand if you do things\nheterogeneously,then you have more\ncode to write.It might get more efficient,\nbut there's usuallymore code to write.So you do 4, 4 here.And then you'd go up, and\nthen you'd have 5 comma 6.And then you would do 7 comma--I'm sorry, 7 comma 9.So this is the first\ntime you actuallyhave something interesting, in\nthe sense that the interval hasa representation that only\nhas two numbers in it,", "start": 840.0, "heat": 0.1}, {"text": "whereas you actually have\nthree people in that interval.And obviously, this\ncould be arbitrarilylarge in the context of people\ngetting into a baseball game--and so 7 through 9 and then\nfinally here 10 through 10.And so now you go\nahead, and you countand you realize that there's\nfour intervals here and threeintervals here.And then you say, I'm\ngoing to go ahead and gowith the backwards and asking\nthe people who are-- well,according to you-- backwards\nto flip their caps so we're allgood.So I'm going to show\nyou code that implementsexactly this algorithm.And while you see\nthe code, I wantyou to think about\nthis harder question.This code is going to do\nexactly what we describe.It's going to go compute\nall of these things,and as you can\nimagine, he's goingto make a pass through\nthis entire Pythonlist, this group of people,\nthis queue of people,and is going to do\nthis computation.Then it's going to say,\n4 is greater than 3.And then it's going to go\nthrough and start calling outcommands for each of\nthe backward intervals.So in some sense, it's going to\nmake two passes over the list.So the first pass is to get\nall of the intervals together.Then there's a check.And then the second\npass is to takethose backward\nintervals, in this case,and call out those commands.So that's what I\nmean by two passes.Yeah, please.AUDIENCE: You don't\nnecessarily need to count them,the 4 and 3 because whichever\norientation interval comessecond is always going--SRINI DEVADAS: Brilliant.Brilliant.", "start": 960.0, "heat": 0.1}, {"text": "So I was going to say--if you didn't\nunderstand what Ganatrasaid, wonderful because then\nyou can think about the questionI'm going to ask and\nignore what he said.And then we'll get to, I\nguess, the more efficient code.But what I was going to ask was,\nis there a way that I'm lookingat this, and I'm just going--\nand I'm going to just startcalling out by--the moment I see that there's\nan interval, the moment I see--this is an interval.And I'm going to make\na call with respectto whether I'm going to\ncall out a command or not.And I'm going to do this in\none pass through this array.I want to do this in one\npass through the array.I want to look at this, and I\nsay, I see the interval 0, 0.Is that going to\nbe something that Ineed to worry about in\nterms of that personhaving to flip his cap?And then I see B, B. And I say,\noh, the interval is 1 comma 2.Is that something I'm\ngoing to have to dealwith in terms of a command?And so someone else\nother than Ganatra,tell me if there's a\none-pass algorithm.And explain to me why you\ncan do this in one passthrough the array.And just in terms of\ncode, I'll preview this.The first algorithm needs--according to my coding,\nwhich, isn't great--26 lines of code.The second one needs\neight lines of code.So yeah, go ahead.AUDIENCE: So after you\nsee the first interval,you know that the second\ninterval at the very leastis going to have the same number\nof commands as the first one.So you might as well always\ngo with the second one.So once you've\nidentified what typethe first interval is, you\niterate through the list", "start": 1080.0, "heat": 0.1}, {"text": "seeing--and once you identify the\nfirst and second intervals,you iterate through every\ntype of the second intervaland do a command for that.SRINI DEVADAS: That's\nabsolutely right.What was your name?AUDIENCE: Kevin.SRINI DEVADAS: Kevin?So you had it right.And Kevin has it right, as well.So the observation\nhere is actually--it was said a little bit\ndifferently by Kevin,but I'm going to say it\na little bit differently.The observation is\nsimply that if youlook at the very\nfirst orientation,the very first orientation\nis something which,at best, is going to be a tie.So if you had it ending\nwith 10 people, 0 through 9,then the number of\nforward intervalsis the same as the number\nof backwards intervals.And if you went here, obviously,\nthe number of forward intervalsis greater than the number\nof backwards intervals.So you really only have to look\nat the first person in line notto determine the\nintervals because whenyou see the first\nperson in line,you have no idea what\nthe intervals arethat are coming after.You have to generate\nthose intervals,so you have to make your\npass through the array.But the first person\nin line gives it awayin terms of what\nthe final result isgoing to be with respect\nto your decision as to whatset of commands you're\ngoing to call up.And so because this is an F, you\nbasically say, I'm going to go,and I'm going to make the people\nwith the B's flip their caps.And that's a small observation\nin terms of its insight.But obviously, it's\npotent, in the sense", "start": 1200.0, "heat": 0.107}, {"text": "that it's going to give\nyou a one-pass algorithmversus a two-pass algorithm.And as I mentioned,\nit's going to give youa substantial reduction in the\namount of code that you write.So I'm going to show\nyou a bunch of code now.So this is usually how\nthis is going to go,by the way, this entire class.And this is kind of\nmy way of teaching,at least this type of material\nthat's algorithmic and hasdata structures and so on.I like explaining to\npeople what they'regoing to see in the code without\nhaving to deal with Pythonsyntax and worrying about\nwhether it's while loopsor for loops and things like\nthat and tuples or arraysand things like that.So let's get into that.I don't need this.Ah, good.So the naive algorithm first--so what you see\nhere is an input.So \"caps\" is simply an\ninput Python list that has,as you can see from our\nexamples, the F's and the B's.And so F is Forwards,\nand B is Backwards.And there are a couple\nof different Python listsso you can run them\nwith different things.And all of this hopefully is\nnot at all surprising to youbecause we went\nthrough all of thisin terms of the pseudocode.So the first initialization--and I can just highlight\nthat to make it easy.So that's initialization.And this part here--the comment sort\nof gives it away--is you're making a\npass through the array,computing the intervals.And so how do you actually\nget the intervals?And there's one line\nof code that does that.And oh, by the way, if there\nare any questions about Pythonsyntax, just don't feel shy.Just tell me.", "start": 1320.0, "heat": 0.14}, {"text": "Ask me a question, and\nI'm happy to explain it.I don't want to explain things\nthat you all know, obviously.But if any one of you doesn't\nknow any particular thing,please don't feel shy.Syntax is something that\nsometimes you even forget.I tend to forget things.So this thing here\nis essentiallysomething that decides on\nwhat the intervals are.And the insight here is simple.You know that this interval\nended when you see somethinghere that is different from\nwhat the previous one is.So that's when you know.So you generate the interval\nwhen you go and findsomething that is different\nfrom the current locationthat you're pointing to.So that's really what's\ngoing on out here.In this line, you say, you're\nsetting a \"start\" here.\"Start\" is your counter,\nand remember, \"start\"is getting set again here.Initially, it was set to 0.And if you ever get to the point\nwhere you're looking at \"i,\"it's the next thing\nyou're looking at,and if \"caps start,\" which\nis the start of the interval,is different from \"i,\" it\nmeant that the interval thatbegan with \"start\" ended.And so you\nessentially say, well,that needs to end at i minus 1\nbecause obviously, \"caps start\"is different from \"caps size.\"So this is the end of\nthe interval right here.And this particular\nthing, our interval,is something that includes\nboth these two numbers,so it's not exactly that.But it also includes--where did my chalk go?It also includes whether\nthis is an F or not.So each of these things has--I'm not going to write it\nout for all of those things--but has the orientation\ninside of it.So that's what\nyou have out here.That's why we have three\nof these in this tuple.", "start": 1440.0, "heat": 0.106}, {"text": "This is a tuple because it's\ngot round brackets around it.I could have made it\na list if I wanted.And so that's essentially\nwhat we have here.And now, here's what happens.In this particular piece of\ncode, when you get to the endand you fall off the end--so if you just end, then\nthis code essentiallyskips over and doesn't actually\nput in the last intervalbecause you don't see something.When you come up here and\nyou're off the end of the array,you fall off the\nedge of the array,you don't see a B that\nis different from F.So if you just wrote that code--so it's something that\nI'd say many people wouldhave a quote, \"bug,\"\nwhere they wouldn'tadd this part of the code here\nbecause they didn't realizethis particular\npoint that I made.And so that last interval\ndoesn't get added in.And so you have a\nbit more code herethat decides on\nthe last interval.And then you count, and then you\ngo ahead and call the commands.So this all looks good?Yeah, we're good with this?Is there a way that\nI could somehoweliminate these four\nlines of code whichare a little bit annoying and\njust do things in the array?How could I, with\na little trick,eliminate those\nfour lines of code?I might need a little bit more\nin, quote, \"pre-processing,\"but how would I eliminate that?Someone else?I'll get to you.Yeah.Go ahead.AUDIENCE: One way is\nyou can check thoroughlyyou've reached the end of the--the forward is equal\nto the backwards.", "start": 1560.0, "heat": 0.142}, {"text": "SRINI DEVADAS: You could\nhave an extra check.What's your name?AUDIENCE: Kanishka.SRINI DEVADAS: Kanishka?So Kanishka says that before\nyou reach the end of the arrayor when you reach\nthe end of the array,you go ahead and do a check\nthat you've reached the endand generate the interval\ninside of it, whichis kind of like moving\nthis code inside of it.So that's reasonable.I'm not sure that's going to be\nas good as the way that I wantand which I coded.Think about pre-processing.Think about taking\nthe array-- yeah?AUDIENCE: I guess you could add\na wrong interval at the end.SRINI DEVADAS: You could\nadd on a wrong interval.What was your name?AUDIENCE: Kevin.SRINI DEVADAS: Kevin, too?Just how many Kevins\ndo we have here?So you could do this.So let me show you something\nthat's a little bit more--so that was 26 lines of code.And so this says--this is the line\nthat's interesting.So I had F and B, and so I\ndon't want to add F or B there.But what is convenient\nto do, as it turns out,is to just have something\nthat essentially says,there's an ending point.So you have an explicit end\nto the array that is actuallynot something that would crash\nif you tried to access it.You had n people in line,\nand now you have effectivelyn plus 1 people in line.But that n plus one\nperson is a dummy,or you can call them \"end.\"And then if you do\nthat, then that's it.The previous code works.You can just remove\nthose four lines,and it'll all just work\nbecause your F or your Bis not equal to \"end.\"So whatever you had at the end--I'm sorry.I'm overloading terms here.Whatever you had at\nthe last element--whether it was a B because\nit ended here or F--when you equate that\nto \"end,\" you're", "start": 1680.0, "heat": 0.335}, {"text": "going to get an inequality.And so that last\ninterval gets generated--so small optimization.Tony Hoare was a very\nfamous computer scientist--said that \"inside\nevery program, there'sa smaller program\nwaiting to get out.\"So this is kind of\none of the themesthat I'd like to harp on in\nthis class, which is it'snice to write compact code.Usually, if you can\nwrite compact code,there are fewer bugs in it.And you don't want\nto go overboard.You don't want too\nmany subtleties,but it's nice to\nwrite compact code.And so this is a little\nbit more compact.And then finally, here's\nthe one-pass algorithm.So the whole thing, the\n\"pleaseConformonepass,\"is the smarter algorithm\nthat essentially says,look, if I just look at\nthe very first thing,I'm going to be able to\nskip that and then move on.So this is fairly complicated.You know the algorithm.Trying to map that to\nthis code is non-trivial,so we'll spend a\nminute or two on it.But here's how this works.And by the way,\njust to make sure--so I've repeated things here.So the optimized algorithm\nfor that particular exampleproduced these first\nthree commands.And then the one-pass\nalgorithm producedexactly the same commands.So this is good to do.It's always nice\nto have a coupleof different ways\nof solving a problembecause then you\ncan verify things.Anyway, so this piece\nof code is essentiallysomething that does a similar\ntrick to what we had before,", "start": 1800.0, "heat": 0.325}, {"text": "in terms of adding\nto the original list,adding an element.But we're not using \"end\" here.We're actually\nsaying, what we wantto do because we're going to go\nahead and skip this, anyway--we know we're going\nto skip the F.So whatever that is, we could\njust sort of add up here.And so that makes it easy.You don't have to worry about\nwhat the actual characters areand cooking up this\n\"end,\" which is differentfrom the F or the\nB because hey, it'spossible that people\nmight use whateverthey want to represent a\nforward cap or a backward cap.So this is very clean.You go ahead and put\nexactly that over here.You know you're going to skip\nthat interval because you'regoing to skip the first\ninterval, effectively,because that is what the\nalgorithm allows you to do.And then this part here is\ndoing what we had before.We're not even\ngenerating the intervals.We're just directly\nmaking the commands.So there are no tuples\nin terms of the tuplesand the appending of the\nintervals data structurethat we had.It's all gone.I'm just going to go ahead\nand fire off these commands.And those commands are\nwritten in kind of a funny waybecause I'm going\nto go ahead and if Iwanted to print\nthese things out,you'd have to do this\nin this funny way.If you're willing to wait\nand collect up the intervals,you can certainly do that.But this is absolutely\nthe most compact codethat I could think of,\nand I'm printing a commandin two different parts.I'm printing the first part\nof the command that says,people in positions.And that's the start\nof the interval \"i,\"", "start": 1920.0, "heat": 0.196}, {"text": "and I'm just using\na Python construct.This \"end\" here is something\nthat the print commandcan recognize.And this simply says,\ndon't give me a new line.I want to print it exactly.As you saw from\nwhen I ran the code,the printing was exactly the\nsame as the original algorithm.And so this \"end\" simply\nsays, don't print a new lineat the end of\npeople in positions,whatever this number is.Call it 7.And you don't\nprint the new line.And then you have a space\nhere because you didn'tprint a new line or a space.And you go through i minus\n1, which is exactly the sameas we had before.You only discover that the\nend of an interval after yousee the person that\ncomes after the interval.So you have to go\nback to i minus 1.So this makes sense?Any questions about this code?Yeah, go ahead.AUDIENCE: So the\nfirst line, likeyou said, if we're going\nto move the first--SRINI DEVADAS: Not\nmove, duplicate--AUDIENCE: Duplicate the first--SRINI DEVADAS: Yeah.So the plus there\nis a concatenation,and you have two lists.\"Caps\" is a list.And when you use a plus\noperator in Python,you can only add things\nthat are of the same type.And so \"caps\" is a\nlist, and \"cap 0\"is an element of the list.And so you need to\nmake it a list in orderto use the plus operator.There are also other things\nyou could do using a pen,for example.So you could take that line,\nand you could do \"caps start\"at \"pen\" \"cap 0.\"And you wouldn't need all\nof the square brackets,but that's just\nneither here nor there.But I'm obviously not answering\nyour question, so go ahead.Yeah.AUDIENCE: So I was\ngoing to say that weskip the first interval.And then we flip all the\nsecond-type orientation.SRINI DEVADAS: That's right.AUDIENCE: But here, we're\nfocusing on the first element.Why--SRINI DEVADAS: Ah, but\nthat's OK because remember,the if statement is going\nto skip this one, too.So if I had two F's\nin the beginning--I think your question\nis, what would", "start": 2040.0, "heat": 0.201}, {"text": "happen if I had two F's or\nthree F's in the beginning?So I'm going to go ahead, and\nfirst thing I'm going to dois I'm going to put\nan F at the end here,and then maybe there's\na bunch of stuff.But then the nice thing is\nthat I'll skip this F, too,because the not equal\nto is not going to fire.The next line, the \"caps\ni not equal to i minus 1,\"this is going to be equal to.So I'm going to go ahead\nand go to the next iterationof the loop.That makes sense?Did people understand\nFadi's question?It was a good question.So the question was, you\nskipped the first one.But what is making you skip\nthis one because you wantto skip the first interval?And so that if statement\nis making you do that.Good.So as you can see, even a\nfairly straightforward puzzle--this is the simplest puzzle\nwe're going to do hereis the first one.And there are nuances\nassociated with how you solve itbut also how you code it.And this is kind of--like I said, this was my\neureka moment a few years ago,where I said, I\nthink the way youwant to teach\nprogramming, at leastsome aspects of programming,\nis in this fashion.Anyway, good.So we're done with this.Any questions about this puzzle?All right.Good.", "start": 2160.0, "heat": 0.19}]