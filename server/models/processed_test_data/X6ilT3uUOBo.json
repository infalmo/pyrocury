[{"text": "The following content is\nprovided under a CreativeCommons license.Your support will help\nMIT OpenCoursewarecontinue to offer high-quality\neducational resources for free.To make a donation, or\nview additional materialsfrom hundreds of MIT courses,\nvisit MIT OpenCoursewareat ocw.mit.edu.PROFESSOR ERIC\nGRIMSON: All right, I'mgoing to start today\nby talking about,so what have we been doing?What have we actually done\nover the last few lectures?And I want to suggest\nthat what we've doneis, we've outlined a lot of the\nbasic elements of programming.A lot of the basic\nelements we'regoing to need to write code.And I want to just highlight\nit for you because we're goingto come back and look at it.So I'm going to\nsuggest that we'velooked at three different\nkinds of things.We've talked about data,\nwe've talked about operations,and we've talked about\ncommands or statements.All right?Data's what we expect.It's our way of\nrepresenting fundamentallythe kinds of information\nwe want to move around.And here, I'm going to\nsuggest we've seen numbers,we've seen strings,\nand I'm goingto add Booleans here as well.They're a third kind\nof value that wesaw when we started\ntalking about conditions.We saw, associated with\nthat primitive data,we have ways of taking\ndata in and creatingnew kinds of data out, or\nnew versions of data out,so we have operations.Things like addition\nand multiplication,which we saw not only\napply to numbers,but we can use them\non things like stringsand we're going to come\nback to them again.Can't use them on Booleans, they\nhave a different set of things.They do things like AND, and OR.And of course there's a\nbunch of other ones in there,I'm not going to\nput them all up,but we're building up a little\ncollection, if you like,of those operations.And then the main\nthing we've doneis, we've talked about commands.So I'm going to suggest we've\nseen now four different things.We've seen assignment, how\nto bind a name to a value.", "start": 0.0, "heat": 0.1}, {"text": "We've seen input and output.Print for output, for example,\nand raw input for input.We've seen conditionals, or\nsaid another way, branches,ways of changing\nthe flow of controlthrough that sequence of\ninstructions we're building up.And the last thing we\nadded were loop mechanisms.And here we saw, while.It's the first\nexample we've seen.So what've we done so far?Now, interestingly,\nthis set of instructionswas actually quite\npowerful, and we'regoing to come back to\nthat later on, in termsof what we can do with it,\nbut what we've really doneis, given that basis,\nwe're now talking about,how do we write common\npatterns of code,how do we write\nthings that solveparticular kinds of problems.So what I want you to do,\nis to keep in mind, thoseare the bases, we\nought to be able to doa lot with that bases, but\nwhat we're really interested inis not filling out a whole\nbunch of other things in here,but how do we put them\ntogether into common templates.And we're going\nto do that today.Second thing we've\nbeen doing, I wantto highlight for you is, we've\nalong the way, mostly justverbally rather than\nwriting it down,but we've been talking\nabout good style.Good programming style.All right?Things that we\nought to do, as youput these pieces\ntogether, in orderto give you really good code.And you should be\ncollecting those together.Give you some examples.What have we talked about?We've talked about things\nlike using commentsto highlight what you're\ndoing in the code,to make it easier to debug.We talked about type\ndiscipline, the notionthat you should check\nthe types of operandsbefore you apply operators to\nthem, to make sure that they'rewhat the code is expecting.We talked about descriptive\nuse of good variable names,as a way, in essence, of\ndocumenting your code.", "start": 120.0, "heat": 0.1}, {"text": "The fourth one we talked\nabout was this ideaof testing all possible branches\nthrough a piece of code,if it's got conditionals\nin it, to make surethat every possible\ninput is goingto give you an output that\nyou actually want to see.So, you know, you can start\nwriting your own, kind of,Miss Manners book,\nif you like, I mean,are what are good\nprogramming, youknow-- I wonder what\nyou'd call them,John, good programming hygiene?Good programming style?Good programming\npractices?-- Things that youwant to do to write good code.OK.What we're going to\ndo today is, we'regoing to start now building\nup, beyond just these pieces,although they're valuable, to\nstart creating two things: one,common patterns of\ncode that tacklecertain classes of\nproblems, and secondly we'regoing to talk about tools you\ncan use to help understandthose pieces of things.OK.So last time around, we talked\nabout, or introduced if youlike, iterative programs.And I want to generalize\nthat for a second,because we're going to come\nback and use this a lot.And I want to do a very\nhigh-level descriptionof what goes into an\niterative program,or how I would think\nabout this, all right?And I know if John disagrees\nwith me he'll tell me,but this is my way\nof thinking about it.If I want to try and\ndecide how to tacklea problem in an iterative\nmatter, here the stepsI'm going to go through.First thing I'm\ngoing to do, is I'mgoing to choose a variable\nthat's going to count.What I meant-- what in the\nworld do I mean by that?I'm thinking about\na problem, I'mgoing to show you an example\nin a second, first thing I'mgoing to do is say,\nwhat is the thing that'sgoing to change every time I run\nthrough the same set of code?What is counting my way\nthrough this process?Now I'm putting count\nin double quotes,not to make it a string, but to\nsay, this is count generically.It could be counting one by\none through the integers,it could also be taking\na collection of dataand going through\nthem one by one.", "start": 240.0, "heat": 0.105}, {"text": "It could be doing counting\nin some other mechanism.But what's the\nvariable I want to use?Second thing I do, I\nneed to initialize it.And I need to initialize\nit outside of the loop.That is, where do\nI want to start?And I need to make sure I have\na command that sets that up.The third thing\nI'm going to do, isI need to set up\nthe right end test.How do I know when I'm\ndone with the loop?And obviously, that\nought to involvethe variable in some\nway, or it's notgoing to make a lot of sense,\nso this includes the variable,since that's the\nthing that's changing.All right.The fourth thing\nI'm going to do,is I'm going to then\nconstruct the block of code.And I want to remind\nyou, that block of codeis a set of instructions,\nthe same set of instructionsthat are going to be done\neach time through the loop.All that's going to change,\nis the value the variableor the value of some\ndata structures.And remind you that\ninside of here,I'd better be\nchanging the variable.All right, if that variable\nthat's counting is notchanging, I'm going to be\nstuck in an infinite loop,so I ought to\n[UNINTELLIGIBLE PHRASE] that ,right, expect\nsomewhere in there,a change of that variable.All right?And then the last\nthing I want to do,is just decide, you know,\nwhat do I do when I'm done.OK.I know.It looks boring.But it's a structure\nof the thingsI want to think about\nwhen I go through tryingto take a problem and mapping\nit into a iterative program.Those are the things I\nwant to see if I go along.All right.So let me give you an example.I'm given an integer\nthat's a perfect square,and I want to write a little\npiece of code that's goingto find the square root of it.All right, so I'm\ncheating a little,I know it's a perfect\nsquare, somebody'sgiven it to me, we'll come back\nin a second to generalizing it,so what would the steps be that\nI'd use to walk through it?", "start": 360.0, "heat": 0.1}, {"text": "Well if you think\nabout these steps,here's an easy way to do it.Let's start at 1.Let's call x the\nthing I'm tryingto find the square root of.Let's start at 1.Square it.If it's not greater\nthan x, take 2.Square it.If it's not greater\nthan x, take 3.Square it.And keep going, until the\nsquare of one of those integersis greater than or equal to--\nsorry, just greater than x.OK, why am I doing that?When I get greater than x,\nI've gone past the placewhere I want to be.And obviously, when\nI get to somethingwhose square is equal to x,\nI've got the answer I want,and I kick it out.So who knows what I've done?I've identified the thing\nI'm going to use to count,something some variable is going\nto just count the integers,I've identified\nthe end test, whichis when that square is bigger\nthan the thing I'm lookingfor, I've identified\nbasically what I wantto do inside the\nloop, which is simplykeep changing that\nvariable, and Ididn't say what I want\nto do when I'm done,essentially print\nout the answer.OK, so how can I code this up?Well, you might think,\nlet's just jump inand write some code, I don't\nwant to quite do that though,because I want to show\nyou another tool that'svaluable for thinking about\nhow to structure the code,and that is a something\ncalled a flow chart.Now.People of Professor\nGuttag's and my age,unfortunately remember flow\ncharts back-- as they say,on the Simpsons, back in the\nday, back in the 1960's, John,right?-- really good programmers\nhad these wonderful littleplastic stencils, I\ntried to find one,I couldn't find it It's a little\nstencil with little cut-outshapes on it, that you\nused to draw flow charts,I'm going to show\nyou in a second,and you tucked it right in here\nnext to your pocket protectorwith all your pens\nin it, you know,so, your belt was\nalso about this high,and your glasses were\nthis thick, you know,we have a few of\nthose nerds left,we mostly keep\nthem in the museum,but that was what you\ndid with the flow chart.Despite making a\nbad joke about it,we're going to do\nthe same thing here.We're going to do\nthe same thing here,we're going to chart\nout a little bit of whatshould go into actually\nmaking this thing work.So here's a simple\nflow chart that I'mgoing to use to capture\nwhat I just described.", "start": 480.0, "heat": 0.103}, {"text": "And I'm going to,\nagain, I'm actuallygoing to do it the way they\nused to do it, and drawa rectangle with\nrounded corners, that'smy starting point, and\nthen what did I say to do?I said I need to\nidentify a variable,I'm going to give it a\nname, let's just call ANS,for answer, and I\nneed to initialize it,so I'm going to come\ndown, and in a square box,I'm going to\ninitialize ANS to 0.And now I want to\nrun through the loop.What's the first\nthing I do in a loop?I test an end test.So the flow chart says,\nand the tradition wasto do this in a\ndiamond shape, I'mgoing to check if\nANS times ANS-- oh,which way did I want to\ndo this-- is less thanor equal to x.Now that's a test.There are two possibilities.If the answer is yes, then I'm\nstill looking for the answer,what do I want to do?Well, I don't have\nto do anything otherthan change the counter.So I'm going to go\nto ANS is ANS plus 1,and I'm going to do it again.Eventually, if I've done\nthis right, that test is no--and I wonderfully ran out of\nroom here-- in which case,I'm going to go to a print\nstatement, which was alwaysdone in a trapezoid,\nand print out ANS.I should have put a box\nbelow it that says stop.OK?While.And notice what I got here.Actually, this is a useful\ntool for visualizinghow I'm trying to\nput it together,because it lets me\nsee where the loop is,right there, it lets\nme see the end test,it lets me make sure that I'm in\nfact initializing the variableand I'm checking the right\nthings as I go along.And the idea of this flow chart\nis, if you start, you know,a little ball bearing here, it's\ngoing to roll down, setting up", "start": 600.0, "heat": 0.112}, {"text": "an assignment statement,\nand then, depending on here,it's like there's a pair\nof flippers in there,it does the test, it\nsets the ball this wayto change it to ANS plus\n1, and comes back around,eventually it's going to\ndrop through and print outthe answer.The reason I'm going to\nshow you this flow chart,I'm going to do one other\nexample in a second,but I want to show\nyou a comparison.Remember last time, we wrote\nthis simple piece of codeto print out even or odd.If, you know, x, it was\nin fact, even or odd.So let me show you\nwhat a flow chartfor that would look like,\nbecause I want to makea comparison point here.If I were to do a flow chart for\nthat one, I'd do the following.It reminds you,\nthat the test herewas, we took x if that's\nwhat we were looking for,it did integer division\nby 2, multiplied it by 2,and we check to see if\nthat was the same as x.If the answer is yes, then\nwe did a print of even.If the answer was no,\nwe did a print of odd,and we then carried on.Again, while.But there's an\nimportant point here.Remember last time,\nI said that there'sdifferent kinds of\ncomplexity in our code,and I suggested for simple\nbranching programs, the amountof time it takes\nto run that programis, in essence, bounded by\nthe number of instructions,because you only execute each\ninstruction at most once.It didn't depend on\nthe size of the input.And you can see that there.I start off, either I take\nthis path and carry on,or I take that path and carry\non, but each box, if you like,", "start": 720.0, "heat": 0.1}, {"text": "gets touched exactly once.On the other hand,\nlook at this one.This depends now\non the size of x.All right?Because what am I going to do?I'm going to come down and\nsay, is ANS squared less thanor equal to x?If it is, I'm going to\ngo around, and executethat statement, check it again,\nand go around and execute that.So I'm going to cycle\naround that loop thereenough times to\nget to the answer,and that number of times is\ngoing to depend on the input,so as I change the\ninput, I'm goingto change the\ncomplexity of the code.Now this happens to be what we\nwould call a linear process,because the number of\ntimes I go around the loopis directly related to\nthe size of the argument.If I double the\nargument, I'm goingto double the number of\ntimes I go around the loop.If I increase it\nby five, I'm goingto increase by five the number\nof times I go around the loop.We'll see later on, there\nare classes of computationthat are inherently\nmuch more complex.We hate them, because\nthey're costly,but they're sometimes\ninherently that way.But you can see the\ncomparison between these two.OK.Now, having done that,\nlet's build this code.Yeah, if my machine will\ncome back up, there we go.So, I'm going to now\ngo ahead and writea little piece of\ncode, and I put it hereand I hope you can actually\nsee these better this time,let me uncomment that region.All right.So, there's basically an\nencapsulation of that code,right?It says-- what, look\nat this, where am I,right here-- I've got some\nvalue for x initially,I'm going to set ANS\nto 0, just like there,and there's my loop, there's the\ntest, which is right like that,is ANS squared less\nthan or equal to x,if it is, there's the block\ncorresponding to the loop,change ANS, and eventually when\nI'm done with all this thing,I'm just going to print ANS out.OK.All right, let me show you one\nother tool that I want to use.Which is, I've written\nthat piece of code,", "start": 840.0, "heat": 0.141}, {"text": "I ought to check it.Well, I could just run it,\nbut another useful thing to dois, I'm, especially as I\nwant to debug these things,is to simulate that code.And I'm going to do this\nbecause, as ProfessorGuttag noticed to me, students\nseem reluctant to do this.I guess it's not\nmacho enough, John,to just, you know, you know,\ngo off and do things by hand,you ought to just run them,\nbut it's a valuable toolto get into, so let\nme do that here.STUDENT: [UNINTELLIGIBLE]PROFESSOR ERIC GRIMSON:\nI'm doing such a great job.I've got to say, when my, I've\ngot two sons, now aged eighteenand twenty, they\nused to think I hadthe coolest job in\nthe world because Icame home covered in chalk.Now they have a different\nopinion that you can probablyfigure out.All right.Simulate the code.What I mean by that is,\npick a simple set of values,and let's walk through\nit to see what happens.And this is useful\nbecause it's goingto allow me to A, make sure\nthat I've got something that'sgoing to terminate,\nit's going to letme make sure that\nin fact I'm doingthe right kinds of updates.I could do this, by the\nway, by running the codeand putting print statements\nin various places as well,but the hand\nsimulation is valuable,so let me just start it.What do I have here?I need the variable,\nANS, I need x,and I need ANS times\nANS, ANS times ANS.Right.Those are the three\nthings that areinvolved in this\ncomputation. and I picksomething reasonably simple.The ANS starts at 0.I set up x, I think,\nto be 16 there.So what does the loop say?I can either look\nat my flow chart,or I can look at the code.If I look at the flow chart,\nit says, I'm at this point.Look at ANS squared.Is it less than or\nequal to-- sorry,first of all, ANS squared is 0,\nis it less than or equal to x,yes.So what do I do?Change ANS.X doesn't change.Back around to the test.What's ANS squared?It's 1.Is it less than or equal to 16?Sure.Run the loop again.ANS becomes 2.X stays 16.ANS squared is 4.Is that less than\nor equal to 16?Yes.Aren't you glad I didn't\npick x equals 500?All right.", "start": 960.0, "heat": 0.117}, {"text": "ANS goes up by 0.ANS squared is nine.Still less than or equal to 16.ANS goes to 4.X stays the same.4 squared is 16.Is 16 less than or equal to 16?Yes.So ANS goes to five.ANS squared becomes 25.Ah!That is now no longer true\nhere, so I print out 5.Right.Sure.Square root of 16 is 5.It's Bush economics.OK?I know.I'm not supposed to make\nbad jokes like that.What happened?Yeah.STUDENT: It doesn't\nstop at the right place.PROFESSOR ERIC\nGRIMSON: It doesn'tstop at the right place.Thank you.Exactly.Right?My bug here is right there.Ah, let me find my cursor.I probably want that.Right?I want less than, rather\nthan less than or equal to.This is an easy bug\nto come up with.But imagine, if you\ndon't do the test,you're going to get answers\nthat don't make any sense.And in fact, if we just\ngo ahead and run this now,hopefully we get\nout-- oops, sorry,I'm going to have to\nchange this quickly,I still have some\nthings uncommentedat the bottom, yeah,\nthere they are,I don't think we\nneed that yet, allright, we will\ncomment those out.OK.So.Why did I do it?It's a simple example, I agree,\nbut notice what I just did.It allowed me to highlight, is\nthe code doing the right thing?I spotted an error here,\nI could have spotted itby running it on different test\nsets, and using prints things,another way of doing\nit, but this ideaof at least simulating\nit on simple exampleslets you check a couple\nof important questions.And in fact, now let me\nask those two questionsabout this piece of code.", "start": 1080.0, "heat": 0.125}, {"text": "First question is, for\nwhat values of integers--we're going to assume integers--\nbut for what values of xdoes this code terminate?And the second question\nis, for what values of xdoes it give me back\nthe right answer?All right, first question.What values of x\ndoes it terminate?Again, assume x is an integer.Well, break it down into pieces.Suppose x is positive.Does it terminate?Sure.All right?Because ANS starts out\nas 0, so ANS squared is0, and each time through\nthe loop, ANS is increasing.That means, at some point, in\nsome finite number of steps,ANS squared has got to get\nbigger than x if x is positive.So for positive\nintegers, it terminates.And it probably, I\nthink we can deduce,returns the right answer here.Right.X is negative.X is -16.Does this code terminate?Boy, I feel like\nArnold Schwarzenegger.Does this terminate?Somebody.STUDENT: [UNINTELLIGIBLE]PROFESSOR ERIC\nGRIMSON: Ah, thank you,so it does terminate, right?You're sitting too far back, let\nme try-- oh, too far!-- Sorry.Come get me one later\nif you can't find it.Yes, it stops at the\nfirst step, right?Let's look at it.It says, if answer, sorry,\nimagine x is -16, ANS is 0,is 0 less than -16, no.So what does it do?It prints out 0.Ah!So that now answers my second\nquestion, it does terminate,but does it give me\nthe right answer?No.Right?It gives me an\nanswer, and imagineI'm using this somewhere else,\nyou know, it's going to go offand say, gee, the\nsquare root of -16 is 0.Well, it really should be a,\nyou know, an imaginary number,but this is not a valuable\nthing to have come back.So that's the second thing\nI've just highlighted here,", "start": 1200.0, "heat": 0.135}, {"text": "is that I now have the\nability to check whether itdoes the right thing.And those are two\nthings that you'dlike to do with every\nlooping construct you write:you'd like to be able to assure\nyourself that they will alwaysterminate, and then the\nsecond thing you'd like to do,is to assure yourself\nthat it does give you backa reasonable answer.We started to talk about\nways to do the former.It's looking at the end test.It's looking at the\nkinds of conditionsyou're going to put in.For the latter, this\nis a place whererunning test cases would do a\ngood job of helping with that.Nonetheless, having done that,\nlet's look at a better wayto write this.Which is right here, it is\nalso, I think, on your sheet,I'm going to uncomment that,\nand comment this one out, yeah.All right?So let's look at this\ncode for a second.Notice what this does.Certainly the heart\nof it, right in here,is still the same thing.But notice what this does.The first thing it does\nis, it says, let's checkand make sure x is greater\nthan or equal to 0.If it isn't, notice\nwhat's going to happen.None of that block is\ngoing to get executed,and it's going to come\ndown here and print outa useful piece of\ninformation, which says, hey,you gave me a negative number.I don't know how to do this.If it is, in fact, positive,\nthen we're going to go in here,but now notice what\nwe're doing here.There is the basic thing\nwe did before, right?We're checking the end\ntest and incrementing,actually I was going to, I\ncommented that out for a reasonyou'll see in a second,\nbut I, normally Iwould keep this on, which\nwould let me, at each step,see what it's doing.If I ran this, it would\nprint out each step.Which is helping me\nmake sure that it'sincrementing the right way.OK, once it gets to the end of\nthat, what's it going to do?It's going to come\ndown here and, oh.What's that doing?Well, I cheated when I started.I said, somebody's giving\nme a perfect square,I'm looking for the\nsquare root of it.But suppose I gave this thing\n15, and asked it to run.It'd still give me an answer.It just would not be the\nanswer I'm looking for.So now, in this case, this code\nis going to, when we get here,", "start": 1320.0, "heat": 0.157}, {"text": "check, and if you haven't\nseen that strange thing there,that exclamation point in\ncomputer-ese called a bang,it says if ANS star ANS is\nnot equal to x, all right?What's that say, it\nsays, I've alreadygotten to the end\nof the loop, I'm nowpast where I wanted\nto be, and I'mgoing to check to make sure\nthat, in fact, this reallyis a perfect square.If it isn't, print\nout something says,ah, you gave me something\nthat wasn't a perfect square.And only if that is true, am I\ngoing to print out the answer.It's the same computation.But this is a nice\nway of writing it,often called\ndefensive programming.And I think we have lots of\nvariations on it-- I don'tknow about John, what\nyour favorite is,for the definition of defensive\nprogramming-- for me it says,make sure that I'm going\nthrough all possible pathsthrough the code, make sure\nI'm printing out, or returningif you like, useful information\nfor each style, sorry,for each path through\nthe code, make surethat for all\npossible inputs thereis a path through\nthe code, or a wayto get through the code,\nthat does not cause an erroror infinite loop.What else would you add, John?PROFESSOR JOHN\nGUTTAG: Well, we'llcome back to this\nlater in the term,and talk in some detail\nabout particular techniques.The basic idea of\ndefensive programmingis, to assume that A, if you're\ngetting inputs from a user,they won't necessarily give\nyou the input you've asked for,so if you ask for\na positive number,don't count on them\ngiving you one, and B,if you're using a piece\nof a program writtenby a programmer\nwho is not perfect,perhaps yourself, there could\nbe mistakes in that program,and so you write your program\nunder the assumption that,not only might the\nuser make a mistake,other parts of your program\nmight make a mistake,and you just put in\nlots of different testsunder the assumption\nthat you'd rather catch", "start": 1440.0, "heat": 0.185}, {"text": "that something has gone wrong,then have it go wrong\nand not know it.And we'll talk later in\nthe term about dozensof different tricks, but the\nmain thing to keep in mindis the general principle\nthat people are dumb.And will make mistakes.And therefore, you\nwrite your programsso that catastrophes don't occur\nwhen those mistakes are made.PROFESSOR ERIC GRIMSON: Good.As John said, we're\ngoing to come back to it.But that's what,\nbasically the goal here.And you saw me put my hands up\nwhen I said stupid programmer?I've certainly written\ncode that has this problem,I've tried to use my own\ncode that has this problem,and good to us,\nright, good hygiene,I'm going to use\nthat word again here,of getting into the habit\nof writing defensive code upfront, it's part of that\ncollection of thingsthat you ought to do,\nis a great thing to do.I stress it in\nparticular because, Iknow you're all going\nto get into this stage;you've got a problem set\ndue in a couple of hours,you're still writing the code,\nyou don't want to waste time,and I'm going to use quotes\non \"waste time\", doing thoseextra things to do the\ndefensive programming,you just want to get\nthe darn thing done.It's a bad habit to get into,\nbecause when you come backto it, it may haunt you\nlater on down the road.So really get into\nthat notion of tryingto be defensive as you program.OK.The other thing I\nwant to say here,is that this style of\nprogram we just wrote,is actually a very common one.And we're going to give it\na nice little name, oftenreferred to as\nexhaustive enumeration.What does that mean?It says, I'm literally walking\nthrough all possible valuesof some parameter, some\nelement of the computation,testing everything until\nI find the right answer.All right, so it's,\nyou know, again, Ican even write that\ndown, essentially saying,try all reasonable values\nuntil you find the solution.", "start": 1560.0, "heat": 0.201}, {"text": "And you might say,\nwell, wait a minute,isn't that going to\nbe really expensive?And the answer is, yeah, I\nguess, if you want to search,you know, all the pages\non Google, one by one,yes, probably, it's\ngoing to take a while.But there are an awful lot of\ncomputations for which thisis the right way to do it.You just want to exhaustively\ngo through things.And just to give\nyou a sense of that,let me show you an example.I'm going to change\nthis, all right?Nice big number.You know, computers\nare fast these days.I can make this\neven bigger, it'sgoing to do it fairly\nquickly, so it reallyis quick to do this.It doesn't mean that exhaustive\nenumeration is a bad idea,it is often the\nright idea to use.So we've seen one\nexample of this,this idea of walking through\nall the integers lookingfor the square root.Let's look at some\nother examples,in order to try and see other\nways in which we could do it.OK.In particular, let's\ngo over to here,and let me show you\na second example.And let me comment that out.Here's another problem\nthat I'd like to solve.Suppose I want to find all\nthe divisors of some integer,I want to figure out\nwhat all the divisors arethat go evenly into it.Again, same kind of reasoning\nsays, given some valuex, I happened to pick a small\none here, what's an easy wayto do this?Well, let's just start at one.That's my variable I'm\ngoing to change and check.Does it divide evenly into x?If it does, print it out.Move on to the next\none, print it out.So again, I can do the\nsame kind of thing here,you can see that,\nin fact, let's justrun it to make sure it\ndoes the right thing, OK?In fact, if I go\nback to the code,what did I decide to do here?I say, starting with\nan initialization of I,there's my first\nstep, as equal to 1,I'm going to walk\nthrough a little loopwhere I check, as\nlong-- first of all,as long as I is less than\nx, so there's my end test,I'm going to do something.", "start": 1680.0, "heat": 0.176}, {"text": "And in this case,\nthe something is,I'm going to look to see\nif I divides x evenly.So I'll remind you\nof that amp-- sorry,that percent sign there,\nthat says if x divided by Ihas a 0 remainder, because this\ngives me back the remainder,if that's equal to 0,\nprint something out.And there's my nice increment.Simple little piece of code.Notice again, exactly\nthe same form:I picked the thing\nI wanted to vary,I initialized it\noutside the loop,I have a test to\nsee when I'm done,and then I've got a\nset of instructionsI'm doing every time\ninside the loop.In this case, it's doing\nthe check on the remainderand printing them out.And when I'm done\nwith the whole thing,before I end the\nincrement of the variable,you know, when I'm done, I'm\njust not returning anythingout.OK.So now you've seen\ntwo simple examples.Let me generalize this.In this case, my incrementer\nwas just adding 1 to an integer,it's a pretty\nstraightforward thing to do.But you can imagine\nthinking about this a littledifferently.If I somehow had a collection,\nan ordered collection of allthe integers, from\n1 to 10, I couldimagine doing the same thing,\nwhere now what I'm doingis, I'm starting with the first\nelement of that collection,doing something, going\nto the next element,doing something, going to the\nnext element, doing something,I'm just walking through\nthe sequence of elements.Right?And I haven't said yet, how\ndo I get that collection,but you could\ncertainly conceptualizethat, if I had that collection,\nthat would be nice thing to do.That is a more common pattern.That is basically saying,\ngiven some collection of data,I want to have again a\nlooping mechanism, wherenow my process is, walk\nthrough this, the collection,one element at a time.And for that, we have\na particular construct,called a FOR loop.It's going to do\nexactly that for us.It's going to be more\ngeneral than this,and we're going to\ncome back to that,in fact, Professor Guttag's\ngoing to pick this upin a couple of lectures,\nbut we can talk right nowabout the basic form.The form of a FOR\nloop says, FOR,and I'm going to put\nlittle angle braces in hereagain, to say,\nfor some variable,like a name I want to get\nto it, in some collection,", "start": 1800.0, "heat": 0.177}, {"text": "and then I have a block of code.And what it's saying\nsemantically is,using that variable\nas my placeholder,have it walk through\nthis collection,starting at the first thing,\nexecute that code, thenthe next thing, execute\nthat code, and so on.One of the advantages\nof this is,that I don't have to\nworry about explicitlyupdating my variable.That happens for\nme automatically.And that's very\nnice, because thisallows me to be sure that my\nFOR loop is going to terminate.And because, as long as\nthis collection is finite,this thing is just\ngoing to walk through.All right?So, if I show you,\nfor example, I'mgoing to comment this one\nout in the usual manner,and let's look at\nuncommenting that, thereis the same piece of code.Now, I slung something by\nyou, or snuck somethingby you, which is,\nI hadn't said howto generate the set of\nintegers from 1 to 10.So, range is a built-in\nPython function.I'm going to come back\nto it in a second.For now, just think\nof it as saying, itgives you all the integers from\n1 up to, but not including, x.OK.But now you can see the form.This now says, OK, let I start\nas the first thing in there,which is 1, and then do\nexactly as I did before,the same thing, but\nnotice I don't needto say how to increment it.It's happening\nautomatically for me.OK.In fact, if I run it,\nit does the same thing,which is what I would expect.OK.Now, the advantage of the FOR,\nas I said, is that it has,then, if you like, a\ncleaner way of reading it.I don't have to worry\nabout, do I initialize it,did I forget to initialize\nit outside the loop,", "start": 1920.0, "heat": 0.117}, {"text": "it happens automatically\njust by the syntax of it,right there, that's going to\nstart with the first element.I don't have to\nworry about, did Iremember to put\nthe incrementer in,it's going to automatically\nwalk it's way through there.Second advantage of the FOR\nis, that right now, we'rethinking about it just as\na sequence of integers.We could imagine it's just\ncounting its way through.But we're going to\nsee, very shortly,that in fact those collections\ncould be arbitrary.We're going to have other\nways of building them,but it could be a collection\nof all the primes.Hm.There's an interesting\nthing to do.It could be a collection of,\nah, you know, I don't know,batting averages of\nsomebody or other.It could be\narbitrary collectionsthat you've come up\nwith in other ways.The FOR is, again, going to let\nyou walk through that thing.So it does not have\nto be somethingthat could be described\nprocedurally, such as add 1just to the previous element.It could be any\narbitrary collection.And if I were to\nuse that again, I'djust put it on your\nhandout, I could go backand rewrite that thing\nthat I had previouslyfor finding the square roots\nof the perfect squares,just using the FOR loop.OK.What I want to do, though,\nis go on to-- or, sorry,go back to-- my divisor example.\n[UNINTELLIGIBLE PHRASE] OK.Try again.I've got a number, I want\nto find the divisors.Right now, what my\ncode is doing is,it's printing them up\nfor me, which is useful.But imagine I actually wanted\nto gather them together.I wanted to collect them, so I\ncould do something with them.I might want to add them up.Might want to multiply\nthem together.Might want to do, I don't\nknow, something else with them,find common divisors, of\nthings by looking at them.I need, in fact, a\nway to make explicit,what I can't do\nthat with range, isI need a way to collect\nthings together.And that's going to be the\nfirst of our more compound datastructures, and we have\nexactly such a structure,and it's called a tuple.This is an ordered\nsequence of elements.Now, I'm going to\nactually add something", "start": 2040.0, "heat": 0.1}, {"text": "to it that's going to make\nsense in a little while,or in a couple of lectures,\nwhich is, it is immutable.Meaning, I cannot change it, and\nwe'll see why that's importantlater on.But for now, tuple is this\nordered sequence of structures.OK.And how do I create them?Well, the representation is,\nfollowing a square bracket,followed by a sequence of\nelements, separated by commas,followed by a closed\nsquare bracket.And that is literally\nwhat I said,it is an ordered\nsequence of elements,you can see where they are.OK?So, let me do a little\nexample of this.If I go back over here,\nlet's define-- er,can't type-- I can look\nat the value of test,it's an ordered sequence.I need to get\nelements out of it.So again, I have a\nway of doing that.In particular, I can ask for\nthe zeroth element of test.OK, notice, I'm putting a\nsquare bracket around it,and it gives me-- I know\nthis sounds confusing,but this is a long tradition,\nit gives me-- ah, yes.STUDENT: [UNINTELLIGIBLE]PROFESSOR ERIC GRIMSON: Sorry?STUDENT: [UNINTELLIGIBLE]PROFESSOR ERIC GRIMSON:\nI created a list here?Ah, thank you.I'm glad you guys\nare on top of it.You're saying I want that.Is that right, John?Yes?OK.Sorry.You're going to see why this\nwas a mistake in a little while.I did not want to\nmake a list, I wantedto create a tuple thank\nyou for catching it.I want parens, not\nsquare brackets there.You'll also see in a little\nwhile why both of these thingswould work this way, but\nit's not what I wanted.OK?So I guess I should\ngo back, and let", "start": 2160.0, "heat": 0.1}, {"text": "me do this correctly this way.Again, I can look at\ntest, and I guess test nowif I want to get the\nelement out-- anglebracket or square bracket?I still want square bracket,\nthat's what I thought-- OK.Now I can go back\nto where I was,which is a strange\npiece of history, whichis, we start counting at 0.So the-- I hate to\nsay it this way,the first element of this tuple\nis at position 0, or index 0,OK?-- so I can get the zeroth\none out, I can get, if I do 2,I get the third thing out,\nbecause it goes 0, 1, 2--notice, however, if I do\nsomething that tries to gooutside the length of the tuple\nit complains, which is right.Tuples? also have\nanother nice structure,which is, I can go the\nother direction, whichis, if I want to get the\nlast element of that tupleI give it a negative index.So, imagine, you think of it\nas, is it starting right, justbefore the beginning\nof the thing,if I give it a 0 it's going\nto take the first one,if I give it a 1, it's\ngoing to take the next one,but I can go the other\ndirection, if I give it a -1,it picks up the last\nelement of the tuple.And again, I can go -2, go back.So this is what we\nwould call selection.We can do things like\nfoo of 0 to get outthe particular element.I can also pick up\npieces of that tuple.Again I want to show\nyou the format here.If I give it this\nstrange expression,this is saying I want to\nget the piece of the tuplestarting at index 1, it's\ngoing to be the second element,and going up to but\nnot including index 3.And it gives me back that piece.Actually a copy of that\npiece of the tuple.", "start": 2280.0, "heat": 0.114}, {"text": "This is called slicing.And then just to complete this.Two other nice things you\ncan do with slices are youcan get the beginning\nor the end of tuple.So, for example, if I say TEST\nand I don't give it a startbut I give it an end, then\nit gives me all the elementsup to that point.And I can obviously\ndo the other directionwhich is I can say skip to index\n2 and all the remaining pieces.This lets me slice\nout, if you like,the front part or back part or\na middle part of the tuple as Igo along.What in the world does that have\nto do with my divisor example?Well, actually, before I do that\nlet me in fact fill in a piecehere.Which is remember I said range\nwe could think of conceptuallyas a tuple -- or sorry as\na sequence of these things.In fact it gives me\nback, now I hate this,it's actually a list\nit's not a tuple.But for now think\nof it as giving youback an explicit version of\nthat representation of allthose elements.You'll see why I'm going\nto make that distinctionin a couple of lectures.All right.What does this have to do\nwith my divisor example?This says I can make tuples,\nbut imagine now going backto my divisor example\nand I want to gather upthe elements as I go along.I ought to be able to do\nthat by in fact just addingthe pieces in.And that's what I'm\ngoing to do over here.Which is, let me comment that\nout, let me uncomment that.And I guess I need the\nsame thing here, right?I need parens not, thank you.", "start": 2400.0, "heat": 0.209}, {"text": "You can tell I'm an\nold time list packer.I really do love these things.And is that right, John?OK, so my apologies that\nyour handout is wrong.I did not think to check\nabout the differencebetween these things.Nonetheless, having\ndone that, let'slook at what I'm going to do.I now want to run\na loop where I needto collect things together.I'm going to give\na name to that.And what you see there is\nI'm going to call divisorsinitially an empty tuple,\nsomething has nothing in it.Right here.And then I'm going to\nrun through the same loopas before, going through this\nset of things, doing the check.Now what I'd like\nto do, every timeI find a divisor I'd like\nto gather it together.So I'm going to create a tuple\nof one element, the value of i.And then, ah, cool.Here's that addition operation\nthat's badly overloaded.This is why Professor\nGuttag likes and I don't.Because given that this is\na tuple and that's a tuple,I can just add them together.That is concatenate them, if\nyou like, one on the end of it.And if I keep doing that,\nwhen I'm done divisorwill be a collection of things.So let me just run it.All right.This is what I get\nfor trying to --STUDENT There\nshould be a commentafter the i in parentheses.PROFESSOR ERIC\nGRIMSON: Thank you.Right there.All right, we'll try this again.OK.And there are the\nset of devices.Thank you.Who did that?Somebody gets, no?Yours?Thank you.Nice catch too by the way.All right, so now that you\ncan see that I can screw upprogramming, which I just did.But we fixed it on the fly.Thank you.What have we done?We've now got a way of\ncollecting things together,right?And this is the first version\nof something we'd like to use.Now that I've gotten\nthat bound as a name,I could go in and\ndo things with that.", "start": 2520.0, "heat": 0.246}, {"text": "I could go in and say give\nme the fourth divisor,give me the second\nthrough fifth divisor.Again as I suggested if\nI've got two integersand I want to find\ncommon divisorsI could take those two\nlists and walk through them.I shouldn't say list,\nthose two tuples,and walk through them to find\nthe pieces that match up.So I've got a way now of\ngathering data together.The last thing I want to\ndo is to say all right,now that we've got this idea\nof being able to collect thingsinto collections, we've got\nthe ability now to use loopingstructures as we did before\nbut we can walk down then doingthings to them, where else might\nwe have this need to do thingswith looping structures?And I'm going to suggest\nyou've already seen it.What's a string?Well at some level it is an\nordered sequence of characters.Right?Now it is not represented\nthis same way.You don't see strings\ninside these open parensand closed parens.You don't see strings\nwith commas between them,but it has the same\nkind of property.It is in ordered\nsequence of characters.We'd like to do the\nsame thing with strings.That is we'd like to be able\nto get pieces of them out.We'd like to be able add them\ntogether or concatenate themtogether.We'd like to be\nable to slice them.And in fact we can.So strings also support things\nlike selection, slicing,and a set of other\nparameters, other properties.And let's just look at that.Again if I go back here,\nlet me comment this out.Right here are a pair of strings\nthat I've set up, s 1 and s 2.Let me just run these.We can go back over here.", "start": 2640.0, "heat": 0.197}, {"text": "So I can see the value\nof s 1, it's a string.I can do things\nlike s 1 and s 2.As we saw before, it simply\nconcatenates them togetherand gives me back\na longer string.But I can also ask\nfor parts of this.So I can, for example, say\ngive me the first elementof string 1, s 1.Ah, that's exactly\nwhat we would havethought if this was represented\nas an ordered sequenceof things.Again I should have said\nfirst, index 0, the first one.I can similarly\ngo in and say I'dlike all the things between\nindex 2 and index 4.And again, remember\nwhat that does.Index 2 says start a 0.1, 2.So a, b, c.And then it goes up to\nbut not including index 4so it gets c and d\nand then it stops.I can similarly, just as\nI did with the tuples,I can ask for everything\nup to some pointor I can ask for everything\nstarting at some pointand carrying on.Now what you're seeing\nhere then is the beginningof complex data structures.And the nice thing\nis that there'sa shared behavior there.Just as I can have tuples as an\nordered collection of things,strings behave as an ordered\ncollection of things.So I can start thinking about\ndoing manipulation on strings.I can concatenate them together,\nI can find pieces insideof them, I could actually\ndo things with them.And let me show you just\na simple little exampleof something I might want to do.Suppose I take, I better\ncomment this one outor it's going to spit it out.Let me comment that out.Suppose I take a number.I'd like to add up all the\ndigits inside of the number.I can use the tools\nI've just describedin order to capture that.So what would I want to do?I'd like to somehow walk\ndown each of the digitsone at a time and add them up.", "start": 2760.0, "heat": 0.1}, {"text": "Ah, that's a looping\nmechanism, right?I need to have some way\nof walking through them.An easy way to do it\nwould be inside of a FOR.And what would I like to do?Well I need to take\nthat number and I'mgoing to turn it into a string.So notice what I'm\ngoing to do right here.I take that number and\nconvert it into a string.That's an example of that type\nconversion we did earlier on.By doing that it makes it\npossible for me to treat itas an ordered sequence\nof characters.And so what's the\nloop going to do?It's going to say\nFOR c, which wasmy name for the\ncharacter in that string.That means starting\nat the first one,I'm going to do something to it.And what am I'm going to do?I'm going to take\nthat character,convert it back into an integer,\nand add it into some digits.And I've done a little\nshort hand here,which is I should have\nsaid some digits isequal to some digits plus this.But that little\nshort hand there isdoing exactly the same thing.It is adding that\nvalue into some digitsand putting it back or signing\nit back into some digits.And I'll walk through\nthat loop and whenI'm done I can print out\nthe total thing does.And if I do that, I get\nout what I would expect.So what have I done?We've now generalized\nthe idea of iterationinto this little pattern.Again as I said this is my\nversion of it, but you can see,every one of the examples\nwe've used so farhas that pattern to it.Figure out what I'm\ntrying to walk through.What's the collection of things\nI'm trying to walk through.Figure out what I want\nto do at each stage.Figure out what the end test is.Figure out what I'm going\nto do at the end of it.I can write it explicitly.I can write it\ninside of a FOR loop.And we've started\nto add, and we'llsee a lot more of this, examples\nof collections of structuresso that we don't just\nhave to do something thatcan be easily described as\nwalking through a set of thingsbut can actually be a collection\nthat you walk through.The last thing I want\nto point out to youis, I started out\nwith this list.I haven't added anything\nto the list, right?I mean I've got a different\nkind of looping mechanism.", "start": 2880.0, "heat": 0.112}, {"text": "I guess I should say\nthat's not quite true.I've added the ability\nto have more complex datastructures here.But I dropped a hint\nin the first lectureabout what you could\ncomputer with things.In fact if you think for\na second about that list,you could ask what can\nI compute with justthat set of constructs?And the answer is\nbasically anything.This is an example\nof what is referredto frequently as being a\nTuring complete language.That is to say with just those\nset of constructs, anythingyou can describe\nalgorithmically you can computewith that set of constructs.So there's good\nnews and bad news.The good news is it\nsounds like we're done.Class is cancelled until final\nexam because this is all youneed to know, right?The bad news is of\ncourse that's not true.The real issue is to figure\nout how to build constructs outof this that tackle\nparticular problems,but the fundamental\nbasics of computationare just captured in\nthat set of mechanisms.All right, we'll\nsee you next time.", "start": 3000.0, "heat": 0.147}]