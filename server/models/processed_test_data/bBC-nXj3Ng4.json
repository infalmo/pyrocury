[{"text": "What does it mean to have a bitcoin?Many people have now heard of bitcoin, that\u2019s\nit\u2019s a fully digital currency, with no governmentto issue it and no banks needed to manage\naccounts and verify transactions.That no one actually knows who invented it.Yet many people don\u2019t know the answer to\nthis question, at least not in full.To get there, and to make sure the technical\ndetails underlying this answer feel motivated,we\u2019re going to walk through step-by-step\nhow you might have invented your own versionof Bitcoin.We\u2019ll start with you keeping track of payments\nwith your friends using a communal ledger.Then, as you trust your friends and the world\nless and less, and if you\u2019re clever enoughto bring in a few tools of cryptography to\nhelp circumvent the need for trust, what youend up with what\u2019s called a \u201ccryptocurrency\u201d.Bitcoin is just the first implemented example\nof a cryptocurrency, and there are now thousandsmore on exchanges with traditional currencies.Walking the path of inventing your own can\nhelp set the foundation for understandingsome of the more recent players in the game,\nand recognizing where there\u2019s room for differentdesign choices.In fact, one of the reasons I chose this topic\nis in response to the unprecedented leap inattention, investment and...well.. hype directed\nat these currencies in just the last year.I won\u2019t comment or speculate on the current\nor future exchange rates, but I think we\u2019dall agree that anyone looking to buy a cryptocurrency\nshould really know what it is.Not just in terms of analogies with vague\nconnections to gold-mining, I mean an actualdirect description of what computers are doing\nwhen sending, receiving and creating cryptocurrencies.One thing worth stressing, by the way, is\nthat even though you and I will dig into theunderlying details here, which takes some\nmeaningful time, you don\u2019t actually needto know those details to use a cryptocurrency,\njust like you don\u2019t need to know the details", "start": 0.0, "heat": 1.0}, {"text": "of what happens under the hood when you swipe\na credit card.Like any other digital payments, there are\nplenty of user-friendly applications thatlet you send and receive these currencies\nvery easily.The difference is that the backbone underlying\nthis is not a bank verifying transactions,but a clever system of decentralized trustless\nverification based on some of the math bornin cryptography.To start, set aside the thought of cryptocurrencies\nfor a few minutes.We\u2019re going to start the story with something\nmore down to earth: Ledgers, and digital signatures.If you and your friends exchange money pretty\nfrequently, paying your share of the dinnerbill and such, it can be inconvenient to exchange\ncash all the time.So you might keep a communal ledger that records\npayments you intend to make in the future.Alice pays Bob $20, Bob pays Charlie $40,\nthings like that.This ledger will be something public and accessible\nto everyone, like a website where anyone cango and just add new lines.At the end of every month, you all look through\nthe list of transactions and tally everythingup.If you\u2019ve spent more than you received,\nyou put that money into the pot, and if you\u2019vereceived more than you spent, you take that\nmuch money out.So the protocol for being part of this system\nlooks something like this: Anyone can addlines to the ledger, and at the end of every\nmonth everyone gets together to settles upwith real money.One problem with a public ledger like this\nis that when anyone can add a line, what\u2019sto prevent Bob from going in and writing \u201cAlice\npays Bob $100\u201d without Alice approving?How are we supposed to trust that all these\ntransactions are what the sender meant forthem to be?This is where the first bit of cryptography\ncomes in: Digital signatures.Like a handwritten signature, the idea here\nis that Alice should be able to add somethingnext to a transaction that proves that she\nhas seen it, and approved of it.And it should be infeasible for anyone else\nto forge her signature.", "start": 120.0, "heat": 0.489}, {"text": "At first it might seem like digital signatures\nshouldn\u2019t even be possible, since whateverdata makes up the signature can just be read\nand copied by any computer, so how do youprevent forgeries?The way this works is that everyone generates\nwhat\u2019s called a public key/private key pair,each of which looks like some string of bits.The private key is sometimes also called the\n\u201csecret\u201d key, so that we can abbreviateit to sk while abbreviating the public key\nas pk.As the names suggest, the secret key is something\nyou should keep to yourself.In the real world, your handwritten signature\nlooks the same no matter what document you\u2019resigning.A digital signatures is much stronger, because\nit changes for different messages.It looks like a string of 1\u2019s and 0\u2019s,\ncommonly something like 256 bits, and alteringthe message even slightly completely changes\nwhat your signature on that message shouldlook like.Formally, producing a signature involves some\nfunction that depends both on the messageitself, and on your private key.The private key ensures that only you can\nproduce the signature, and the fact that itdepends on the message means no one can just\ncopy one of your signatures to forge it onanother message.Hand-in-hand with this is a function to verify\nthat a signature is valid, and this is wherethe public key comes into play.All it does it output true or false to indicate\nif this was a signature created by the privatekey associated with the public key you use\nfor the verification.I won\u2019t go into the details how how exactly\nthese functions work, but the idea is thatit should be completely infeasible to find\na valid signature if you don\u2019t know thesecret key.Specifically there is no strategy better than\njust guessing and checking if random signaturesare valid using the public key until you hit\none that works.", "start": 240.0, "heat": 0.276}, {"text": "There are 2^{256} possible signatures with\n256 bits, and you\u2019d need to find the onethat work.This is a stupidly large number.To call it astronomically large would be giving\nway to much credit to astronomy.In fact, I made a supplemental video devoted\njust to illustrating what a huge number thisis.Let\u2019s just say that when you verify a signature\nagainst a given message and public key, youcan feel extremely confident that the only\nway someone could have produced it is if theyknew the secret key associated with the public\nkey.There\u2019s one slight problem here: If Alice\nsigns a transaction like \u201cAlice pays Bob$100\u201d, even though Bob can\u2019t forge Alice\u2019s\nsignature on new messages, he could just copythat same line as many times as he wants,\nsince the message/signature combination isvalid.To get around that, we make it so that when\nyou sign a transaction, the message has toinclude some unique id associated with that\ntransaction.That way, if Alice pays Bob $100 multiple\ntimes, each transaction requires a completelynew signature.Alright, great, digital signatures remove\na huge aspect of trust in our initial protocol.But even still, this relies on an honors system\nof sorts.Namely, you\u2019re trusting that everyone will\nactually follow through and settle up in cashat the end of each month.But what if, for example, Charlie racked up\nthousands of dollars in debt, and just refusesto show up?The only real reason to revert to cash to\nsettle up is if some people, I\u2019m lookingat you Charlie, owe a lot of money.So maybe you have the clever idea that you\nnever actually have to settle up in cash aslong as you have some way to prevent people\nfrom spending too much more than they takein.What you might do is start by having everyone\npay $100 into the pot, and have the first", "start": 360.0, "heat": 0.27}, {"text": "few lines of the ledger will read \u201cAlice\ngets $100, Bob gets $100, etc.Now, just don\u2019t accept transactions when\nsomeone is spending more than they have onthe ledger.For example, after starting everyone off with\n$100, if the first two transaction are \u201cCharliepays Alice $50\u201d and \u201cCharlie pay Bob $50\u201d,\nif he were to try to add \u201cCharlie pays You$20\u201d, that would be invalid, as invalid\nas if he never signed it.Notice, this means you need to know the full\nhistory of transactions to verify that a newone is valid.And this is, more or less, going to be true\nfor cryptocurrencies as well, though thereis a little room for optimization.What\u2019s interesting here is that this step\nsomewhat removes the connection between theLedger and physical cash.In theory, if everyone in the world used this\nLedger, you could live your whole life justsending and receiving money on this ledger\nwithout ever converting to real US.To emphasize this point, let\u2019s start referring\nto quantities on the ledger as \u201cLedgerDollars\u201d,or LD for short.You\u2019re of course free to exchange LedgerDollars\nfor real US dollars, for example maybe Alicegives Bob a $10 bill in the real world in\nexchange for him adding and signing the transaction\u201cBob pays Alice 10 LedgerDollars\u201d to the\ncommunal ledger.But exchanges like this are not guaranteed\nin the protocol.It\u2019s now more analogous to how you might\nexchange Dollars for Euros or any other currencyon the open market, it\u2019s just its own independent\nthing.This is the first important thing to understand\nabout Bitcoin, or any other cryptocurrency:What it is is a ledger; the history of transactions\nis the currency.Of course, with Bitcoin money doesn\u2019t enter\nthe Ledger with people buying into using cash,", "start": 480.0, "heat": 0.1}, {"text": "I\u2019ll get to how new money enters the ledger\nin just a few minutes.Before that, there\u2019s an even more significant\ndifference between our current system of LedgerDollarshow cryptocurrencies works.So far, I\u2019ve said that this ledger is some\npublic place, like a website where anyonecan add new lines.But this requires trusting a central location.Namely, who hosts that website?Who controls the rules of adding new lines?To remove that bit of trust, we\u2019ll have\neveryone keep their own copy of the ledger.Then to make a transaction, like \u201cAlice\npays Bob 100 LedgerDollars\u201d, you broadcastinto the world for people to hear and record\non their own private Ledgers.But unless we do something more, this system\nwould absurdly bad.How can you get everyone to agree on what\nthe right ledger is?When Bob receives the transaction \u201cAlice\npays Bob 10 LedgerDollars\u201d, how can he besure that everyone else received and believes\nthat same transaction?That he\u2019ll be able to later use those 10\nLedgerDollars to make a trade with Charlie.Really, imagine yourself just listening to\ntransactions being broadcast.How can you be sure that everyone else is\nrecording the same transactions in the sameorder?Now we\u2019ve hit on an interesting puzzle:\nCan you come up with a protocol for how toaccept or reject transactions and in what\norder so that you can feel confident thatanyone else in the world following the same\nprotocol has a personal ledger that looksthe same as yours?This is the problem addressed in the original\nBitcoin paper.At a high level, the solution Bitcoin offers\nto trust whichever ledger has the most computationalwork put into it.I\u2019ll take a moment to explain what exactly\nthat means, which involves this thing calleda \u201cCryptographic hash function\u201d.The general idea we\u2019ll build to is that\nif you use computational work as a basis for", "start": 600.0, "heat": 0.1}, {"text": "what to trust, you can make it so that fraudulent\ntransactions and conflicting ledgers wouldrequire an infeasible amount of computation.Again, this is getting well into the weeds\nbeyond what anyone would need to know justto use a currency like this.But it\u2019s a really cool idea, and if you\nunderstand it, you understand the heart ofbitcoin and other cryptocurrencies.A hash function takes in any kind of message\nor file, and outputs a string of bits witha fixed length, like 256 bits.This output is called the \u201chash\u201d or \u201cdigest\u201d\nof the message, and it\u2019s meant to look random.It\u2019s not random; it always gives the same\noutput for a given input.But the idea is that when you slightly change\nthe input, maybe editing just one character,the resulting hash changes completely.In fact, for the hash function I\u2019m showing\nhere, called SHA256, the way that output changesas you slightly change the input is entirely\nunpredictable.You see, this is not just any hash function,\nit\u2019s a cryptographic hash function.That means it\u2019s infeasible to compute in\nthe reverse direction.If I show you some specific string of 1\u2019s\nand 0\u2019s and ask you to find an input messageso that the SHA256 hash of that message gives\nthis exact string of bits, you will have nobetter method than to guess and check.Again, if you want a feel for just how much\ncomputation would be needed to go through2256 guesses, take a look at the supplement\nvideo.I actually had way too much fun writing that\nthing.You might think you could reverse engineer\nthe desired input by really digging throughthe details of how the function works, but\nno one has ever found a way to do that.", "start": 720.0, "heat": 0.138}, {"text": "Interestingly, there\u2019s no proof that it\u2019s\nhard to compute in the reverse direction,yet a huge amount of modern security depends\non cryptographic hash functions.If you were to take a look at what algorithms\nunderlie the secure connection that your browseris making with YouTube right now, or that\nit makes with a bank, you will likely seea name like SHA256 in there.For right now, our focus will just be on how\nsuch a function can prove that a particularlist of transactions is associated with a\nlarge amount of computational effort.Imagine someone shows you a list of transactions,\nand they say \u201cI found a special number sothat when you put this number at the end of\nlist of transactions, and apply SHA256 theentire thing, the first 30 bits of the output\nare zeros\u201d.How hard do you think it was for them to find\nthat number?For a random message, the probability that\nthe hash happens to start with 30 successivezeros is 1 in 230, which is about 1 in a billion.Because SHA256 is a cryptographic hash function,\nthe only way to find a special number likethis just guessing and checking.So this person almost certainly had to go\nthrough about a billion different numbersbefore finding this special one.And once you know the number, you can quickly\nverify that this hash really does start with30 zeros.In other words, you can verify they they went\nthrough a large amount of work without havingto go through that same effort yourself.This is called a \u201cproof of work\u201d.And importantly, all this work is intrinsically\ntied to that list of transactions.If you change one of the transactions, even\nslightly, it would completely change the hash,so you\u2019d have to go through another billion\nguesses to find a new proof of work, a newnumber that makes it so that the hash of the\naltered list together with this new numberstarts with 30 zeros.", "start": 840.0, "heat": 0.121}, {"text": "So now think back to our distributed ledger\nsituation.Everyone is broadcasting transactions, and\nwe want a way for everyone to agree on whatthe correct ledger really is.As I said, the core idea behind the original\nbitcoin paper is to have everybody trust whicheverledger has the most work put into it.The this works is to first organize a given\nledger into blocks, where each block consistsof a list of transactions, together with a\nproof of work.That is, a special number so that the hash\nof the whole block starts with a bunch ofzeros.For the moment let\u2019s say it has to start\nwith 60 zeros, but later I\u2019ll return backto how you might choose that number.In the same way that a transaction is only\nconsidered valid if it is signed by the sender,a block is only considered valid if it has\na proof of work.Also, to make sure there is a standard way\nto order of these blocks, we\u2019ll make itso that a block has to contain the hash of\nthe previous block.That way, if you change any block, or try\nto swap the order of two blocks, it wouldchange the block after it, which changes that\nblock\u2019s hash, which changes the next block,and so on.That would require redoing all the work, finding\na new special number for each of these blocksthat makes their hashes start with 60 zeros.Because blocks are chained together like this,\ninstead of calling it a ledger, this is commonlycalled a \u201cBlockchain\u201d.As part of our updated protocol, we\u2019ll now\nallow anyone in the world to be a \u201cblockcreator\u201d.What this means is that they\u2019ll listen for\nthe transactions being broadcast, collectthem into a block, then do a whole bunch of\nwork to find the special number that makesthe hash of this block start with 60 zeros,\nand broadcast out the block they found.To reward a block creator for all this work,\nwhen she puts together a block, we\u2019ll allowher to include a special transaction at the\ntop in which she gets, say, 10 LedgerDollars", "start": 960.0, "heat": 0.122}, {"text": "out of thin air.This is called the block reward.It\u2019s a special exception to our usual rules\nabout whether or not to accept transactions;it doesn\u2019t come from anyone, so it doesn\u2019t\nhave to be signed.It also means that the total number of LedgerDollars\nin our economy increases with each new block.Creating blocks is often called \u201cmining\u201d,\nsince it requires a lot of work, and it introducesnew bits of currency into the economy.But when you hear or read about miners, keep\nin mind that what they\u2019re really doing iscreating blocks, broadcasting those blocks,\nand getting rewarded with new money for doingso.From the miners perspective, each block is\nlike a miniature lottery, where everyone isguessing numbers as fast as they can until\none lucky individual finds one that makesthe hash of the block start with many zeros,\nand gets rewarded for doing so.The way our protocol will now work for someone\nusing this system is that instead of listeningfor transactions, you listen for new blocks\nbeing broadcast by miners, updating your ownpersonal copy of the blockchain.The key addition is that if you hear of two\ndistinct blockchains with conflicting transactionhistories, you defer to the longest one, the\none with the most work put into it.If there\u2019s a tie, wait until you hear of\nan additional block that makes one longer.So even though there is no central authority,\nand everyone is maintaining their own copyof the blockchain, if everyone agrees to give\npreference to whichever blockchain has themost work put into it, we have a way to arrive\nat decentralized consensus.To see why this makes for a trustworthy system,\nand to understand at what point you shouldtrust that a payment is legitimate, it\u2019s\nhelpful to walk through what it would taketo fool someone in this system.If Alice wants to fool Bob with a fraudulent\nblock, she might try to send him one that", "start": 1080.0, "heat": 0.155}, {"text": "includes a her paying him 100 LedgerDollars,\nbut without broadcasting that block to therest of the network.That way everyone else thinks she still has\nthose 100 LedgerDollars.To do this, she\u2019d have to find a valid proof\nof work before all other miners, each workingon their own block.And that could happen!Maybe Alice wins this miniature lottery before\nanyone else.But Bob will still be hearing broadcasts made\nby other miners, so to keep him believingthe fraudulent block Alice would have to do\nall the work herself to keep adding blocksto this special fork in Bob\u2019s blockchain\nthat\u2019s different from what he\u2019s hearingfrom the rest of the miners.Remember, as per the protocol Bob always trusts\nthe longest chain he knows about.Alice might be able to keep this up for a\nfew blocks if just by chance she happens tofind blocks more quickly than all of the rest\nof the miners on the network combined.But unless Alice has close to 50% of the computing\nresources among all miners, the probabilitybecomes overwhelming that the blockchain that\nall the other miners are working on growsfaster than the single fraudulent blockchain\nthat Alice is feeding Bob.So in time Bob will reject what he\u2019s hearing\nfrom Alice in favor of the longer chain thateveryone else is working on.Notice that means you shouldn\u2019t necessarily\ntrust a new block that you hear immediately.Instead, you should wait for several new blocks\nto be added on top of it.If you still haven\u2019t heard of any longer\nblockchains, you can trust that this blockis part of the same chain everyone else is\nusing.And with that, we\u2019ve hit all the main ideas.This distributed ledger system based on a\nproof of work is more or less how the Bitcoinprotocol works, and how many other cryptocurrencies\nwork.There\u2019s just a few details to clear up.Earlier I said that the proof of work might\nbe to find a special number so that the hash", "start": 1200.0, "heat": 0.129}, {"text": "of the block starts with 60 zeros.The way the actual bitcoin protocol works\nis to periodically change that number of zerosso that it should take, on average, 10 minutes\nto find a block.So as there are more and more miners on the\nnetwork, the challenge gets harder and harderin such a way that this miniature lottery\nonly has about one winner every 10 minutes.Many newer cryptocurrencies have much shorter\nblock times.All of the money in Bitcoin ultimately comes\nfrom some block reward.These rewards 50 Bitcoin per block.There\u2019s a great site called \u201cblock explorer\u201d\nwhere you can look through the bitcoin blockchain,and if you look at the very first few blocks\non the chain, they contain no transactionsother than the 50 Bitcoin reward to the miner.Every 210,000 blocks, which is about every\n4 years, that reward gets cut in half.So right now, the reward is at 12.5 Bitcoin\nper block, and because this reward decreasesgeometrically over time, there will never\nbe more than 21 million bitcoin in existence.However, this doesn\u2019t mean miners will stop\nearning money.In addition to the block reward, miners can\nalso pick up transactions fees.The way this works is that whenever you make\na payment, you can optionally include a smalltransaction fee with it that will go to the\nminer of whatever block includes that payment.The reason you might do this is to incentivize\nminers to actually include the transactionyou broadcast into the next block.You see, in Bitcoin, each block is limited\nto about 2,400 transactions, which many criticsargue is unnecessarily restrictive.For comparison, Visa processes an average\nof around 1,700 transactions per second, andthey\u2019re capable of handling more than 24,000\nper second.Slower processing on Bitcoin means", "start": 1320.0, "heat": 0.245}, {"text": "higher transactions fees, since that\u2019s what\ndetermines which transactions miners chooseto include in new blocks.This is far from a comprehensive coverage\nof cryptocurrencies.There are many nuances and alternate design\nchoices I haven\u2019t touched here, but hopefullythis can provide a stable Wait-but-Why-style\ntree trunk of understanding for anyone lookingto add a few more branches with further reading.Like I said at the start, one of the motivations\nbehind this video is that a lot of money hasstarted flowing towards cryptocurrencies,\nand even though I don\u2019t want to make anyclaims about whether that\u2019s a good or bad\ninvestment, I do think it\u2019d be healthy forpeople getting into this game to at least\nknow the fundamentals of the technology.As always, my sincerest thanks those of you\nmaking this channel possible on Patreon.I understand not everyone is in a position\nto contribute, but if you\u2019re still interestedin helping out, one the best ways to do that\nis simply to share videos that you think mightbe interesting or helpful to others.I know you know that, but it really does help.I also want to thank Protocol Labs for their\nsupport of this video.This is an organization that runs a number\nof research and development projects, andif you follow the links I\u2019ve left in the\ndescription to read into the details of theseprojects, you\u2019ll notice some strong parallels\nwith the concepts covered in this video.The challenges and benefits of decentralization\nare by no means limited to currency and transactionhistories, and the usefulness of tools from\ncryptography like hash functions and digitalsignatures are likewise much more general.For example, a couple of Protocol Lab\u2019s\nprojects, such as IPFS and Filecoin, centeron distributed filestorage, which opens a\nwhole field of interesting challenges andpossibilities.For any developers out there, Protocol labs\nplaces a high value on open source, so ifyou\u2019re interested you can join what\u2019s\nalready a very strong community of contributors.They\u2019re also looking to hire more full-time\ndevelopers, so if you think you might be agood fit for some of these projects, definitely\napply.", "start": 1440.0, "heat": 0.282}]