[{"text": "The following content is\nprovided under a CreativeCommons license.Your support will help\nMIT OpenCourseWarecontinue to offer high quality\neducational resources for free.To make a donation or\nview additional materialsfrom hundreds of MIT courses,\nvisit MIT OpenCourseWareat ocw.mit.edu.SRINIVAS DEVADAS: Good\nmorning, everyone.So we have a singleton lecture\ntoday on linear programming,which is general purpose\noptimization technique that youcan use to solve a\nwhole bunch of problems,including ones that we've seen\nin 6.046 and previously in 006.And most recently, we\nlooked at max flow.We wouldn't have had\nto go through allof that pain we went through\nto derive a max flow algorithmif you had a linear\nprogramming package handyand all you wanted to do was\nfind the optimum solution.You could have just\nrun the linear programwith an appropriate\ninput, of course, that isderived from the flow network.And you'd get your\noptimal solution.And we'll spend a couple\nof minutes on thatas we look at the power of\nlinear programming in today'slecture.But it's not just max flow.You could do shortest paths.You could do multi\ncommodity max flow,which is more complicated\nthan max flow and a varietyof other problems.So that's that good news.The bad news is\nthat the algorithmsfor linear programming are a\nheck of a lot more complicatedthan max flow.And you can imagine that that\nwould be the case, because it'sa more general purpose and\nmore powerful technique.The history really is that\nit was an open problem.Up until 1979, people did not\nknow if linear programming waspolynomial-time solvable\nuntil Khachiyan came upwith this ellipsoid\nmethod, and then there'sbeen progress sense.", "start": 0.0, "heat": 0.1}, {"text": "But the algorithm we're going\nto describe today and executeon a example input is\na simplex algorithm--the simplex algorithm--\nthat runs in worst caseexponential time.But it's a very\nefficient in practice.And it's held its ground,\neven with the adventof more efficient, from\na theoretical sense,polynomial-time algorithms,\nnamely the ellipsoid method,which actually is not\nthat efficient in practiceand new interior point methods.So a little bit\nof context, let'sjust dive into an\nexample of optimizationin the context of\npolitics and seehow you could formulate\nthis particular problemas a linear program.So how does politics work?You buy elections, right?So you don't want to\nspend a lot of money,so you want to minimize\nthe amount of money thatis required to buy an election.And the way you buy an\nelection is, well, campaign,but you advertise.And it doesn't matter\nfacts that are relevant.As long as you get to the right\ndemographic with the rightmessage, let's\nassume that you'regoing to win the election.So that's our mathematical\nabstraction pf campaigningand politics all in 30 seconds.So how to campaign\nto win an election.And as I said, we're\ngoing to advertise.But you do have a little\nbit of work to do here.That's why you need\nyour campaign manager.And this manager is\ngoing to estimate votes", "start": 120.0, "heat": 0.1}, {"text": "obtained per dollar spent.But that dollar is spent\nadvertising in supportof a particular case,\nor a particular issue.And contradictions are allowed.As long as you're sending\ndifferent messagesto different demographics,\nyou're all good, right?You're assuming\nthat people don'twatch more than one channel.So you're a Fox News guy\nor you're a MSNB guy.You don't do both.So now, we get at this estimate.And it turns into a table.And so you have your policy,\nand you've got your demographic.So you got urban, now\nthink Detroit, suburban,I guess, you could\nLexington where you live,and rural-- I really don't\nhave any idea what that means.But presumably, there's places.And here's our policy.You want to build\nroads-- kind of boring,but some people are interested\nin roads-- gun control,of very sensitive,\nfarm subsidies--", "start": 240.0, "heat": 0.1}, {"text": "you know who's interested\nin that-- and gasoline tax--kind of more, this\nhits your pocket,so more or less everybody's\ninterested in that.So you tell the urban guys\nyou want to build roads,and they don't like you.So you get a minus 2 there.So this can go, you\nadvertise, and it hurts you.You lose votes.Tell the suburban\npeople-- well, typically,it's a situation where\nyou have these nice cars,and you don't like\npotholes, so you like roadsif you live in suburbia.Rural people have 4-by-4's.They don't particularly care.They don't care as much.Gun control-- well, you can\nimagine that urban peoplelike that.Suburban people\nare, hm, OK, meh.And the rural people\nhate it, right?You do not want to advertise on\ngun control in the rural areas.Farm subsidies-- so like,\ndon't want to deal with that.What is a farm?And the rural people\nlove it, right?And then gasoline tax, well,\nurban people are commuting.And, well, they typically\ndon't have a lot of money.So there you go.And those are the numbers.I'm not going to justify\nevery number here.But you could put whatever\nnumbers you what, I mean.So let's move on.This is just a table.It could have positive numbers.It could have negative numbers.And you still want\nto win this election.Regardless of how\ncrazy the demographicsare, how crazy\nyour electorate is,you want to win the election.So as long as you\nhave a great campaignmanager, who can\nget you this table,", "start": 360.0, "heat": 0.1}, {"text": "it's all mathematical\nhere on out.You've just got\nto figure out howyou're going to win a majority.And you could argue that all\nyou want is to win the election.We're going to do something\nslightly different, whichis something that's obviously\ngoing to guarantee victory.But you want to win a\nmajority in every demographic.As the tables may be off by\nlittle, you want to be careful.So the last thing,\nof course, in orderto estimate how much money you\nneed is the population here.So that's votes obtained\nper dollar spent.So you're getting-- it's\n$10 a vote, it's $5 a vote,et cetera.And so we need to\ntranslate that to votes,because that's the dollars.And you got your population\nhere correspondingto each of these areas.And that's what you got here.Majority, we'll assume you\nwin in the case of ties,just to keep these numbers easy,\nso that's just divided by 2.So that's what you got so far.And you want to win by spending\nthe minimum amount of money.So that's our\noptimization problem.So we can take this,\nand we can convert itto a set of linear equations.", "start": 480.0, "heat": 0.1}, {"text": "And that's going to create\nour linear program--our first linear program.And this is our algebraic setup.And so let-- we need\nsome variables here,so let x1, x2, x3, x4 denote\nthe dollars spent per issue.So you got those\nfour issues up there.So let me write that out.It's important to\nmake sure you knowwhat I'm talking about with\nrespect to a particular issue.So those are our four issues.And those are our\nfour variables.So this linear program\nhas four variables.You're trying to discover\nthe values of these variablesto optimize, minimize\nyour cost function.The second thing that\na linear program has--and pretty much the only other\nthing a linear program has--are constraints.And these constraints\nare also linear.It gets much more complicated if\nyou have quadratic constraints,and we won't go there.These constraints that I'm\ngoing to write correspondto this statement here that\nsays you want to majorityin each demographic.So you can imagine that because\nyou have three demographics,you're going to have\nthree constraints.You could have written\nthis differently.There's just any number\nof variants here.And you'll get the sense of\nthat as we go to other examples.But we'll just stick\nto one variant here.So now, I want to\ntranslate everythingthat I've written in English\nover there into algebra.And so I got my minimization\ncriterion-- minimize x1 plus x2plus x3 plus x4-- subject to\nminus 2x1 plus 8x2 plus 0x3", "start": 600.0, "heat": 0.164}, {"text": "plus 10x4 greater than\nor equal to 50,000.And this represents\nthe requirementthat I want a majority in\nthe first demographic, namelythe urban demographic.And so I want at least\n50,000 votes there.And I need to spend\nthe money correspondingto the values of x1\nthrough x4 in such a waythat I get those 50,000 votes.And that represents\nthat, and it's justreading off the minus 2, 8, 0,\nand 10 from the urban column.So those numbers that you see\nhere correspond to the column,because I'm talking about\nthe urban demographic.And you can imagine\nthat the next constraintis going to correspond to the\nmiddle column, and the thirdto the third.So I'll just write that out.I will call this constraint\nthe constraint number1-- I might refer to it\nlater-- 5x1, plus 2x2 plus 0x3,plus 0x4 greater than\nor equal to 100,000.Call this number two.And then finally, 3x1\nminus 5x2 plus 10x3.And that's our set\nof constraints,but there's one\nmore little issuethat we have to be careful\nabout, if you're being precise,and that is that there's no\nnotion of un-advertising.And so you're going to\nspend positive dollars.And so x1 through x4 is\ngreater than or equal to 0.", "start": 720.0, "heat": 0.1}, {"text": "So that's our first\nlinear program.And it came from this\nparticular problem.It'd be wonderful--\nand that's exactly whatwe're going to do for\nthe rest of the lecture--if we could solve\nthis linear programand any possible linear\nprogram in an efficient way.And so the number of\nvariables is small n.And you can imagine that the\nnumber of constraints here,just talking about these\nconstraints, are m constraints.And you certainly want at run\ntime that is polynomial in n.That's our goal here.And as I mentioned\nearly on, it was unclearfor the longest time-- well,\nat least not until 1979,but people had been\nthinking about itfor a long time before\nthat-- as to whether therewas a general algorithm that\nwould solve any linear programin time-polynomial in n.And that was resolved\nin '79 by Khachiyan.We'll look at a algorithm as\nsimplex that in the worst caseruns exponentially in n\nbut is simpler to describeand is very efficient\nin practice.So in our particular problem,\nthis one, it turns out you--and I'm actually going to come\nback to this in a second--but I will just tell\nyou that the optimumfor this particular\nlinear programwith these particular numbers\ncorrespond to these numbershere.So you want to spend something\nof the order of $20,000for-- so there's 100\nhere, so take away the two", "start": 840.0, "heat": 0.1}, {"text": "0's-- so spend something of the\norder of $20,000 for the firstissue, building roads, spend\na bit of money for the secondissue, ignore the third\ncorresponding to farmsubsidies, and spend a bit\nof money for the gasoline taxissue.And these numbers aren't\nimportant, other than the factthat they happen to be optimum.So if you add up these numbers,\nthen x1 plus x2 plus x3 plus x4is something of the\norder of $21,000--$27,000, excuse me,\nthough I'm writing it outas this fraction.So important consideration\nhere is that these values xiare real numbers.That's it.It's not that they\nhave to be integral.Clearly, there\nwere fractions herefor the optimum,\nsome of them anyway.But in general,\nlinear programmingsays the variable\nvalues are real.There's also integer\nlinear programming,which is NP complete, which\nadds the additional constraintthat the xi values are integral.So it turns into\na harder problem.You got polynomial-time\nsolvable if the xi are real.You got NP complete,\nwhich Eric isgoing to talk about on\nThursday, if the values areforced to be integral.So this extra constraint makes\nthings worse from a complexitystandpoint.We won't talk about ILP anymore\nfor the rest of this lecture.So I will come back to this.And I'll talk about\nhow we can showthat this is optimum\nwithout actually goinginto a deep algorithmic dive.", "start": 960.0, "heat": 0.152}, {"text": "But what I want to\ndo just before thatis to give you the\ngeneral formulationof a linear program.It's called the standard\nform in CLRS, also calledthe general form.In some cases, we'll look\nat the standard form for LP.And I want to pop up a\nlevel about this exampleand give you the\ngeneral setting.And we'll focus in on the\ngeneral setting for the mostpart.But what I have here is\nI can either minimizeor maximize-- we\nhad a minimizationproblem-- for the\npolitical problem,minimize the linear\nobjective functionsubject to linear\ninequalities or equations.And the variables,\nthink of x as a vector,it's a column vector, or\nx1, x2, all the way to xn.And the objective function is\nc times x, so that's c1x1 dot,dot, dot, cnxn.And we just had all the\ncoefficients being a 1", "start": 1080.0, "heat": 0.112}, {"text": "over there.And the inequalities,\nthey're the fun part,you can represent\nthem as a matrix A,so A times x less\nthan or equal to b.And notice that this\nis the standard formthat I'm talking about.And now, I have\ndiverged from whatI had here, because\nI had greaterthan or equal to over here.So it turns out, you'll\nsee linear programsin different settings.Sometimes, you'll\nhave minimization.Sometimes, you'll\nhave maximization.Sometimes, you'll have\nless than constraints,less than or equal\nto constraints.Sometimes, you'll have greater\nthan or equal to constraints.Sometimes, you'll have\nequality constraints.We'll spend a little\nbit of time talkingabout how you can transform\nany given linear programinto a standard form.So our standard form is going\nto be something that maximizesthe objective function.So these are our\ninequalities, and they'rerepresented as less\nthan or equal to.That's the standard form.And you want to maximize\nc times x-- again,max for standard-- such that\nthese set of inequalitiestold Ax less than or equal\nto b and x greater thanor equal to 0.So for each of the values that\ncorrespond to the variables,you want these variables\nto be non-negativein the standard form.And you want less than\nor equal to correspondingto each of the\ninequalities-- not equal to,not greater than or equal to,\nbut less than or equal to.And you have this\nlinear cost function,where you could have\narbitrary coefficients,but you're maximizing it.So that's it.", "start": 1200.0, "heat": 0.124}, {"text": "So it's all about polarities,\nnot much more than that.It's just about polarities.And if you get a linear program,\na specific linear program thatdoesn't conform to this-- we'll\nspend a few minutes talkingabout conversions--\nand it's goingto be fairly straightforward.May not be immediately\nobvious, but we'll get to that.Any questions so far?So I want to go\nback to this claimhere, where I said\nthis is optimum.Now without actually\ndescribing an algorithm to you,I'm going to be able\nto show you, convinceyou, that this value\nhere correspondingto whatever it is, 3\nmillion, 3.1 million,is in fact optimum.And this is\nsomething I could do,because linear programming\nhas this powerful notionof duality.So what is that?Well, let's just first look\nat our specific example here.And I'll give you a very\nspecific observation.I'm going to give\nyou what you canthink of as a certificate\nof optimality.I'm going to give you a\ncertificate of optimalityfor that set of numbers.And here's how I'm\ngoing to do it.So is there a short certificate?I can imagine giving\nyou a long proofthat a particular linear\nprogramming algorithm alwaysgives you the minimum\nanswer, the optimum answer,walk through that,\nexecutive that algorithmon this particular\nexample, and then you're", "start": 1320.0, "heat": 0.156}, {"text": "convinced, of course,\nthat the solution isgoing to be optimum.But for this specific example, I\nwant to give you a certificate.This certificate isn't going\nto work for other examples.It's going to short, because it\nonly works with this example.But it won't work\nfor other ones.And so how do I do that?So the answer is,\nin fact, there isa certificate that shows that\nthe LP solution is optimal.And consider that I compute this\nparticular algebraic quantity,where all I've done is I've\ntaken these three equationsand I've multiplied them\nby these magical constants.And so I'm not going\nto tell you how we getthis certificate of optimality.But I'm going to give\nyou the certificate.And it's going to\nbe clear that it'sa certificate of optimality.And if I take these three\nequations here, 1, 2, and 3--actually, I refer to 1, 2, and\n3, they refer to the equations.These are equations\nor constraints.And so I take that.And obviously, if I have\na bunch of equationsand I multiply them out, I\ncan certainly add them up,and I get another\nequation at the end of it.And it's all going to be linear.And if I do that,\nI get x1 plus x2plus 140 divided by\n222 times x3 plus x4.So that's what happens\nto the left hand side.And the right hand\nside is-- you'llrecognize this quantity--\nfive 0's divided by 111.", "start": 1440.0, "heat": 0.24}, {"text": "That's what you get.So now, can someone tell me\nwhy in the last step, whythis is a certificate\nof optimality--the fact that obviously, this\nis all algebra, once I'vediscovered the coefficients--\nso now that I've done this,why have I just shown you that\n3.1 million divided by 111is, in fact, optimum?Can someone tell me this?Look at what you have\non the left hand side.No?Yeah.AUDIENCE: Any other\nsolution would cost morethan the amount put in spent.SRINIVAS DEVADAS:\nAny other solution,but I want you to relate\nthat to-- what am I spending?AUDIENCE: You're\nspending 3,100,000--like, it's the same thing.SRINIVAS DEVADAS: Yeah, but\nI mean, this was a claim.This was a claim-- and at\nthis point, an unproven claim.It was an unproven claim.Yeah, go ahead.AUDIENCE: You know that the left\nhand side of that inequalityis less than or equal to\nx1 plus x2 plus x3 plus x4.SRINIVAS DEVADAS: Correct.And what is x1 plus x2 plus\nx3 plus x4, to be clear?AUDIENCE: The thing\nyou're trying to minimize?SRINIVAS DEVADAS: Yeah,\nexactly, the thingyou're trying to minimize.Exactly.You're almost there.but the key observation here is\nthat x1 plus x2 plus x3 plus x4is greater than or equal to x1\nplus x2-- because all of theseare positive quantities,\nremember-- 140 divided by 222,that's less than 1,\nx3 plus x4, correct?So given that, I can say that\nthis is greater than our equalto 3,100,000 111.", "start": 1560.0, "heat": 0.279}, {"text": "It's because of this\nobservation that it'sa certificate of optimality.She has her head down, OK.Great.So that's pretty cool.Just cooked up these\ncoefficients from somewhere,pulled them out of\na hat, you're allconvinced now that the\nvalue we got was optimum.Did not run an algorithm.Maybe I ran an\nalgorithm-- of course,you ran an algorithm to get\nthose coefficients, right?Well, how did those\ncoefficients appear?So we're not going to spend\na whole lot of time on this.You'll see this\nlikely in a problemset or perhaps in section.But in general, I won't\nworry too much about duality,other than knowing the concept.And this notion of LP\nduality essentiallysays that what just happened\nwasn't a coincidence.You can do this all the time.There will always be,\nfor a linear program,a short certificate\nof optimalitythat corresponds to\nsome set of coefficientsthat you can do this\nparticular math with by takingthese linear constraints,\nmultiplying them out, addingthem up together, and showing\nthat you have a lower boundon-- in the case of this\nproblem-- you can't get lowerthan this.And therefore, for a\nminimization problem,when you reach that, you\nclearly found the optimum.And that's the\nnotion of LP duality.And the basic theorem-- and\nthis is really more as an FYI,we won't prove this\ntheorem-- is that if youhad the standard form for the\nLP, which I'm just writing down", "start": 1680.0, "heat": 0.257}, {"text": "again here, where you had\nAx less than b, x vectorgreater than or equal to 0.So that's identically what\nI had up here, or done here,corresponding to the\nstandard LP form.Well, there's a dual-- this is\nwhat's called the primal form.Usually, if you\ndon't say it, youthink of it as the primal form.And if it's dual,\nyou call it a dual.And this is primal form of LP.This is a dual form\nof LP, or dual LP.And the dual LP\nflips everything.And it's not just\nnegation, but transposed,and the actual variables\nalso swap functionalities.So it's really pretty cool.So your max turns into a min.The c gets replaced by the\nb, which is on the right handside of the inequalities.And your constraints\nare A transpose,y greater than or equal to c.So there's a flip there as well.And y is greater\nthan or equal to 0.So there's a bunch of\nthings that's going on here.And these two problems\nend up being equivalent--the primal and the dual,\nyou can always do this.And essentially, what\nis happening hereis that you're solving these\ntwo problems simultaneously.And there's lots\nof algorithms thatkeep flipping between these\ntwo forms for efficiency.But ultimately, what\nends up happening isyou see that the actual\nconstraints that you had herecorresponding to the b\nconstraints turn into-- the bends up in the\ncost function here.And that's essentially\nwhat's happening out here", "start": 1800.0, "heat": 0.273}, {"text": "with respect to multiplying\nthese equations outwith particular coefficients.So as I said, this is\nreally more as an FYI.This is an obviously interesting\nand an interesting proofof optimality, which is\na different kind of prooffrom proving an\nalgorithm correctand applying that proof\nto a particular instance.That's the kind of\nthing that happensin LP, especially when you flip\nfrom primal and dual forms.So I'll leave it at that.What I'd like to do\nis give you a senseof how we can convert\nto standard form,so you can apply an algorithm\nthat-- for example, youhave a program and it only\nrequires standard form.It runs on standard form.Let's go over it really quickly.This is not going to take\nvery long-- a translationfrom different kinds of LPs--\nand we had a slightly differenthere for our political problem\nthat had a minimization--and how would we convert\nthat to standard form.So it's probably just one\nconversion here that's tricky.So suppose I want to\nminimize minus 2x1 plus 3x2,and I want to convert\nit to standard formal.All I have is a\nstandard LP solver.What do I do?It should be easy.What do I do if I had a\nsolver that was maximizing,but I want to\nminimize a quantity?Just switch the signs, right?So negate to 2x1 minus\n3x2 and maximize.", "start": 1920.0, "heat": 0.161}, {"text": "So that was easy.This is a tricky one.Suppose xj does not have a\nnon-negativity constraint.So it just happens to be the\ncase that it's not dollarsbut it's some other quantity\nthat can go negative.It might be profit or loss.So that quantity\nrepresents profit and loss,so it could go\nnegative if it's loss.So I don't have this constraint\nin my original problemspecification.But my standard form\nand my LP solverrequires this entire\nvector to be non-negative.So I got a problem here.I can't use my standard\nsolver, becauseof this non-negativity\nconstraint.So how do I fix that?How do I turn it into a problem\nthat allows the standard solverto be used?Yeah, go ahead.AUDIENCE: You can break\nit up into two variables,like xj1 and xj2, so\nxj1 minus xj2 equals xj,and both could have [INAUDIBLE].SRINIVAS DEVADAS: Perfect,\ngreat, that's good.Here you go.So what you do here is take\nxj and replace it with,let's say, xj prime\nminus xj double prime.And you have xj prime\ngreater than or equal to 0,xj double prime greater\nthan or equal to 0.But depending on the\nparticular valuesin whatever solution\nyou're exploringare the final solution, you\nmay have an actual xj value", "start": 2040.0, "heat": 0.297}, {"text": "that's negative or positive.So you added an extra variable\nhere to your linear program.And a couple more\nreal quick, supposethat I have an equality\nconstraint correspondingto x1 plus x2 equals 7.What do I do with an\nequality constraintwhere I have x1\nplus x2 equals 7?Yeah, go ahead.AUDIENCE: You can say x1 plus x2\nis greater than or equal to 7,and x1 plus x2 is less\nthan or equal to 7.SRINIVAS DEVADAS: No, you\ncan't do less than or equal to.AUDIENCE: But then you\ncan flip the signs to--SRINIVAS DEVADAS: Ah, then\nyou could flip the signs.So you have two\nsteps there, good.So your less than or equal\nto needs another multiplier.So what you end up doing is\nsomething like x1 plus x2greater than or equal to 7.And then you need-- if you\ndo what the gentleman justsaid-- and flip the sign,\nyou get minus x1 minus x2greater than or\nequal to minus 7.Is that right?No?I messed up?Oh, I want less\nthan or equal to.You're right, you're right.So I need less than or equal\nto-- that's right, of course,thank you.So I need less than or\nequal to in both places.So that's the standard form.I needed less than or equal to.Good.What you've done is increased\nthe number of constraintsby one.Did I get this right\nthe second time?All right.So that's pretty much it.The last thing, which I\nwon't really write out,is, which we've done here\nalready, greater thanor equal to constraint\ntranslated-- I won't give you", "start": 2160.0, "heat": 0.395}, {"text": "an example of this;\nwe have this already--translates to less than or\nequal to by minus 1 multiplied.So we have to\ninvoke that in orderto do the equality anyway.So you're in business.If you have a\nstandard LP solver,you can take pretty much any\noptimization problem thatis linear in terms of\nits objective functionand has linear constraints, and\nyou can transform it into LP.If you had non-linear\nconstraints,there's lots of\nwork that goes onin linearizing those constraints\nand using LP solvers.It's a very practical\nthing to do.It may be something you'll\nend up doing, invokingthese powerful LP solvers--\ntypically, they're commerciallyavailable; the best\nones are commercial--and use it to solve\nyour particular problem.It turns your algorithm design\nproblem into a reduction.And so you'll spend really\nthe next couple of weeksthinking about reductions.We'll start that\nup right now, wherewe'll take existing\ncombinatorialproblems, for which we\nalready know algorithms for,and you're going to\nreduce them to LP.Just to give you a sense\nof what the power of LPis, but this notion of\nreduction is very powerful,you can use it to do\ncomplexity proofs.Here, we're just using it as a\nconvenience in today's lectureto use our LP hammer.So let's say that I have\nour favorite problemof the week, namely max flow.And I want to\nconvert that to LP.So go back a week ago, and right\nabout this time a week ago,and we'd set up the\nmax flow problem.And let's assume that\nwe went back there.And we didn't talk\nabout augmenting paths,and we didn't talk about\nresidual capacities or min-cut", "start": 2280.0, "heat": 0.318}, {"text": "or anything like that,\nbut we knew LP already.And we just want to\nsolve max flow using LP.So let's do that.So this is maximum flow.I'm not going to bother with\nconverting to standard form.We know how to do that,\ngiven what we justdid here, over there.So I'll just do whatever I\nwant to keep things simple.Max flow is obviously\na maximization problem.And using the same\nnotation we've used,it's not going to\nlook like Ax and b,just because I want you to\nrecall what max flow is.And we're going\nto translate that.And the values of\nthese variables--or the names of these variables,\nwhether they're x or f,it should really matter.We know how to do LP\nat this point-- weknow how to formulate LP, I\nshould say, at this point.And we're assuming that\nwe have an LP solver.So what I want to do here\nwith the maximum flow problemis maximizing the flow value.And it's simply,\nyou grab the source,you have a variable associated\nwith the flow from the sourceto every other vertex of v.\nAnd you have to maximize that.So that was the\nsetup for max flow.I'm not changing that.What do you think the three\nconstraints, or whateverset of constraints\nthat we have here,are going to\ncorrespond to the LP?You spent a week\non max flow, lookedat the problem set,\nwhat constraints am Igoing to have to put up there?I'm going to have to put\nup capacity constraints.", "start": 2400.0, "heat": 0.286}, {"text": "That's an obvious one.What is another one?Conservation constraints.All flow entering a node that\nis not the source or the sinkhas to leave it.In the original\nnetwork, is therea concept of negative flow?No, you will define it going\nin the other direction.So we did talk about\nnegative numbers, et cetera,but you're going to have\npositive quantities, especiallyif you look at net flow,\nthe version of the flowthat we zoomed in on in the\nTuesday lecture from last week.And you also have-- in\nthe general setting,you're going to have these skew\nsymmetry constraints as well.So the three things\nthat you need hereare skew symmetry,\nconservation, and capacity.So you have such that f u, v\nequals minus f v, u for all u,v belonging to V.And depending on the kind\nof network that you have,if you constrain\nit to a sudden typethat you don't have\nthese two-way edges,you could certainly\nremove some, if not all,of these skew\nsymmetry constraints.Important ones are\nconservation and capacity.And this should seem\npretty familiar to you.But the key-- the reason\nI'm writing these all outis primarily to ensure that you\nunderstand that these are alllinear constraints.So that's pretty\nmuch the only thingthat you need to observe here.Obviously, these\nconstraints you'veseen many a time from the\ntwo lectures last week.", "start": 2520.0, "heat": 0.265}, {"text": "But notice that\nthey're all linear.And finally, this one is f u,\nv less than or equal to c of u,v for all u, v\nbelonging to cap V.So this is f.That's a variable that's\nless than another constant,clearly linear.Doing a bunch of sums here.I could obviously have\nmultipliers, scalarmultipliers.In this case, for\nconservation, Idon't have scalar multipliers,\nbut clearly linear.Skew symmetry, got\ntwo variables in here.One of them is a negation of\nthe other, clearly linear,so that's why this is an LP.And so you might say,\nwell, I know better,max flow is much more\nefficient than any LPsolver that's out there.And you would be right.If you have a max flow\nproblem of this variety,it's difficult to\nimagine that youwould get performance, empirical\nperformance from running an LPsolver.But this generalization\nof max flowthat's a multi-commodity max\nflow, where you just don't haveone commodity flowing through.You may be counting cars\nand trucks on a road,or there's two different\nkinds of liquidflowing through the same\npipe, whatever, gas or liquid.And so when you have\nmultiple commodities,you may have a linear but\nmore complicated cost functionthat's a function of the flow\nof each of the commodities.And they may have a certain\nweight associated with them.So there's a lot of\nthings that couldbe more general-- there could\nbe more general settingscorresponding to max flow.And I'll just leave\nyou with the thoughtthat you could simply\nhave two commodities.", "start": 2640.0, "heat": 0.228}, {"text": "And we'll just\ncall them 1 and 2.And so now, you have the f1's\nand the c1's and the f2's andthe c2's.Each commodity has\nto be conserved.But what about the capacity?What do you think happens\nwith the capacity?Let's just assume these are\ntwo different kinds of cars.So what would the capacity\nconstraint look like?Yeah.AUDIENCE: You can\nsay either c1 or f1plus f2 is-- for each edge,\nyou can add them togetheror you might take the\nlinear [INAUDIBLE].SRINIVAS DEVADAS:\nExactly, that's right.So good point.It may be the case that I\nhave distinct capacities.And in fact, if you have\ncompletely disjoint problems,you're right in that you\ncan solve them separately.But actually, the\nmore interesting casewould be that you have\na single capacity c,so you'll have-- let me\njust write this out here.If in fact you had\ntwo distinct things,so if you had f1, c1,\nf1, c2, the questionis, do you have two distinct,\ndisjoint optimizations,in which case you just\nuse max flow twice.On other hand, what's\nmore interesting really--and I should've used this\nexample for starters--but here's a better one.You have two commodities\nand a single capacity.So the road is a good example.Both the cars and the\ntrucks share the same road.It has a certain capacity.And now, your\ncapacity constraintis looking like f1\nplus f2 over here.And that's the flow through\nthe particular edge uv.", "start": 2760.0, "heat": 0.388}, {"text": "So you have something\nlike f1 u, v plus f2 u,v is less than or equal to c\nu, v for this total capacity.And that's pretty much it.So that is linear.The nice thing is\nthat it's linear.You could put weights on it.If you wanted to claim\nthat a particular commodity1 uses up-- because\nit's a truck,it uses up more\nspace on the road.And you can accommodate\nfewer of them.You could put a\nmultiplier in there.Still say it's linear.So that's the power of\nby having an LP engine.You could translate\nproblems thatare not exactly max flow,\nthat are multi-commodity flow.You may have additional linear\nconstraints that you could add,and you could still\nuse your LP package.So that's the reason why this\nis interesting and powerful.So that is kind of an obvious,\ncorresponding to max flow.Let's look at something\nthat's a little less obvious.And it's going to be a little\ntricky to convert the shortestpath problem to LP,\nnot a lot of workbut one little\nobservation that'sgoing to be important to make\nin order for the whole thingto flow through or\nactually work out.So we all know the\nshortest path problem.We want to find-- let's just\ncall it the single sourceshortest path problem.You have a specific source.That's going to turn into\nthe point from which you'regoing to start\ncomputing the distance.That's what Dijkstra does,\nand that's Bellman-Ford does.And so this is from vertex\nx-- s, excuse me, s.", "start": 2880.0, "heat": 0.542}, {"text": "And what I want to do here\nis obviously set it upas a set of linear constraints.If I have dv corresponding to\nthe distance from the source--so dv represents the\ndistance from the source--and eventually I want\ndv to be the shortestdistance from the source.That's our notation\nfor shortest paths.dv represents an existing\npath-- it may notbe the shortest path-- from\ns to v, the value of that.But dv monotonically\ndecreases as you run through.It's initially\ninfinity in Dijkstragoing back to Dijkstra.And then we shrink it through\na process of relaxation.Now I want to try and model\nthat-- I want to try and modelall of this as an LP.So it's not\nimmediately obvious--the thing that the\nflow networks had,where we had these constraints.We have capacity constraints\nand conservation constraints.And we could turn that\nconstraint into an inequality.And it was pretty smooth.It's pretty easy.So what I need to do\nhere with shortest pathsis something that's\na little more subtle.So what basic constraint do\nI have in a shortest pathalgorithm?What's an inequality--\nyou remember an inequalityfrom shortest paths that\nwe kept talking about?The triangle inequality.So we're going to have to go\nwith the triangle inequalityand take the triangle inequality\nand use that to create an LPformulation of shortest paths.In particular, what\nwe have here isthat I could write\ndv minus du is", "start": 3000.0, "heat": 0.392}, {"text": "less than or equal to w u, v\nfor all u, v belonging to E.And that's the\ntriangle inequality.And I'm going to\nhave d of s equals 0.That's the only thing\nthat I start with.And so what's happening\nout here is simplythat there's different\nways of gettingto v. And my shortest path\nis going to be the bestway of getting to\nv. So in particular,the way you want to think about\nthis is that if I have a vand I can get to it from,\nlet's just say, u1 and u2.And maybe the\nsource is over here.And these are the only two\nedges that can get to v.So I'm just looking at a\nfairly limited setting.u1 and u2 are going to have\nto be the two vertices.One of these two is\ngoing to get me to v.And I got w u1, v here.And I got w u2, v over here.And so what this\nis saying is, I'mgoing to have to write this\nout for each of these edges.For each of these edges, I'm\ngoing to have this constraint.And that's says that the dv\nvalue, if I want the shortestpath, should obey both\nof these constraints.And if I want to obey both of\nthese constraints, one of themis going to be my\nlimiting constraint.And I'm going to get\nthe min of those two.Correct?So in effect what\nthis translates tois that it's an AND, right?So dv have minus du1 is\nless than or equal to w u1,v. dv minus du2 is less than\nor equal to w u2, v. That's", "start": 3120.0, "heat": 0.896}, {"text": "an AND, because I'm putting both\nof those constraints in here.And that essentially\nmeans that dvis going to be the min\nof the two quantities--the du1 quantity\nplus the w u1, v,and the du2 quantity plus\nthe w u2, v. That make sense?Ask me questions\nif this is unclear.So that simply\ncorresponds to the factthat I'm doing an AND over here.I'm adding all of these\nconstraints in there.So I'm applying the triangle\ninequality to every edge,to every relationship\nbetween a vertex thathas a path ending at it.And you're pushing it\nforward to this vertex v,all the different ways that\nyou can get to v. In this case,there is two sets of ways--\none from u1 and one from u2.And the last step is\na minimization step.So you think you're\ndone or we're done,but we're not quite\ndone, because what'smissing here in terms\nof my formulation of LP?What else do I have to do here?Well, sure, non-negative--\nlet's do that.Sorry?AUDIENCE: Objective.SRINIVAS DEVADAS: Objective,\nwho said objective?You again?So we are missing an\nobjective function.Now shortest path is what\nkind of problem again?Short means minimum?Minimum, height whatever.So do I put a-- what happens\nif I put a minimum in here?And let's say that I\ndo something like sigma", "start": 3240.0, "heat": 0.219}, {"text": "over V, cap V, dv, because\nI want to minimize--or I could pick\na particular one.I could pick a particular single\nsource, single destination,and I put a minimum there.What happens?Does this work?What's the solution\nto this problem,if I minimize the distance?0, because the zero\nvalue is going to work.So there's something-- I\nhaven't put in the constraintthat I do want a path.I do want a path from\ns to v for any v thatmatches one of the\nquantities in the min,because the min says\nI have equality.The big issue here is, this\nis a less than or equal to,and that's why the min doesn't\nwork in the objective function.It's a less than or equal to.But this min over here, which\nis the definition of a shortestpath, is saying that it's\neither equal to this quantityor equal to that quantity.There's an equality over here\nthat is missing from this side.And that's the key observation.Once you observe that,\nthat need equalityfor one of these constituent\nquantities of the min,then you'll see that\nwhat you have to dois simply change\nthis min to a max.So you say, well,\nhow the heck dida min get changed into a max?And I'm not sure I'm going\nto convince every on of youin the next minute or so.But the bottom line\nis, it comes downto I do have a min already\nin my inequalities,because I'm ANDing each\nof these inequalities,and I'm putting down each of\nthose inequalities in there.So each of them is going to\nforce me to find the bestsolution, because they're\ngoing to constrain me to not", "start": 3360.0, "heat": 0.26}, {"text": "go via u2 if u1 is better,\nbecause the other constraintcorresponding to u1 is\ngoing to force me down.So there's an\nadditional min in there,because the ANDing of the\nless than or equal tos.And then in order to actually\nforce the equality for oneof those, I need to push\nup as hard as I can,or as high as I can.So think about it.Play around with a\ncouple of examples.Choose a simple\nexample for starters.And you'll see that this\nis the correct formulation.So you can see that it's not\ncompletely clear in some caseshow to transform problems to LP.But even in those cases,\nsometimes you can.So there's just a ton\nof different problems,a good skill to have\nto be able to takecombinatorial\noptimization engines,like LP or even max flow, and\nbe able to translate problemsto them.It's something that\nyou'll probablydo if you stick to\nalgorithms in your careersor exploiting available\nalgorithm packages.So the last thing I want to do\nhere for the rest of the timeis to give you some sense for\nhow an LP program is actuallyoptimized.How can you possibly take\nthe standard LP formulation,which is a general setting.You know nothing\nabout shortest paths,let's assume, nothing\nabout max flow.It's not about a\nspecific problem.It's about the general setting.How can we solve\nthe general setting,because that was the\ntheme here anyway.You had this engine, and\nyou want to use this engine.But now, how do you\nbuild this engine?So what we're going to do is\nlook at a fairly simple exampleof the simplex algorithm.And this algorithm\nis in the textbook.", "start": 3480.0, "heat": 0.338}, {"text": "And it'll be in my notes.So I'll get as far as I can.It's not that complicated\nto describe, especiallyfrom an example standpoint.But I may not get\nthrough all of the stepsto get you the optimum for\nthis particular examplegiven how much time we have.The most important\nconcept in simplexis yet another form\nof representationfor simplex, which says that\nyou can represent the LP, notin standard form,\nbut in slack form.So I'm going to tell\nyou what slack form is.And then what we're\ngoing to do is,the flow of simplex,\nalgorithmic flow,is to convert one slack\nform into and equivalent.Obviously, you don't want to\ndo something that's incorrect,but it has to be\nan equivalent slackform, whose objective value has\nnot decreased and has likelyincreased.So you're guaranteed that\nthe objective value has notdecreased.You're not guaranteed\nthat it's increased.And then we're going to keep\ngoing till the optimal solutionbecomes obvious.And you might say,\nhow is this obvious?That's the reason why I talked\nabout the short certificateof optimality.It's definitely a relationship\nbetween the terminationof simplex and the fact\nthat you can now say,", "start": 3600.0, "heat": 0.581}, {"text": "hey, I know I'm done\nhere, it's kind of obviousthat I can't do any better.And hopefully, you'll see that\nby the end of this lecturein this simple example.So that's it.It's an iterative algorithm.It's exponential,\nunfortunately, because thistakes m plus n, choose n\niterations in the worst case,where n is the\nnumber of variablesand m is the number\nof constraints.Most of the time, it\ndoes a lot better,but that's the only bound\nthat you can actuallyprove in the worst case.And so you're stuck with\nan exponential algorithmif you're using\nsimplex worst case.We won't actually do\nmuch analysis on simplex.It's really out of scope for\n046 in terms of the analysis.The actual algorithm is\ncertainly within scope.So what I want to do is\ngive you some sense for whatthe slack form looks like.And we'll do a couple of\niterations of simplex.And we'll get as far as we can\nbefore the end the lecture.So we'll take a\ndifferent examplefrom our political example.It's similar in size.And I want to explain to\nyou what the slack form isand why it's interesting.So what I want to do is maximize\n3x1 plus x2 plus x3 subjectto the constraints that\nx1 plus x2 plus 3x2is less than or equal to\n30, 2x1 plus 2x2 plus 5x3 isless than or equal to 24,\n4x1 plus x2 plus 2x3 lessthan or equal to 36, and then\nnon-negativity constraints,x1, x2, x3 greater\nthan or equal to 0.", "start": 3720.0, "heat": 0.721}, {"text": "So that's our example problem.I'll leave it up there.You're going to convert\nthis to slack form.And so what is the slack form?We're going to introduce an\nadditional number of variablesthat correspond to the number\nof equations that we have.So we're going to introduce,\nin this case, three new labels,because I have three equations.And the slack for this\nproblem looks like this.I'm going to have z\nequals 3x1 plus x2plus x3, same as before.And then I'm going\nto have variablesthat represent-- these are\ncalled basic variables.And the original variables are\ncalled non-basic variables.So I'm going to add three\nbasic labels, x4, x5,and x6, corresponding to\nthese three constraints.And they're going to\nrepresent slack in the sensethat they're going to\ncorrespond to how much slack youhave in the\ninequalities that youhave in the original problem.So if x4 happens to be\n0, then you're jammed up.You have no slack, because x1\nplus x2 plus 3x3 equals 30.And increasing any one of them\nwill violate the constraint.So that's just simply\nthe notion of slack.It's how much room do you have.x5 is 24 minus 2x1\nminus 2x2 minus 5x3.And the last one\nis 36 minus 4x1.This is very mechanical\nup to this point.And so I'll call this set\nof equations, equation I.And what I'm going\nto do is I'm goingto now work on a space that\ncorresponds to x1, x2, x3, x4,", "start": 3840.0, "heat": 0.425}, {"text": "x5, x6.So I'm going to have\nthese solutions thatnow have six values\nassociated with them,as opposed to just three\nvalues, because I'veadded three variables, the basic\nvariables, to my non-basic set.So the original\nvariables are non-basic,just to differentiate.So so far it's just\nset up its definitions.We can think about up running\nthrough iterations of simplex.It takes about three\niterations herein order to get to the point\nwhere the optimum is obvious.So you're going to convert\nthrough three slack forms.And then finally, when you\nget to this fourth slack form,you see that you have\nan optimal solution.And how does that work?You're going to have the notion\nof a basic solution, wherewe set all non-basic\nvariables to 0.So in this case, what\nwe're going to have--and then we're going to compute\nvalues of the basic variables.So our objective function\nhere is going to be 3 times0 plus 1 times 0 plus 2 times\n0, which is obviously 0.And the values x4,\nof course, is goingto be-- because all of these\nare 0-- is going to be 30.x5 is going to be 24.And x6 is going to be 36.So this is kind of a\ntrivial starting point.", "start": 3960.0, "heat": 0.439}, {"text": "So you can think\nof this as 0, 0, 0,the solution that you're\nlooking at, 30 24, and 36.So that's our starting\npoint, which doesn't reallytell you much.But now comes the\nkey step, wherewe're going to do something\nthat's called pivoting.And in pivoting,\nyou're going to swapa basic able with a\nnon-basic variable.It is a step that requires\nsome intelligence.But the basic step is a swap.So one of the basic\nvariables is goingto become a non-basic\nvariable and vice versa.And how do we select this?Initially, you can kind of\ndo this in an arbitrary way.It gets a little more\nsubtle as you go along.You don't want to do\nthings in a random way.But let's just start with\nwhat pivoting actuallydoes in a more generic setting.The basic step is select a\nnon-basic variable-- let'scall it x sub e-- who's\ncoefficient in the objectivefunction is positive.You can always redefine things\nif you can't find somethinglike that.But we won't go there.And then what we're\ngoing to do iswe're going to increase the\nvalue of x as much as possible.", "start": 4080.0, "heat": 0.682}, {"text": "And we always have\nconstraints, of course.So we can do that\nwithout violatingany of the constraints.And then at this point,\nvariable xe becomes basic.So it's going to turn\ninto the left hand side.It's going to move over.You're going to swap-- the x1\nmight be over here, over here,and you got to rewrite these\nequations so the x1 becomesbasic, for example, over\nto the left hand side,and the variable\nthat it replacedgoes over to the\nright hand side.So you can think of this\nas Gaussian elimination,except with inequalities.There's definitely\nrelationships there,if you recall your\nGaussian elimination.If you don't, don't\nworry about it.So xe becomes basic,\nand some other variablebecomes non-basic.The values of other\nbasic variablesand the objective\nfunction may change.So we'll do one\npivot step at least,so you get a sense for\nthe algebra involved.And it becomes a\nlittle more concrete.To motivate you\nfurther, you'll bedoing this in problem set\n8 on a different example.So what did I do\nhere is we're goingto select a non-basic variable.So let's just select\nx1, lexicographic order", "start": 4200.0, "heat": 0.278}, {"text": "or numeric order, let's\nselect x1 is selected.That's the non-basic variable.And what I want to do is\nincrease the value of x1.So I want to increase it\nwithout violating constraints.Now, which of these\nconstraints do you thinkis going to cause trouble\nfirst with respectto increasing the value of x1?x1 is now 0.We're at ground level, we have\nall 0, things are feasible.Now, as I start\nincreasing x1, remember,you have non-negativity\nconstraintsassociated with each of\nthe x4 values as well.That's what these basic\nvariables represent.So don't forget the fact that\nthe constraints are violated.You need all the xi's to be\ngreater than or equal to 0.That was true for the\nnon-basic variables.It's also true for\nthe basic variables.So a violation of a\nconstraint impliesthat one of the currently\nbasic variables goes negative.That's exactly equivalent\nto the original inequalitynot being satisfied.So which of these\nconstraints, do you think,is going to cause trouble here?Just look at it, and should\nbe able to look at the threeequations and tell me, as\nI increase the value of x1,where am I going\nto hit my limit?x6, yes, absolutely correct.So that's because\nof the minus 4 here.This is a big multiplier.I got a minus 1 here, a minus\n2 here, and a minus 4 here.And if we just look at 4, the\nmagnitudes, 4 is bigger than 2and is bigger than\n1, so it's goingto be that third constraint.So third constraint--\nyou can obviously", "start": 4320.0, "heat": 0.345}, {"text": "compute this numerically\nor mechanically.It was just easier to do this in\nthis example by eyeballing it.And so third constraint\nis the tightest one.And it limits how much\nwe can increase x1.So I'm going to\ndo my second stepup there, which\ncorresponds to rewritingx1 as these other variables.And now, I got x1 on the\nleft hand side and x6on the right hand side.And now, it's just merely\na matter of substitution.Once I've done this, I'm just\ngoing to jam through and go inand I'm going to rewrite\nthe other equations with x6on the right hand side.And that is, I'm\ngoing to replace x1with the eyeball equation.And that's really a\nsimple substitution.So at this point,\nwhat's happenedis, because the third\nconstraint representing x6was the one that was\nchosen, what's happenedis that x1 and x6 are\ngoing to interchange roles.x1 was non-basic, it's\ngoing to become basic.x6 was basic and is going\nto become non-basic.And that's basically the essence\nof the simplex algorithm.The iteration and then the\nconvergence and all of thatis, as I mentioned, going to\nrequire getting to a pointwhere the optimality\nis obvious, but wewon't be doing any\nproofs correspondingto conversions for simplex\nor any other specific LPtechniques in this class.", "start": 4440.0, "heat": 0.402}, {"text": "Maybe some constraint\ntechniques,I take back what I said, but\ncertainly not for simplex.But I just want to give you\na sense for the flow here.And so let's just go through\nthis last thing here in termsof finishing off the pivot xi's.And I want to show you what\nthe equations look like.And if you just keep doing that,\nat some point, you'll converge.And so what happens\nhere is you have zequals 27 plus x2 divided\nby 4 plus x3 dividedby 2 minus 3x6 divided by 4.x1 equals-- so there's\na bunch of algebrahere that I'm obviously skipping\nover, but it's simple algebra.And I have x4 over\nhere, 21 minus 3x2divided by 4 minus 5x3 divided\nby 2 plus x6 divided by 4,and then one last thing here.So that's my pivot step,\nthat I've flipped x1 and x6.So now you ask,\nwhat was the point?What was the point of this?Well, the point of this was\nthat you actually increasedthe objective function value\nand, in this particular case,quite significantly, while\nmaintaining correctness.And so let me just make these\nobservations and conclude here,because then that gets us to\nthe point where you've seenthe details of one pivot step.And you can imagine applying it\nover and over to a convergence.", "start": 4560.0, "heat": 0.32}, {"text": "And let's just look at the\noriginal basic solution,which as you recall was\n0, 0, 0, 30, 24, and 36.And this is simply\nx1 through x6.This original basic\nsolution suddenlysatisfies these\nequations-- equations II,if you just put them in there.And it makes sense that it will\nhave the objective value of 0,given equivalents,\nbut you can verifythat by saying\nthat you have 27--the original had the\nobjective value of 0,because all the x\nsub 1, x2, x3 were 0,so that was an easy check in the\nset of equations correspondingto the first set, which\nI've erased at this point.But no matter.And if you look at what I\nhave here, I have 36 equals 0.So the objective\nvalue here is 0.It matches what you had before.But the basic\nsolution for II, I'mgoing to set the\nnon-basic values.So what is a solution here?The non-basic values are 0.So the solution is going to\nbe 9, because 9 is non-basic.x1 is now non-basic.x2 and x3 are still basic.And then I have 21 and 6.And x6 now has become basic.So the way I get this solution\nis simply by plugging in 0'son this aside.And I get 9, 21, and 6,\nbecause I just pluggedin 0's on the right hand side.So that's how I\ngot a new solution.And if you look at the\nobjective value for this,", "start": 4680.0, "heat": 0.178}, {"text": "the objective value, you can\nlook at this objective valuesimply by looking at\nthe original problem.And the original problem\nhad 3x1 plus x2 plus x3as the objective value.And so if you go off and you\nsee, well, that you had 0'sfor the other ones,\nbut you have 3 times 9,so we have an\nobjective value of 27.So this flip of\nour pivot basicallygot you from an\nobjective value of 0,while maintaining correctness,\nto an objective value of 27.And you can look at this\nin the notes or in CLRS,but you have to do two\nmore pivots correspondingto two other variables--\nthe same grungystuff that I went through here,\nsubstitution after selection.And the objective value\nis going to increase.And you might ask, how\ndo I know that I'm done?And so that was the\nlast thing here,which is increase the value\nuntil it becomes obvious-- no,this was pivoting, I'm sorry--\nincrease the value pivotuntil it becomes obvious\nwhat the optimum is.And what ends up\nhappening is you end upwith an objective function.In this case, the objective\nfunction mind you,this thing over here is\nthe objective function.And notice that it has\na negative coefficienton the variable\nthat was actuallythe part of the first pivot.So x1 and x6 were a\npart of the first pivot.And this got a\nnegative coefficient.So what ends up happening here\nis you end up getting somethinglike 30 minus something\nminus something", "start": 4800.0, "heat": 0.205}, {"text": "minus something, where you\nhave xi values over here.And when you set these to be\n0, that's the best you can do,because these are all\nnegative quantities.So I'll just leave\nyou with that.Hopefully, you understood\nhow we do the pivoting--sub through it three\ntimes, and thenyou get that objective function,\nand the optimum value is 30.See you next time.", "start": 4920.0, "heat": 0.285}]