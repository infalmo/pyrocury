[{"text": "What we're going to\ntalk about today, is goals.So just by way of a little warm up exercise,\nI'd like you to look at that integration problemover there. The one that's disappeared.So the question is, can you do it in your\nhead? Probably not. The question is, if aprogram can do that, is a program, in any\nsense of the word, intelligent? That's a backgroundtask I'd like you to work on as I talk today.So today we're going to be\nmodeling a little bit of humanproblem solving, the kind thatis required when you do symbolic integration.\nNow, you all learned how to do that. You maynot be able to do that particular problem\nanymore, but you all learned how to integratein high school 1801, or something like that.\nThe question is, how did you do it, and isthe problem solving technique that we are\ntrying to model by building a program thatdoes symbolic integration, is that a common\nkind of description of what people do whenthey solve problems.So the answer to the question is,\nyes. The kind of problem solving you'll seetoday is like generating tests, which you\nsaw last time. It's a very common kind ofproblem solving that we all engage in, that\nwe all engage in without thinking about it,and without having a name for it.But once we get a name for it, we'll get power\nover it. And then we'll be able to deployit, and it will become a skill. We'll not\njust witness it, we'll not just understandit, we'll use it instinctively, as a skill.", "start": 0.0, "heat": 0.1}, {"text": "So there you are, you've got that problem,\nthere's your problem, and what do you do tosolve it? I don't know, look it up in a table?\nYou'll never find it in a table because ofthat minus sign and that 5. So you're going\nto have to do something better than that.So what you're going to do, is what you always\ndo when you see a problem like that. You tryto apply a transform, and make it into a different\nproblem that's easier to solve. And eventually,what you hope is that you'll simplify it sufficiently,\nthat the pieces that you've simplified towill be found in some small table of integrals.\nSo how long is this table? It's not the casethat we're going to look at a table with 388\nelements, because this is not a big tableof integrals. This is what a freshman might\nhave in a freshman's head, after taking acourse in integral calculus.One of the interesting questions is, how many\nelements have to be in that table to get anA in the course? We're interested in how much\nknowledge is involved, that's one of the elementsof catechism that I've listed over there,\nthat will be part of the gold star ideas suiteof the day.So we'd like to take that problem, and find\na way to make it into another problem that'smore likely, or closer to being found in the\ntable. So what we're going to do is very simple,graphically. We're going to take the problem\nwe're given, and convert it into another problemthat's simpler. And we're going to give that\nprocess and name, and we're going to callit problem reduction.And so, in the world of integral calculus,\nthere are all sorts of simple methods, simpletransformations, we can try that will take\na hard problem and make it into an easier", "start": 120.0, "heat": 0.1}, {"text": "problem. And some of these transformations\nare extremely simple and always safe. Someof them are just, well let's try it and see\nwhat happens. But some of them are safe, andI'd like to make a short list of safe transformations\nright now.Now I'm going to be going into some detail.\nAnd that detail will be grungy. And the questionis, why do I do it? And it's educational philosophy,\nis why I do it. So here's the educationalphilosophy. At one level, you want to have\na skill. But if you're going to have a skill,you have to understand it. So if you're going\nto have a skill you have to understand itone level down. If you're going to understand\nit, you have to have witnessed it on a levellower than that.So I'm not just going to talk about the idea\nof problem reduction, because if I were justgoing to do that, then we could all go home\nnow. So I'm going to show you a particularexample of it, so you understand it better,\nand I'm going to show you the detail at aneven lower level than that. So you will witness\nthe stuff that makes it possible, to understandthe stuff that makes it possible, to build\na skill. So that's why I'm going through thegrungy detail.So I don't know, let's see. Maybe we can get\nsome hints from that example, but I wonderif somebody could volunteer a simple transformation\nthat always is a good thing to do. Yes, Sebastian.AUDIENCE: Take the constants out.SPEAKER 1: Take the constants out. So we'll\nmake that number two. And we'll say that theintegral c f of x dx is equal to c times the\nintegral f of x dx. Other suggestions? Yes.AUDIENCE: Trig substitution.SPEAKER 1: Trig substitution. Now this is--\nno, that's for day two. We don't do trig substitution", "start": 240.0, "heat": 0.1}, {"text": "here under stuff that's safe, always works,\nnever any doubt, there are simpler things.These are the safe transformations. What you're\ngiving me is a heuristic transformation. Oftenis helpful, doesn't necessarily always work.\nWe're going to divide our transformationsinto those two categories. So I need another\nsafe one.AUDIENCE: [INAUDIBLE]SPEAKER 1: The architects are sitting over\nthere. Divided not only by nationality, butby course. What?AUDIENCE: The sum of integrals is the integral\nof the sum.SPEAKER 1: The sum of integrals is the integral\nof the sum. Now what's missing? What's numberone? You're probably thinking it's already\nthere, because you've given me the transformationthat involves a constant. And you can think\nof minus 1 as a constant.But whether you use a separate transformation\nor not, of course depends on how you representthe knowledge. And all of this knowledge,\nall of this whole thing, was written in anearly form of Lisp. As a consequence, the\nway in which minus was represented is differentfrom the way minus 1 is represented. So we\nneed one more transformation. Or rather, JimSlagle needed one more transformation, when\nhe wrote his famous transformation program.And that was that if you have the integral\nof minus f of x, that's equal to, minus theintegral of f of x.So that almost completes our safe transformation\nset. There's one more that I'm going to supply", "start": 360.0, "heat": 0.1}, {"text": "you, because I don't think you'd guess it.\nWhy should you? It's number four. There aremore than this, this is a sample. And these\nare the ones we're going to need in orderto solve that problem, by way of illustration.So the fourth one is that, if you have the\nintegral of p of x, over q of x, then youdivide. If you can reach way back into high\nschool and figure out how to divide polynomials.But if the degree of the numerator is greater\nthan the degree of the denominator, then it'sa knee-jerk always win, you must do it, divide\nit out.So this, then, forms the core of an integration\nprogram, that will integrate almost nothing.But actually, almost nothing is integrable\nanyway, so it's a good head start. So let'ssee how we would put this into some kind of\nprocedure. Some kind of framework for deployingthe knowledge that we're beginning to develop.What we're going to do is, apply all safe\ntransforms. That's our first step. Then we'regoing to look in the table, and then we're\ngoing to do a test to see if we're done. Andif we are, we report success. But, we're not\nlikely to get done with just that stuff.", "start": 480.0, "heat": 0.1}, {"text": "But you know what, there was one transformation\nup here, which breaks my little diagram. Whichone is it? It's the third one, right? Because\nthis picture does not reflect what happenswhen you apply number three. Because it breaks\nthe problem up, not into just one problem,but into a whole bunch. So we have to extend\nour graphical device for talking about thisby a little bit, and show what is called an\n\"and node\".So we've got a program core, we've got a table\nof integrals, we've got a few transformations,we've got an architecture, a way of putting\nthat stuff together. And now we can try itout on our sample problem. So let's have a\ngo at that.Let's see, this one immediately transforms\ninto 5x to the fourth over 1 minus x squaredto the 5/2 dx. And that in turn, immediately\ntransforms into the integral of x to the fourthover 1 minus x squared to the 5/2, dx.This program, by the way, is a dawn-age program.\nThis was written by a nearly blind, and subsequentlycompletely blind, graduate student by the\nname of James Slagle in 1960, a long timeago. The reason I gave it to you today is\nbecause, that by describing it, I am givingyou a one-lecture course in artificial intelligence.\nHe anticipated so much of the subsequent 20", "start": 600.0, "heat": 0.1}, {"text": "years, that talking about his program, which\nis possible in one day, is a miniature introductionto the whole field.So Slagle, as he was doing this on an antique\ncomputer, almost no memory, almost no speed,only slightly faster than mice running around\non a treadmill. He was able to write a programthat did extremely well when benchmarked against\nfreshmen. And the way you benchmark againstfreshman, of course, is you give it an examination,\ndrawn from the previous MIT finals for fouror five years, the hardest problems. And this\nwas the hardest problem that it solved.So at this point, with what we've got so far,\nwe would be stuck. We have no transformationthat can take us further, so we need something\nelse. And what we need by way of somethingelse, is some transformations that we will\ndescribe as-- perhaps we'll call them, heuristictransformations. A funny word, meaning a method\nthat often works isn't guaranteed to work.It's not an algorithm in the usual sense that\nwe talk about algorithms. But rather, it'san attempt.So these things I'm going to talk about now,\nare sometimes useful, not always useful. Sometimestake you into a blind alley, don' always work.\nBut you can't get an A in calculus withoutknowing some of them. So you said, some kind\nof trig substitution. So here is some kindof trig substitution. We'll call this heuristic\ntransformation A.You have a function sine x, cosine x, tangent\nof x, cotangent of x, secant of x, and cosecant", "start": 720.0, "heat": 0.1}, {"text": "of x. And we all know from high school trigonometry,\nthat we can rewrite that as a function ofsine x, and cosine x. Or we can rewrite that\nas a function of tangent of x, and cosecantof x. Or we can rewrite that as function of\ncotangent of x, and the secant of x. So that'sa transmission from trigonometric form, into\nanother trigonometric form. It's not alwaysa good idea, sometimes it helps.Well that's just part one of our suite of\nheuristic transformations. Stop. There areothers that we need to have in our repertoire,\nin order to solve the problem. One of themis a family of transformations, which I'll\nshow you only one. It goes like this, if youhave the integral of a function, of the tangent\nof x, then you can rewrite that as the integralof a function of y over 1 plus y squared dy.\nSo that's a transformation from a trigonometric", "start": 840.0, "heat": 0.1}, {"text": "form into a polynomial form. So it gets rid\nof all that trigonometric garbage we don'twant to deal with. And there's a whole family\nof things like that, just as there's a familyof transformations like so, but this is enough\nto give you flavor.Now there's a C that we need as well. And\nthat's going to be your proper knee-jerk reactionwhen you see something of the form 1 minus\nx squared. What do you do when you see that?AUDIENCE: [INAUDIBLE]What's that Rhana?Rhana: 1 + 6  * 1 - 6Well wait a second. We could do that.\nBut there's another thing we can do.Christian, have you got something you can\nsuggest? Where's our Hungarian? Our Turk,our young Turk. Yeah, what do you think?AUDIENCE: I actually don't remember. I mean,\nI think it might have been 10.SPEAKER 1: Well, let's see. Cosine squared\nplus sine squared equals 1. So, what's thatsuggest to you? So it suggests that we make\na transformation that involves x equals siney. So [? Silla ?] doesn't actually have to\nremember that anymore because going forward,she will never have to integrate anything\npersonally in her life, she can just simulatethe program.So these go from polynomial form, back into\ntrigonometric form. So you have three of theseheuristic transformations. We've got four\nsafe transformations. Let's see if we canmake any progress on our integration problem.", "start": 960.0, "heat": 0.1}, {"text": "OK so keeping track of what we've been using,\nthis is safe transformation number one, thisis safe transformation number two. What do\nwe do next? We decided there were no moresafe transformations that apply. But now we\ncan look at our heuristic transformationsand behold, we see what?AUDIENCE: CSPEAKER 1: What?AUDIENCE: Applying transformation C.SPEAKER 1: Transformation C suggests that\nwe do x equals the sine y.And now we get the integral of sine to thefourth y over cosine to the fourth y dy, right.\nAll good, I see some confused, worried, concernedlooks. Maybe I've made a mistake, perhaps\nI should use notes. Well no, wait a minute.For those of you who have a concerned look,\nremember that if x equals a sine y, then dxis equal to cosine y dy. That's why it's cosine\nto the fourth not cosine to the fifth, asyou were perhaps thinking it might be.So now we've made some progress. We look at\nthis, we say, are there any safe transformationsthat apply? And the answer is, no. Now we\nlook for a heuristic transformation that mightapply, and I say, what do you see? Which one?\nWhat's that?AUDIENCE: [INAUDIBLE].", "start": 1080.0, "heat": 0.1}, {"text": "SPEAKER 1: She said something unintelligible,\nbut what she probably said is, that this lookslike a pattern that might match with the heuristic\ntransformation A, right? Because we have afunction in which the variable is buried,\nuniversally in sines, or cosines, or tangents,or cotangents, or secants, or cosecants. And\nwe know we can rewrite that in one of threeways. It's already written as a function of\nsine and cosine. But we can also rewrite thatin terms of tangent and cosecant. Or cotangent\nand secant.So when we do that, we can go this way, and\nwe can get the integral of 1 over the cotangentof x dx. That's g3 up there. Or we can do\nit down this path, and get the integral oftangent of x dx. And of course, those are\nboth to the fourth.But know what, I've broken my little graphical\ndiagram again. Where did it go, it's disappeared.There it is. How have I broken it? Because\nwith transformation A, I've introduced a possibilitythat a particular problem can be transformed\ninto more than one kind of problem, any ofwhich will be the solution to my problem.So far I've got an and node, but now I've\ngot to introduce an or node. Because now we", "start": 1200.0, "heat": 0.1}, {"text": "have an example of something that can be solved\none of two different ways, and we don't carewhich one it is. Now you'll notice that there's\nalready some confusion here, because how canyou tell the difference between an and node\nand an or node. So the universal conventionis, you draw an arc over the and nodes. And\nthat makes it look like an A, so it's easyto remember. So those are and nodes.And now, we have the method of problem reduction,\nand this is sometimes called a problem reductiontree. Sometimes it's called an and/or tree,\nand sometimes it's called a goal tree, becausethis tree of problems is a tree that shows\nhow our goals are related to one another.So these are items for your vocabulary that\nare all synonymous. Problem reduction tree,and/or tree, goal tree, all the same thing.\nNow you have a name for it, you've got somepower over it. So when we get a situation\nlike this, unlike the previous situation,which we suggested might come up in transformation\nA. Let's see, we've got one, two, C, and thisone is A, it's an or node. Which one of these\nproblems do we work on?Well Slegle, who considered himself to be\nmodeling a freshman, modeling the intelligenceof a freshman, modeling something that, after\nall, you have to be pretty smart to do, right.Most people don't know how to do integration.\nEverybody at MIT knows how to do integration.You would think that somebody, therefore,\nthat knows how to do integration is pretty", "start": 1320.0, "heat": 0.1}, {"text": "smart. What would a smart person do, when\nfaced with this choice?Well, a smart person would say, which of these\ntwo problems is easier? So how do you thinkyou might determine which of two, or many\nalgebraic expressions is the easiest to integrate?What's your name?AUDIENCE: Andrew Carrol.SPEAKER 1: Andrew, what do you think?AUDIENCE: Based on whichever one feels more\nfamiliar.SPEAKER 1: Feels.AUDIENCE: Yes.SPEAKER 1: Feels.AUDIENCE: You asked, how would I decide.SPEAKER 1: Yeah, how would you decide? How\nwould you feel it?AUDIENCE: I would feel that the tangent is\nmore familiar.SPEAKER 1: Which one?AUDIENCE: I feel that the tangent [INAUDIBLE].SPEAKER 1: Yeah, but I wonder how we could\nmake it a little bit more precise, this ideaof simplicity. The young Turk has a suggestion.\nWhat?AUDIENCE: I had a suggestion until you said\nthis idea of simplicity. So then I realizedthat what I was about to suggest wasn't going\nto clarify simplicity, but I was going tosay, whichever one we've had more encounters\nwith, or more experience with.SPEAKER 1: Yeah, if there was something here\nwith a hyperbolic tangent, you might say,well, stay away from that. [? Yinid ?]?AUDIENCE: To which one of those the easier\ntransformation is applied on the next step.SPEAKER 1: Like, somebody do a little look\nahead, and see which kind of thing would benext to you? I don't know, maybe. Oh, we've\ngot lots of people, all at the same time.I don't know all your names yet. Shoot. Erica,\nI know you.AUDIENCE: What's look it up in the table and\nsee [INAUDIBLE].SPEAKER 1: Oh, you could look it up in the\ntable and see if something is in it, you coulddo that. But this is tangent to the fourth,\nso that's not in the table. Ariel?AUDIENCE: I choose the one without the reciprocal.SPEAKER 1: Why?AUDIENCE: It is because when people see one\nit's like, oh man, it jut not going to work.SPEAKER 1: Yeah, we're on the right track.\nClaire?", "start": 1440.0, "heat": 0.1}, {"text": "AUDIENCE: On an extremely simple level, I\nchoose whichever one has the least symbolsin it.SPEAKER 1: The fewest symbols in it. Now we're\nreally getting somewhere, because you canmeasure that, right, there's a little program\nWhy Brett, there you are.AUDIENCE: I would say, every [INAUDIBLE] expression\ncan be written as, having a number of functions,we could say all these functions, multiplied\ntogether, divided, and you can just choosewith the least amount of [? iterations ?].SPEAKER 1: Well I heard it, perhaps others\ndidn't but what Brett said, is he suggestedthat we should measure depth of functional\ncomposition. So the number of symbols maynot matter, because if you have x plus x plus\nx plus x, out to a hundred, that would notbe hard to integrate. But if you've got something\nthat is really deeply nested under a lot offunctional compositions, that could be a problem.\nAnd that's in fact, what Slegle decided touse, after trying several alternatives.So if we measure the depth of the functional\ncomposition, this is the winner, and we putthe other one on the shelf, at least for the\nmoment. And now we have tangent to the fourthx dx. Do I need the safe transformation supply?\nNo. Which of the-- you know something hasto apply, otherwise it wouldn't be up here\nas an example. So what of the heuristic transformationsupply? Elliott.AUDIENCE: [INAUDIBLE]SPEAKER 1: Yeah, B bravo. Military\nbackground or something like that. Maybehe flies airplanes. OK so B says, it is in\nfact a function of the tangent. And when wedo that, we've got to make a substitution,\nthat y is equal to the tangent. So that meansthat this becomes the integral of y to the\nfourth over 1 plus y squared. And that's bytransformation B, and the transformation is\ny equals tangent of x. The tangent-- I guess", "start": 1560.0, "heat": 0.1}, {"text": "I've lost track of the fact that I've already\ntransformed a y, but relabeling doesn't matter.All right so that's progress, maybe. But don't\nsee this in any of the heuristic transformations,what do I do now? I didn't have to look in\nthe heuristic transformations, because oneof the safe transformations applies. Because\nthis thing is a rational function and thedegree of the numerator is greater that the\ndegree of the denominator, so I have to divide.And when I divide, and that by the way is\nnumber four, I get what? Is anybody good highschool algebra that can help me out with that?AUDIENCE: Y squared minus 2 plus negative\n2 over 1 plus y squaredSPEAKER 1: Exactly, y squared minus 1 plus\n1 over 1 plus y squared, I think. Now what?Now we're really getting close to getting\nthrough this, because that is a sum. And byvirtue of the fact that it's a sum, that divides\ninto three pieces, and the top piece is theintegral of y squared, the middle piece is\nthe integral of minus 1, and the bottom pieceis the integral of 1 over 1 plus y squared\ndy in all cases.Gosh, if I look this up, I've found it. That's\nup there, that's letter B. So I'm done with", "start": 1680.0, "heat": 0.1}, {"text": "that. This one I can transform again, by virtue\nof 1, and now I get the integral dy. That'sin there, that's B as well. As this one, I\ndon't know. But I'd better keep track of whatI'm doing here. This is in the and node, so\nI've got to do all of those. I can't giveup on that last thing. And that and transformation\nis transformation number 3. So this is inthe table, this is in the table, we still\nhave this to do, but that's C, heuristic transformationC. We have 1, plus y squared, then with the\ntransformation C, with y-- this is y squared--y equals tangent of z And then we get to the\nintegral of dz and that's in the table and,we're done.So now we've solved the problem. It's the\nhardest problem that appeared in that halfdecade on MIT 18 01 finals. This is exactly\nthe problem that was given, except that itstarted here. I put the other two pieces on\njust to illustrate a couple of the transformations.But that's a problem that it solved.And now that we've seen an example, we can\nfinish up what we talked about a little bitago, having to do with the architecture of\nthis thing. So far, all we've done is talkabout the safe transformations, but now we\nknow that if we're not done, we need to finda problem to work on", "start": 1800.0, "heat": 0.1}, {"text": "using that depth of functional composition\nbusiness. And then after that we apply heuristictransformation.And the way Slagle\ndesigned his program is,he found just one problem to work on,\ndid one transformation,then went back around the loop. Because these\nheuristic transformations are a little harderto apply than the safe ones. So I'll given\nyou an accurate portrayal of what this programdid, except for one thing. Which I would like,\nnow, to go back and patch up. And that thingis over here. What to do with something like\nthis. Well we got to that in a board that'sdisappeared, but when we tried to deal with\nthis, we had to find a heuristic transformation.And when we decided to work on this, it must\nhave been the case that this was the simplestproblem at a leaf node that has not yet been\nsolved.So what's the functional composition depth\nof this? It's 3. Back over here, we have somethingthat has a depth of functional composition\nof 2. So when the program actually ran onthis particular problem, it stopped a few\ninches short of the finish line, And wentback and screwed around with that other problem\nfor a little bit, before it gave up and cameback here.So it's always looking across the whole tree,\nthe leaves of the tree. Whenever it has tofind a place to work on with the heuristic\ntransformation, it happened to look at allthe leaves of the tree that had not yet been\ndealt with, tried to find the easiest one,", "start": 1920.0, "heat": 0.1}, {"text": "and that could involve a lot of backing up\nand starting over on a branch of the treethat it had previously ignored. A small detail,\nnot a particularly important one.Now where are we. We've got that guy there.\nWe've got our complete architecture. We'vegot our solved problem. And now we can start\nreflecting on what we've done. We can say,for example, how good an integration program\nis this? And the answer is, it was prettygood. This machine that Slagle was using was\na machine that was over in building 26. Andwe were so proud of it, that it was behind\nglass, and you could go there and watch thetape spin, it was really a delight. 32k of\nmemory, that's 32k of memory. It's amazingthat he was able to do anything with a machine\nof that size.Let's see, let's get us a clean one.\nCan't do board geometry and talk at the sametime. We can now ask some questions about\nhow well the program performed. It was given56 of the hardest problems, and it got 54\nright. What happened when it didn't get theother two? Well, you might be right if you\nsaid, oh it probably ran out of memory, sinceit had 32k. But in fact, it just was lacking\n2 transformations that were needed, in order", "start": 2040.0, "heat": 0.1}, {"text": "to solve the whole entire set of final quiz\nproblems. So when a program fails, that'soften the most interesting question you can\nask. This is an exception. This failed foruninteresting reasons on 2 of the 56 problems\nthat it was given to.And now the next question you can say is,\nwhat is the depth of the tree in the maximalcase? And the answer is, it's that case we\njust worked out. And since I've once againlost the whole tree, I'll tell you that it's\ndepth was 7 when you take off that minus 5.So in the worst case, this thing had to get\ndown seven levels.That's the worst case, a more interesting\nquestion is what was the average depth? Andthat was approximately 3. And now we're beginning\nto say something, not only about Slagle'smodel of how a freshman works, but we're beginning\nto say something about the nature of the domain.In the domain of calculus problems, integrals\nexpressions that are given to freshman, inthat domain, the average depth of problem\nreduction needed to solve the problem was3. So that's not very complicated. If it were\n10, you would say, wow, how can anybody everdo those problems? If it were 5, you'd say,\nwell only people destined to be math professorsare going to get anything right. If it's 3,\nus ordinary mortals can do a pretty good job.Another question of even greater interest\nis, how many branches were unused? Here's", "start": 2160.0, "heat": 0.1}, {"text": "a branch that turned out to be unused, it\ndidn't pursue that. And so you might say,well maybe there are a lot of unused branches.\nMaybe you have to be pretty smart about yourmethod for determining what problem to work\non, because otherwise you'll go down a lotof rat holes.And guess what, here's another statement about\nthe domain. In the domain of problems thatfreshmen could work on a final, the number\nof unused branches is about 1. So that meansthis tree keeps itself together, and doesn't\nrun down to a very large, bushy, useless tree.So this means that the depth of functional\ncomposition, which Brett suggested as a techniquefor recognizing the right problem work on,\nwas a choice that didn't actually matter.Because the tree doesn't grow deep, it doesn't\ngo broad. It doesn't matter what you use todecide what to work on, because in the worst\ncase, you'll just generate a couple of extra,useless nodes. But they very quickly run to\nfind a dead end, so you don't have to do anythingmore with them.So now the next thing we need to do is back\neven further away from this program, and askourselves some questions about the nature\nof what we've been doing. And that bringsme to the things I've got on that upper right-hand\nboard. One of those things as a catechismhaving to do with knowledge.And what we've done informally as we went\nthrough this program was, we've asked questionssuch as, what kind of knowledge is involved\nin doing this? Well knowledge about transformation.Knowledge about how goal trees work and when\nwe're done with a problem. Knowledge aboutwhat things don't need to be transformed,\nbecause you can look them up in a table. That'sthe kind of knowledge that is involved in\ndoing 18 01. And if you do 18 0 circuit theory,", "start": 2280.0, "heat": 0.1}, {"text": "6 0 circuit theory or 6 0 Maxwell's equations,\nthis is the same thing.You have to ask questions of this sort,about the nature of the knowledge involved,\nand question number one is always, what kindof knowledge is involved? Is it Kirchhoff's\nlaws, Maxwell's equations, what is it?The next question is, how is the knowledge\nrepresented? And our answers here are, wellall this stuff, ultimately was represented\nin list best expressions. Some of theknowledge was recorded in a table [? of best\n?] expressions to show what transformationsthere are. There was a similar table of integrals.\nKnowledge about goal trees was embedded inthe procedure, so it was procedurally represented.\nAnd so for each of the categories of knowledge,there's a way it gets represented. How is\nit used? Straightforward, transformationsare used to make the problem simpler. The\ntable is used to trim off and to serve asthe bottom of the tree. Those are the ways\nin which the knowledge is used.And then there's the question of course of,\nhow much knowledge is required. Somethingthat's useful to know if it's late at night,\nyou have 2 finals the next day, and you'renot sure which course you should study. So\nhow much knowledge might you suppose was actuallyin this program? I've shown you a glimpse\nof the kind of knowledge that's involved inthe program. I've answered a little bit of\nquestion 5, what exactly. But how much knowledgewas involved. You might be surprised by the\nanswer.First of all, the table of integrals. I've\nlisted only 3 things there. There are lotsof other things you can think of, like integral\nof e to the x is e to the x. But in the end,what Slagle found is, a table only 26 elements\nwas enough to solve all of these problems.How about the transformations here, the safe\nones, about 12. How about the heuristic ones,", "start": 2400.0, "heat": 0.1}, {"text": "about 12. So just a few bits and pieces of\nknowledge, here and there, are sufficientto do everything you need to do, in order\nto do the integration problems on a calculusfinal. That was a surprise.Another surprise of a similar kind, also about\nknowledge, is that the relationship betweenthe method to be used, and the characteristics\nof the problem, was almost a diagonal table.That means that you could, in this domain,\nmake the right transformation almost all thetime if you're a little bit smart, and never\nback up. That was an observation made by JoelMoses, who became subsequently our provost\nhere at MIT for a while. And he wrote a programthat could solve anything. It would beat the\nmost dedicated mathematicians at integration.And its descendents are in MATLAB today.But this is how it all works. And now you\ncan write one of these things yourself. Partlybecause you now have this catechism. This\nis the kind of stuff you should ask any timeyou're dealing with a new domain. It will\nmake you smarter. And this is of course, metaknowledge, this is knowledge about knowledge.\nSo this tired aphorism isn't quite what weare going to complete ourselves with. We're\ngoing to say that knowledge about knowledgeis where the real power is.Now there's one final thing that this program\ndoes for us. It tells us something about ourappreciation of what it means to be intelligent.\nYou know that in the beginning of this hour,I asked you to think about whether a program\nthat could do symbolic integration would be,", "start": 2520.0, "heat": 0.1}, {"text": "in any way, or should be considered to any\ndegree, intelligent. And I'm imagining thateven in these days of MATLAB, and whatnot,\nmany of you said well, yes, I learned howto do that at MIT, or late in high school,\nso it must be smart.But now that we've completed this discussion,\nI also expect that your feeling of intelligencein this program is somewhat diminished. Because\nwhat happens is that, when we understand howsomething works, it's intelligence seems to\nvanish. You've seen this in your friends,right? They solve some problem, they seem\nsuper smart. Then they tell you how they didit, and they don't seem so smart anymore.So let's conclude our discussion today was\na little story. A long time ago I was talkingwith a student who said, computers cannot\nbe intelligent. And I said, OK, maybe you'reright, but let me show you this program. So\nI showed him the integration program, workingon problems like this. And after I showed\nhim a couple of those examples, he says, well,all right, I guess maybe they can be intelligent.\nI'm learning how to do that, and it's notalways easy. Then I made a fatal mistake.\nI said let me show you how it works, and wespent an hour going through it like this.\nAnd at the end of that time, he turned tome and said, I take it back, it's not intelligent\nafter all. It does integration the same wayI do.", "start": 2640.0, "heat": 0.1}]