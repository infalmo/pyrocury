[{"text": "The following content is\nprovided under a Creative", "start": 1.55, "duration": 2.37}, {"text": "Commons license.", "start": 3.92, "duration": 1.39}, {"text": "Your support will help\nMIT OpenCourseWare", "start": 5.31, "duration": 2.21}, {"text": "continue to offer high quality\neducational resources for free.", "start": 7.52, "duration": 4.09}, {"text": "To make a donation or to\nview additional materials", "start": 11.61, "duration": 2.57}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 14.18, "duration": 3.96}, {"text": "at ocw.mit.edu.", "start": 18.14, "duration": 0.886}, {"text": "CHARLES LEISERSON:\nSo today, we're", "start": 22.233, "duration": 1.417}, {"text": "going to talk about assembly\nlanguage and computer", "start": 23.65, "duration": 2.55}, {"text": "architecture.", "start": 26.2, "duration": 3.27}, {"text": "It's interesting these\ndays, most software courses", "start": 29.47, "duration": 2.43}, {"text": "don't bother to talk\nabout these things.", "start": 31.9, "duration": 3.58}, {"text": "And the reason is because\nas much as possible people", "start": 35.48, "duration": 3.35}, {"text": "have been insulated in writing\ntheir software from performance", "start": 38.83, "duration": 3.66}, {"text": "considerations.", "start": 42.49, "duration": 0.97}, {"text": "But if you want to\nwrite fast code,", "start": 43.46, "duration": 4.97}, {"text": "you have to know what is\ngoing on underneath so you", "start": 48.43, "duration": 3.45}, {"text": "can exploit the strengths\nof the architecture.", "start": 51.88, "duration": 3.3}, {"text": "And the interface, the best\ninterface, that we have to that", "start": 55.18, "duration": 4.23}, {"text": "is the assembly language.", "start": 59.41, "duration": 4.12}, {"text": "So that's what we're\ngoing to talk about today.", "start": 63.53, "duration": 2.64}, {"text": "So when you take a\nparticular piece of code", "start": 66.17, "duration": 4.97}, {"text": "like fib here, to compile\nit you run it through Clang,", "start": 71.14, "duration": 5.73}, {"text": "as I'm sure you're\nfamiliar at this point.", "start": 76.87, "duration": 2.61}, {"text": "And what it produces is\na binary machine language", "start": 79.48, "duration": 5.25}, {"text": "that the computer is\nhardware programmed", "start": 84.73, "duration": 3.78}, {"text": "to interpret and execute.", "start": 88.51, "duration": 3.06}, {"text": "It looks at the bits as\ninstructions as opposed to as", "start": 91.57, "duration": 3.81}, {"text": "data.", "start": 95.38, "duration": 1.17}, {"text": "And it executes them.", "start": 96.55, "duration": 1.56}, {"text": "And that's what we\nsee when we execute.", "start": 101.02, "duration": 4.86}, {"text": "This process is not one step.", "start": 105.88, "duration": 1.86}, {"text": "It's actually there are\nfour stages to compilation;", "start": 107.74, "duration": 4.23}, {"text": "preprocessing, compiling--\nsorry, for the redundancy,", "start": 111.97, "duration": 3.27}, {"text": "that's sort of a\nbad name conflict,", "start": 115.24, "duration": 2.25}, {"text": "but that's what they call it--", "start": 117.49, "duration": 1.68}, {"text": "assembling and linking.", "start": 119.17, "duration": 3.34}, {"text": "So I want to take us\nthrough those stages.", "start": 122.51, "duration": 4.565}, {"text": "So the first thing\nthat goes through", "start": 131.59, "duration": 1.62}, {"text": "is you go through\na preprocess stage.", "start": 133.21, "duration": 3.18}, {"text": "And you can invoke that\nwith Clang manually.", "start": 136.39, "duration": 3.4}, {"text": "So you can say,\nfor example, if you", "start": 139.79, "duration": 1.46}, {"text": "do clang minus e, that\nwill run the preprocessor", "start": 141.25, "duration": 5.4}, {"text": "and nothing else.", "start": 146.65, "duration": 1.31}, {"text": "And you can take a\nlook at the output", "start": 147.96, "duration": 1.57}, {"text": "there and look to see how\nall your macros got expanded", "start": 149.53, "duration": 6.55}, {"text": "and such before the compilation\nactually goes through.", "start": 156.08, "duration": 4.84}, {"text": "Then you compile it.", "start": 160.92, "duration": 1.73}, {"text": "And that produces assembly code.", "start": 162.65, "duration": 4.58}, {"text": "So assembly is a mnemonic\nstructure of the machine code", "start": 167.23, "duration": 5.58}, {"text": "that makes it more human\nreadable than the machine", "start": 172.81, "duration": 2.37}, {"text": "code itself would be.", "start": 175.18, "duration": 2.91}, {"text": "And once again, you can\nproduce the assembly yourself", "start": 178.09, "duration": 4.32}, {"text": "with clang minus s.", "start": 182.41, "duration": 4.01}, {"text": "And then finally,\npenultimately maybe,", "start": 186.42, "duration": 5.24}, {"text": "you can assemble that\nassembly language code", "start": 191.66, "duration": 7.05}, {"text": "to produce an object file.", "start": 198.71, "duration": 2.34}, {"text": "And since we like to have\nseparate compilations,", "start": 201.05, "duration": 2.16}, {"text": "you don't have to\ncompile everything", "start": 203.21, "duration": 1.5}, {"text": "as one big monolithic hunk.", "start": 204.71, "duration": 3.0}, {"text": "Then there's typically\na linking stage", "start": 207.71, "duration": 2.49}, {"text": "to produce the final executable.", "start": 210.2, "duration": 2.13}, {"text": "And for that we are using\nld for the most part.", "start": 212.33, "duration": 3.75}, {"text": "We're actually using\nthe gold linker,", "start": 216.08, "duration": 2.79}, {"text": "but ld is the command\nthat calls it.", "start": 218.87, "duration": 1.66}, {"text": "So let's go through\neach of those steps", "start": 223.58, "duration": 1.65}, {"text": "and see what's going on.", "start": 225.23, "duration": 1.05}, {"text": "So first, the preprocessing\nis really straightforward.", "start": 226.28, "duration": 6.813}, {"text": "So I'm not going to do that.", "start": 233.093, "duration": 1.167}, {"text": "That's just a\ntextual substitution.", "start": 234.26, "duration": 2.49}, {"text": "The next stage is the source\ncode to assembly code.", "start": 236.75, "duration": 4.66}, {"text": "So when we do clang\nminus s, we get", "start": 241.41, "duration": 3.11}, {"text": "this symbolic representation.", "start": 244.52, "duration": 1.8}, {"text": "And it looks something\nlike this, where we", "start": 246.32, "duration": 4.08}, {"text": "have some labels on the side.", "start": 250.4, "duration": 3.375}, {"text": "And we have some operations\nwhen they have some directives.", "start": 257.6, "duration": 4.229}, {"text": "And then we have a\nlot of gibberish,", "start": 261.829, "duration": 2.641}, {"text": "which won't seem like\nso much gibberish", "start": 264.47, "duration": 3.51}, {"text": "after you've played\nwith it a little bit.", "start": 267.98, "duration": 3.18}, {"text": "But to begin with looks\nkind of like gibberish.", "start": 271.16, "duration": 2.77}, {"text": "From there, we assemble\nthat assembly code and that", "start": 277.08, "duration": 4.05}, {"text": "produces the binary.", "start": 281.13, "duration": 2.12}, {"text": "And once again, you can invoke\nit just by running Clang.", "start": 283.25, "duration": 5.14}, {"text": "Clang will recognize that it\ndoesn't have a C file or a C++", "start": 288.39, "duration": 3.72}, {"text": "file.", "start": 292.11, "duration": 0.78}, {"text": "It says, oh, goodness, I've\ngot an assembly language file.", "start": 292.89, "duration": 3.51}, {"text": "And it will produce the binary.", "start": 296.4, "duration": 6.06}, {"text": "Now, the other thing that\nturns out to be the case", "start": 302.46, "duration": 2.73}, {"text": "is because assembly\nin machine code,", "start": 305.19, "duration": 2.76}, {"text": "they're really very\nsimilar in structure.", "start": 307.95, "duration": 5.37}, {"text": "Just things like\nthe op codes, which", "start": 313.32, "duration": 3.69}, {"text": "are the things that are\nhere in blue or purple,", "start": 317.01, "duration": 4.95}, {"text": "whatever that color\nis, like these guys,", "start": 321.96, "duration": 5.1}, {"text": "those correspond to specific\nbit patterns over here", "start": 327.06, "duration": 2.67}, {"text": "in the machine code.", "start": 329.73, "duration": 3.33}, {"text": "And these are the addresses\nand the registers that we're", "start": 333.06, "duration": 3.84}, {"text": "operating on, the operands.", "start": 336.9, "duration": 2.34}, {"text": "Those correspond to other to\nother bit codes over there.", "start": 339.24, "duration": 7.995}, {"text": "And there's very much a--", "start": 347.235, "duration": 2.445}, {"text": "it's not exactly one to one,\nbut it's pretty close one to one", "start": 349.68, "duration": 3.87}, {"text": "compared to if you had C\nand you look at the binary,", "start": 353.55, "duration": 3.21}, {"text": "it's like way, way different.", "start": 356.76, "duration": 3.54}, {"text": "So one of the things that turns\nout you can do is if you have", "start": 363.45, "duration": 4.68}, {"text": "the machine code, and especially\nif the machine code that was", "start": 368.13, "duration": 5.7}, {"text": "produced with so-called\ndebug symbols--", "start": 373.83, "duration": 2.88}, {"text": "that is it was\ncompiled with dash g--", "start": 376.71, "duration": 2.49}, {"text": "you can use this\nprogram called objdump,", "start": 379.2, "duration": 3.84}, {"text": "which will produce a\ndisassembly of the machine code.", "start": 383.04, "duration": 5.64}, {"text": "So it will tell you, OK,\nhere's what the mnemonic, more", "start": 388.68, "duration": 4.89}, {"text": "human readable code is, the\nassembly code, from the binary.", "start": 393.57, "duration": 5.1}, {"text": "And that's really\nuseful, especially", "start": 398.67, "duration": 1.5}, {"text": "if you're trying to do things--", "start": 400.17, "duration": 2.25}, {"text": "well, let's see why do we\nbother looking at the assembly?", "start": 402.42, "duration": 4.06}, {"text": "So why would you want to look\nat the assembly of your program?", "start": 406.48, "duration": 2.907}, {"text": "Does anybody have some ideas?", "start": 409.387, "duration": 1.208}, {"text": "Yeah.", "start": 413.17, "duration": 0.73}, {"text": "AUDIENCE: [INAUDIBLE]\nmade or not.", "start": 413.9, "duration": 1.88}, {"text": "CHARLES LEISERSON:\nYeah, you can see", "start": 415.78, "duration": 1.5}, {"text": "whether certain optimizations\nare made or not.", "start": 417.28, "duration": 2.44}, {"text": "Other reasons?", "start": 419.72, "duration": 0.625}, {"text": "Everybody is going\nto say that one.", "start": 423.01, "duration": 2.62}, {"text": "OK.", "start": 425.63, "duration": 0.5}, {"text": "Another one is-- well, let's\nsee, so here's some reasons.", "start": 430.87, "duration": 4.53}, {"text": "The assembly reveals what the\ncompiler did and did not do,", "start": 435.4, "duration": 3.57}, {"text": "because you can see exactly what\nthe assembly is that is going", "start": 438.97, "duration": 4.54}, {"text": "to be executed as machine code.", "start": 443.51, "duration": 2.15}, {"text": "The second reason,\nwhich turns out", "start": 445.66, "duration": 1.71}, {"text": "to happen more often\nyou would think,", "start": 447.37, "duration": 2.22}, {"text": "is that, hey, guess\nwhat, compiler", "start": 449.59, "duration": 1.84}, {"text": "is a piece of software.", "start": 451.43, "duration": 1.77}, {"text": "It has bugs.", "start": 453.2, "duration": 2.39}, {"text": "So your code isn't\noperating correctly.", "start": 455.59, "duration": 2.57}, {"text": "Oh, goodness, what's going on?", "start": 458.16, "duration": 3.64}, {"text": "Maybe the compiler\nmade an error.", "start": 461.8, "duration": 3.85}, {"text": "And we have certainly found\nthat, especially when you", "start": 465.65, "duration": 3.71}, {"text": "start using some of the less\nfrequently used features", "start": 469.36, "duration": 4.26}, {"text": "of a compiler.", "start": 473.62, "duration": 1.6}, {"text": "You may discover,\noh, it's actually not", "start": 475.22, "duration": 1.67}, {"text": "that well broken in.", "start": 476.89, "duration": 4.23}, {"text": "And it mentions here you\nmay only have an effect when", "start": 481.12, "duration": 4.05}, {"text": "compiling at -03, but if\nyou compile at -00, -01,", "start": 485.17, "duration": 4.38}, {"text": "everything works out just fine.", "start": 489.55, "duration": 1.96}, {"text": "So then it says, gee,\nsomewhere in the optimizations,", "start": 491.51, "duration": 3.41}, {"text": "they did an optimization wrong.", "start": 494.92, "duration": 2.46}, {"text": "So one of the first principles\nof optimization is do it right.", "start": 497.38, "duration": 3.84}, {"text": "And then the second\nis make it fast.", "start": 501.22, "duration": 3.18}, {"text": "And so sometimes the\ncompiler doesn't that.", "start": 504.4, "duration": 4.08}, {"text": "It's also the case that\nsometimes you cannot write code", "start": 508.48, "duration": 4.77}, {"text": "that produces the\nassembly that you want.", "start": 513.25, "duration": 3.61}, {"text": "And in that case,\nyou can actually", "start": 516.86, "duration": 3.36}, {"text": "write the assembly by hand.", "start": 520.22, "duration": 3.6}, {"text": "Now, it used to be\nmany years ago--", "start": 523.82, "duration": 3.03}, {"text": "many, many years ago--", "start": 526.85, "duration": 1.86}, {"text": "that a lot of software\nwas written in assembly.", "start": 528.71, "duration": 3.84}, {"text": "In fact, my first\njob out of college,", "start": 535.23, "duration": 4.51}, {"text": "I spent about half\nthe time programming", "start": 539.74, "duration": 2.3}, {"text": "in assembly language.", "start": 542.04, "duration": 2.94}, {"text": "And it's not as bad\nas you would think.", "start": 544.98, "duration": 3.72}, {"text": "But it certainly is easier\nto have high-level languages", "start": 548.7, "duration": 2.7}, {"text": "that's for sure.", "start": 551.4, "duration": 0.87}, {"text": "You get lot more\ndone a lot quicker.", "start": 552.27, "duration": 2.79}, {"text": "And the last reason\nis reverse engineer.", "start": 555.06, "duration": 2.82}, {"text": "You can figure out what a\nprogram does when you only", "start": 557.88, "duration": 2.88}, {"text": "have access to its\nsource, so, for example,", "start": 560.76, "duration": 2.31}, {"text": "the matrix multiplication\nexample that I gave on day 1.", "start": 563.07, "duration": 5.42}, {"text": "You know, we had the\noverall outer structure,", "start": 568.49, "duration": 2.53}, {"text": "but the inner loop, we could\nnot match the Intel math kernel", "start": 571.02, "duration": 6.93}, {"text": "library code.", "start": 577.95, "duration": 1.74}, {"text": "So what do we do?", "start": 579.69, "duration": 0.9}, {"text": "We didn't have\nthe source for it.", "start": 583.055, "duration": 1.375}, {"text": "We looked to see\nwhat it was doing.", "start": 584.43, "duration": 1.47}, {"text": "We said, oh, is that\nwhat they're doing?", "start": 585.9, "duration": 2.355}, {"text": "And then we're able\nto do it ourselves", "start": 590.79, "duration": 3.54}, {"text": "without having to get\nthe source from them.", "start": 594.33, "duration": 6.36}, {"text": "So we reverse engineered\nwhat they did?", "start": 600.69, "duration": 2.31}, {"text": "So all those are good reasons.", "start": 603.0, "duration": 2.31}, {"text": "Now, in this class, we\nhave some expectations.", "start": 605.31, "duration": 3.33}, {"text": "So one thing is, you know,\nassembly is complicated", "start": 608.64, "duration": 3.87}, {"text": "and you needn't\nmemorize the manual.", "start": 612.51, "duration": 2.7}, {"text": "In fact, the manual\nhas over 1,000 pages.", "start": 615.21, "duration": 6.93}, {"text": "It's like-- but here's\nwhat we do expect of you.", "start": 622.14, "duration": 5.16}, {"text": "You should understand\nhow a compiler implements", "start": 627.3, "duration": 4.92}, {"text": "various C linguistic constructs\nwith x86 instructions.", "start": 632.22, "duration": 4.68}, {"text": "And that's what we'll\nsee in the next lecture.", "start": 636.9, "duration": 3.76}, {"text": "And you should be able\nto read x86 assembly", "start": 640.66, "duration": 2.4}, {"text": "language with the aid of\nan architecture manual.", "start": 643.06, "duration": 2.61}, {"text": "And on a quiz, for example,\nwe would give you snippets", "start": 645.67, "duration": 3.54}, {"text": "or explain what the op\ncodes that are being", "start": 649.21, "duration": 2.4}, {"text": "used in case it's not there.", "start": 651.61, "duration": 2.01}, {"text": "But you should have some\nunderstanding of that,", "start": 653.62, "duration": 2.17}, {"text": "so you can see what's\nactually happening.", "start": 655.79, "duration": 2.55}, {"text": "You should understand the\nhigh-level performance", "start": 658.34, "duration": 2.0}, {"text": "implications of common\nassembly patterns.", "start": 660.34, "duration": 3.39}, {"text": "OK, so what does it\nmean to do things", "start": 663.73, "duration": 4.41}, {"text": "in a particular way in\nterms of performance?", "start": 668.14, "duration": 3.13}, {"text": "So some of them\nare quite obvious.", "start": 671.27, "duration": 1.49}, {"text": "Vector operations\ntend to be faster", "start": 672.76, "duration": 3.09}, {"text": "than doing the same thing with\na bunch of scalar operations.", "start": 675.85, "duration": 5.7}, {"text": "If you do write an assembly,\ntypically what we use", "start": 684.67, "duration": 2.82}, {"text": "is there are a bunch of compiler\nintrinsic functions, built-ins,", "start": 687.49, "duration": 3.94}, {"text": "so-called, that allow you\nto use the assembly language", "start": 691.43, "duration": 5.9}, {"text": "instructions.", "start": 697.33, "duration": 1.86}, {"text": "And you should be after we've\ndone this able to write code", "start": 699.19, "duration": 5.76}, {"text": "from scratch if the\nsituation demands it sometime", "start": 704.95, "duration": 3.617}, {"text": "in the future.", "start": 708.567, "duration": 0.583}, {"text": "We won't do that in\nthis class, but we", "start": 709.15, "duration": 2.07}, {"text": "expect that you will be in a\nposition to do that after--", "start": 711.22, "duration": 4.96}, {"text": "you should get a\nmastery to the level", "start": 716.18, "duration": 2.06}, {"text": "where that would not be\nimpossible for you to do.", "start": 718.24, "duration": 4.1}, {"text": "You'd be able to do that with\na reasonable amount of effort.", "start": 722.34, "duration": 3.88}, {"text": "So the rest of the\nlecture here is", "start": 726.22, "duration": 1.58}, {"text": "I'm going to first start by\ntalking about the instruction", "start": 727.8, "duration": 4.83}, {"text": "set architecture of\nthe x86-64, which", "start": 732.63, "duration": 3.03}, {"text": "is the one that we are\nusing for the cloud machines", "start": 735.66, "duration": 3.3}, {"text": "that we're using.", "start": 738.96, "duration": 2.92}, {"text": "And then I'm going to talk\nabout floating point in vector", "start": 741.88, "duration": 2.78}, {"text": "hardware and then I'm going\nto do an overview of computer", "start": 744.66, "duration": 2.88}, {"text": "architecture.", "start": 747.54, "duration": 1.57}, {"text": "Now, all of this I'm doing--\nthis is software class, right?", "start": 749.11, "duration": 3.62}, {"text": "Software performance\nengineering we're doing.", "start": 752.73, "duration": 2.07}, {"text": "So the reason\nwe're doing this is", "start": 754.8, "duration": 3.24}, {"text": "so you can write code that\nbetter matches the hardware,", "start": 758.04, "duration": 3.57}, {"text": "therefore to better get it.", "start": 761.61, "duration": 1.89}, {"text": "In order to do that, I could\ngive things at a high-level.", "start": 763.5, "duration": 2.4}, {"text": "My experience is\nthat if you really", "start": 765.9, "duration": 1.65}, {"text": "want to understand\nsomething, you", "start": 767.55, "duration": 1.77}, {"text": "want to understand it to\nlevel that's necessary", "start": 769.32, "duration": 3.0}, {"text": "and then one level below that.", "start": 772.32, "duration": 3.06}, {"text": "It's not that you'll necessarily\nuse that one level below it,", "start": 775.38, "duration": 3.14}, {"text": "but that gives you insight as\nto why that layer is what it is", "start": 778.52, "duration": 3.99}, {"text": "and what's really going on.", "start": 782.51, "duration": 1.845}, {"text": "And so that's kind of\nwhat we're going to do.", "start": 784.355, "duration": 1.875}, {"text": "We're going to do\na dive that takes", "start": 786.23, "duration": 1.458}, {"text": "us one level beyond\nwhat you probably", "start": 787.688, "duration": 2.862}, {"text": "will need to know in\nthe class, so that you", "start": 790.55, "duration": 3.24}, {"text": "have a robust foundation\nfor understanding.", "start": 793.79, "duration": 3.54}, {"text": "Does that makes sense?", "start": 797.33, "duration": 3.14}, {"text": "That's my part of my\nlearning philosophy", "start": 800.47, "duration": 2.13}, {"text": "is you know go one step beyond.", "start": 802.6, "duration": 2.55}, {"text": "And then you can come back.", "start": 805.15, "duration": 3.42}, {"text": "The ISA primer, so the ISA talks\nabout the syntax and semantics", "start": 808.57, "duration": 6.55}, {"text": "of assembly.", "start": 815.12, "duration": 0.5}, {"text": "There are four\nimportant concepts", "start": 820.09, "duration": 4.68}, {"text": "in the instruction\nset architecture--", "start": 824.77, "duration": 4.26}, {"text": "the notion of registers,\nthe notion of instructions,", "start": 829.03, "duration": 3.72}, {"text": "the data types, and the\nmemory addressing modes.", "start": 832.75, "duration": 3.72}, {"text": "And those are sort of indicated.", "start": 836.47, "duration": 3.0}, {"text": "For example, here, we're going\nto go through those one by one.", "start": 839.47, "duration": 3.85}, {"text": "So let's start\nwith the registers.", "start": 843.32, "duration": 1.7}, {"text": "So the registers is where\nthe processor stores things.", "start": 845.02, "duration": 3.36}, {"text": "And there are a bunch\nof x86 registers,", "start": 848.38, "duration": 5.7}, {"text": "so many that you don't\nneed to know most of them.", "start": 854.08, "duration": 4.2}, {"text": "The ones that are\nimportant are these.", "start": 858.28, "duration": 1.89}, {"text": "So first of all, there a\ngeneral purpose registers.", "start": 863.05, "duration": 3.24}, {"text": "And those typically\nhave width 64.", "start": 866.29, "duration": 3.21}, {"text": "And there are many of those.", "start": 869.5, "duration": 2.82}, {"text": "There is a so-called flags\nregister, called RFLAGS,", "start": 872.32, "duration": 4.02}, {"text": "which keeps track of\nthings like whether there", "start": 876.34, "duration": 2.4}, {"text": "was an overflow, whether\nthe last arithmetic", "start": 878.74, "duration": 3.15}, {"text": "operation resulted in a\nzero, whether a kid there", "start": 881.89, "duration": 4.11}, {"text": "was a carryout of a\nword or what have you.", "start": 886.0, "duration": 5.59}, {"text": "The next one is the\ninstruction pointer.", "start": 891.59, "duration": 2.93}, {"text": "So the assembly\nlanguage is organized", "start": 894.52, "duration": 2.25}, {"text": "as a sequence of instructions.", "start": 896.77, "duration": 2.37}, {"text": "And the hardware\nmarches linearly", "start": 899.14, "duration": 2.76}, {"text": "through that sequence,\none after the other,", "start": 901.9, "duration": 3.69}, {"text": "unless it encounters\na conditional jump", "start": 905.59, "duration": 3.15}, {"text": "or an unconditional\njump, in which case", "start": 908.74, "duration": 2.67}, {"text": "it'll branch to whatever\nthe location is.", "start": 911.41, "duration": 2.218}, {"text": "But for the most part,\nit's just running straight", "start": 913.628, "duration": 2.042}, {"text": "through memory.", "start": 915.67, "duration": 1.86}, {"text": "Then there are\nsome registers that", "start": 917.53, "duration": 3.87}, {"text": "were added quite late in the\ngame, namely the SSE registers", "start": 921.4, "duration": 7.5}, {"text": "and the AVX registers.", "start": 928.9, "duration": 2.22}, {"text": "And these are vector registers.", "start": 931.12, "duration": 2.02}, {"text": "So the XMM registers were, when\nthey first did vectorization,", "start": 933.14, "duration": 5.2}, {"text": "they used 128 bits.", "start": 938.34, "duration": 1.39}, {"text": "There's also for AVX, there\nare the YMM registers.", "start": 939.73, "duration": 4.56}, {"text": "And in the most\nrecent processors,", "start": 944.29, "duration": 2.17}, {"text": "which were not using\nthis term, there's", "start": 946.46, "duration": 3.32}, {"text": "another level of AVX that\ngives you 512-bit registers.", "start": 949.78, "duration": 6.21}, {"text": "Maybe we'll use that\nfor the final project,", "start": 955.99, "duration": 4.48}, {"text": "because it's just like a little\nmore power for the game playing", "start": 960.47, "duration": 4.28}, {"text": "project.", "start": 964.75, "duration": 1.65}, {"text": "But for most of what\nyou'll be doing,", "start": 966.4, "duration": 1.8}, {"text": "we'll just be keeping to\nthe C4 instances in AWS", "start": 968.2, "duration": 9.66}, {"text": "that you guys have been using.", "start": 977.86, "duration": 3.24}, {"text": "Now, the x86-64 didn't\nstart out as x86-64.", "start": 981.1, "duration": 5.7}, {"text": "It started out as x86.", "start": 986.8, "duration": 2.28}, {"text": "And it was used for machines,\nin particular the 80-86,", "start": 989.08, "duration": 4.92}, {"text": "which had a 16-bit word.", "start": 994.0, "duration": 1.8}, {"text": "So really short.", "start": 998.41, "duration": 3.68}, {"text": "How many things can you\nindex with a 16-bit word?", "start": 1002.09, "duration": 2.67}, {"text": "About how many?", "start": 1008.1, "duration": 2.01}, {"text": "AUDIENCE: 65,000.", "start": 1010.11, "duration": 1.297}, {"text": "CHARLES LEISERSON:\nYeah, about 65,000.", "start": 1011.407, "duration": 1.583}, {"text": "65,536 words you can\naddress, or bytes.", "start": 1012.99, "duration": 7.77}, {"text": "This is byte addressing.", "start": 1020.76, "duration": 2.04}, {"text": "So that's 65k bytes\nthat you can address.", "start": 1022.8, "duration": 4.15}, {"text": "How could they possibly\nuse that for machines?", "start": 1026.95, "duration": 3.27}, {"text": "Well, the answer is that's how\nmuch memory was on the machine.", "start": 1030.22, "duration": 3.81}, {"text": "You didn't have gigabytes.", "start": 1034.03, "duration": 2.01}, {"text": "So as the machines--", "start": 1036.04, "duration": 1.44}, {"text": "as Moore's law marched along\nand we got more and more memory,", "start": 1037.48, "duration": 4.589}, {"text": "then the words had to become\nwider to be able to index them.", "start": 1042.069, "duration": 2.911}, {"text": "Yeah?", "start": 1044.98, "duration": 0.704}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 1045.684, "duration": 1.898}, {"text": "CHARLES LEISERSON:\nYeah, but here's", "start": 1047.582, "duration": 1.458}, {"text": "the thing is if you're building\nstuff that's too expensive", "start": 1049.04, "duration": 4.02}, {"text": "and you can't get memory\nthat's big enough, then", "start": 1053.06, "duration": 5.37}, {"text": "if you build a wider word, like\nif you build a word of 32 bits,", "start": 1058.43, "duration": 5.01}, {"text": "then your processor\njust cost twice as much", "start": 1063.44, "duration": 2.4}, {"text": "as the next guy's processor.", "start": 1065.84, "duration": 2.31}, {"text": "So instead, what they did is\nthey went along as long as that", "start": 1068.15, "duration": 2.88}, {"text": "was the common size, and\nthen had some growth pains", "start": 1071.03, "duration": 4.11}, {"text": "and went to 32.", "start": 1075.14, "duration": 2.872}, {"text": "And from there, they had\nsome more growth pains", "start": 1078.012, "duration": 1.958}, {"text": "and went to 64.", "start": 1079.97, "duration": 2.01}, {"text": "OK, those are two\nseparate things.", "start": 1081.98, "duration": 2.14}, {"text": "And, in fact, they did they\ndid some really weird stuff.", "start": 1084.12, "duration": 4.82}, {"text": "So what they did in fact is\nwhen they made these longer", "start": 1088.94, "duration": 3.18}, {"text": "registers, they have\nregisters that are", "start": 1092.12, "duration": 2.98}, {"text": "aliased to exactly the same\nthing for the lower bits.", "start": 1095.1, "duration": 4.37}, {"text": "So they can address\nthem either by a byte--", "start": 1099.47, "duration": 8.4}, {"text": "so these registers\nall have the same--", "start": 1107.87, "duration": 2.46}, {"text": "you can do the lower and\nupper half of the short word,", "start": 1110.33, "duration": 3.27}, {"text": "or you can do the 32-bit word\nor you can do the 64-bit word.", "start": 1113.6, "duration": 8.07}, {"text": "And that's just like if\nyou're doing this today,", "start": 1121.67, "duration": 2.52}, {"text": "you wouldn't do that.", "start": 1124.19, "duration": 1.33}, {"text": "You wouldn't have all these\nregisters that alias and such.", "start": 1125.52, "duration": 3.68}, {"text": "But that's what they did because\nthis is history, not design.", "start": 1129.2, "duration": 6.21}, {"text": "And the reason was\nbecause when they're", "start": 1135.41, "duration": 2.41}, {"text": "doing that they were not\ndesigning for long term.", "start": 1137.82, "duration": 2.18}, {"text": "Now, are we going to go\nto 128-bit addressing?", "start": 1140.0, "duration": 3.57}, {"text": "Probably not.", "start": 1143.57, "duration": 0.81}, {"text": "64 bits address is a\nspectacular amount of stuff.", "start": 1144.38, "duration": 4.75}, {"text": "You know, not quite as many--", "start": 1149.13, "duration": 4.085}, {"text": "2 to the 64th is what?", "start": 1153.215, "duration": 1.905}, {"text": "Is like how many gazillions?", "start": 1155.12, "duration": 5.91}, {"text": "It's a lot of gazillions.", "start": 1161.03, "duration": 2.75}, {"text": "So, yeah, we're not going to\nhave to go beyond 64 probably.", "start": 1163.78, "duration": 6.56}, {"text": "So here are the general\npurpose registers.", "start": 1170.34, "duration": 4.59}, {"text": "And as I mentioned, they\nhave different names,", "start": 1174.93, "duration": 3.64}, {"text": "but they cover the same thing.", "start": 1178.57, "duration": 1.56}, {"text": "So if you change eax, for\nexample, that also changes rax.", "start": 1180.13, "duration": 5.9}, {"text": "And so you see they originally\nall had functional purposes.", "start": 1186.03, "duration": 3.87}, {"text": "Now, they're all pretty\nmuch the same thing,", "start": 1189.9, "duration": 5.91}, {"text": "but the names have stuck\nbecause of history.", "start": 1195.81, "duration": 4.115}, {"text": "Instead of calling\nthem registers", "start": 1199.925, "duration": 1.375}, {"text": "0, register 1, or whatever,\nthey all have these funny names.", "start": 1201.3, "duration": 4.08}, {"text": "Some of them still are used\nfor a particular purpose,", "start": 1205.38, "duration": 2.22}, {"text": "like rsp is used as\nthe stack pointer.", "start": 1207.6, "duration": 4.08}, {"text": "And rbp is used to point\nto the base of the frame,", "start": 1211.68, "duration": 4.56}, {"text": "for those who remember\ntheir 6004 stuff.", "start": 1216.24, "duration": 3.368}, {"text": "So anyway, there are\na whole bunch of them.", "start": 1219.608, "duration": 1.792}, {"text": "And they're different\nnames depending", "start": 1221.4, "duration": 1.542}, {"text": "upon which part of the\nregister you're accessing.", "start": 1222.942, "duration": 3.258}, {"text": "Now, the format of an\nx86-64 instruction code", "start": 1226.2, "duration": 3.9}, {"text": "is to have an opcode and\nthen an operand list.", "start": 1230.1, "duration": 3.12}, {"text": "And the operand list is\ntypically 0, 1, 2, or rarely", "start": 1233.22, "duration": 5.04}, {"text": "3 operands separated by commas.", "start": 1238.26, "duration": 2.79}, {"text": "Typically, all\noperands are sources", "start": 1241.05, "duration": 2.88}, {"text": "and one operand might\nalso be the destination.", "start": 1243.93, "duration": 2.25}, {"text": "So, for example, if you take a\nlook at this add instruction,", "start": 1246.18, "duration": 6.33}, {"text": "the operation is an add.", "start": 1252.51, "duration": 1.92}, {"text": "And the operand list\nis these two registers.", "start": 1254.43, "duration": 5.62}, {"text": "One is edi and the other is ecx.", "start": 1260.05, "duration": 2.6}, {"text": "And the destination\nis the second one.", "start": 1262.65, "duration": 5.34}, {"text": "When you add-- in this\ncase, what's going on", "start": 1267.99, "duration": 2.94}, {"text": "is it's taking the value in\necx, adding the value in edi", "start": 1270.93, "duration": 4.56}, {"text": "into it.", "start": 1275.49, "duration": 0.84}, {"text": "And the result is in ecx.", "start": 1276.33, "duration": 2.64}, {"text": "Yes?", "start": 1278.97, "duration": 0.783}, {"text": "AUDIENCE: Is there a convention\nfor where the destination", "start": 1279.753, "duration": 2.465}, {"text": "[INAUDIBLE]", "start": 1282.218, "duration": 1.972}, {"text": "CHARLES LEISERSON:\nFunny you should ask.", "start": 1284.19, "duration": 2.64}, {"text": "Yes.", "start": 1286.83, "duration": 1.5}, {"text": "So what does op A, B mean?", "start": 1288.33, "duration": 1.71}, {"text": "It turns out naturally\nthat the literature", "start": 1290.04, "duration": 4.8}, {"text": "is inconsistent about how\nit refers to operations.", "start": 1294.84, "duration": 4.63}, {"text": "And there's two major\nways that are used.", "start": 1299.47, "duration": 2.66}, {"text": "One is the AT&T syntax, and\nthe other is the Intel syntax.", "start": 1302.13, "duration": 6.45}, {"text": "So the AT&T syntax, the second\noperand is the destination.", "start": 1308.58, "duration": 3.78}, {"text": "The last operand\nis the destination.", "start": 1312.36, "duration": 2.85}, {"text": "In the Intel syntax, the first\noperand is the destination.", "start": 1315.21, "duration": 5.73}, {"text": "OK, is that confusing?", "start": 1320.94, "duration": 2.52}, {"text": "So almost all the tools\nthat we're going to use", "start": 1323.46, "duration": 3.12}, {"text": "are going to use\nthe AT&T syntax.", "start": 1326.58, "duration": 2.055}, {"text": "But you will read documentation,\nwhich is Intel documentation.", "start": 1333.75, "duration": 5.82}, {"text": "It will use the other syntax.", "start": 1339.57, "duration": 1.98}, {"text": "Don't get confused.", "start": 1341.55, "duration": 3.05}, {"text": "OK?", "start": 1344.6, "duration": 1.46}, {"text": "I can't help-- it's\nlike I can't help", "start": 1346.06, "duration": 3.12}, {"text": "that this is the way the\nstate of the world is.", "start": 1349.18, "duration": 2.44}, {"text": "OK?", "start": 1351.62, "duration": 1.21}, {"text": "Yeah?", "start": 1352.83, "duration": 0.692}, {"text": "AUDIENCE: Are there tools\nthat help [INAUDIBLE]", "start": 1353.522, "duration": 1.958}, {"text": "CHARLES LEISERSON: Oh, yeah.", "start": 1355.48, "duration": 1.167}, {"text": "In particular, if you\ncould compile it and undo,", "start": 1356.647, "duration": 3.483}, {"text": "but I'm sure there's--", "start": 1360.13, "duration": 1.62}, {"text": "I mean, this is not a\nhard translation thing.", "start": 1361.75, "duration": 2.49}, {"text": "I'll bet if you just Google,\nyou can in two minutes,", "start": 1364.24, "duration": 3.2}, {"text": "in two seconds, find\nsomebody who will translate", "start": 1367.44, "duration": 3.22}, {"text": "from one to the other.", "start": 1370.66, "duration": 2.55}, {"text": "This is not a complicated\ntranslation process.", "start": 1373.21, "duration": 5.97}, {"text": "Now, here are some very\ncommon x86 opcodes.", "start": 1379.18, "duration": 6.78}, {"text": "And so let me just\nmention a few of these,", "start": 1385.96, "duration": 3.42}, {"text": "because these are ones that\nyou'll often see in the code.", "start": 1389.38, "duration": 4.77}, {"text": "So move, what do\nyou think move does?", "start": 1394.15, "duration": 3.858}, {"text": "AUDIENCE: Moves something.", "start": 1398.008, "duration": 1.083}, {"text": "CHARLES LEISERSON: Yeah,\nit puts something in one", "start": 1399.091, "duration": 2.042}, {"text": "register into another register.", "start": 1401.133, "duration": 1.407}, {"text": "Of course, when\nit moves it, this", "start": 1402.54, "duration": 1.95}, {"text": "is computer science\nmove, not real move.", "start": 1404.49, "duration": 2.82}, {"text": "When I move my belongings\nin my house to my new house,", "start": 1407.31, "duration": 4.83}, {"text": "they're no longer in\nthe old place, right?", "start": 1412.14, "duration": 2.76}, {"text": "But in computer science, for\nsome reason, when we move", "start": 1414.9, "duration": 2.64}, {"text": "things we leave a copy behind.", "start": 1417.54, "duration": 5.22}, {"text": "So they may call it move, but--", "start": 1422.76, "duration": 2.447}, {"text": "AUDIENCE: Why don't\nthey call it copy?", "start": 1425.207, "duration": 1.583}, {"text": "CHARLES LEISERSON: Yeah,\nwhy don't they call it copy?", "start": 1426.79, "duration": 2.9}, {"text": "You got me.", "start": 1429.69, "duration": 0.66}, {"text": "OK, then there's\nconditional move.", "start": 1434.29, "duration": 2.96}, {"text": "So this is move based\non a condition--", "start": 1437.25, "duration": 5.58}, {"text": "and we'll see some of\nthe ways that this is--", "start": 1442.83, "duration": 1.98}, {"text": "like move if flag is equal\nto 0 and so forth, so", "start": 1444.81, "duration": 8.34}, {"text": "basically conditional move.", "start": 1453.15, "duration": 1.89}, {"text": "It doesn't always do the move.", "start": 1455.04, "duration": 3.33}, {"text": "Then you can extend the sign.", "start": 1458.37, "duration": 3.21}, {"text": "So, for example, suppose you're\nmoving from a 32-bit value", "start": 1461.58, "duration": 7.41}, {"text": "register into a 64-bit register.", "start": 1468.99, "duration": 3.66}, {"text": "Then the question is, what\nhappens to high order bits?", "start": 1472.65, "duration": 4.46}, {"text": "So there's two basic\nmechanisms that can be used.", "start": 1477.11, "duration": 2.34}, {"text": "Either it can be\nfilled with zeros,", "start": 1479.45, "duration": 3.06}, {"text": "or remember that the first\nbit, or the leftmost bit as we", "start": 1482.51, "duration": 5.25}, {"text": "think of it, is the sign bit\nfrom our electron binary.", "start": 1487.76, "duration": 5.52}, {"text": "That bit will be extended\nthrough the high order", "start": 1493.28, "duration": 3.45}, {"text": "part of the word, so that the\nwhole number if it's negative", "start": 1496.73, "duration": 5.82}, {"text": "will be negative and\nif it's positive,", "start": 1502.55, "duration": 1.59}, {"text": "it'll be zeros and so forth.", "start": 1504.14, "duration": 3.92}, {"text": "Does that makes sense?", "start": 1508.06, "duration": 2.47}, {"text": "Then there are things like\npush and pop to do stacks.", "start": 1510.53, "duration": 4.03}, {"text": "There's a lot of\ninteger arithmetic.", "start": 1514.56, "duration": 3.9}, {"text": "There's addition, subtraction,\nmultiplication, division,", "start": 1518.46, "duration": 4.92}, {"text": "various shifts, address\ncalculation shifts, rotations,", "start": 1523.38, "duration": 4.83}, {"text": "incrementing, decrementing,\nnegating, etc.", "start": 1528.21, "duration": 2.79}, {"text": "There's also a lot of binary\nlogic, AND, OR, XOR, NOT.", "start": 1531.0, "duration": 4.03}, {"text": "Those are all doing\nbitwise operations.", "start": 1535.03, "duration": 3.65}, {"text": "And then there is Boolean\nlogic, like testing", "start": 1538.68, "duration": 3.87}, {"text": "to see whether some value has\na given value or comparing.", "start": 1542.55, "duration": 6.68}, {"text": "There's unconditional\njump, which is jump.", "start": 1549.23, "duration": 2.47}, {"text": "And there's conditional jumps,\nwhich is jump with a condition.", "start": 1551.7, "duration": 3.27}, {"text": "And then things\nlike subroutines.", "start": 1554.97, "duration": 1.83}, {"text": "And there are a bunch more,\nwhich the manual will have", "start": 1556.8, "duration": 4.17}, {"text": "and which will\nundoubtedly show up.", "start": 1560.97, "duration": 1.658}, {"text": "Like, for example, there's the\nwhole set of vector operations", "start": 1562.628, "duration": 2.542}, {"text": "we'll talk about a\nlittle bit later.", "start": 1565.17, "duration": 3.15}, {"text": "Now, the opcodes\nmay be augmented", "start": 1568.32, "duration": 3.08}, {"text": "with a suffix that describes\nthe data type of the operation", "start": 1571.4, "duration": 2.94}, {"text": "or a condition code.", "start": 1574.34, "duration": 2.34}, {"text": "OK, so an opcode for data\nmovement, arithmetic, or logic", "start": 1576.68, "duration": 3.3}, {"text": "use a single character suffix\nto indicate the data type.", "start": 1579.98, "duration": 6.84}, {"text": "And if the suffix is missing,\nit can usually be inferred.", "start": 1586.82, "duration": 2.46}, {"text": "So take a look at this example.", "start": 1589.28, "duration": 2.14}, {"text": "So this is a move\nwith a q at the end.", "start": 1591.42, "duration": 2.06}, {"text": "What do you think q stands for?", "start": 1593.48, "duration": 3.99}, {"text": "AUDIENCE: Quad words?", "start": 1597.47, "duration": 1.312}, {"text": "CHARLES LEISERSON: Quad word.", "start": 1598.782, "duration": 1.208}, {"text": "OK, how many bytes\nin a quad word?", "start": 1599.99, "duration": 1.86}, {"text": "AUDIENCE: Eight.", "start": 1605.722, "duration": 0.836}, {"text": "CHARLES LEISERSON: Eight.", "start": 1606.558, "duration": 1.042}, {"text": "That's because originally it\nstarted out with a 16-bit word.", "start": 1611.16, "duration": 4.74}, {"text": "So they said a quad word was\nfour of those 16-bit words.", "start": 1615.9, "duration": 3.96}, {"text": "So that's 8 bytes.", "start": 1619.86, "duration": 1.92}, {"text": "You get the idea, right?", "start": 1621.78, "duration": 1.17}, {"text": "But let me tell you this is all\nover the x86 instruction set.", "start": 1622.95, "duration": 4.44}, {"text": "All these historical\nthings and all these", "start": 1627.39, "duration": 2.46}, {"text": "mnemonics that if you don't\nunderstand what they really", "start": 1629.85, "duration": 5.1}, {"text": "mean, you can get very confused.", "start": 1634.95, "duration": 2.85}, {"text": "So in this case, we're\nmoving a 64-bit integer,", "start": 1637.8, "duration": 2.49}, {"text": "because a quad word\nhas 8 bytes or 64 bits.", "start": 1640.29, "duration": 5.7}, {"text": "This is one of my--", "start": 1645.99, "duration": 1.5}, {"text": "it's like whenever I\nprepare this lecture,", "start": 1647.49, "duration": 2.1}, {"text": "I just go into spasms\nof laughter, as I look", "start": 1649.59, "duration": 5.7}, {"text": "and I say, oh, my god,\nthey really did that like.", "start": 1655.29, "duration": 3.21}, {"text": "For example, on the last\npage, when I did subtract.", "start": 1658.5, "duration": 3.66}, {"text": "So the sub-operator, if it's\na two argument operator,", "start": 1662.16, "duration": 5.27}, {"text": "it subtracts the--", "start": 1667.43, "duration": 1.32}, {"text": "I think it's the\nfirst and the second.", "start": 1668.75, "duration": 1.84}, {"text": "But there is no way of\nsubtracting the other way", "start": 1670.59, "duration": 2.19}, {"text": "around.", "start": 1672.78, "duration": 1.91}, {"text": "It puts the destination\nin the second one.", "start": 1674.69, "duration": 2.96}, {"text": "It basically takes the second\none minus the first one", "start": 1677.65, "duration": 3.16}, {"text": "and puts that in the second one.", "start": 1680.81, "duration": 2.34}, {"text": "But if you wanted to have\nit the other way around,", "start": 1683.15, "duration": 3.27}, {"text": "to save yourself a cycle--", "start": 1686.42, "duration": 1.74}, {"text": "anyway, it doesn't matter.", "start": 1688.16, "duration": 1.32}, {"text": "You can't do it that way.", "start": 1689.48, "duration": 2.34}, {"text": "And all this stuff the\ncompiler has to understand.", "start": 1691.82, "duration": 2.31}, {"text": "So here are the\nx86-64 data types.", "start": 1697.39, "duration": 4.2}, {"text": "The way I've done it is to show\nyou the difference between C", "start": 1701.59, "duration": 4.35}, {"text": "and x86-64, so for example,\nhere are the declarations in C.", "start": 1705.94, "duration": 10.2}, {"text": "So there's a char, a short,\nint, unsigned int, long, etc.", "start": 1716.14, "duration": 5.31}, {"text": "Here's an example\nof a C constant", "start": 1721.45, "duration": 1.83}, {"text": "that does those things.", "start": 1723.28, "duration": 2.02}, {"text": "And here's the size\nin bytes that you", "start": 1725.3, "duration": 2.27}, {"text": "get when you declare that.", "start": 1727.57, "duration": 2.94}, {"text": "And then the assembly suffix\nis one of these things.", "start": 1730.51, "duration": 7.86}, {"text": "So in the assembly, it says\nb or w for a word, an l or d", "start": 1738.37, "duration": 4.56}, {"text": "for a double word, a q\nfor a quad word, i.e.", "start": 1742.93, "duration": 4.37}, {"text": "8 bytes, single precision,\ndouble precision,", "start": 1747.3, "duration": 2.68}, {"text": "extended precision.", "start": 1749.98, "duration": 1.452}, {"text": "So sign extension use\ntwo date type suffixes.", "start": 1755.71, "duration": 3.75}, {"text": "So here's an example.", "start": 1759.46, "duration": 3.01}, {"text": "So the first one says\nwe're going to move.", "start": 1762.47, "duration": 5.37}, {"text": "And now you see I can't read\nthis without my cheat sheet.", "start": 1767.84, "duration": 4.522}, {"text": "So what is this saying?", "start": 1772.362, "duration": 0.958}, {"text": "This is saying, we're going\nto move with a zero-extend.", "start": 1773.32, "duration": 9.93}, {"text": "And it's going to be the\nfirst operand is a byte,", "start": 1783.25, "duration": 2.46}, {"text": "and the second\noperation is a long.", "start": 1785.71, "duration": 1.69}, {"text": "Is that right?", "start": 1787.4, "duration": 2.03}, {"text": "If I'm wrong, it's like I\ngot to look at the chart too.", "start": 1789.43, "duration": 4.14}, {"text": "And, of course, we\ndon't hold you to that.", "start": 1793.57, "duration": 2.43}, {"text": "But the z there says\nextends with zeros.", "start": 1796.0, "duration": 2.97}, {"text": "And the S says\npreserve the sign.", "start": 1798.97, "duration": 4.27}, {"text": "So that's the things.", "start": 1803.24, "duration": 2.22}, {"text": "Now, that would all\nbe all well and good,", "start": 1805.46, "duration": 3.06}, {"text": "except that then what they did\nis if you do 32-bit operations,", "start": 1808.52, "duration": 7.29}, {"text": "where you're moving\nit to a 64-bit value,", "start": 1815.81, "duration": 3.51}, {"text": "it implicitly\nzero-extends the sign.", "start": 1819.32, "duration": 3.91}, {"text": "If you do it for smaller\nvalues and you store it in,", "start": 1823.23, "duration": 3.9}, {"text": "it simply overwrites the\nvalues in those registers.", "start": 1827.13, "duration": 3.345}, {"text": "It doesn't touch\nthe high order bits.", "start": 1830.475, "duration": 2.505}, {"text": "But when they did the\n32 to 64-bit extension", "start": 1832.98, "duration": 6.39}, {"text": "of the instruction\nset, they decided", "start": 1839.37, "duration": 3.06}, {"text": "that they wouldn't do what\nhad been done in the past.", "start": 1842.43, "duration": 3.18}, {"text": "And they decided that they\nwould zero-extend things,", "start": 1845.61, "duration": 3.06}, {"text": "unless there was something\nexplicit to the contrary.", "start": 1848.67, "duration": 4.08}, {"text": "You got me, OK.", "start": 1852.75, "duration": 1.23}, {"text": "Yeah, I have a friend\nwho worked at Intel.", "start": 1856.78, "duration": 3.86}, {"text": "And he had a joke about\nthe Intel instructions set.", "start": 1860.64, "duration": 3.368}, {"text": "You'll discover the\nIntel instruction", "start": 1864.008, "duration": 1.542}, {"text": "set is really complicated.", "start": 1865.55, "duration": 1.48}, {"text": "He says, here's the idea of\nthe Intel instruction set.", "start": 1867.03, "duration": 2.61}, {"text": "He said, to become\nan Intel fellow,", "start": 1869.64, "duration": 3.27}, {"text": "you need to have an instruction\nin the Intel instruction set.", "start": 1872.91, "duration": 4.922}, {"text": "You have an instruction\nthat you invented", "start": 1877.832, "duration": 1.708}, {"text": "and that that's\nnow used in Intel.", "start": 1879.54, "duration": 2.4}, {"text": "He says nobody becomes\nan Intel fellow", "start": 1881.94, "duration": 3.06}, {"text": "for removing instructions.", "start": 1885.0, "duration": 3.74}, {"text": "So it just sort of grows and\ngrows and grows and gets more", "start": 1888.74, "duration": 2.97}, {"text": "and more complicated\nfor each thing.", "start": 1891.71, "duration": 4.44}, {"text": "Now, once again, for\nextension, you can sign-extend.", "start": 1896.15, "duration": 5.01}, {"text": "And here's two examples.", "start": 1901.16, "duration": 3.15}, {"text": "In one case, moving an 8-bit\ninteger to a 32-bit integer", "start": 1904.31, "duration": 3.81}, {"text": "and zero-extended it\nversus preserving the sign.", "start": 1908.12, "duration": 3.45}, {"text": "Conditional jumps\nand conditional moves", "start": 1915.44, "duration": 1.92}, {"text": "also use suffixes to\nindicate the condition code.", "start": 1917.36, "duration": 3.84}, {"text": "So here, for example, the ne\nindicates the jump should only", "start": 1921.2, "duration": 3.81}, {"text": "be taken if the argument\nof the previous comparison", "start": 1925.01, "duration": 3.45}, {"text": "are not equal.", "start": 1928.46, "duration": 1.02}, {"text": "So ne is not equal.", "start": 1929.48, "duration": 1.62}, {"text": "So you do a\ncomparison, and that's", "start": 1931.1, "duration": 1.86}, {"text": "going to set a flag in\nthe RFLAGS register.", "start": 1932.96, "duration": 3.36}, {"text": "Then the jump will\nlook at that flag", "start": 1936.32, "duration": 2.82}, {"text": "and decide whether it's going\nto jump or not or just continue", "start": 1939.14, "duration": 3.12}, {"text": "the sequential\nexecution of the code.", "start": 1942.26, "duration": 4.437}, {"text": "And there are a bunch\nof things that you can", "start": 1946.697, "duration": 1.833}, {"text": "jump on which are status flags.", "start": 1948.53, "duration": 7.5}, {"text": "And you can see the names here.", "start": 1956.03, "duration": 1.74}, {"text": "There's Carry.", "start": 1957.77, "duration": 1.29}, {"text": "There's Parity.", "start": 1959.06, "duration": 1.74}, {"text": "Parity is the XOR of all\nthe bits in the word.", "start": 1960.8, "duration": 2.37}, {"text": "Adjust, I don't even\nknow what that's for.", "start": 1966.39, "duration": 3.47}, {"text": "There's the Zero flag.", "start": 1969.86, "duration": 1.342}, {"text": "It tells whether it's a zero.", "start": 1971.202, "duration": 1.208}, {"text": "There's a Sign flag, whether\nit's positive or negative.", "start": 1972.41, "duration": 3.31}, {"text": "There's a Trap flag and\nInterrupt enable and Direction,", "start": 1975.72, "duration": 5.57}, {"text": "Overflow.", "start": 1981.29, "duration": 0.78}, {"text": "So anyway, you can see there\nare a whole bunch of these.", "start": 1982.07, "duration": 3.24}, {"text": "So, for example here, this\nis going to decrement rbx.", "start": 1985.31, "duration": 3.54}, {"text": "And then it sets the Zero\nflag if the results are equal.", "start": 1988.85, "duration": 3.42}, {"text": "And then the jump,\nthe conditional jump,", "start": 1992.27, "duration": 2.94}, {"text": "jumps to the label if the ZF\nflag is not set, in this case.", "start": 1995.21, "duration": 6.13}, {"text": "OK, it make sense?", "start": 2001.34, "duration": 2.7}, {"text": "After a fashion.", "start": 2004.04, "duration": 2.01}, {"text": "Doesn't make rational sense,\nbut it does make sense.", "start": 2006.05, "duration": 2.28}, {"text": "Here are the main ones\nthat you're going to need.", "start": 2012.3, "duration": 2.7}, {"text": "The Carry flag is whether you\ngot a carry or a borrow out", "start": 2015.0, "duration": 3.21}, {"text": "of the most significant bit.", "start": 2018.21, "duration": 1.53}, {"text": "The Zero flag is if the\nALU operation was 0,", "start": 2019.74, "duration": 4.65}, {"text": "whether the last ALU operation\nhad the sign bit set.", "start": 2024.39, "duration": 3.06}, {"text": "And the overflow\nsays it resulted", "start": 2027.45, "duration": 2.19}, {"text": "in arithmetic overflow.", "start": 2029.64, "duration": 2.77}, {"text": "The condition codes are--", "start": 2032.41, "duration": 3.98}, {"text": "if you put one of\nthese condition codes", "start": 2036.39, "duration": 2.13}, {"text": "on your conditional\njump or whatever,", "start": 2038.52, "duration": 4.08}, {"text": "this tells you exactly what\nthe flag is that is being set.", "start": 2042.6, "duration": 5.16}, {"text": "So, for example, the easy\nones are if it's equal.", "start": 2047.76, "duration": 6.629}, {"text": "But there are some\nother ones there.", "start": 2054.389, "duration": 1.81}, {"text": "So, for example, if you\nsay why, for example,", "start": 2056.199, "duration": 6.77}, {"text": "do the condition codes e\nand ne, check the Zero flag?", "start": 2062.969, "duration": 3.0}, {"text": "And the answer is\ntypically, rather", "start": 2069.19, "duration": 5.13}, {"text": "than having a separate\ncomparison, what they've done", "start": 2074.32, "duration": 2.55}, {"text": "is separate the branch\nfrom the comparison itself.", "start": 2076.87, "duration": 3.03}, {"text": "But it also needn't be\na compare instruction.", "start": 2079.9, "duration": 3.72}, {"text": "It could be the result\nof the last arithmetic", "start": 2083.62, "duration": 4.71}, {"text": "operation was a zero,\nand therefore it", "start": 2088.33, "duration": 2.61}, {"text": "can branch without having to\ndo a comparison with zero.", "start": 2090.94, "duration": 5.15}, {"text": "So, for example,\nif you have a loop.", "start": 2096.09, "duration": 3.57}, {"text": "where you're decrementing a\ncounter till it gets to 0,", "start": 2099.66, "duration": 3.48}, {"text": "that's actually faster\nby one instruction", "start": 2103.14, "duration": 6.25}, {"text": "to compare whether\nthe loop index hits 0", "start": 2109.39, "duration": 5.16}, {"text": "than it is if you have the\nloop going up to n, and then", "start": 2114.55, "duration": 4.19}, {"text": "every time through the loop\nhaving to compare with n", "start": 2118.74, "duration": 2.46}, {"text": "in order before you can branch.", "start": 2121.2, "duration": 3.33}, {"text": "So these days that optimization\ndoesn't mean anything,", "start": 2124.53, "duration": 3.93}, {"text": "because, as we'll talk\nabout in a little bit,", "start": 2128.46, "duration": 2.73}, {"text": "these machines are so powerful,\nthat doing an extra integer", "start": 2131.19, "duration": 7.65}, {"text": "arithmetic like\nthat probably has", "start": 2138.84, "duration": 1.47}, {"text": "no bearing on the overall cost.", "start": 2140.31, "duration": 1.59}, {"text": "Yeah?", "start": 2141.9, "duration": 0.536}, {"text": "AUDIENCE: So this instruction\ndoesn't take arguments?", "start": 2142.436, "duration": 2.208}, {"text": "It just looks at the flags?", "start": 2144.644, "duration": 0.946}, {"text": "CHARLES LEISERSON: Just\nlooks at the flags, yep.", "start": 2145.59, "duration": 1.68}, {"text": "Just looks at the flags.", "start": 2147.27, "duration": 1.0}, {"text": "It doesn't take any arguments.", "start": 2148.27, "duration": 3.96}, {"text": "Now, the next aspect of this\nis you can give registers,", "start": 2152.23, "duration": 3.47}, {"text": "but you also can address memory.", "start": 2155.7, "duration": 2.61}, {"text": "And there are three direct\naddressing modes and three", "start": 2158.31, "duration": 7.14}, {"text": "indirect addressing modes.", "start": 2165.45, "duration": 1.47}, {"text": "At most, one operand may\nspecify a memory address.", "start": 2169.44, "duration": 4.98}, {"text": "So here are the direct\naddressing modes.", "start": 2174.42, "duration": 2.22}, {"text": "So for immediate what you do\nis you give it a constant,", "start": 2176.64, "duration": 3.34}, {"text": "like 172, random constant,\nto store into the register,", "start": 2179.98, "duration": 6.65}, {"text": "in this case.", "start": 2186.63, "duration": 0.57}, {"text": "That's called an immediate.", "start": 2187.2, "duration": 1.23}, {"text": "What happens if you\nlook at the instruction,", "start": 2188.43, "duration": 3.69}, {"text": "if you look at the\nmachine language,", "start": 2192.12, "duration": 1.58}, {"text": "172 is right in the instruction.", "start": 2193.7, "duration": 4.03}, {"text": "It's right in the\ninstruction, that number 172.", "start": 2197.73, "duration": 4.35}, {"text": "Register says we'll move\nthe value from the register,", "start": 2202.08, "duration": 2.79}, {"text": "in this case, %cx.", "start": 2204.87, "duration": 2.52}, {"text": "And then the index of the\nregister is put in that part.", "start": 2207.39, "duration": 4.68}, {"text": "And direct memory says use a\nparticular memory location.", "start": 2212.07, "duration": 6.87}, {"text": "And you can give a hex value.", "start": 2218.94, "duration": 1.71}, {"text": "When you do direct\nmemory, it's going", "start": 2220.65, "duration": 5.26}, {"text": "to use the value at\nthat place in memory.", "start": 2225.91, "duration": 3.11}, {"text": "And to indicate that memory\nis going to take you,", "start": 2229.02, "duration": 4.71}, {"text": "on a 64-bit machine, 64\n8-bytes to specify that memory.", "start": 2233.73, "duration": 5.46}, {"text": "Whereas, for example, the move\nq, 172 will fit in 1 byte.", "start": 2239.19, "duration": 8.18}, {"text": "And so I'll have spent a lot\nless storage in order to do it.", "start": 2247.37, "duration": 5.04}, {"text": "Plus, I can do it directly\nfrom the instruction stream.", "start": 2252.41, "duration": 3.33}, {"text": "And I avoid having\nan access to memory,", "start": 2255.74, "duration": 2.52}, {"text": "which is very expensive.", "start": 2258.26, "duration": 1.65}, {"text": "So how many cycles does it\ntake if the value that you're", "start": 2259.91, "duration": 3.75}, {"text": "fetching from memory\nis not in cache", "start": 2263.66, "duration": 5.79}, {"text": "or whatever or a register?", "start": 2269.45, "duration": 1.717}, {"text": "If I'm fetching\nsomething from memory,", "start": 2271.167, "duration": 1.583}, {"text": "how many cycles of\nthe machine does", "start": 2272.75, "duration": 1.92}, {"text": "it typically take these days.", "start": 2274.67, "duration": 1.53}, {"text": "Yeah.", "start": 2278.97, "duration": 0.572}, {"text": "AUDIENCE: A few hundred?", "start": 2279.542, "duration": 1.328}, {"text": "CHARLES LEISERSON: Yeah, a\ncouple of hundred or more,", "start": 2280.87, "duration": 2.208}, {"text": "yeah, a couple hundred cycles.", "start": 2283.078, "duration": 2.142}, {"text": "To fetch something from memory.", "start": 2285.22, "duration": 3.01}, {"text": "It's so slow.", "start": 2288.23, "duration": 1.53}, {"text": "No, it's the\nprocessors are so fast.", "start": 2289.76, "duration": 2.91}, {"text": "And so clearly, if you can\nget things into registers,", "start": 2292.67, "duration": 3.27}, {"text": "most registers you can\naccess in a single cycle.", "start": 2295.94, "duration": 3.82}, {"text": "So we want to move things\nclose to the processor,", "start": 2299.76, "duration": 2.12}, {"text": "operate on them,\nshove them back.", "start": 2301.88, "duration": 2.44}, {"text": "And while we pull\nthings from memory,", "start": 2304.32, "duration": 1.56}, {"text": "we want other things\nto be to be working on.", "start": 2305.88, "duration": 3.0}, {"text": "And so the hardware is\nall organized to do that.", "start": 2308.88, "duration": 4.48}, {"text": "Now, of course, we\nspend a lot of time", "start": 2313.36, "duration": 2.03}, {"text": "fetching stuff from memory.", "start": 2315.39, "duration": 1.29}, {"text": "And that's one reason\nwe use caching.", "start": 2316.68, "duration": 1.65}, {"text": "And we'll have a big thing--", "start": 2318.33, "duration": 1.59}, {"text": "caching is really important.", "start": 2319.92, "duration": 1.33}, {"text": "We're going spend\na bunch of time", "start": 2321.25, "duration": 1.375}, {"text": "on how to get the best\nout of your cache.", "start": 2322.625, "duration": 3.235}, {"text": "There's also\nindirect addressing.", "start": 2325.86, "duration": 3.24}, {"text": "So instead of just\ngiving a location,", "start": 2329.1, "duration": 2.4}, {"text": "you say, oh, let's go\nto some other place,", "start": 2331.5, "duration": 5.46}, {"text": "for example, a register,\nand get the value", "start": 2336.96, "duration": 6.79}, {"text": "and the address is going to\nbe stored in that location.", "start": 2343.75, "duration": 2.99}, {"text": "So, for example here, register\nindirect says, in this case,", "start": 2346.74, "duration": 4.16}, {"text": "move the contents of rax into--", "start": 2350.9, "duration": 4.245}, {"text": "sorry, the contents is\nthe address of the thing", "start": 2357.89, "duration": 2.85}, {"text": "that you're going\nto move into rdi.", "start": 2360.74, "duration": 3.86}, {"text": "So if rax was\nlocation 172, then it", "start": 2364.6, "duration": 5.42}, {"text": "would take whatever is in\nlocation 172 and put it in rdi.", "start": 2370.02, "duration": 2.955}, {"text": "Registered index says,\nwell, do the same thing,", "start": 2375.52, "duration": 2.25}, {"text": "but while you're at\nit, add an offset.", "start": 2377.77, "duration": 4.26}, {"text": "So once again, if rax\nhad 172, in this case", "start": 2382.03, "duration": 5.19}, {"text": "it would go to 344 to\nfetch the value out", "start": 2387.22, "duration": 7.03}, {"text": "of that location 344 for\nthis particular instruction.", "start": 2394.25, "duration": 4.89}, {"text": "And then instruction-pointer\nrelative,", "start": 2399.14, "duration": 3.27}, {"text": "instead of indexing off\nof a general purpose", "start": 2402.41, "duration": 3.57}, {"text": "register, you index off\nthe instruction pointer.", "start": 2405.98, "duration": 3.61}, {"text": "That usually happens in the\ncode where the code is--", "start": 2409.59, "duration": 4.28}, {"text": "for example, you\ncan jump to where", "start": 2417.95, "duration": 1.74}, {"text": "you are in the code\nplus four instructions.", "start": 2419.69, "duration": 3.63}, {"text": "So you can jump down some number\nof instructions in the code.", "start": 2423.32, "duration": 3.69}, {"text": "Usually, you'll see that\nonly with use with control,", "start": 2427.01, "duration": 2.61}, {"text": "because you're\ntalking about things.", "start": 2429.62, "duration": 1.5}, {"text": "But sometimes they'll put some\ndata in the instruction stream.", "start": 2431.12, "duration": 4.14}, {"text": "And then it can index off\nthe instruction pointer", "start": 2435.26, "duration": 2.07}, {"text": "to get those values\nwithout having", "start": 2437.33, "duration": 2.13}, {"text": "to soil another register.", "start": 2439.46, "duration": 4.56}, {"text": "Now, the most general form is\nbase indexed scale displacement", "start": 2444.02, "duration": 4.41}, {"text": "addressing.", "start": 2448.43, "duration": 1.35}, {"text": "Wow.", "start": 2449.78, "duration": 2.31}, {"text": "This is a move that has a\nconstant plus three terms.", "start": 2452.09, "duration": 6.99}, {"text": "And this is the most complicated\ninstruction that is supported.", "start": 2459.08, "duration": 4.8}, {"text": "The mode refers to the\naddress whatever the base is.", "start": 2463.88, "duration": 5.61}, {"text": "So the base is a general purpose\nregister, in this case, rdi.", "start": 2469.49, "duration": 6.48}, {"text": "And then it adds the\nindex times the scale.", "start": 2475.97, "duration": 3.97}, {"text": "So the scale is 1, 2, 4, or 8.", "start": 2479.94, "duration": 4.43}, {"text": "And then a displacement, which\nis that number on the front.", "start": 2484.37, "duration": 5.73}, {"text": "And this gives you\nvery general indexing", "start": 2490.1, "duration": 3.21}, {"text": "of things off of a base point.", "start": 2493.31, "duration": 2.04}, {"text": "You'll often see this\nkind of accessing", "start": 2495.35, "duration": 2.73}, {"text": "when you're accessing\nstack memory,", "start": 2498.08, "duration": 2.3}, {"text": "because everything\nyou can say, here", "start": 2500.38, "duration": 1.5}, {"text": "is the base of my frame on the\nstack, and now for anything", "start": 2501.88, "duration": 4.24}, {"text": "that I want to add, I'm going\nto be going up a certain amount.", "start": 2506.12, "duration": 3.57}, {"text": "I may scaling by\na certain amount", "start": 2509.69, "duration": 1.62}, {"text": "to get the value that I want.", "start": 2511.31, "duration": 3.09}, {"text": "So once again, you will\nbecome familiar with a manual.", "start": 2514.4, "duration": 7.8}, {"text": "You don't have to\nmemorize all these,", "start": 2522.2, "duration": 2.353}, {"text": "but you do have to\nunderstand that there", "start": 2524.553, "duration": 1.667}, {"text": "are a lot of these\ncomplex addressing modes.", "start": 2526.22, "duration": 4.29}, {"text": "The jump instruction\ntake a label", "start": 2530.51, "duration": 1.83}, {"text": "as their operand,\nwhich identifies", "start": 2532.34, "duration": 2.49}, {"text": "a location in the code.", "start": 2534.83, "duration": 2.25}, {"text": "For this, the labels\ncan be symbols.", "start": 2537.08, "duration": 2.7}, {"text": "In other words, you\ncan say here's a symbol", "start": 2539.78, "duration": 1.86}, {"text": "that I want to jump to.", "start": 2541.64, "duration": 1.11}, {"text": "It might be the\nbeginning of a function,", "start": 2542.75, "duration": 2.1}, {"text": "or it might be a\nlabel that's generated", "start": 2544.85, "duration": 2.88}, {"text": "to be at the beginning\nof a loop or whatever.", "start": 2547.73, "duration": 2.18}, {"text": "They can be exact addresses--\ngo to this place in the code.", "start": 2549.91, "duration": 3.55}, {"text": "Or they can be relative\naddress-- jump to some place", "start": 2553.46, "duration": 2.48}, {"text": "as I mentioned that's indexed\noff the instruction pointer.", "start": 2555.94, "duration": 3.73}, {"text": "And then an indirect\njump takes as its", "start": 2559.67, "duration": 3.9}, {"text": "operand an indirect address--", "start": 2563.57, "duration": 1.38}, {"text": "oop, I got-- as its\noperand as its operand.", "start": 2567.932, "duration": 4.288}, {"text": "OK, so that's a typo.", "start": 2572.22, "duration": 2.03}, {"text": "It just takes an operand\nas an indirect address.", "start": 2574.25, "duration": 2.53}, {"text": "So basically, you can\nsay, jump to whatever", "start": 2576.78, "duration": 4.59}, {"text": "is pointed to by that register\nusing whatever indexing method", "start": 2581.37, "duration": 3.87}, {"text": "that you want.", "start": 2585.24, "duration": 2.76}, {"text": "So that's kind of the overview\nof the assembly language.", "start": 2588.0, "duration": 4.23}, {"text": "Now, let's take a\nlook at some idioms.", "start": 2592.23, "duration": 1.59}, {"text": "So the XOR opcode computes\nthe bitwise XOR of A and B.", "start": 2593.82, "duration": 4.8}, {"text": "We saw XOR was a great\ntrick for swapping numbers,", "start": 2598.62, "duration": 3.46}, {"text": "for example, the other day.", "start": 2602.08, "duration": 2.06}, {"text": "So often in the code,\nyou will see something", "start": 2604.14, "duration": 2.52}, {"text": "like this, xor rax rax.", "start": 2606.66, "duration": 3.24}, {"text": "What does that do?", "start": 2609.9, "duration": 2.55}, {"text": "Yeah.", "start": 2612.45, "duration": 0.5}, {"text": "AUDIENCE: Zeros the register.", "start": 2612.95, "duration": 1.05}, {"text": "CHARLES LEISERSON: It\nzeros the register.", "start": 2614.0, "duration": 1.708}, {"text": "Why does that zero the register?", "start": 2615.708, "duration": 2.418}, {"text": "AUDIENCE: Is the\nXOR just the same?", "start": 2618.126, "duration": 1.949}, {"text": "CHARLES LEISERSON:\nYeah, it's basically", "start": 2620.075, "duration": 1.625}, {"text": "taking the results of rax,\nthe results rax, xor-ing them.", "start": 2621.7, "duration": 6.745}, {"text": "And when you XOR\nsomething with itself,", "start": 2628.445, "duration": 1.625}, {"text": "you get zero, storing\nthat back into it.", "start": 2630.07, "duration": 2.425}, {"text": "So that's actually\nhow you zero things.", "start": 2632.495, "duration": 1.625}, {"text": "So you'll see that.", "start": 2634.12, "duration": 1.05}, {"text": "Whenever you see that,\nhey, what are they doing?", "start": 2635.17, "duration": 3.3}, {"text": "They're zeroing the register.", "start": 2638.47, "duration": 2.25}, {"text": "And that's actually\nquicker and easier", "start": 2640.72, "duration": 2.73}, {"text": "than having a zero constant that\nthey put into the instruction.", "start": 2643.45, "duration": 5.79}, {"text": "It saves a byte,\nbecause this ends up", "start": 2649.24, "duration": 2.7}, {"text": "being a very short instruction.", "start": 2651.94, "duration": 3.21}, {"text": "I don't remember how many\nbytes that instruction is.", "start": 2655.15, "duration": 3.66}, {"text": "Here's another one, the\ntest opcode, test A, B,", "start": 2658.81, "duration": 3.15}, {"text": "computes the bitwise AND of A\nand B and discards the result,", "start": 2661.96, "duration": 4.17}, {"text": "preserving the RFLAGS register.", "start": 2666.13, "duration": 3.78}, {"text": "So basically, it says, what\ndoes the test instruction", "start": 2669.91, "duration": 3.12}, {"text": "for these things do?", "start": 2673.03, "duration": 2.13}, {"text": "So what is the first one doing?", "start": 2678.27, "duration": 3.72}, {"text": "So it takes rcx-- yeah.", "start": 2681.99, "duration": 1.923}, {"text": "AUDIENCE: Does it jump?", "start": 2683.913, "duration": 2.415}, {"text": "It jumps to [INAUDIBLE]\nrcx [INAUDIBLE]", "start": 2686.328, "duration": 7.732}, {"text": "So it takes the\nbitwise AND of A and B.", "start": 2694.06, "duration": 4.37}, {"text": "And so then it's\nsaying jump if equal.", "start": 2698.43, "duration": 5.61}, {"text": "So--", "start": 2704.04, "duration": 1.971}, {"text": "AUDIENCE: An AND would\nbe non-zero in any", "start": 2706.011, "duration": 2.385}, {"text": "of the bits set.", "start": 2708.396, "duration": 0.954}, {"text": "CHARLES LEISERSON: Right.", "start": 2709.35, "duration": 2.45}, {"text": "AND is non-zero if any\nof the bits are set.", "start": 2711.8, "duration": 2.413}, {"text": "AUDIENCE: Right.", "start": 2714.213, "duration": 0.926}, {"text": "So if the zero flag were set,\nthat means that rcx was zero.", "start": 2715.139, "duration": 3.678}, {"text": "CHARLES LEISERSON: That's right.", "start": 2718.817, "duration": 1.333}, {"text": "So if the Zero flag is\nset, then rcx is set.", "start": 2720.15, "duration": 2.61}, {"text": "So this is going to\njump to that location", "start": 2722.76, "duration": 2.57}, {"text": "if rcx holds the value 0.", "start": 2725.33, "duration": 6.01}, {"text": "In all the other cases,\nit won't set the Zero flag", "start": 2731.34, "duration": 2.43}, {"text": "because the result\nof the AND will be 0.", "start": 2733.77, "duration": 2.61}, {"text": "So once again, that's kind\nof an idiom that they use.", "start": 2736.38, "duration": 2.577}, {"text": "What about the second one?", "start": 2738.957, "duration": 1.083}, {"text": "So this is a conditional move.", "start": 2742.94, "duration": 2.227}, {"text": "So both of them are\nbasically checking", "start": 2745.167, "duration": 1.583}, {"text": "to see if the register is 0.", "start": 2746.75, "duration": 2.55}, {"text": "And then doing something\nif it is or isn't.", "start": 2749.3, "duration": 4.08}, {"text": "But those are just\nidioms that you sort of", "start": 2753.38, "duration": 2.52}, {"text": "have to look at to see how\nit is that they accomplish", "start": 2755.9, "duration": 4.02}, {"text": "their particular thing.", "start": 2759.92, "duration": 3.15}, {"text": "Here's another one.", "start": 2763.07, "duration": 0.9}, {"text": "So the ISA can include\nseveral no-op, no operation", "start": 2763.97, "duration": 5.34}, {"text": "instructions, including\nnop, nop A-- that's", "start": 2769.31, "duration": 3.87}, {"text": "an operation with an argument--\nand data16, which sets aside", "start": 2773.18, "duration": 3.96}, {"text": "2 bytes of a nop.", "start": 2777.14, "duration": 2.88}, {"text": "So here's a line\nof assembly that we", "start": 2780.02, "duration": 2.46}, {"text": "found in some of our code--", "start": 2782.48, "duration": 2.61}, {"text": "data16 days16 data16\nnopw and then %csx.", "start": 2785.09, "duration": 5.04}, {"text": "So nopw is going to take this\nargument, which has got all", "start": 2794.32, "duration": 4.47}, {"text": "this address calculation in it.", "start": 2798.79, "duration": 2.22}, {"text": "So what do you\nthink this is doing?", "start": 2801.01, "duration": 2.98}, {"text": "What's the effect\nof this, by the way?", "start": 2803.99, "duration": 3.12}, {"text": "They're all no-ops.", "start": 2807.11, "duration": 1.59}, {"text": "So the effect is?", "start": 2808.7, "duration": 2.62}, {"text": "Nothing.", "start": 2811.32, "duration": 1.706}, {"text": "The effect is nothing.", "start": 2813.026, "duration": 2.784}, {"text": "OK, now it does set the RFLAGS.", "start": 2815.81, "duration": 1.86}, {"text": "But basically, mostly,\nit does nothing.", "start": 2817.67, "duration": 5.41}, {"text": "Why would a compiler generate\nassembly with these idioms?", "start": 2823.08, "duration": 3.9}, {"text": "Why would you get that kind of--", "start": 2826.98, "duration": 1.72}, {"text": "that's crazy, right?", "start": 2828.7, "duration": 2.59}, {"text": "Yeah.", "start": 2831.29, "duration": 0.786}, {"text": "AUDIENCE: Could it be doing\nsome cache optimization?", "start": 2832.076, "duration": 2.591}, {"text": "CHARLES LEISERSON:\nYeah, it's actually", "start": 2834.667, "duration": 1.583}, {"text": "doing alignment optimization\ntypically or code size.", "start": 2836.25, "duration": 6.03}, {"text": "So it may want to start the next\ninstruction on the beginning", "start": 2842.28, "duration": 3.75}, {"text": "of a cache line.", "start": 2846.03, "duration": 1.83}, {"text": "And, in fact, there's\na directive to do that.", "start": 2847.86, "duration": 2.97}, {"text": "If you want all your\nfunctions to start", "start": 2850.83, "duration": 1.68}, {"text": "at the beginning\nof cache line, then", "start": 2852.51, "duration": 1.53}, {"text": "it wants to make sure that\nif code gets to that point,", "start": 2854.04, "duration": 6.45}, {"text": "you'll just proceed to\njump through memory,", "start": 2860.49, "duration": 3.24}, {"text": "continue through memory.", "start": 2863.73, "duration": 2.64}, {"text": "So mainly is to optimize memory.", "start": 2866.37, "duration": 1.43}, {"text": "So you'll see those things.", "start": 2867.8, "duration": 1.15}, {"text": "I mean, you just\nhave to realize, oh,", "start": 2868.95, "duration": 1.9}, {"text": "that's the compiler\ngenerating some sum no-ops.", "start": 2870.85, "duration": 3.86}, {"text": "So that's sort of\nour brief excursion", "start": 2874.71, "duration": 4.17}, {"text": "over assembly language,\nx86 assembly language.", "start": 2878.88, "duration": 4.89}, {"text": "Now, I want to dive into\nfloating-point and vector", "start": 2883.77, "duration": 3.27}, {"text": "hardware, which is going\nto be the main part.", "start": 2887.04, "duration": 1.98}, {"text": "And then if there's any time at\nthe end, I'll show the slides--", "start": 2889.02, "duration": 3.81}, {"text": "I have a bunch of other slides\non how branch prediction works", "start": 2892.83, "duration": 3.57}, {"text": "and a variety of other\nmachines sorts of things,", "start": 2896.4, "duration": 3.27}, {"text": "that if we don't get\nto, it's no problem.", "start": 2899.67, "duration": 2.1}, {"text": "You can take a\nlook at the slides,", "start": 2901.77, "duration": 1.5}, {"text": "and there's also the\narchitecture manual.", "start": 2903.27, "duration": 4.53}, {"text": "So floating-point\ninstruction sets,", "start": 2907.8, "duration": 1.85}, {"text": "so mostly the scalar\nfloating-point operations", "start": 2909.65, "duration": 7.96}, {"text": "are access via couple of\ndifferent instruction sets.", "start": 2917.61, "duration": 4.56}, {"text": "So the history of floating\npoint is interesting,", "start": 2922.17, "duration": 2.01}, {"text": "because originally the 80-86 did\nnot have a floating-point unit.", "start": 2924.18, "duration": 5.91}, {"text": "Floating-point was\ndone in software.", "start": 2930.09, "duration": 1.83}, {"text": "And then they made\na companion chip", "start": 2931.92, "duration": 2.01}, {"text": "that would do floating-point.", "start": 2933.93, "duration": 1.65}, {"text": "And then they\nstarted integrating", "start": 2935.58, "duration": 1.56}, {"text": "and so forth as\nminiaturization took hold.", "start": 2937.14, "duration": 5.04}, {"text": "So the SSE and AVX\ninstructions do", "start": 2942.18, "duration": 2.97}, {"text": "both single and double precision\nscalar floating-point, i.e.", "start": 2945.15, "duration": 3.39}, {"text": "floats or doubles.", "start": 2948.54, "duration": 1.42}, {"text": "And then the x86 instructions,\nthe x87 instructions--", "start": 2949.96, "duration": 5.0}, {"text": "that's the 80-87 that\nwas attached to the 80-86", "start": 2954.96, "duration": 4.097}, {"text": "and that's where they get them--", "start": 2959.057, "duration": 1.333}, {"text": "support single, double,\nand extended precision", "start": 2960.39, "duration": 2.25}, {"text": "scalar floating-point\narithmetic,", "start": 2962.64, "duration": 2.16}, {"text": "including float double\nand long double.", "start": 2964.8, "duration": 2.52}, {"text": "So you can actually get a\ngreat big result of a multiply", "start": 2967.32, "duration": 3.33}, {"text": "if you use the x87\ninstruction sets.", "start": 2970.65, "duration": 3.98}, {"text": "And they also include\nvector instructions,", "start": 2974.63, "duration": 1.75}, {"text": "so you can multiply\nor add there as well--", "start": 2976.38, "duration": 2.663}, {"text": "so all these places on the\nchip where you can decide", "start": 2979.043, "duration": 2.167}, {"text": "to do one thing or another.", "start": 2981.21, "duration": 2.46}, {"text": "Compilers generally like\nthe SSE instructions", "start": 2983.67, "duration": 2.52}, {"text": "over the x87 instructions\nbecause they're simpler", "start": 2986.19, "duration": 2.91}, {"text": "to compile for and to optimize.", "start": 2989.1, "duration": 2.34}, {"text": "And the SSE opcodes are similar\nto the normal x86 opcodes.", "start": 2991.44, "duration": 6.69}, {"text": "And they use the XMM registers\nand floating-point types.", "start": 2998.13, "duration": 3.03}, {"text": "And so you'll see stuff\nlike this, where you've", "start": 3001.16, "duration": 2.37}, {"text": "got a movesd and so forth.", "start": 3003.53, "duration": 4.08}, {"text": "The suffix there is\nsaying what the data type.", "start": 3007.61, "duration": 3.06}, {"text": "In this case, it's saying it's a\ndouble precision floating-point", "start": 3010.67, "duration": 3.18}, {"text": "value, i.e. a double.", "start": 3013.85, "duration": 1.62}, {"text": "Once again, they're\nusing suffix.", "start": 3019.34, "duration": 1.56}, {"text": "The sd in this case is a double\nprecision floating-point.", "start": 3020.9, "duration": 4.17}, {"text": "The other option\nis the first letter", "start": 3025.07, "duration": 3.99}, {"text": "says whether it's single, i.e.\na scalar operation, or packed,", "start": 3029.06, "duration": 4.02}, {"text": "i.e. a vector operation.", "start": 3033.08, "duration": 3.57}, {"text": "And the second letter\nsays whether it's", "start": 3036.65, "duration": 2.22}, {"text": "single or double precision.", "start": 3038.87, "duration": 2.37}, {"text": "And so when you see one of these\noperations, you can decode,", "start": 3041.24, "duration": 3.9}, {"text": "oh, this is operating on a\n64-bit value or a 32-bit value,", "start": 3045.14, "duration": 4.92}, {"text": "floating-point value, or on\na vector of those values.", "start": 3050.06, "duration": 4.86}, {"text": "Now, what about these vectors?", "start": 3054.92, "duration": 1.92}, {"text": "So when you start using\nthe packed representation", "start": 3056.84, "duration": 3.288}, {"text": "and you start using\nvectors, you have", "start": 3060.128, "duration": 1.542}, {"text": "to understand a little bit\nabout the vector units that", "start": 3061.67, "duration": 2.16}, {"text": "are on these machines.", "start": 3063.83, "duration": 0.917}, {"text": "So the way a vector\nunit works is", "start": 3067.43, "duration": 2.52}, {"text": "that there is the processor\nissuing instructions.", "start": 3069.95, "duration": 3.96}, {"text": "And it issues the instructions\nto all of the vector units.", "start": 3073.91, "duration": 5.28}, {"text": "So for example, if you take\na look at a typical thing,", "start": 3079.19, "duration": 4.62}, {"text": "you may have a vector\nwidth of four vector units.", "start": 3083.81, "duration": 3.6}, {"text": "Each of them is\noften called a lane--", "start": 3087.41, "duration": 3.0}, {"text": "l-a-n-e.", "start": 3090.41, "duration": 1.5}, {"text": "And the x is the vector width.", "start": 3091.91, "duration": 1.66}, {"text": "And so when the\ninstruction is given,", "start": 3093.57, "duration": 1.85}, {"text": "it's given to all\nof the vector units.", "start": 3095.42, "duration": 2.4}, {"text": "And they all do it on their\nown local copy of the register.", "start": 3097.82, "duration": 3.24}, {"text": "So the register you can think\nof as a very wide thing broken", "start": 3101.06, "duration": 2.82}, {"text": "into several words.", "start": 3103.88, "duration": 2.22}, {"text": "And when I say add\ntwo vectors together,", "start": 3106.1, "duration": 2.46}, {"text": "it'll add four words\ntogether and store it back", "start": 3108.56, "duration": 4.507}, {"text": "into another vector register.", "start": 3113.067, "duration": 1.208}, {"text": "And so whatever k is--", "start": 3117.29, "duration": 2.28}, {"text": "in the example I\njust said, k was 4.", "start": 3119.57, "duration": 3.75}, {"text": "And the lanes are the\nthing that each of which", "start": 3123.32, "duration": 4.2}, {"text": "contains the integer\nfloating-point arithmetic.", "start": 3127.52, "duration": 3.84}, {"text": "But the important thing is that\nthey all operate in lock step.", "start": 3131.36, "duration": 4.57}, {"text": "It's not like one is\ngoing to do one thing", "start": 3135.93, "duration": 1.82}, {"text": "and another is going\nto do another thing.", "start": 3137.75, "duration": 1.708}, {"text": "They all have to do\nexactly the same thing.", "start": 3139.458, "duration": 1.912}, {"text": "And the basic idea here is for\nthe price of one instruction,", "start": 3141.37, "duration": 4.33}, {"text": "I can command a bunch of\noperations to be done.", "start": 3145.7, "duration": 4.56}, {"text": "Now, generally,\nvector instructions", "start": 3150.26, "duration": 1.92}, {"text": "operate in an\nelement-wise fashion,", "start": 3152.18, "duration": 2.22}, {"text": "where you take the i-th\nelement of one vector", "start": 3154.4, "duration": 2.67}, {"text": "and operate on it with the\ni-th element of another vector.", "start": 3157.07, "duration": 3.57}, {"text": "And all the lanes perform\nexactly the same operation.", "start": 3160.64, "duration": 4.98}, {"text": "Depending upon the architecture,\nsome architectures,", "start": 3165.62, "duration": 3.9}, {"text": "the operands need to be aligned.", "start": 3169.52, "duration": 2.46}, {"text": "That is you've got to have\nthe beginnings at the exactly", "start": 3171.98, "duration": 3.75}, {"text": "same place in memory, a\nmultiple of the vector length.", "start": 3175.73, "duration": 3.78}, {"text": "There are others\nwhere the vectors", "start": 3179.51, "duration": 1.71}, {"text": "can be shifted in memory.", "start": 3181.22, "duration": 2.82}, {"text": "Usually, there's a performance\ndifference between the two.", "start": 3184.04, "duration": 3.815}, {"text": "If it does support--\nsome of them", "start": 3187.855, "duration": 1.375}, {"text": "will not support unaligned\nvector operations.", "start": 3189.23, "duration": 3.33}, {"text": "So if it can't figure out that\nthey're aligned, I'm sorry,", "start": 3192.56, "duration": 3.15}, {"text": "your code will end up\nbeing executed scalar,", "start": 3195.71, "duration": 3.44}, {"text": "in a scalar fashion.", "start": 3199.15, "duration": 1.69}, {"text": "If they are aligned, it's got\nto be able to figure that out.", "start": 3200.84, "duration": 6.52}, {"text": "And in that case--", "start": 3207.36, "duration": 1.79}, {"text": "sorry, if it's not\naligned, but you", "start": 3209.15, "duration": 2.22}, {"text": "do support vector\noperizations unaligned,", "start": 3211.37, "duration": 2.7}, {"text": "it's usually slower than\nif they are aligned.", "start": 3214.07, "duration": 4.6}, {"text": "And for some machines\nnow, they actually", "start": 3218.67, "duration": 1.89}, {"text": "have good performance on both.", "start": 3220.56, "duration": 3.12}, {"text": "So it really depends\nupon the machine.", "start": 3223.68, "duration": 3.06}, {"text": "And then also there\nare some architectures", "start": 3226.74, "duration": 2.22}, {"text": "will support cross-lane\noperation, such as inserting", "start": 3228.96, "duration": 3.3}, {"text": "or extracting subsets\nof vector elements,", "start": 3232.26, "duration": 2.31}, {"text": "permuting, shuffling, scatter,\ngather types of operations.", "start": 3234.57, "duration": 4.56}, {"text": "So x86 supports several\ninstruction sets,", "start": 3242.45, "duration": 3.785}, {"text": "as I mentioned.", "start": 3246.235, "duration": 0.625}, {"text": "There's SSE.", "start": 3246.86, "duration": 0.75}, {"text": "There's AVX.", "start": 3247.61, "duration": 1.56}, {"text": "There's AVX2.", "start": 3249.17, "duration": 1.23}, {"text": "And then there's\nnow the AVX-512,", "start": 3250.4, "duration": 2.31}, {"text": "or sometimes called\nAVX3, which is not", "start": 3252.71, "duration": 3.093}, {"text": "available on the machines\nthat we'll be using,", "start": 3255.803, "duration": 1.917}, {"text": "the Haswell machines\nthat we'll be doing.", "start": 3257.72, "duration": 3.51}, {"text": "Generally, the AVX and AVX2\nextend the SSE instruction", "start": 3261.23, "duration": 5.1}, {"text": "set by using the wider\nregisters and operate on a 2.", "start": 3266.33, "duration": 5.49}, {"text": "The SSE use wider\nregisters and operate", "start": 3271.82, "duration": 2.56}, {"text": "on at most two operands.", "start": 3274.38, "duration": 1.4}, {"text": "The AVX ones can use the 256 and\nalso have three operands, not", "start": 3275.78, "duration": 6.51}, {"text": "just two operations.", "start": 3282.29, "duration": 1.58}, {"text": "So say you can say add A\nto B and store it in C,", "start": 3283.87, "duration": 3.82}, {"text": "as opposed to saying add\nA to B and store it in B.", "start": 3287.69, "duration": 4.11}, {"text": "So it can also support three.", "start": 3291.8, "duration": 1.5}, {"text": "Yeah, most of them are\nsimilar to traditional opcodes", "start": 3296.61, "duration": 5.04}, {"text": "with minor differences.", "start": 3301.65, "duration": 1.17}, {"text": "So if you look at them,\nif you have an SSE,", "start": 3302.82, "duration": 5.03}, {"text": "it basically looks just\nlike the traditional name,", "start": 3307.85, "duration": 3.88}, {"text": "like add in this case,\nbut you can then say,", "start": 3311.73, "duration": 2.97}, {"text": "do a packed add or a\nvector with packed data.", "start": 3314.7, "duration": 5.9}, {"text": "So the v prefix it's AVX.", "start": 3320.6, "duration": 2.85}, {"text": "So if you see it's\nv, you go to the part", "start": 3323.45, "duration": 1.893}, {"text": "in the manual that says AVX.", "start": 3325.343, "duration": 1.167}, {"text": "If you see the p's, that\nsay it's packed data.", "start": 3329.39, "duration": 3.03}, {"text": "Then you go to SSE if\nit doesn't have the v.", "start": 3332.42, "duration": 6.34}, {"text": "And the p prefix distinguishing\ninteger vector instruction,", "start": 3338.76, "duration": 4.07}, {"text": "you got me.", "start": 3342.83, "duration": 0.73}, {"text": "I tried to think why is p\ndistinguishing an integer?", "start": 3343.56, "duration": 5.012}, {"text": "It's like p, good mnemonic\nfor integer, right?", "start": 3348.572, "duration": 4.528}, {"text": "Then in addition, they do\nthis aliasing trick again,", "start": 3357.07, "duration": 3.6}, {"text": "where the YMM registers actually\nalias the XMM registers.", "start": 3360.67, "duration": 5.89}, {"text": "So you can use both\noperations, but you've", "start": 3366.56, "duration": 2.05}, {"text": "got to be careful\nwhat's going on,", "start": 3368.61, "duration": 3.127}, {"text": "because they just extended them.", "start": 3371.737, "duration": 1.333}, {"text": "And now, of course,\nwith AVX-512,", "start": 3373.07, "duration": 3.75}, {"text": "they did another\nextension to 512 bits.", "start": 3376.82, "duration": 2.73}, {"text": "That's vectors stuff.", "start": 3383.06, "duration": 1.64}, {"text": "So you can use those explicitly.", "start": 3384.7, "duration": 2.89}, {"text": "The compiler will\nvectorize for you.", "start": 3387.59, "duration": 1.74}, {"text": "And the homework this week takes\nyou through some vectorization", "start": 3389.33, "duration": 4.38}, {"text": "exercises.", "start": 3393.71, "duration": 0.64}, {"text": "It's actually a lot of fun.", "start": 3394.35, "duration": 1.125}, {"text": "We were just going over\nit in a staff meeting.", "start": 3395.475, "duration": 1.935}, {"text": "And it's really fun.", "start": 3397.41, "duration": 1.43}, {"text": "I think it's a\nreally fun exercise.", "start": 3398.84, "duration": 1.59}, {"text": "We introduced that\nlast year, by the way,", "start": 3400.43, "duration": 2.31}, {"text": "or maybe two years ago.", "start": 3402.74, "duration": 1.54}, {"text": "But, in any case,\nit's a fun one--", "start": 3404.28, "duration": 2.27}, {"text": "for my definition\nof fun, which I hope", "start": 3410.55, "duration": 3.57}, {"text": "is your definition of fun.", "start": 3414.12, "duration": 3.54}, {"text": "Now, I want to talk generally\nabout computer architecture.", "start": 3417.66, "duration": 2.88}, {"text": "And I'm not going to get through\nall of these slides, as I say.", "start": 3420.54, "duration": 4.89}, {"text": "But I want to get started\non the and give you", "start": 3425.43, "duration": 2.52}, {"text": "a sense of other things\ngoing on in the processor", "start": 3427.95, "duration": 2.9}, {"text": "that you should be aware of.", "start": 3430.85, "duration": 2.21}, {"text": "So in 6.004, you probably talked\nabout a 5-stage processor.", "start": 3433.06, "duration": 5.63}, {"text": "Anybody remember that?", "start": 3438.69, "duration": 2.15}, {"text": "OK, 5-stage processor.", "start": 3440.84, "duration": 1.9}, {"text": "There's an Instruction Fetch.", "start": 3442.74, "duration": 1.74}, {"text": "There's an Instruction Decode.", "start": 3444.48, "duration": 1.44}, {"text": "There's an Execute.", "start": 3445.92, "duration": 1.74}, {"text": "Then there's a\nMemory Addressing.", "start": 3447.66, "duration": 3.78}, {"text": "And then you Write\nback the values.", "start": 3451.44, "duration": 2.52}, {"text": "And this is done as\na pipeline, so as", "start": 3453.96, "duration": 2.82}, {"text": "to make-- you could do\nall of this in one thing,", "start": 3456.78, "duration": 2.76}, {"text": "but then you have\na long clock cycle.", "start": 3459.54, "duration": 1.617}, {"text": "And you'll only be able\nto do one thing at a time.", "start": 3461.157, "duration": 2.083}, {"text": "Instead, they stack\nthem together.", "start": 3463.24, "duration": 2.69}, {"text": "So here's a block diagram\nof the 5-stage processor.", "start": 3465.93, "duration": 5.68}, {"text": "We read the\ninstruction from memory", "start": 3471.61, "duration": 1.59}, {"text": "in the instruction fetch cycle.", "start": 3473.2, "duration": 2.31}, {"text": "Then we decode it.", "start": 3475.51, "duration": 2.04}, {"text": "Basically, it takes\na look at, what", "start": 3477.55, "duration": 1.47}, {"text": "is the opcode, what are the\naddressing modes, et cetera,", "start": 3479.02, "duration": 3.18}, {"text": "and figures out what\nit actually has to do", "start": 3482.2, "duration": 2.84}, {"text": "and actually performs\nthe ALU operations.", "start": 3485.04, "duration": 2.71}, {"text": "And then it reads and\nwrites the data memory.", "start": 3487.75, "duration": 2.31}, {"text": "And then it writes back\nthe results into registers.", "start": 3490.06, "duration": 2.37}, {"text": "That's typically a common\nway that these things", "start": 3492.43, "duration": 3.3}, {"text": "go for a 5-stage processor.", "start": 3495.73, "duration": 3.69}, {"text": "By the way, this is\nvastly oversimplified.", "start": 3499.42, "duration": 3.06}, {"text": "You can take 6823 if\nyou want to learn truth.", "start": 3502.48, "duration": 3.9}, {"text": "I'm going to tell you\nnothing but white lies", "start": 3506.38, "duration": 4.59}, {"text": "for this lecture.", "start": 3510.97, "duration": 1.47}, {"text": "Now, if you look at the\nIntel Haswell, the machine", "start": 3512.44, "duration": 5.7}, {"text": "that we're using, it actually\nhas between 14 and 19 pipeline", "start": 3518.14, "duration": 5.07}, {"text": "stages.", "start": 3523.21, "duration": 2.08}, {"text": "The 14 to 19 reflects\nthe fact that there", "start": 3525.29, "duration": 3.86}, {"text": "are different paths\nthrough it that", "start": 3529.15, "duration": 1.53}, {"text": "take different amounts of time.", "start": 3530.68, "duration": 2.34}, {"text": "It also I think\nreflects a little bit", "start": 3533.02, "duration": 1.8}, {"text": "that nobody has published\nthe Intel internal stuff.", "start": 3534.82, "duration": 3.33}, {"text": "So maybe we're not sure if\nit's 14 to 19, but somewhere", "start": 3538.15, "duration": 4.35}, {"text": "in that range.", "start": 3542.5, "duration": 0.948}, {"text": "But I think it's actually\nbecause the different lengths", "start": 3543.448, "duration": 2.292}, {"text": "of time as I was explaining.", "start": 3545.74, "duration": 2.35}, {"text": "So what I want to do is--", "start": 3548.09, "duration": 2.66}, {"text": "you've seen the\n5-stage price line.", "start": 3550.75, "duration": 1.65}, {"text": "I want to talk about the\ndifference between that", "start": 3552.4, "duration": 2.52}, {"text": "and a modern processor by\nlooking at several design", "start": 3554.92, "duration": 2.61}, {"text": "features.", "start": 3557.53, "duration": 0.69}, {"text": "We already talked\nabout vector hardware.", "start": 3558.22, "duration": 2.13}, {"text": "I then want to talk\nabout super scalar", "start": 3560.35, "duration": 2.07}, {"text": "processing, out of\norder execution,", "start": 3562.42, "duration": 1.86}, {"text": "and branch prediction\na little bit.", "start": 3564.28, "duration": 3.72}, {"text": "And the out of order, I'm\ngoing to skip a bunch of that", "start": 3568.0, "duration": 2.4}, {"text": "because it has to do with\nscore boarding, which", "start": 3570.4, "duration": 2.22}, {"text": "is really interesting and fun,\nbut it's also time consuming.", "start": 3572.62, "duration": 4.59}, {"text": "But it's really\ninteresting and fun.", "start": 3577.21, "duration": 1.5}, {"text": "That's what you learn in 6823.", "start": 3578.71, "duration": 3.51}, {"text": "So historically,\nthere's two ways", "start": 3582.22, "duration": 3.39}, {"text": "that people make\nprocessors go faster--", "start": 3585.61, "duration": 2.22}, {"text": "by exploiting parallelism\nand by exploiting locality.", "start": 3587.83, "duration": 5.06}, {"text": "And parallelism, there's\ninstruction-- well,", "start": 3592.89, "duration": 3.25}, {"text": "we already did\nword-level parallelism", "start": 3596.14, "duration": 2.19}, {"text": "in the bit tricks thing.", "start": 3598.33, "duration": 2.41}, {"text": "But there's also\ninstruction-level parallelism,", "start": 3600.74, "duration": 2.61}, {"text": "so-called ILB,\nvectorization and multicore.", "start": 3603.35, "duration": 3.38}, {"text": "And for locality, the main thing\nthat's used there is caching.", "start": 3606.73, "duration": 4.733}, {"text": "I would say also\nthe fact that you", "start": 3611.463, "duration": 1.417}, {"text": "have a design with registers\nthat also reflects locality,", "start": 3612.88, "duration": 3.702}, {"text": "because the way that the\nprocessor wants to do things", "start": 3616.582, "duration": 2.208}, {"text": "is fetch stuff from memory.", "start": 3618.79, "duration": 1.335}, {"text": "It doesn't want to\noperate on it in memory.", "start": 3620.125, "duration": 1.845}, {"text": "That's very expensive.", "start": 3621.97, "duration": 1.02}, {"text": "It wants to fetch things into\nmemory, get enough of them", "start": 3622.99, "duration": 2.623}, {"text": "there that you can\ndo some calculations,", "start": 3625.613, "duration": 1.667}, {"text": "do a whole bunch\nof calculations,", "start": 3627.28, "duration": 1.53}, {"text": "and then put them\nback out there.", "start": 3628.81, "duration": 3.3}, {"text": "So this lecture we're talking\nabout ILP and vectorization.", "start": 3632.11, "duration": 2.67}, {"text": "So let me talk about\ninstruction-level parallelism.", "start": 3634.78, "duration": 4.75}, {"text": "So when you have, let's\nsay, a 5-stage pipeline,", "start": 3639.53, "duration": 7.34}, {"text": "you're interested in\nfinding opportunities", "start": 3646.87, "duration": 1.83}, {"text": "to execute multiple\ninstruction simultaneously.", "start": 3648.7, "duration": 3.93}, {"text": "So in instruction 1, it's going\nto do an instruction fetch.", "start": 3652.63, "duration": 4.86}, {"text": "Then it does its decode.", "start": 3657.49, "duration": 1.08}, {"text": "And so it takes five cycles for\nthis instruction to complete.", "start": 3658.57, "duration": 6.36}, {"text": "So ideally what you'd\nlike is that you", "start": 3664.93, "duration": 2.49}, {"text": "can start instruction 2 on cycle\n2, instruction 3 on cycle 3,", "start": 3667.42, "duration": 5.19}, {"text": "and so forth, and have 5\ninstructions-- once you", "start": 3672.61, "duration": 3.03}, {"text": "get into the steady state,\nhave 5 instructions executing", "start": 3675.64, "duration": 3.39}, {"text": "all the time.", "start": 3679.03, "duration": 1.56}, {"text": "That would be ideal, where\neach one takes just one thing.", "start": 3680.59, "duration": 4.53}, {"text": "So that's really pretty good.", "start": 3685.12, "duration": 2.047}, {"text": "And that would improve\nthe throughput.", "start": 3687.167, "duration": 1.583}, {"text": "Even though it might\ntake a long time", "start": 3688.75, "duration": 1.542}, {"text": "to get one instruction done,\nI can have many instructions", "start": 3690.292, "duration": 4.428}, {"text": "in the pipeline at some time.", "start": 3694.72, "duration": 1.56}, {"text": "So each pipeline is executing\na different instruction.", "start": 3699.64, "duration": 3.03}, {"text": "However, in practice\nthis isn't what happens.", "start": 3702.67, "duration": 2.34}, {"text": "In practice, you\ndiscover that there are", "start": 3705.01, "duration": 4.41}, {"text": "what's called pipeline stalls.", "start": 3709.42, "duration": 1.77}, {"text": "When it comes time to\nexecute an instruction,", "start": 3711.19, "duration": 2.76}, {"text": "for some correctness reason, it\ncannot execute the instruction.", "start": 3713.95, "duration": 4.38}, {"text": "It has to wait.", "start": 3718.33, "duration": 1.2}, {"text": "And that's a pipeline stall.", "start": 3719.53, "duration": 1.86}, {"text": "That's what you\nwant to try to avoid", "start": 3721.39, "duration": 1.65}, {"text": "and the compiler tries to Bruce\ncode that will avoid stalls.", "start": 3723.04, "duration": 5.1}, {"text": "So why do stalls happen?", "start": 3728.14, "duration": 3.15}, {"text": "They happen because of\nwhat are called hazards.", "start": 3731.29, "duration": 2.58}, {"text": "There's actually two\nnotions of hazard.", "start": 3733.87, "duration": 1.65}, {"text": "And this is one of them.", "start": 3735.52, "duration": 1.21}, {"text": "The other is a race\ncondition hazard.", "start": 3736.73, "duration": 2.19}, {"text": "This is dependency hazard.", "start": 3738.92, "duration": 1.67}, {"text": "But people call\nthem both hazards,", "start": 3740.59, "duration": 1.56}, {"text": "just like they call the second\nstage of compilation compiling.", "start": 3742.15, "duration": 7.24}, {"text": "It's like they make\nup these words.", "start": 3749.39, "duration": 2.87}, {"text": "So here's three types of\nhazards that can prevent", "start": 3752.26, "duration": 2.88}, {"text": "an instruction from executing.", "start": 3755.14, "duration": 2.04}, {"text": "First of all, there's what's\ncalled a structural hazard.", "start": 3757.18, "duration": 3.48}, {"text": "Two instructions attempt to\nuse the same functional unit,", "start": 3760.66, "duration": 2.74}, {"text": "the same time.", "start": 3763.4, "duration": 1.65}, {"text": "If there's, for example, only\none floating-point multiplier", "start": 3765.05, "duration": 7.49}, {"text": "and two of them try to use it at\nthe same time, one has to wait.", "start": 3772.54, "duration": 3.84}, {"text": "In modern processors, there's\na bunch of each of those.", "start": 3776.38, "duration": 2.53}, {"text": "But if you have k functional\nunits and k plus 1 instructions", "start": 3778.91, "duration": 5.6}, {"text": "want to access it,\nyou're out of luck.", "start": 3784.51, "duration": 3.18}, {"text": "One of them is going\nto have to wait.", "start": 3787.69, "duration": 1.68}, {"text": "The second is a data hazard.", "start": 3789.37, "duration": 2.502}, {"text": "This is when an\ninstruction depends", "start": 3791.872, "duration": 1.458}, {"text": "on the result of a prior\ninstruction in the pipeline.", "start": 3793.33, "duration": 3.99}, {"text": "So one instruction is\ncomputing a value that", "start": 3797.32, "duration": 4.29}, {"text": "is going to stick in rcx, say.", "start": 3801.61, "duration": 5.45}, {"text": "So they stick it into rcx.", "start": 3807.06, "duration": 1.3}, {"text": "The other one has to\nread the value from rcx", "start": 3808.36, "duration": 2.19}, {"text": "and it comes later.", "start": 3810.55, "duration": 2.79}, {"text": "That other instruction\nhas to wait", "start": 3813.34, "duration": 1.53}, {"text": "until that value is written\nthere before it can read it.", "start": 3814.87, "duration": 2.61}, {"text": "That's a data hazard.", "start": 3817.48, "duration": 1.95}, {"text": "And a control\nhazard is where you", "start": 3819.43, "duration": 5.52}, {"text": "decide that you\nneed to make a jump", "start": 3824.95, "duration": 2.82}, {"text": "and you can't execute\nthe next instruction,", "start": 3827.77, "duration": 2.16}, {"text": "because you don't know which\nway the jump is going to go.", "start": 3829.93, "duration": 2.993}, {"text": "So if you have a\nconditional jump,", "start": 3832.923, "duration": 1.417}, {"text": "it's like, well, what's the next\ninstruction after that jump?", "start": 3834.34, "duration": 2.91}, {"text": "I don't know.", "start": 3837.25, "duration": 0.98}, {"text": "So I have to wait\nto execute that.", "start": 3838.23, "duration": 1.66}, {"text": "I can't go ahead and\ndo the jump and then do", "start": 3839.89, "duration": 2.19}, {"text": "the next instruction after\nit, because I don't know what", "start": 3842.08, "duration": 2.34}, {"text": "happened to the previous one.", "start": 3844.42, "duration": 1.208}, {"text": "Now of these, we're going to\nmostly talk about data hazards.", "start": 3849.03, "duration": 4.94}, {"text": "So an instruction can\ncreate a data hazard--", "start": 3853.97, "duration": 2.52}, {"text": "I can create a data hazard\ndue to a dependence between i", "start": 3856.49, "duration": 3.57}, {"text": "and j.", "start": 3860.06, "duration": 1.26}, {"text": "So the first type is\ncalled a true dependence,", "start": 3861.32, "duration": 3.06}, {"text": "or I read after\nwrite dependence.", "start": 3864.38, "duration": 4.44}, {"text": "And this is where,\nas in this example,", "start": 3868.82, "duration": 2.22}, {"text": "I'm adding something\nand storing into rax", "start": 3871.04, "duration": 2.55}, {"text": "and the next instruction\nwants to read from rax.", "start": 3873.59, "duration": 2.07}, {"text": "So the second\ninstruction can't get", "start": 3878.5, "duration": 2.2}, {"text": "going until the\nprevious one or it may", "start": 3880.7, "duration": 3.12}, {"text": "stall until the result of\nthe previous one is known.", "start": 3883.82, "duration": 4.333}, {"text": "There's another one\ncalled an anti-dependence.", "start": 3888.153, "duration": 1.917}, {"text": "This is where I want to\nwrite into a location,", "start": 3890.07, "duration": 2.82}, {"text": "but I have to wait until the\nprevious instruction has read", "start": 3892.89, "duration": 3.36}, {"text": "the value, because\notherwise I'm going", "start": 3896.25, "duration": 3.53}, {"text": "to clobber that\ninstruction and clobber", "start": 3899.78, "duration": 2.92}, {"text": "the value before it gets read.", "start": 3902.7, "duration": 2.88}, {"text": "so that's an anti-dependence.", "start": 3905.58, "duration": 3.09}, {"text": "And then the final one\nis an output dependence,", "start": 3908.67, "duration": 3.51}, {"text": "where they're both trying to\nmove something to are rax.", "start": 3912.18, "duration": 5.87}, {"text": "So why would two things\nwant to move things", "start": 3918.05, "duration": 4.56}, {"text": "to the same location?", "start": 3922.61, "duration": 1.8}, {"text": "After all, one of them is going\nto be lost and just not do", "start": 3924.41, "duration": 2.91}, {"text": "that instruction.", "start": 3927.32, "duration": 3.68}, {"text": "Why wouldn't--", "start": 3931.0, "duration": 0.618}, {"text": "AUDIENCE: Set some flags.", "start": 3931.618, "duration": 1.042}, {"text": "CHARLES LEISERSON:\nYeah, maybe because it", "start": 3932.66, "duration": 1.708}, {"text": "wants to set some flags.", "start": 3934.368, "duration": 2.662}, {"text": "So that's one reason\nthat it might do this,", "start": 3937.03, "duration": 4.22}, {"text": "because you know the\nfirst instruction set", "start": 3941.25, "duration": 1.75}, {"text": "some flags in addition to moving\nthe output to that location.", "start": 3943.0, "duration": 4.8}, {"text": "And there's one other reason.", "start": 3947.8, "duration": 1.58}, {"text": "What's the other reason?", "start": 3949.38, "duration": 1.0}, {"text": "I'm blanking.", "start": 3954.29, "duration": 0.75}, {"text": "There's two reasons.", "start": 3955.04, "duration": 1.75}, {"text": "And I didn't put\nthem in my notes.", "start": 3956.79, "duration": 1.52}, {"text": "I don't remember.", "start": 3963.59, "duration": 1.62}, {"text": "OK, but anyway, that's a\ngood question for quiz then.", "start": 3965.21, "duration": 3.5}, {"text": "OK, give me two reasons-- yeah.", "start": 3971.38, "duration": 2.324}, {"text": "AUDIENCE: Can there be\nintermediate instructions", "start": 3973.704, "duration": 3.304}, {"text": "like between those [INAUDIBLE]", "start": 3977.008, "duration": 3.017}, {"text": "CHARLES LEISERSON: There\ncould, but of course", "start": 3980.025, "duration": 1.875}, {"text": "then if it's going to\nuse that register, then--", "start": 3981.9, "duration": 4.98}, {"text": "oh, I know the other reason.", "start": 3986.88, "duration": 2.61}, {"text": "So this is still\ngood for a quiz.", "start": 3989.49, "duration": 1.865}, {"text": "The other reason is there\nmay be aliasing going on.", "start": 3991.355, "duration": 2.125}, {"text": "Maybe an intervening\ninstruction uses one", "start": 3993.48, "duration": 4.2}, {"text": "of the values in its aliasist.", "start": 3997.68, "duration": 2.58}, {"text": "So uses part of the result\nor whatever, there still", "start": 4000.26, "duration": 3.27}, {"text": "could be a dependency.", "start": 4003.53, "duration": 3.58}, {"text": "Anyway, some\narithmetic operations", "start": 4007.11, "duration": 5.78}, {"text": "are complex to\nimplement in hardware", "start": 4012.89, "duration": 1.56}, {"text": "and have long latencies.", "start": 4014.45, "duration": 2.34}, {"text": "So here's some sample opcodes\nand how many latency they take.", "start": 4016.79, "duration": 6.48}, {"text": "They take a different number.", "start": 4023.27, "duration": 2.02}, {"text": "So, for example, integer\ndivision actually is variable,", "start": 4025.29, "duration": 3.31}, {"text": "but a multiply takes\nabout three times what", "start": 4028.6, "duration": 2.11}, {"text": "most of the integer\noperations are.", "start": 4030.71, "duration": 2.64}, {"text": "And floating-point\nmultiply is like 5.", "start": 4033.35, "duration": 2.7}, {"text": "And then fma, what's fma?", "start": 4036.05, "duration": 1.485}, {"text": "Fused multiply add.", "start": 4040.74, "duration": 1.65}, {"text": "This is where you're doing\nboth a multiply and an add.", "start": 4042.39, "duration": 2.4}, {"text": "And why do we care about\nfuse multiply adds?", "start": 4044.79, "duration": 2.15}, {"text": "AUDIENCE: For memory\naccessing and [INAUDIBLE]", "start": 4050.174, "duration": 1.917}, {"text": "CHARLES LEISERSON: Not\nfor memory accessing.", "start": 4052.091, "duration": 1.833}, {"text": "This is actually floating-point\nmultiply and add.", "start": 4053.924, "duration": 2.286}, {"text": "It's called linear algebra.", "start": 4059.83, "duration": 3.36}, {"text": "So when you do major\nmultiplication,", "start": 4063.19, "duration": 1.8}, {"text": "you're doing dot product.", "start": 4064.99, "duration": 1.08}, {"text": "You're doing\nmultiplies and adds.", "start": 4066.07, "duration": 2.22}, {"text": "So that kind of thing, that's\nwhere you do a lot of those.", "start": 4068.29, "duration": 4.66}, {"text": "So how does the\nhardware accommodate", "start": 4072.95, "duration": 1.76}, {"text": "these complex operations?", "start": 4074.71, "duration": 2.59}, {"text": "So the strategy that much\nhardware tends to use", "start": 4077.3, "duration": 4.91}, {"text": "is to have separate functional\nunits for complex operations,", "start": 4082.21, "duration": 2.97}, {"text": "such as floating-point\narithmetic.", "start": 4085.18, "duration": 2.31}, {"text": "So there may be in fact\nseparate registers,", "start": 4087.49, "duration": 3.51}, {"text": "for example, the XMM\nregisters, that only", "start": 4091.0, "duration": 2.04}, {"text": "work with the floating point.", "start": 4093.04, "duration": 1.57}, {"text": "So you have your basic\n5-stage pipeline.", "start": 4094.61, "duration": 1.82}, {"text": "You have another pipeline\nthat's off on the side.", "start": 4096.43, "duration": 2.549}, {"text": "And it's going to take\nmultiple cycles sometimes", "start": 4098.979, "duration": 2.25}, {"text": "for things and maybe pipeline\nto a different depth.", "start": 4101.229, "duration": 4.991}, {"text": "And so you basically\nseparate these operations.", "start": 4106.22, "duration": 6.809}, {"text": "The functional units\nmay be pipelined, fully,", "start": 4113.029, "duration": 1.921}, {"text": "partially, or not at all.", "start": 4114.95, "duration": 3.61}, {"text": "And so I now have a whole bunch\nof different functional units,", "start": 4118.56, "duration": 6.063}, {"text": "and there's different\npaths that I'm", "start": 4124.623, "duration": 1.5}, {"text": "going to be able to take through\nthe data path of the processor.", "start": 4126.123, "duration": 6.207}, {"text": "So in Haswell, they have\ninteger vector floating-point", "start": 4132.33, "duration": 4.46}, {"text": "distributed among eight\ndifferent ports, which", "start": 4136.79, "duration": 3.12}, {"text": "is sort from the entry.", "start": 4139.91, "duration": 4.71}, {"text": "So given that, things\nget really complicated.", "start": 4144.62, "duration": 2.85}, {"text": "If we go back to\nour simple diagram,", "start": 4147.47, "duration": 4.139}, {"text": "suppose we have all these\nadditional functional units,", "start": 4151.609, "duration": 3.181}, {"text": "how can I now exploit more\ninstruction-level parallelism?", "start": 4154.79, "duration": 7.18}, {"text": "So right now, we can start\nup one operation at a time.", "start": 4161.97, "duration": 5.09}, {"text": "What might I do to get more\nparallelism out of the hardware", "start": 4167.06, "duration": 4.61}, {"text": "that I've got?", "start": 4171.67, "duration": 1.428}, {"text": "What do you think\ncomputer architects did?", "start": 4179.08, "duration": 1.75}, {"text": "OK.", "start": 4183.26, "duration": 0.5}, {"text": "AUDIENCE: It's a guess but, you\ncould glue together [INAUDIBLE]", "start": 4183.76, "duration": 6.03}, {"text": "CHARLES LEISERSON: Yeah, so\neven simpler than that, but", "start": 4189.79, "duration": 2.91}, {"text": "which is implied in\nwhat you're saying,", "start": 4192.7, "duration": 1.65}, {"text": "is you can just fetch and\nissue multiple instructions", "start": 4194.35, "duration": 5.01}, {"text": "per cycle.", "start": 4199.36, "duration": 1.93}, {"text": "So rather than just\ndoing one per cycle", "start": 4201.29, "duration": 1.74}, {"text": "as we showed with a\ntypical pipeline processor,", "start": 4203.03, "duration": 2.58}, {"text": "let me fetch several\nthat use different parts", "start": 4205.61, "duration": 2.25}, {"text": "of the processor pipeline,\nbecause they're not", "start": 4207.86, "duration": 2.34}, {"text": "going to interfere, to\nkeep everything busy.", "start": 4210.2, "duration": 4.77}, {"text": "And so that's basically\nwhat's called a super scalar", "start": 4214.97, "duration": 2.58}, {"text": "processor, where it's not\nexecuting one thing at a time.", "start": 4217.55, "duration": 2.88}, {"text": "It's executing multiple\nthings at a time.", "start": 4220.43, "duration": 3.91}, {"text": "So Haswell, in fact,\nbreaks up the instructions", "start": 4224.34, "duration": 3.02}, {"text": "into simpler operations,\ncalled micro-ops.", "start": 4227.36, "duration": 2.97}, {"text": "And they can emit for\nmicro-ops per cycle", "start": 4230.33, "duration": 3.06}, {"text": "to the rest of the pipeline.", "start": 4233.39, "duration": 1.83}, {"text": "And the fetch and decode\nstages implement optimizations", "start": 4235.22, "duration": 3.15}, {"text": "on micro-op processing,\nincluding special cases", "start": 4238.37, "duration": 3.48}, {"text": "for common patents.", "start": 4241.85, "duration": 0.9}, {"text": "For example, if it sees\nthe XOR of rax and rax,", "start": 4242.75, "duration": 4.65}, {"text": "it knows that rax\nis being set to 0.", "start": 4247.4, "duration": 2.7}, {"text": "It doesn't even use a\nfunctional unit for that.", "start": 4250.1, "duration": 3.02}, {"text": "It just does it and it's done.", "start": 4253.12, "duration": 2.41}, {"text": "It has just a special\nlogic that observes", "start": 4255.53, "duration": 3.29}, {"text": "that because it's such a\ncommon thing to set things out.", "start": 4258.82, "duration": 3.2}, {"text": "And so that means that now\nyour processor can execute", "start": 4262.02, "duration": 3.01}, {"text": "a lot of things at one time.", "start": 4265.03, "duration": 1.4}, {"text": "And that's the machines\nthat you're doing.", "start": 4266.43, "duration": 1.75}, {"text": "That's why when I said if\nyou save one add instruction,", "start": 4268.18, "duration": 4.27}, {"text": "it probably doesn't\nmake any difference", "start": 4272.45, "duration": 1.82}, {"text": "in today's processor,\nbecause there's probably", "start": 4274.27, "duration": 1.95}, {"text": "an idle adder lying around.", "start": 4276.22, "duration": 1.83}, {"text": "There's probably a-- did\nI read caught how many--", "start": 4278.05, "duration": 4.51}, {"text": "where do we go here?", "start": 4282.56, "duration": 2.0}, {"text": "Yeah, so if you look\nhere, you can even", "start": 4284.56, "duration": 3.06}, {"text": "discover that there are\nactually a bunch of ALUs that", "start": 4287.62, "duration": 3.6}, {"text": "are capable of doing an add.", "start": 4291.22, "duration": 3.97}, {"text": "So they're all over\nthe map in Haswell.", "start": 4295.19, "duration": 3.54}, {"text": "Now, still, we are insisting\nthat the processors execute", "start": 4301.25, "duration": 4.77}, {"text": "in things in order.", "start": 4306.02, "duration": 1.8}, {"text": "And that's kind of the\nnext stage is, how do you", "start": 4307.82, "duration": 3.0}, {"text": "end up making things run--", "start": 4310.82, "duration": 4.245}, {"text": "that is, how do you make it\nso that you can free yourself", "start": 4318.8, "duration": 5.58}, {"text": "from the tyranny of one\ninstruction after the other?", "start": 4324.38, "duration": 4.02}, {"text": "And so the first\nthing is there's", "start": 4328.4, "duration": 3.12}, {"text": "a strategy called bypassing.", "start": 4331.52, "duration": 2.25}, {"text": "So suppose that you have\ninstructions running into rax.", "start": 4333.77, "duration": 5.73}, {"text": "And then you're going\nto use that to read.", "start": 4339.5, "duration": 3.3}, {"text": "Well, why bother waiting for it\nto be stored into the register", "start": 4342.8, "duration": 4.65}, {"text": "file and then pulled back out\nfor the second instruction?", "start": 4347.45, "duration": 4.11}, {"text": "Instead, let's have a\nbypass, a special circuit", "start": 4351.56, "duration": 5.13}, {"text": "that identifies that\nkind of situation", "start": 4356.69, "duration": 2.64}, {"text": "and feeds it directly\nto the next instruction", "start": 4359.33, "duration": 3.57}, {"text": "without requiring that it\ngo into the register file", "start": 4362.9, "duration": 2.76}, {"text": "and back out.", "start": 4365.66, "duration": 1.77}, {"text": "So that's called bypassing.", "start": 4367.43, "duration": 1.505}, {"text": "There are lots of places\nwhere things are bypassed.", "start": 4368.935, "duration": 2.125}, {"text": "And we'll talk about it more.", "start": 4371.06, "duration": 2.34}, {"text": "So normally, you\nwould stall waiting", "start": 4373.4, "duration": 2.1}, {"text": "for it to be written back.", "start": 4375.5, "duration": 1.95}, {"text": "And now, when you\neliminate it, now I", "start": 4377.45, "duration": 2.49}, {"text": "can move it way\nforward, because I just", "start": 4379.94, "duration": 2.31}, {"text": "use the bypass path to execute.", "start": 4382.25, "duration": 4.35}, {"text": "And it allows the\nsecond instruction", "start": 4386.6, "duration": 1.5}, {"text": "to get going earlier.", "start": 4388.1, "duration": 0.93}, {"text": "What else can we do?", "start": 4392.9, "duration": 1.04}, {"text": "Well, let's take a\nlarge code example.", "start": 4393.94, "duration": 3.903}, {"text": "Given the amount\nof time, what I'm", "start": 4397.843, "duration": 1.417}, {"text": "going to do is\nbasically say, you", "start": 4399.26, "duration": 1.92}, {"text": "can go through and\nfigure out what", "start": 4401.18, "duration": 1.53}, {"text": "are the read after\nwrite dependencies", "start": 4402.71, "duration": 2.22}, {"text": "and the write after\nread dependencies.", "start": 4404.93, "duration": 2.4}, {"text": "They're all over the place.", "start": 4407.33, "duration": 1.21}, {"text": "And what you can\ndo is if you look", "start": 4408.54, "duration": 4.67}, {"text": "at what the dependencies are\nthat I just flashed through,", "start": 4413.21, "duration": 3.742}, {"text": "you can discover, oh,\nthere's all these things.", "start": 4416.952, "duration": 1.958}, {"text": "Each one right now has to\nwait for the previous one", "start": 4418.91, "duration": 5.31}, {"text": "before it can get started.", "start": 4424.22, "duration": 2.85}, {"text": "But there are\nsome-- for example,", "start": 4427.07, "duration": 2.63}, {"text": "the first one is\njust issue order.", "start": 4429.7, "duration": 1.75}, {"text": "You can't start the second--", "start": 4431.45, "duration": 1.62}, {"text": "if it's in order, you\ncan't start the second", "start": 4433.07, "duration": 2.37}, {"text": "till you've started\nthe first, that it's", "start": 4435.44, "duration": 2.85}, {"text": "finished the first stage.", "start": 4438.29, "duration": 1.572}, {"text": "But the other thing\nhere is there's", "start": 4439.862, "duration": 1.458}, {"text": "a data dependence between the\nsecond and third instructions.", "start": 4441.32, "duration": 3.57}, {"text": "So if you look at the second\nand third instructions,", "start": 4444.89, "duration": 3.15}, {"text": "they're both using XMM2.", "start": 4448.04, "duration": 2.9}, {"text": "And so we're prevented.", "start": 4450.94, "duration": 2.255}, {"text": "So one of the questions\nthere is, well,", "start": 4453.195, "duration": 1.625}, {"text": "why not do a little bit better\nby taking a look at this", "start": 4454.82, "duration": 4.7}, {"text": "as a graph and\nfiguring out what's", "start": 4459.52, "duration": 1.62}, {"text": "the best way through the graph?", "start": 4461.14, "duration": 1.738}, {"text": "And there are a bunch of\ntricks you can do there,", "start": 4462.878, "duration": 2.042}, {"text": "which I'll run through\nhere very quickly.", "start": 4464.92, "duration": 3.3}, {"text": "And you can take\na look at these.", "start": 4468.22, "duration": 3.52}, {"text": "You can discover that\nsome of these dependencies", "start": 4471.74, "duration": 2.0}, {"text": "are not real dependence.", "start": 4473.74, "duration": 1.44}, {"text": "And as long as you're willing\nto execute things out of order", "start": 4475.18, "duration": 2.73}, {"text": "and keep track of that,\nit's perfectly fine.", "start": 4477.91, "duration": 3.21}, {"text": "If you're not actually\ndependent on it,", "start": 4481.12, "duration": 2.43}, {"text": "then just go ahead\nand execute it.", "start": 4483.55, "duration": 1.74}, {"text": "And then you can advance things.", "start": 4485.29, "duration": 1.53}, {"text": "And then the other\ntrick you can use", "start": 4486.82, "duration": 1.5}, {"text": "is what's called\nregister renaming.", "start": 4488.32, "duration": 2.04}, {"text": "If you have a destination\nthat's going to be read from--", "start": 4490.36, "duration": 3.77}, {"text": "sorry, if I want to\nwrite to something,", "start": 4494.13, "duration": 6.76}, {"text": "but I have to wait for\nsomething else to read from it,", "start": 4500.89, "duration": 3.41}, {"text": "the write after read\ndependence, then what", "start": 4504.3, "duration": 3.82}, {"text": "I can do is just\nrename the register,", "start": 4508.12, "duration": 3.54}, {"text": "so that I have\nsomething to write", "start": 4511.66, "duration": 1.41}, {"text": "to that is the same thing.", "start": 4513.07, "duration": 2.52}, {"text": "And there's a very\ncomplex mechanism called", "start": 4515.59, "duration": 2.49}, {"text": "score boarding that does that.", "start": 4518.08, "duration": 3.3}, {"text": "So anyway, you can take a\nlook at all of these tricks.", "start": 4521.38, "duration": 4.602}, {"text": "And then the last\nthing that I want", "start": 4525.982, "duration": 1.458}, {"text": "to-- so this is this part\nI was going to skip over.", "start": 4527.44, "duration": 2.125}, {"text": "And indeed, I don't\nhave time to do it.", "start": 4529.565, "duration": 1.935}, {"text": "I just want to mention the last\nthing, which is worthwhile.", "start": 4531.5, "duration": 4.23}, {"text": "So this-- you don't\nhave to know any", "start": 4535.73, "duration": 1.73}, {"text": "of the details of that part.", "start": 4537.46, "duration": 1.86}, {"text": "But it's in there if\nyou're interested.", "start": 4539.32, "duration": 2.53}, {"text": "So it does renaming\nand reordering.", "start": 4541.85, "duration": 1.757}, {"text": "And then the last thing\nI do want to mention", "start": 4543.607, "duration": 1.833}, {"text": "is branch prediction.", "start": 4545.44, "duration": 1.57}, {"text": "So when you come to branch\nprediction, the outcome,", "start": 4547.01, "duration": 3.74}, {"text": "you can have a hazard because\nthe outcome is known too late.", "start": 4550.75, "duration": 3.6}, {"text": "And so in that\ncase, what they do", "start": 4554.35, "duration": 4.41}, {"text": "is what's called\nspeculative execution, which", "start": 4558.76, "duration": 2.25}, {"text": "you've probably heard of.", "start": 4561.01, "duration": 2.16}, {"text": "So basically that says I'm\ngoing to guess the outcome", "start": 4563.17, "duration": 2.34}, {"text": "of the branch and execute.", "start": 4565.51, "duration": 2.46}, {"text": "If it's encountered,\nyou assume it's taken", "start": 4567.97, "duration": 4.17}, {"text": "and you execute normally.", "start": 4572.14, "duration": 1.65}, {"text": "And if you're right,\neverything is hunky dory.", "start": 4573.79, "duration": 2.67}, {"text": "If you're wrong, it cost\nyou something like a--", "start": 4576.46, "duration": 2.97}, {"text": "you have to undo that\nspeculative computation", "start": 4583.84, "duration": 2.64}, {"text": "and the effect is\nsort of like stalling.", "start": 4586.48, "duration": 2.76}, {"text": "So you don't want\nthat to happen.", "start": 4589.24, "duration": 2.32}, {"text": "And so a mispredicted\nbranch on Haswell", "start": 4591.56, "duration": 4.64}, {"text": "costs about 15 to 20 cycles.", "start": 4596.2, "duration": 3.06}, {"text": "Most of the machines\nuse a branch predictor", "start": 4599.26, "duration": 2.58}, {"text": "to tell whether or\nnot it's going to do.", "start": 4601.84, "duration": 1.92}, {"text": "There's a little\nbit of stuff here", "start": 4603.76, "duration": 1.417}, {"text": "about how you tell about\nwhether a branch is", "start": 4605.177, "duration": 4.513}, {"text": "going to be predicted or not.", "start": 4609.69, "duration": 2.59}, {"text": "And you can take a look\nat that on your own.", "start": 4612.28, "duration": 3.16}, {"text": "So sorry to rush a\nlittle bit the end,", "start": 4615.44, "duration": 1.7}, {"text": "but I knew I wasn't going\nto get through all of this.", "start": 4617.14, "duration": 2.22}, {"text": "But it's in the notes, in\nthe slides when we put it up.", "start": 4619.36, "duration": 3.66}, {"text": "And this is really kind\nof interesting stuff.", "start": 4623.02, "duration": 2.94}, {"text": "Once again, remember that I'm\ndealing with this at one level", "start": 4625.96, "duration": 2.85}, {"text": "below what you\nreally need to do.", "start": 4628.81, "duration": 2.46}, {"text": "But it is really helpful\nto understand that layer", "start": 4631.27, "duration": 2.31}, {"text": "so you have a deep understanding\nof why certain software", "start": 4633.58, "duration": 3.42}, {"text": "optimizations work\nand don't work.", "start": 4637.0, "duration": 2.35}, {"text": "Sound good?", "start": 4639.35, "duration": 1.54}, {"text": "OK, good luck on finishing\nyour project 1's.", "start": 4640.89, "duration": 3.42}]