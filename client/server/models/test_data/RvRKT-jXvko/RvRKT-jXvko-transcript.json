[{"text": "The following content is\nprovided under a Creative", "start": 0.79, "duration": 2.4}, {"text": "Commons license.", "start": 3.19, "duration": 1.54}, {"text": "Your support will help\nMIT OpenCourseWare", "start": 4.73, "duration": 2.3}, {"text": "continue to offer high quality\neducational resources for free.", "start": 7.03, "duration": 4.36}, {"text": "To make a donation or\nview additional materials", "start": 11.39, "duration": 2.6}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.99, "duration": 3.89}, {"text": "at ocw.mit.edu.", "start": 17.88, "duration": 0.96}, {"text": "PROFESSOR: Quick, quick recap\nof what we did last time.", "start": 30.709, "duration": 2.291}, {"text": "So last time we introduced\nthis idea of decomposition", "start": 33.0, "duration": 3.83}, {"text": "and abstraction.", "start": 36.83, "duration": 0.78}, {"text": "And we started putting\nthat into our programs.", "start": 37.61, "duration": 2.109}, {"text": "And these were sort of\nhigh level concepts,", "start": 39.719, "duration": 1.791}, {"text": "and we achieved them using\nthese concrete things called", "start": 41.51, "duration": 3.66}, {"text": "functions in our programs.", "start": 45.17, "duration": 1.374}, {"text": "And functions\nallowed us to create", "start": 46.544, "duration": 1.416}, {"text": "code that was coherent, that\nhad some structure to it,", "start": 47.96, "duration": 5.22}, {"text": "and was reusable.", "start": 53.18, "duration": 1.98}, {"text": "OK.", "start": 55.16, "duration": 2.06}, {"text": "And from now on in problem\nsets and in lectures,", "start": 57.22, "duration": 2.267}, {"text": "I'm going to be using\nfunctions a lot.", "start": 59.487, "duration": 1.583}, {"text": "So make sure that you\nunderstand how they work", "start": 61.07, "duration": 2.949}, {"text": "and all of those details.", "start": 64.019, "duration": 1.431}, {"text": "So today, we're going to\nintroduce two new data types.", "start": 65.45, "duration": 4.226}, {"text": "And they're called\ncompound data types,", "start": 69.676, "duration": 1.624}, {"text": "because they're actually\ndata types that are made up", "start": 71.3, "duration": 2.166}, {"text": "of other data types,\nparticularly ints, floats,", "start": 73.466, "duration": 3.654}, {"text": "Booleans, and strings.", "start": 77.12, "duration": 1.9}, {"text": "And actually not just these,\nbut other data types as well.", "start": 79.02, "duration": 3.2}, {"text": "So that's why they're\ncalled compound data types.", "start": 82.22, "duration": 2.17}, {"text": "So we're going to\nlook at a new data", "start": 84.39, "duration": 2.69}, {"text": "type called a tuple and a\nnew data type called a list.", "start": 87.08, "duration": 3.696}, {"text": "And then we're going to\ntalk about these ideas that", "start": 90.776, "duration": 2.124}, {"text": "come about with--\nspecifically with lists.", "start": 92.9, "duration": 5.21}, {"text": "All right.", "start": 98.11, "duration": 0.5}, {"text": "So let's go right into tuples.", "start": 98.61, "duration": 3.18}, {"text": "So if you recall\nstrings, strings", "start": 101.79, "duration": 2.34}, {"text": "were sequences of characters.", "start": 104.13, "duration": 3.58}, {"text": "Tuples are going to be similar\nto strings in that they're", "start": 107.71, "duration": 2.93}, {"text": "going to be sequences\nof something,", "start": 110.64, "duration": 2.275}, {"text": "except that tuples aren't\njust sequences of characters,", "start": 112.915, "duration": 2.435}, {"text": "they can be sequences\nof anything.", "start": 115.35, "duration": 2.19}, {"text": "They're a collection\nof data where", "start": 117.54, "duration": 1.77}, {"text": "that data can be of any type.", "start": 119.31, "duration": 1.76}, {"text": "So a tuple can contain\nelements that are integers,", "start": 125.31, "duration": 3.37}, {"text": "floats, strings, and so on.", "start": 128.68, "duration": 1.79}, {"text": "Tuples are immutable.", "start": 133.11, "duration": 1.53}, {"text": "And if you recall, we talked\nabout this word a little bit", "start": 134.64, "duration": 2.64}, {"text": "when we talked about strings.", "start": 137.28, "duration": 1.74}, {"text": "So that means once you\ncreate a tuple object,", "start": 139.02, "duration": 2.31}, {"text": "you can't modify it.", "start": 141.33, "duration": 1.39}, {"text": "So when you created\na string object,", "start": 142.72, "duration": 2.24}, {"text": "you were not allowed\nto modify it.", "start": 144.96, "duration": 2.73}, {"text": "So the way we create tuples\nare with these open and close", "start": 150.28, "duration": 3.24}, {"text": "parentheses.", "start": 153.52, "duration": 2.75}, {"text": "This shouldn't be\nconfused with a function,", "start": 156.27, "duration": 1.91}, {"text": "because there's\nnothing-- there's no--", "start": 158.18, "duration": 3.15}, {"text": "this isn't a function call.", "start": 161.33, "duration": 1.41}, {"text": "It's just how you\nrepresent a tuple.", "start": 162.74, "duration": 2.182}, {"text": "For a function call,\nyou'd have something right", "start": 164.922, "duration": 1.958}, {"text": "before the parentheses.", "start": 166.88, "duration": 2.07}, {"text": "This is just how we chose\nto represent a tuple.", "start": 168.95, "duration": 4.06}, {"text": "And just a plain open\nand close parentheses", "start": 173.01, "duration": 1.91}, {"text": "represents an empty tuple.", "start": 174.92, "duration": 1.47}, {"text": "So it's of length 0.", "start": 176.39, "duration": 0.96}, {"text": "There's nothing in it.", "start": 177.35, "duration": 3.15}, {"text": "You can create a\ntuple that contains", "start": 180.5, "duration": 2.28}, {"text": "some elements by separating\neach element with a comma.", "start": 182.78, "duration": 4.33}, {"text": "So in this case,\nthis is a tuple that", "start": 187.11, "duration": 3.99}, {"text": "can be accessed with a variable\nt that contains three elements.", "start": 191.1, "duration": 3.58}, {"text": "The first is an integer,\nthe second is a string,", "start": 194.68, "duration": 3.02}, {"text": "and the third is\nanother integer.", "start": 197.7, "duration": 2.67}, {"text": "Much like strings, we can\nindex into tuples to find out", "start": 200.37, "duration": 3.54}, {"text": "values at particular indices.", "start": 203.91, "duration": 3.42}, {"text": "So you read this\nas t at position 0.", "start": 207.33, "duration": 3.15}, {"text": "So the tuple represented by\na variable t at position 0", "start": 210.48, "duration": 4.32}, {"text": "will evaluate to 2,\nbecause again, we", "start": 214.8, "duration": 2.34}, {"text": "start counting from 0\nin computer science.", "start": 217.14, "duration": 2.76}, {"text": "So that brings us-- gives\nus the first element.", "start": 219.9, "duration": 3.76}, {"text": "Just like strings, we can\nconcatenate tuples together.", "start": 223.66, "duration": 2.4}, {"text": "That just means\nadd them together.", "start": 226.06, "duration": 2.35}, {"text": "So if we add these\ntwo tuples together,", "start": 228.41, "duration": 1.85}, {"text": "we just get back\none larger tuple", "start": 230.26, "duration": 2.13}, {"text": "that's just those two-- the\nelements of those tuples", "start": 232.39, "duration": 5.25}, {"text": "just put together\nin one larger tuple.", "start": 237.64, "duration": 3.25}, {"text": "Again, much like strings,\nwe can slice into tuples.", "start": 240.89, "duration": 3.44}, {"text": "So t sliced from\nindex 1 until index 2.", "start": 244.33, "duration": 5.23}, {"text": "Remember, we go until\nthis stop minus 1.", "start": 249.56, "duration": 4.78}, {"text": "So this only gives us one\nelement inside the tuple.", "start": 254.34, "duration": 5.27}, {"text": "And this is not a mistake.", "start": 259.61, "duration": 1.82}, {"text": "This extra comma here actually\nrepresents a tuple object.", "start": 261.43, "duration": 4.83}, {"text": "If I didn't have\nthis comma here,", "start": 266.26, "duration": 2.22}, {"text": "then this would\njust be a string.", "start": 268.48, "duration": 3.32}, {"text": "The parentheses would\njust-- wouldn't really", "start": 271.8, "duration": 2.437}, {"text": "make any difference.", "start": 274.237, "duration": 0.833}, {"text": "But the comma here\nmakes it clear to Python", "start": 275.07, "duration": 3.3}, {"text": "that this is a tuple with\nonly one element in it.", "start": 278.37, "duration": 4.29}, {"text": "We can slice even further to\nget a tuple with two elements.", "start": 282.66, "duration": 4.48}, {"text": "And we can do the\nusual operations", "start": 287.14, "duration": 1.8}, {"text": "like get the length of a tuple,\nwhich says, how many elements", "start": 288.94, "duration": 2.67}, {"text": "are in my tuple?", "start": 291.61, "duration": 1.59}, {"text": "And len of this t\nwould evaluate to 3,", "start": 293.2, "duration": 4.17}, {"text": "because there are three\nelements inside the tuple.", "start": 297.37, "duration": 2.31}, {"text": "Each element, again,\nseparated by the comma.", "start": 299.68, "duration": 3.92}, {"text": "And just like strings,\nif we try to change", "start": 303.6, "duration": 1.93}, {"text": "a value inside the\ntuple-- in this case,", "start": 305.53, "duration": 2.4}, {"text": "I wanted to try to change the\nvalue of the second element", "start": 307.93, "duration": 8.04}, {"text": "to 4-- Python\ndoesn't allow that,", "start": 315.97, "duration": 2.79}, {"text": "because tuples are immutable.", "start": 318.76, "duration": 1.722}, {"text": "So why would we\nwant to use tuples?", "start": 323.442, "duration": 1.458}, {"text": "Tuples are actually useful in a\ncouple of different scenarios.", "start": 324.9, "duration": 5.46}, {"text": "So recall a few years ago,\nwe looked at this code", "start": 330.36, "duration": 3.42}, {"text": "where we tried to swap the\nvalues of variables x and y.", "start": 333.78, "duration": 3.072}, {"text": "And this first code\nactually didn't", "start": 336.852, "duration": 1.458}, {"text": "work, because you're\noverwriting the value for x.", "start": 338.31, "duration": 3.87}, {"text": "So instead, what\nwe ended up doing", "start": 342.18, "duration": 2.19}, {"text": "was creating this\ntemporary variable", "start": 344.37, "duration": 1.92}, {"text": "where we stored the value of\nx, and then we overwrote it,", "start": 346.29, "duration": 3.03}, {"text": "and then we used the\ntemporary variable.", "start": 349.32, "duration": 1.76}, {"text": "Well, turns out this\nthree liner code right", "start": 351.08, "duration": 2.32}, {"text": "here can actually be written\nin one line using tuples.", "start": 353.4, "duration": 3.5}, {"text": "So you say x comma y\nis equal to y comma x.", "start": 356.9, "duration": 3.56}, {"text": "And Python goes in and\nsays, what's the value of y?", "start": 360.46, "duration": 4.17}, {"text": "And assigns it to x.", "start": 364.63, "duration": 2.04}, {"text": "And then what's the value of x?", "start": 366.67, "duration": 1.71}, {"text": "And assigns it to y.", "start": 368.38, "duration": 1.12}, {"text": "Extending on that,\nwe can actually", "start": 375.14, "duration": 1.56}, {"text": "use tuples to return more than\none value from a function.", "start": 376.7, "duration": 5.71}, {"text": "So functions, you're only\nallowed to return one object.", "start": 382.41, "duration": 4.832}, {"text": "So you're not allowed to\nreturn more than one object.", "start": 387.242, "duration": 2.208}, {"text": "However, if we use\na tuple object,", "start": 389.45, "duration": 3.29}, {"text": "and if that's the\nthing that we return,", "start": 392.74, "duration": 2.1}, {"text": "we can actually get\naround this sort of rule", "start": 394.84, "duration": 4.71}, {"text": "by putting in as\nmany values as we", "start": 399.55, "duration": 2.61}, {"text": "want inside the tuple object.", "start": 402.16, "duration": 1.93}, {"text": "And then we can return as\nmany values as we'd like.", "start": 404.09, "duration": 3.71}, {"text": "So in this specific\nexample, I'm trying", "start": 407.8, "duration": 1.74}, {"text": "to calculate the\nquotient and remainder", "start": 409.54, "duration": 1.98}, {"text": "when we divide x by a y.", "start": 411.52, "duration": 2.46}, {"text": "So this is a function\ndefinition here.", "start": 413.98, "duration": 2.34}, {"text": "And down here I'm calling\nthe function with 4 and 5.", "start": 416.32, "duration": 5.35}, {"text": "So when I make\nthe function call,", "start": 421.67, "duration": 2.33}, {"text": "4 gets assigned to x and\n5 gets assigned to y.", "start": 424.0, "duration": 6.48}, {"text": "So then q is going to be\nthe integer division when", "start": 430.48, "duration": 6.4}, {"text": "x is divided by y.", "start": 436.88, "duration": 3.09}, {"text": "And this double\nslash just means--", "start": 439.97, "duration": 1.59}, {"text": "it's like casting the\nresult to an integer.", "start": 441.56, "duration": 2.7}, {"text": "It says divide it, keep\nthe whole number part,", "start": 444.26, "duration": 2.91}, {"text": "and just delete everything\nelse beyond the decimal point.", "start": 447.17, "duration": 5.26}, {"text": "So when you divide\n4 by 5, this q", "start": 452.43, "duration": 1.48}, {"text": "is actually going to be 0,\nbecause it's 0 point something,", "start": 453.91, "duration": 2.62}, {"text": "and I don't care about\nthe point something.", "start": 456.53, "duration": 3.16}, {"text": "And then the remainder is just\nusing the percent operator.", "start": 459.69, "duration": 3.6}, {"text": "So I divide 4 by 5, the\nremainder is going to be 4.", "start": 463.29, "duration": 4.55}, {"text": "And notice that I'm\ngoing to be returning", "start": 467.84, "duration": 2.03}, {"text": "q and r, which are these\ntwo values that I calculated", "start": 469.87, "duration": 2.85}, {"text": "inside my function.", "start": 472.72, "duration": 1.53}, {"text": "And I'm returning them in\nthe context of this tuple.", "start": 474.25, "duration": 4.31}, {"text": "So I'm only returning one\nobject, which is a tuple.", "start": 478.56, "duration": 2.2}, {"text": "It just so happens that\nI'm populating that object", "start": 480.76, "duration": 2.76}, {"text": "with a few different values.", "start": 483.52, "duration": 1.95}, {"text": "So when the function\nreturns here,", "start": 488.4, "duration": 2.49}, {"text": "this is going to say 0 comma 4.", "start": 490.89, "duration": 2.71}, {"text": "That's the tuple\nit's going to return.", "start": 493.6, "duration": 3.11}, {"text": "Q is going to be 0 and\nr is going to be 4.", "start": 496.71, "duration": 2.88}, {"text": "So then this line\nhere-- quot, rem", "start": 499.59, "duration": 2.85}, {"text": "equals 0, 4-- is\nbasically this--", "start": 502.44, "duration": 3.69}, {"text": "it's sort of like\nwhat we did up here.", "start": 506.13, "duration": 1.92}, {"text": "So it assigns quot to 4-- sorry.", "start": 508.05, "duration": 2.28}, {"text": "Quot to 0 and rem to 4.", "start": 510.33, "duration": 1.51}, {"text": "So we can use tuples.", "start": 514.409, "duration": 1.201}, {"text": "This is very useful.", "start": 515.61, "duration": 1.449}, {"text": "We can use them to return more\nthan one value from a function.", "start": 517.059, "duration": 5.201}, {"text": "So tuples are great.", "start": 522.26, "duration": 1.669}, {"text": "Might seem a little\nbit confusing at first,", "start": 523.929, "duration": 1.791}, {"text": "but they're actually\npretty useful,", "start": 525.72, "duration": 1.5}, {"text": "because they hold\ncollections of data.", "start": 527.22, "duration": 2.91}, {"text": "So here, I wrote\na function which", "start": 530.13, "duration": 3.88}, {"text": "I can apply to any set of data.", "start": 534.01, "duration": 3.102}, {"text": "And I'll explain what\nthis function does,", "start": 537.112, "duration": 1.708}, {"text": "and then we can apply\nit to some data.", "start": 538.82, "duration": 1.583}, {"text": "And you can see that you\ncan extract some very basic", "start": 540.403, "duration": 2.247}, {"text": "information from whatever\nset of data that you", "start": 542.65, "duration": 2.49}, {"text": "happen to collect.", "start": 545.14, "duration": 1.99}, {"text": "So here's a function\ncalled get_data,", "start": 547.13, "duration": 1.7}, {"text": "and it does all of\nthis stuff in here.", "start": 548.83, "duration": 2.72}, {"text": "And in the actual code\nassociated with the lecture,", "start": 551.55, "duration": 2.37}, {"text": "I actually said what the\ncondition on a tuple was.", "start": 553.92, "duration": 3.72}, {"text": "So it has to be a\ntuple of a certain--", "start": 557.64, "duration": 2.91}, {"text": "that looks a certain way.", "start": 560.55, "duration": 2.93}, {"text": "And this is the\nway it has to look.", "start": 563.48, "duration": 1.95}, {"text": "So it's one tuple.", "start": 565.43, "duration": 3.15}, {"text": "The outer parentheses out\nhere represent the fact", "start": 568.58, "duration": 3.96}, {"text": "that it's a tuple.", "start": 572.54, "duration": 2.29}, {"text": "And the elements of this tuple\nare actually other tuples.", "start": 574.83, "duration": 4.62}, {"text": "So the first element\nis a tuple object,", "start": 579.45, "duration": 1.69}, {"text": "the second element\nis a tuple object,", "start": 581.14, "duration": 1.31}, {"text": "and third one is a\ntuple object, and so on.", "start": 582.45, "duration": 1.92}, {"text": "And each one of these\ninner tuple objects", "start": 587.15, "duration": 3.56}, {"text": "are actually going to\ncontain two elements,", "start": 590.71, "duration": 1.9}, {"text": "the first being an integer\nand the second being a string.", "start": 592.61, "duration": 3.11}, {"text": "So that's sort of\nthe precondition", "start": 595.72, "duration": 1.71}, {"text": "that this function\nassumes on a tuple", "start": 597.43, "duration": 3.57}, {"text": "before it can-- before\nit actually can work.", "start": 601.0, "duration": 5.58}, {"text": "All right.", "start": 606.58, "duration": 0.81}, {"text": "So given a tuple\nthat looks like that,", "start": 607.39, "duration": 2.97}, {"text": "what's the function going to do?", "start": 610.36, "duration": 1.47}, {"text": "It's first creating\ntwo empty tuple.", "start": 614.52, "duration": 2.73}, {"text": "One is called nums and\none is called words.", "start": 617.25, "duration": 2.97}, {"text": "And then there's a for loop.", "start": 620.22, "duration": 1.48}, {"text": "And notice here the for loop\nis going to iterate over", "start": 621.7, "duration": 2.9}, {"text": "every element inside the tuple.", "start": 624.6, "duration": 3.06}, {"text": "Remember in strings when we\nwere able to use for loops that", "start": 627.66, "duration": 2.58}, {"text": "iterated over the characters\ndirectly as opposed", "start": 630.24, "duration": 2.22}, {"text": "to over the indices?", "start": 632.46, "duration": 1.25}, {"text": "Well, we're doing the\nsame sort of thing here.", "start": 633.71, "duration": 2.83}, {"text": "Instead of iterating\nover the indices,", "start": 636.54, "duration": 1.6}, {"text": "we're going to iterate over the\ntuple object at each position.", "start": 638.14, "duration": 4.76}, {"text": "So first time through\nthe loop, t here", "start": 642.9, "duration": 3.36}, {"text": "is going to be this first tuple.", "start": 646.26, "duration": 2.952}, {"text": "The second time\nthrough the loop, t", "start": 649.212, "duration": 1.458}, {"text": "is going to be this tuple.", "start": 650.67, "duration": 1.1}, {"text": "And the third time, it's going\nto be this exact tuple object.", "start": 651.77, "duration": 2.605}, {"text": "So each time through\nthe loop, what I'm doing", "start": 657.81, "duration": 2.31}, {"text": "is I'm going to have\nthis nums tuple that I'm", "start": 660.12, "duration": 3.27}, {"text": "going to keep adding to.", "start": 663.39, "duration": 1.144}, {"text": "And each time I'm going\nto create a new object", "start": 664.534, "duration": 1.916}, {"text": "and reassign it to\nthis variable nums.", "start": 666.45, "duration": 3.352}, {"text": "And each time\nthrough the loop, I'm", "start": 669.802, "duration": 1.458}, {"text": "looking at what the\nprevious value of nums was.", "start": 671.26, "duration": 3.24}, {"text": "So what was my previous tuple?", "start": 674.5, "duration": 3.15}, {"text": "And I'm going to add it\nwith this singleton tuple.", "start": 677.65, "duration": 3.15}, {"text": "So it's a tuple of one\ncharacter or one element.", "start": 680.8, "duration": 2.525}, {"text": "This element being\nt at position zero.", "start": 686.29, "duration": 2.21}, {"text": "So you have to sort of\nwrap your mind around", "start": 688.5, "duration": 2.897}, {"text": "how this is working.", "start": 691.397, "duration": 0.833}, {"text": "So if t is going to be this\ntuple element right here,", "start": 692.23, "duration": 5.16}, {"text": "then t at position zero is\ngoing to be this blue bar here.", "start": 697.39, "duration": 3.99}, {"text": "So it represents the integer\nportion of the tuple.", "start": 701.38, "duration": 3.96}, {"text": "So as we're going\nthrough the loop,", "start": 705.34, "duration": 2.16}, {"text": "this nums is going to\nget populated with all", "start": 707.5, "duration": 2.46}, {"text": "of the integers from\nevery one of my tuple--", "start": 709.96, "duration": 3.0}, {"text": "inside tuple objects.", "start": 712.96, "duration": 1.05}, {"text": "So that's basically what\nthis line here is doing.", "start": 716.619, "duration": 2.041}, {"text": "At the same time, I'm also\npopulating this words tuple.", "start": 721.87, "duration": 5.55}, {"text": "And the words tuple is\na little bit different,", "start": 727.42, "duration": 2.14}, {"text": "because I'm not adding every\nsingle one of these string", "start": 729.56, "duration": 2.76}, {"text": "objects.", "start": 732.32, "duration": 1.42}, {"text": "So t at position one being the\nstring part of the inner tuple.", "start": 733.74, "duration": 3.8}, {"text": "I'm actually adding the string\npart only if it's not already", "start": 737.54, "duration": 4.29}, {"text": "in my words list.", "start": 741.83, "duration": 3.19}, {"text": "So here, I'm\nessentially grabbing", "start": 745.02, "duration": 1.83}, {"text": "all of the unique\nstrings from my list.", "start": 746.85, "duration": 2.57}, {"text": "These last sort of three\nlines-- three, four lines here", "start": 752.52, "duration": 3.3}, {"text": "just do a little bit of\narithmetic on it saying,", "start": 755.82, "duration": 2.82}, {"text": "OK, now I have\nall of the numbers", "start": 758.64, "duration": 2.46}, {"text": "here, what's the minimum\nout of all of these,", "start": 761.1, "duration": 2.4}, {"text": "and then what's the maximum\namount of all these?", "start": 763.5, "duration": 2.85}, {"text": "And then this unique\nwords variable", "start": 766.35, "duration": 2.7}, {"text": "tells me how many unique words\ndo I have in my original tuple.", "start": 769.05, "duration": 5.41}, {"text": "So this feels sort of generic,\nso let's run it on some data.", "start": 774.46, "duration": 5.26}, {"text": "So here I have it-- I\ntested it on some test data.", "start": 779.72, "duration": 5.28}, {"text": "And then I got some actual data.", "start": 785.0, "duration": 3.67}, {"text": "And this actual data\nthat I wanted to analyze", "start": 788.67, "duration": 2.19}, {"text": "was Taylor Swift data.", "start": 790.86, "duration": 3.42}, {"text": "And representing\nthe integer portion", "start": 794.28, "duration": 3.98}, {"text": "of the tuple representing a\nyear and the string portion", "start": 798.26, "duration": 3.27}, {"text": "of the tuple representing\nthe person who she", "start": 801.53, "duration": 4.35}, {"text": "wrote a song about that year.", "start": 805.88, "duration": 1.33}, {"text": "So some real world data that\nwe're working with here.", "start": 810.44, "duration": 4.74}, {"text": "Very important that we\nknow this information.", "start": 815.18, "duration": 2.41}, {"text": "OK.", "start": 817.59, "duration": 1.07}, {"text": "So with this data,\nI can run it--", "start": 818.66, "duration": 2.79}, {"text": "I can plug it into this\nfunction that I wrote up here.", "start": 821.45, "duration": 4.779}, {"text": "And I'm going to actually\ncomment this out,", "start": 826.229, "duration": 1.791}, {"text": "so it doesn't get cluttered.", "start": 828.02, "duration": 3.94}, {"text": "And if I run it--\nthis is the part", "start": 831.96, "duration": 6.7}, {"text": "where I'm calling my function.", "start": 838.66, "duration": 2.16}, {"text": "I'm calling it with\nthis data here.", "start": 840.82, "duration": 2.25}, {"text": "tswift being this\ntuple of tuples.", "start": 843.07, "duration": 4.35}, {"text": "And what I get\nback is-- up here,", "start": 847.42, "duration": 2.205}, {"text": "line 38-- is the return from the\nfunction being a large tuple.", "start": 849.625, "duration": 6.435}, {"text": "And that large tuple,\nI'm then assigning it", "start": 856.06, "duration": 2.01}, {"text": "to my own tuple in my program.", "start": 858.07, "duration": 2.552}, {"text": "And then I'm just writing out--\nprinting out some statement", "start": 860.622, "duration": 2.458}, {"text": "here.", "start": 863.08, "duration": 2.13}, {"text": "So I'm getting the minimum\nyear, the maximum year,", "start": 865.21, "duration": 2.15}, {"text": "and then the number of people.", "start": 867.36, "duration": 1.59}, {"text": "So I can show you that\nit works if I replace", "start": 868.95, "duration": 2.67}, {"text": "one of these names\nwith another one", "start": 871.62, "duration": 1.83}, {"text": "that I already have in here.", "start": 873.45, "duration": 1.822}, {"text": "So instead of writing a\nsong about five people,", "start": 875.272, "duration": 1.958}, {"text": "she would have wrote a\nsong about four people.", "start": 877.23, "duration": 1.916}, {"text": "Yay, it worked.", "start": 879.146, "duration": 1.014}, {"text": "So that's tuples.", "start": 888.18, "duration": 2.74}, {"text": "And remeber or recall-- keep\nin mind, tuples were immutable.", "start": 890.92, "duration": 3.974}, {"text": "Now we're going to look at\na very, very similar data", "start": 894.894, "duration": 2.166}, {"text": "structure to tuples\ncalled lists,", "start": 897.06, "duration": 2.695}, {"text": "except that instead of\nlists being immutable,", "start": 899.755, "duration": 3.135}, {"text": "lists are going to\nbe mutable objects.", "start": 902.89, "duration": 4.12}, {"text": "So much like lists,\nthey're going", "start": 907.01, "duration": 2.16}, {"text": "to contain elements of any\ntype or objects of any type.", "start": 909.17, "duration": 4.94}, {"text": "You denote them with--\nyou denote a list", "start": 914.11, "duration": 1.76}, {"text": "with square brackets\ninstead of parentheses.", "start": 915.87, "duration": 4.72}, {"text": "And the difference\nbeing that they're", "start": 920.59, "duration": 1.59}, {"text": "going to be immutable\nobjects instead of immutable.", "start": 922.18, "duration": 4.62}, {"text": "So creating an\nempty list, you just", "start": 926.8, "duration": 2.43}, {"text": "do open close square brackets.", "start": 929.23, "duration": 2.37}, {"text": "You can have a list of\nelements of different types,", "start": 931.6, "duration": 4.82}, {"text": "even a list of lists.", "start": 936.42, "duration": 5.74}, {"text": "So one of the\nelements being a list.", "start": 942.16, "duration": 1.5}, {"text": "As usual, you can\napply length on a list,", "start": 946.68, "duration": 2.49}, {"text": "and that tells you how\nmany elements are in it.", "start": 949.17, "duration": 2.169}, {"text": "This is going to tell\nyou how many elements", "start": 951.339, "duration": 1.791}, {"text": "are in your list l.", "start": 953.13, "duration": 2.25}, {"text": "So it's not going to look\nany further than that.", "start": 955.38, "duration": 2.162}, {"text": "So it's going to say, this is\nan integer, this is a string,", "start": 957.542, "duration": 2.458}, {"text": "this is an integer,\nthis is a list.", "start": 960.0, "duration": 2.41}, {"text": "It's not going to say how many\nelements are in this list.", "start": 962.41, "duration": 2.75}, {"text": "It's just going to look at the\nouter-- the shell of elements.", "start": 965.16, "duration": 6.55}, {"text": "Indexing and slicing\nworks the same way.", "start": 971.71, "duration": 2.38}, {"text": "So l at position 0\ngives you the value 2.", "start": 974.09, "duration": 3.86}, {"text": "You can index into a list,\nand then do something", "start": 977.95, "duration": 2.25}, {"text": "with the value\nthat you get back.", "start": 980.2, "duration": 1.56}, {"text": "So l at position 2 says--\nthat's this value there", "start": 981.76, "duration": 3.33}, {"text": "and add one to it.", "start": 985.09, "duration": 3.16}, {"text": "L at position 3, that's\ngoing to be this list here.", "start": 988.25, "duration": 4.021}, {"text": "Notice it evaluates\nto another list.", "start": 992.271, "duration": 1.499}, {"text": "You're not allowed\nto index outside", "start": 997.042, "duration": 1.458}, {"text": "of the length of the list.", "start": 998.5, "duration": 0.92}, {"text": "So that's going to give you\nan error, because we only", "start": 999.42, "duration": 1.87}, {"text": "have four elements.", "start": 1001.29, "duration": 0.8}, {"text": "And you can also have\nexpressions for your index.", "start": 1005.15, "duration": 4.6}, {"text": "So this-- Python just replaces\ni with 2 here and says,", "start": 1009.75, "duration": 3.8}, {"text": "what's l at position 1?", "start": 1013.55, "duration": 2.01}, {"text": "And then grabs\nthat from in there.", "start": 1015.56, "duration": 1.87}, {"text": "OK.", "start": 1017.43, "duration": 0.5}, {"text": "So very, very similar to\nthe kinds of operations", "start": 1017.93, "duration": 2.46}, {"text": "we've seen on\nstrings and tuples.", "start": 1020.39, "duration": 3.072}, {"text": "The one difference,\nand that's what", "start": 1023.462, "duration": 1.458}, {"text": "we're going to focus on\nfor the rest of this class,", "start": 1024.92, "duration": 2.125}, {"text": "is that lists are\nmutable objects.", "start": 1027.045, "duration": 4.574}, {"text": "So what does that\nmean internally?", "start": 1031.619, "duration": 1.47}, {"text": "Internally, that means\nlet's say we have a list l,", "start": 1033.089, "duration": 2.861}, {"text": "and we assign it-- sorry.", "start": 1035.95, "duration": 1.669}, {"text": "Let's say we have a variable l\nthat's going to point to a list", "start": 1037.619, "duration": 4.261}, {"text": "with three elements,\n2, 1, and 3.", "start": 1041.88, "duration": 2.92}, {"text": "OK.", "start": 1044.8, "duration": 0.5}, {"text": "They're all-- each\nelement is an integer.", "start": 1045.3, "duration": 4.47}, {"text": "When we were dealing with\ntuples or with strings,", "start": 1049.77, "duration": 3.84}, {"text": "if we re-assign-- if we try\nto do this line right here,", "start": 1053.61, "duration": 3.27}, {"text": "we've had an error.", "start": 1056.88, "duration": 1.23}, {"text": "But this is actually\nallowed with lists.", "start": 1058.11, "duration": 3.24}, {"text": "So when you execute\nthat line, Python", "start": 1061.35, "duration": 2.72}, {"text": "is going to look at\nthat middle element,", "start": 1064.07, "duration": 2.65}, {"text": "and it's going to change\nits value from a 1 to a 5.", "start": 1066.72, "duration": 4.126}, {"text": "And that's just due to the\nmutability nature of the list.", "start": 1070.846, "duration": 2.374}, {"text": "So notice that this list\nvariable, this variable l,", "start": 1076.99, "duration": 5.13}, {"text": "which originally\npointed to this list,", "start": 1082.12, "duration": 1.62}, {"text": "points to the exact same list.", "start": 1083.74, "duration": 1.89}, {"text": "We haven't created a\nnew object in memory.", "start": 1085.63, "duration": 3.12}, {"text": "We're just modifying the\nsame object in memory.", "start": 1088.75, "duration": 3.15}, {"text": "And you're going to see\nwhy this is important", "start": 1091.9, "duration": 2.1}, {"text": "as we look at a few\nside effects that", "start": 1094.0, "duration": 1.71}, {"text": "can happen when you have this.", "start": 1095.71, "duration": 1.68}, {"text": "So I've said this a\ncouple of times before,", "start": 1102.24, "duration": 4.26}, {"text": "but it'll make your\nlife a lot easier", "start": 1106.5, "duration": 5.5}, {"text": "if you try to think\nof-- when you want", "start": 1112.0, "duration": 3.09}, {"text": "to iterate through a list if\nyou try to think about iterating", "start": 1115.09, "duration": 3.21}, {"text": "through the elements directly.", "start": 1118.3, "duration": 2.34}, {"text": "It's a lot more Pythonic.", "start": 1120.64, "duration": 1.05}, {"text": "I've used that word before.", "start": 1121.69, "duration": 1.99}, {"text": "So this is sort of\na common pattern", "start": 1123.68, "duration": 1.61}, {"text": "that you're going to see where\nyou're iterating over the list", "start": 1125.29, "duration": 2.88}, {"text": "elements directly.", "start": 1128.17, "duration": 1.29}, {"text": "We've done it over tuples.", "start": 1129.46, "duration": 1.11}, {"text": "We've done it over strings.", "start": 1130.57, "duration": 1.125}, {"text": "So these are identical codes.", "start": 1134.26, "duration": 1.41}, {"text": "They do the exact same\nthing, except on the left,", "start": 1135.67, "duration": 2.61}, {"text": "you're going from-- you're going\nthrough 0, 1, 2, 3, and so on.", "start": 1138.28, "duration": 6.73}, {"text": "And then you're indexing into\neach one of these numbers", "start": 1145.01, "duration": 7.14}, {"text": "to get the element value.", "start": 1152.15, "duration": 2.47}, {"text": "Whereas on the right,\nthis loop variable i", "start": 1154.62, "duration": 3.86}, {"text": "is going to have the\nelement value itself.", "start": 1158.48, "duration": 3.55}, {"text": "So this code on the\nright is a lot cleaner.", "start": 1162.03, "duration": 2.285}, {"text": "OK.", "start": 1168.32, "duration": 0.5}, {"text": "So now let's look\nat some operations", "start": 1168.82, "duration": 2.64}, {"text": "that we can do on lists.", "start": 1171.46, "duration": 1.454}, {"text": "So there's a lot more\noperations that we", "start": 1172.914, "duration": 1.666}, {"text": "can do on lists, because\nof their mutability aspect", "start": 1174.58, "duration": 3.39}, {"text": "than we can do on tuples\nor strings, for example.", "start": 1177.97, "duration": 2.91}, {"text": "So here's a few of them.", "start": 1180.88, "duration": 1.512}, {"text": "And they're going\nto take advantage", "start": 1182.392, "duration": 1.458}, {"text": "of this mutability concept.", "start": 1183.85, "duration": 1.89}, {"text": "So we can add elements\ndirectly to the end", "start": 1185.74, "duration": 2.79}, {"text": "of the list using this funky\nlooking notation L.append.", "start": 1188.53, "duration": 5.16}, {"text": "And then the element we\nwant to add to the end.", "start": 1193.69, "duration": 3.45}, {"text": "And this operation\nmutates the list.", "start": 1197.14, "duration": 2.98}, {"text": "So if I have L is\nequal to 2, 1, 3, and I", "start": 1200.12, "duration": 1.88}, {"text": "append the element\n5 to the end, then", "start": 1202.0, "duration": 2.89}, {"text": "L-- the same L is going to\npoint to the same object,", "start": 1204.89, "duration": 4.04}, {"text": "except it's going to have\nan extra number at the end.", "start": 1208.93, "duration": 2.237}, {"text": "5.", "start": 1211.167, "duration": 0.499}, {"text": "But now what's this dot?", "start": 1214.84, "duration": 1.7}, {"text": "We haven't really\nseen this before.", "start": 1216.54, "duration": 2.9}, {"text": "And it's going to\nbecome apparent", "start": 1219.44, "duration": 3.48}, {"text": "what it means in a\nfew lectures from now.", "start": 1222.92, "duration": 3.076}, {"text": "But for the moment,\nyou can think", "start": 1225.996, "duration": 1.374}, {"text": "of this dot as an operation.", "start": 1227.37, "duration": 4.65}, {"text": "It's like applying a function,\nexcept that the function", "start": 1232.02, "duration": 3.78}, {"text": "that you're applying\ncan only work", "start": 1235.8, "duration": 2.07}, {"text": "on certain types of objects.", "start": 1237.87, "duration": 2.7}, {"text": "So in this case,\nappend, for example,", "start": 1240.57, "duration": 3.12}, {"text": "is the function we're\ntrying to apply.", "start": 1243.69, "duration": 4.38}, {"text": "And we want to\napply it to whatever", "start": 1248.07, "duration": 2.16}, {"text": "is before the dot,\nwhich is the object.", "start": 1250.23, "duration": 3.81}, {"text": "And append has only been defined\nto work with a list object,", "start": 1254.04, "duration": 3.94}, {"text": "for example, which is why we're\nusing the dot in this case.", "start": 1257.98, "duration": 2.64}, {"text": "We wouldn't be able to\nuse append on an integer,", "start": 1263.48, "duration": 2.09}, {"text": "for example, because\nthat sort of function", "start": 1265.57, "duration": 2.56}, {"text": "is not defined on the integer.", "start": 1268.13, "duration": 2.35}, {"text": "So for now, you'll sort\nof have to remember--", "start": 1270.48, "duration": 5.79}, {"text": "which are functions\nthat work with a dot", "start": 1276.27, "duration": 3.3}, {"text": "and which are functions\nlike [? ln, ?] that", "start": 1279.57, "duration": 2.85}, {"text": "aren't with a dot.", "start": 1282.42, "duration": 1.71}, {"text": "But in a couple of lectures, I\npromise it'll be a lot clearer.", "start": 1284.13, "duration": 4.144}, {"text": "So for now, just think\nof it as whatever", "start": 1288.274, "duration": 1.666}, {"text": "is before the dot is the object\nyou're applying a function to,", "start": 1289.94, "duration": 4.28}, {"text": "and whatever is after the\ndot is the function you're", "start": 1294.22, "duration": 2.27}, {"text": "applying on the object.", "start": 1296.49, "duration": 1.245}, {"text": "So we can add things\nto the end of our list.", "start": 1302.54, "duration": 2.55}, {"text": "We can also combine\nlists together using", "start": 1305.09, "duration": 1.79}, {"text": "the plus operator.", "start": 1306.88, "duration": 2.31}, {"text": "The plus operator does\nnot mutate the list.", "start": 1309.19, "duration": 2.76}, {"text": "Instead, it gives\nyou a new list that's", "start": 1311.95, "duration": 1.92}, {"text": "the sum of those\ntwo lists combined.", "start": 1313.87, "duration": 2.61}, {"text": "So in this case, if L1 is\n2,1,3 and L2 is 4, 5, 6,", "start": 1316.48, "duration": 3.87}, {"text": "when we add those\ntwo lists together,", "start": 1320.35, "duration": 2.05}, {"text": "that's going to give us an\nentirely new list leaving", "start": 1322.4, "duration": 2.69}, {"text": "L1 and L2 the same.", "start": 1325.09, "duration": 2.76}, {"text": "And that's why we have to assign\nthe result of the addition", "start": 1327.85, "duration": 8.81}, {"text": "to a new list.", "start": 1336.66, "duration": 0.605}, {"text": "Otherwise, the result is lost.", "start": 1337.265, "duration": 1.25}, {"text": "If you want to mutate a\nlist directly and make it", "start": 1342.15, "duration": 3.12}, {"text": "longer by the elements\nwithin another list, then", "start": 1345.27, "duration": 4.77}, {"text": "you can use this extend\nfunction or extent method.", "start": 1350.04, "duration": 5.82}, {"text": "And this is going to\nmutate L1 directly.", "start": 1355.86, "duration": 3.06}, {"text": "So if L1 was 2,1,3, if you\nextend it by the list 0,6,", "start": 1358.92, "duration": 5.86}, {"text": "it's just going to tack\non 0,6 to L1 directly.", "start": 1364.78, "duration": 2.76}, {"text": "So notice L1 has been mutated.", "start": 1367.54, "duration": 1.53}, {"text": "So that's adding\nthings to lists.", "start": 1377.86, "duration": 3.26}, {"text": "We can also delete\nthings from lists.", "start": 1381.12, "duration": 1.992}, {"text": "We don't just want to\nkeep adding to our lists,", "start": 1383.112, "duration": 1.958}, {"text": "because then they\nbecome very, very big.", "start": 1385.07, "duration": 2.08}, {"text": "So let's see how we can delete\nsome items from our list.", "start": 1387.15, "duration": 2.57}, {"text": "There's a few ways.", "start": 1389.72, "duration": 1.87}, {"text": "First one being can\nuse this del function.", "start": 1391.59, "duration": 4.01}, {"text": "And this says\ndelete from the list", "start": 1395.6, "duration": 2.71}, {"text": "L the element at this index.", "start": 1398.31, "duration": 3.67}, {"text": "So you give it\nthe index 0, 1, 2,", "start": 1401.98, "duration": 2.024}, {"text": "or whatever you want\nto-- whatever index", "start": 1404.004, "duration": 1.666}, {"text": "you want to delete\nthe element at.", "start": 1405.67, "duration": 2.187}, {"text": "If you just want to\ndelete the element", "start": 1407.857, "duration": 1.583}, {"text": "at the end of the list,\nthat's the farthest right,", "start": 1409.44, "duration": 2.61}, {"text": "you do L.pop.", "start": 1412.05, "duration": 3.1}, {"text": "If you want to remove a\nspecific element-- so you know", "start": 1415.15, "duration": 2.25}, {"text": "there's somewhere in your\nlist there's the number 5,", "start": 1417.4, "duration": 3.24}, {"text": "and you want to delete it\nfrom the list-- then you", "start": 1420.64, "duration": 2.67}, {"text": "say L.remove and you say what\nelement you want to remove.", "start": 1423.31, "duration": 4.14}, {"text": "And that only removes the\nvery first occurrence of it.", "start": 1427.45, "duration": 2.77}, {"text": "So if there's two\nfives in your list,", "start": 1430.22, "duration": 1.62}, {"text": "then it's only going to\nremove the very first one.", "start": 1431.84, "duration": 3.77}, {"text": "So let's take a look at this\nsort of sequence of commands.", "start": 1435.61, "duration": 5.4}, {"text": "So we have first L is equl\nto this long list here.", "start": 1441.01, "duration": 5.317}, {"text": "And I want to mention that\nall of these operations", "start": 1446.327, "duration": 2.083}, {"text": "are going to mutate\nour list, which", "start": 1448.41, "duration": 1.47}, {"text": "is why I wrote this comment here\nthat says assume that you're", "start": 1449.88, "duration": 3.75}, {"text": "doing these in order.", "start": 1453.63, "duration": 1.374}, {"text": "So as you're doing\nthese in order,", "start": 1455.004, "duration": 1.416}, {"text": "you're going to be\nmutating your list.", "start": 1456.42, "duration": 1.84}, {"text": "And if you're\nmutating your list,", "start": 1458.26, "duration": 0.92}, {"text": "you have to remember\nthat you're working", "start": 1459.18, "duration": 1.666}, {"text": "with this new mutated list.", "start": 1460.846, "duration": 3.41}, {"text": "So the first thing\nwe're doing is", "start": 1464.256, "duration": 1.374}, {"text": "we're removing 2 from our list.", "start": 1465.63, "duration": 3.69}, {"text": "So when you remove\n2, this says look", "start": 1469.32, "duration": 1.86}, {"text": "for an element with the value 2\nand take it away from the list.", "start": 1471.18, "duration": 5.13}, {"text": "So that's the very\nfirst one here.", "start": 1476.31, "duration": 3.34}, {"text": "So the list we're left with\nis just everything after it.", "start": 1479.65, "duration": 4.7}, {"text": "Then I want to remove\n3 from the list", "start": 1484.35, "duration": 1.65}, {"text": "and notice there's two of them.", "start": 1486.0, "duration": 1.35}, {"text": "There's this 3 here and\nthere's this 3 here.", "start": 1487.35, "duration": 2.41}, {"text": "So we're going to remove\nonly the first one, which", "start": 1489.76, "duration": 3.17}, {"text": "is this one here.", "start": 1492.93, "duration": 1.68}, {"text": "So the list we're left\nwith is 1,6,3,7,0.", "start": 1494.61, "duration": 4.978}, {"text": "Then we're going to\ndelete from the list L", "start": 1499.588, "duration": 4.092}, {"text": "the element at position 1.", "start": 1503.68, "duration": 1.99}, {"text": "So starting counting from\n0, the element at position 1", "start": 1505.67, "duration": 2.39}, {"text": "is this one here.", "start": 1508.06, "duration": 2.04}, {"text": "So we've removed that, and\nwe're left with 1, 3, 7, 0.", "start": 1510.1, "duration": 4.84}, {"text": "And then when we\ndo L.pop, that's", "start": 1514.94, "duration": 1.967}, {"text": "going to delete the element\nfurthest to the right.", "start": 1516.907, "duration": 2.083}, {"text": "So at the end of the\nlist, which is that 0.", "start": 1518.99, "duration": 1.88}, {"text": "So then we're left\nwith only 1, 3, and 7.", "start": 1525.45, "duration": 4.83}, {"text": "And L.pop is often useful,\nbecause it tells you", "start": 1530.28, "duration": 3.01}, {"text": "the return value from L.pop is\ngoing to be the value that it", "start": 1533.29, "duration": 4.68}, {"text": "removed.", "start": 1537.97, "duration": 0.57}, {"text": "So in this case, it's\ngoing to return 0.", "start": 1538.54, "duration": 1.72}, {"text": "I want to mention, though,\nthat some of the-- so these", "start": 1543.74, "duration": 3.21}, {"text": "functions all mutate the list.", "start": 1546.95, "duration": 2.52}, {"text": "You have to be careful\nwith return values.", "start": 1549.47, "duration": 3.03}, {"text": "So these are all-- you\ncan think of all of these", "start": 1552.5, "duration": 2.55}, {"text": "as functions that\noperate on the list.", "start": 1555.05, "duration": 2.949}, {"text": "Except that what these functions\ndo is they take in the list,", "start": 1557.999, "duration": 2.541}, {"text": "and they modify it.", "start": 1560.54, "duration": 2.16}, {"text": "But as functions, they\nobviously return something", "start": 1562.7, "duration": 3.06}, {"text": "back to whoever called them.", "start": 1565.76, "duration": 1.98}, {"text": "And oftentimes, they're going\nto return the value none.", "start": 1567.74, "duration": 3.75}, {"text": "So for example, if you are\ngoing to do L.remove 2,", "start": 1571.49, "duration": 4.29}, {"text": "and you print that out, that\nmight print out none for you.", "start": 1575.78, "duration": 3.12}, {"text": "So you can't just assign the\nvalue of this to a variable", "start": 1578.9, "duration": 4.95}, {"text": "and expect it to be\nthe mutated list.", "start": 1583.85, "duration": 2.73}, {"text": "The list got mutated.", "start": 1586.58, "duration": 2.179}, {"text": "The list that got\nmutated is the list", "start": 1588.759, "duration": 1.541}, {"text": "that was passed into to here.", "start": 1590.3, "duration": 1.8}, {"text": "We're going look at one\nexample in a few slides that's", "start": 1592.1, "duration": 2.61}, {"text": "going to show this.", "start": 1594.71, "duration": 1.62}, {"text": "OK.", "start": 1596.33, "duration": 0.542}, {"text": "Another thing that we can do,\nand this is often useful when", "start": 1596.872, "duration": 2.458}, {"text": "you're working with\ndata, is to convert lists", "start": 1599.33, "duration": 3.96}, {"text": "to strings and then\nstrings to lists.", "start": 1603.29, "duration": 2.13}, {"text": "Sometimes it might be useful\nto work with strings as opposed", "start": 1605.42, "duration": 2.91}, {"text": "to a list and vice versa.", "start": 1608.33, "duration": 4.48}, {"text": "So this first line here,\nlist s takes in a string", "start": 1612.81, "duration": 3.56}, {"text": "and casts it to a list.", "start": 1616.37, "duration": 2.4}, {"text": "So much like when we cast\na float to an integer,", "start": 1618.77, "duration": 2.07}, {"text": "for example.", "start": 1620.84, "duration": 1.05}, {"text": "You're just casting a\nstring to a list here.", "start": 1621.89, "duration": 3.06}, {"text": "And when you do\nthat up this line--", "start": 1624.95, "duration": 1.48}, {"text": "so if this is your s\nhere-- when you do list s,", "start": 1626.43, "duration": 3.56}, {"text": "this is going to\ngive you a list--", "start": 1629.99, "duration": 2.09}, {"text": "looks like this-- where\nevery single character in s", "start": 1632.08, "duration": 2.77}, {"text": "is going to be its own element.", "start": 1634.85, "duration": 2.07}, {"text": "So that means every character\nis going to be a string,", "start": 1636.92, "duration": 2.25}, {"text": "and it's going to be\nseparated by a comma,", "start": 1639.17, "duration": 1.9}, {"text": "so including spaces.", "start": 1641.07, "duration": 0.855}, {"text": "Sometimes you don't want\neach character in the list", "start": 1645.36, "duration": 2.46}, {"text": "to be its own element.", "start": 1647.82, "duration": 1.11}, {"text": "Sometimes you want, for example,\nif you're given a sentence,", "start": 1648.93, "duration": 2.88}, {"text": "you might want to have\neverything in between spaces", "start": 1651.81, "duration": 3.15}, {"text": "being its own element.", "start": 1654.96, "duration": 1.33}, {"text": "So that will give you every word\nin the sentence, for example.", "start": 1656.29, "duration": 2.583}, {"text": "In that case, you're\ngoing to use split.", "start": 1661.23, "duration": 4.14}, {"text": "In this case, I've split\nover the less than sign.", "start": 1665.37, "duration": 2.12}, {"text": "But again, if you're doing\nthe sentence example,", "start": 1667.49, "duration": 4.75}, {"text": "you might want to\nsplit on the space.", "start": 1672.24, "duration": 2.12}, {"text": "So this is going to take\neverything in between the sign", "start": 1674.36, "duration": 2.967}, {"text": "that you're interested in-- in\nthis case, the less than sign--", "start": 1677.327, "duration": 2.583}, {"text": "and it's going to set it as a\nseparate element in the list.", "start": 1679.91, "duration": 2.458}, {"text": "So that's how you\nconvert strings to lists.", "start": 1687.62, "duration": 4.55}, {"text": "And sometimes\nyou're given a list,", "start": 1692.17, "duration": 1.905}, {"text": "and you might want to\nconvert it to a string.", "start": 1694.075, "duration": 1.875}, {"text": "So that's where this join\nmethod or function is useful.", "start": 1695.95, "duration": 5.93}, {"text": "So this is an empty string.", "start": 1701.88, "duration": 1.922}, {"text": "So it's just open\nclose quote right away.", "start": 1703.802, "duration": 1.708}, {"text": "No space.", "start": 1705.51, "duration": 1.36}, {"text": "So this just joins every one\nof the elements in the list", "start": 1706.87, "duration": 3.661}, {"text": "together.", "start": 1710.531, "duration": 0.499}, {"text": "So it'll return the string abc.", "start": 1711.03, "duration": 1.92}, {"text": "And then you can join on any\ncharacter that you would want.", "start": 1712.95, "duration": 2.68}, {"text": "So in this case, you can\njoin on the underscore.", "start": 1715.63, "duration": 2.61}, {"text": "So it'll put whatever characters\nin here in between every one", "start": 1718.24, "duration": 3.08}, {"text": "of the elements in your list.", "start": 1721.32, "duration": 3.1}, {"text": "So pretty useful functions.", "start": 1724.42, "duration": 3.8}, {"text": "OK.", "start": 1728.22, "duration": 0.72}, {"text": "Couple other operations\nwe can do on lists--", "start": 1728.94, "duration": 1.9}, {"text": "and these are also pretty\nuseful-- is to sort lists", "start": 1730.84, "duration": 3.03}, {"text": "and to reverse lists\nand many, many others", "start": 1733.87, "duration": 3.32}, {"text": "in the Python documentation.", "start": 1737.19, "duration": 4.55}, {"text": "So sort and sorted both\nsort lists, but one of them", "start": 1741.74, "duration": 5.07}, {"text": "mutates the list and\nthe other one does not.", "start": 1746.81, "duration": 2.76}, {"text": "And sometimes it's\nuseful to use one,", "start": 1749.57, "duration": 1.89}, {"text": "and sometimes it's\nuseful to use the other.", "start": 1751.46, "duration": 2.61}, {"text": "So if I have this list\nL is equal to 9,6,0,3,", "start": 1754.07, "duration": 5.48}, {"text": "sorted-- you can think\nof it as giving me", "start": 1759.55, "duration": 4.83}, {"text": "the sorted version\nof L-- gives you back", "start": 1764.38, "duration": 3.23}, {"text": "the sorted version of L. So\nit returns a new list that's", "start": 1767.61, "duration": 3.51}, {"text": "the sorted version of the input\nlist and does not mutate L.", "start": 1771.12, "duration": 3.57}, {"text": "So it keeps L the\nexact same way.", "start": 1774.69, "duration": 1.79}, {"text": "So this will be replaced\nby the sorted version", "start": 1779.12, "duration": 3.48}, {"text": "of the list, which you\ncan assign to a variable,", "start": 1782.6, "duration": 2.267}, {"text": "and then do whatever\nyou want with it.", "start": 1784.867, "duration": 1.583}, {"text": "Like L2 is equal to\nsorted L, for example.", "start": 1786.45, "duration": 4.395}, {"text": "And it keeps L the same.", "start": 1793.43, "duration": 2.51}, {"text": "On the other hand, if you\njust want to mutate L,", "start": 1795.94, "duration": 2.511}, {"text": "and you don't care about getting\nanother copy that's sorted,", "start": 1798.451, "duration": 2.499}, {"text": "you just do L.sort.", "start": 1800.95, "duration": 2.9}, {"text": "And that's going to\nautomatically sort L for you,", "start": 1803.85, "duration": 3.2}, {"text": "and L now-- L is now the\nsorted version of L. Similarly,", "start": 1807.05, "duration": 7.17}, {"text": "reverse is going to take L and\nreverse all the character--", "start": 1814.22, "duration": 3.66}, {"text": "all the elements in it.", "start": 1817.88, "duration": 0.96}, {"text": "So the last one is the first\none, the second to last one", "start": 1818.84, "duration": 2.333}, {"text": "is the second one, and so on.", "start": 1821.173, "duration": 3.727}, {"text": "So lists are mutable.", "start": 1824.9, "duration": 1.62}, {"text": "We've said that so many\ntimes this lecture.", "start": 1826.52, "duration": 1.817}, {"text": "But what exactly does that mean?", "start": 1828.337, "duration": 1.333}, {"text": "What implications\ndoes that have?", "start": 1829.67, "duration": 4.02}, {"text": "Once again, this next part\nof the lecture, Python tutor.", "start": 1833.69, "duration": 5.79}, {"text": "Just paste all the code\nin and go step by step", "start": 1839.48, "duration": 4.08}, {"text": "to see exactly what's happening.", "start": 1843.56, "duration": 3.86}, {"text": "So lists are mutable.", "start": 1847.42, "duration": 1.755}, {"text": "As you have variable\nnames-- so for example,", "start": 1852.46, "duration": 4.27}, {"text": "L is equal to some\nlist-- that L is", "start": 1856.73, "duration": 3.98}, {"text": "going to be pointing\nto the list in memory.", "start": 1860.71, "duration": 3.45}, {"text": "And since it's a mutable\nobject, this list,", "start": 1864.16, "duration": 2.41}, {"text": "you can have more\nthan one variable", "start": 1866.57, "duration": 1.76}, {"text": "that points to the exact\nsame object in memory.", "start": 1868.33, "duration": 4.92}, {"text": "And if you have more\nthan one variable that", "start": 1873.25, "duration": 2.35}, {"text": "points to the same\nobject in memory,", "start": 1875.6, "duration": 1.5}, {"text": "if that object in\nmemory is changed, then", "start": 1877.1, "duration": 3.24}, {"text": "when you access it through\nany one of these variables,", "start": 1880.34, "duration": 3.21}, {"text": "they're all going to give\nyou the changed object value.", "start": 1883.55, "duration": 7.31}, {"text": "So the key phrase\nto keep in mind", "start": 1890.86, "duration": 1.41}, {"text": "when you're dealing\nwith lists is", "start": 1892.27, "duration": 1.74}, {"text": "what side effects could happen?", "start": 1894.01, "duration": 2.04}, {"text": "If you're mutating a list,\nif you're doing operations", "start": 1896.05, "duration": 2.73}, {"text": "on lists, what side effects--\nwhat variables might", "start": 1898.78, "duration": 4.59}, {"text": "be affected by this change?", "start": 1903.37, "duration": 2.91}, {"text": "Let's come back down\nto earth for a second.", "start": 1906.28, "duration": 2.97}, {"text": "This will wake a\nlot of people up.", "start": 1909.25, "duration": 1.507}, {"text": "So let's do an\nanalogy with people.", "start": 1913.38, "duration": 4.56}, {"text": "Let's say we have a person.", "start": 1917.94, "duration": 1.68}, {"text": "A person-- this\ncase, Justin Bieber--", "start": 1919.62, "duration": 3.24}, {"text": "is going to be an object.", "start": 1922.86, "duration": 2.49}, {"text": "I'm an object.", "start": 1925.35, "duration": 1.44}, {"text": "I'm like the number three.", "start": 1926.79, "duration": 1.68}, {"text": "Bieber's an object.", "start": 1928.47, "duration": 0.87}, {"text": "He's like number five.", "start": 1929.34, "duration": 1.35}, {"text": "Different objects.", "start": 1930.69, "duration": 1.15}, {"text": "Were both of type people.", "start": 1931.84, "duration": 3.19}, {"text": "OK.", "start": 1935.03, "duration": 1.91}, {"text": "Let's say a person has\ndifferent attributes.", "start": 1936.94, "duration": 3.18}, {"text": "Let's say we can--\nlet's say he gets", "start": 1940.12, "duration": 3.75}, {"text": "two attributes to begin with.", "start": 1943.87, "duration": 1.56}, {"text": "He's a singer and he's rich.", "start": 1945.43, "duration": 1.22}, {"text": "I can refer to this person\nobject by many different names.", "start": 1950.53, "duration": 3.57}, {"text": "His full name, his stage\nname, all of the fan girls", "start": 1954.1, "duration": 2.88}, {"text": "call him by these\nnames, people who", "start": 1956.98, "duration": 2.61}, {"text": "dislike him call\nhim by other names", "start": 1959.59, "duration": 1.5}, {"text": "that they didn't put up here.", "start": 1961.09, "duration": 2.4}, {"text": "But he's known by all\nthese different names.", "start": 1963.49, "duration": 2.07}, {"text": "They're all aliases or nicknames\nthat point to this same person", "start": 1965.56, "duration": 3.0}, {"text": "object.", "start": 1968.56, "duration": 2.21}, {"text": "OK.", "start": 1970.77, "duration": 0.91}, {"text": "So originally, let's say\nI say Justin Bieber is", "start": 1971.68, "duration": 2.04}, {"text": "a singer and rich.", "start": 1973.72, "duration": 1.017}, {"text": "Those are the two\nattributes I've originally", "start": 1974.737, "duration": 1.833}, {"text": "assigned to him.", "start": 1976.57, "duration": 1.59}, {"text": "And then let's say I want to\nassign a different attribute", "start": 1978.16, "duration": 2.7}, {"text": "to him and say Justin\nBieber's a singer, rich,", "start": 1980.86, "duration": 3.53}, {"text": "and a troublemaker.", "start": 1984.39, "duration": 1.35}, {"text": "I'm being kind here.", "start": 1985.74, "duration": 2.19}, {"text": "OK.", "start": 1987.93, "duration": 1.11}, {"text": "So if I say Justin Bieber\nhas these three attributes--", "start": 1989.04, "duration": 3.49}, {"text": "so it's the same person\nI'm referring to-- then", "start": 1992.53, "duration": 2.63}, {"text": "all of his nicknames\nare going to refer", "start": 1995.16, "duration": 3.6}, {"text": "to this exact same person.", "start": 1998.76, "duration": 1.33}, {"text": "So all of his\nnicknames or aliases", "start": 2000.09, "duration": 3.2}, {"text": "will refer to the\nsame person object", "start": 2003.29, "duration": 2.1}, {"text": "with these changed attributes.", "start": 2005.39, "duration": 3.2}, {"text": "Does that makes sense?", "start": 2008.59, "duration": 1.92}, {"text": "OK.", "start": 2010.51, "duration": 0.96}, {"text": "So that sort of idea\narises in lists.", "start": 2011.47, "duration": 4.08}, {"text": "So a list is like\na person object", "start": 2015.55, "duration": 1.82}, {"text": "whose value-- whose attributes\ncan change, for example.", "start": 2017.37, "duration": 3.57}, {"text": "And as they change, all\nof the different aliases", "start": 2020.94, "duration": 2.35}, {"text": "for this object will point\nto this changed object.", "start": 2023.29, "duration": 3.235}, {"text": "So let's see a few examples.", "start": 2029.39, "duration": 1.61}, {"text": "I apologize if this\nis a little small,", "start": 2031.0, "duration": 2.64}, {"text": "but this I basically\ncopied and pasted", "start": 2033.64, "duration": 1.77}, {"text": "from the Python\ntutor, which is just", "start": 2035.41, "duration": 3.45}, {"text": "from the code from\ntoday's lecture.", "start": 2038.86, "duration": 3.48}, {"text": "So I have these\nlines of code here.", "start": 2042.34, "duration": 2.79}, {"text": "The first couple of\nlines really just", "start": 2045.13, "duration": 1.59}, {"text": "show what happens\nwhen you're dealing", "start": 2046.72, "duration": 1.541}, {"text": "with non-mutable objects.", "start": 2048.261, "duration": 1.627}, {"text": "So with non-mutable\nobjects, you have", "start": 2049.888, "duration": 1.541}, {"text": "two separate objects that\nget their own values,", "start": 2051.429, "duration": 3.091}, {"text": "and that's it.", "start": 2054.52, "duration": 0.73}, {"text": "End of story.", "start": 2055.25, "duration": 1.76}, {"text": "With lists, however,\nthere's something different", "start": 2057.01, "duration": 4.418}, {"text": "that happens.", "start": 2061.428, "duration": 0.541}, {"text": "So I have warm is a variable.", "start": 2061.969, "duration": 3.291}, {"text": "And it's going to be\nequal to this list.", "start": 2065.26, "duration": 1.83}, {"text": "So warm is going to\npoint to this list here.", "start": 2067.09, "duration": 3.149}, {"text": "Red, yellow, orange.", "start": 2070.239, "duration": 0.911}, {"text": "It contains three elements.", "start": 2071.15, "duration": 3.41}, {"text": "Hot is equal to warm.", "start": 2074.56, "duration": 1.17}, {"text": "It means I'm creating\nan alias for this list.", "start": 2075.73, "duration": 3.35}, {"text": "And the alias is going to\nbe with this variable hot.", "start": 2079.08, "duration": 4.389}, {"text": "So notice warm and hot point\nto the exact same object.", "start": 2083.469, "duration": 5.411}, {"text": "So on line 8 when I append\nthis string pink to my object,", "start": 2088.88, "duration": 5.99}, {"text": "since both of\nthese two variables", "start": 2094.87, "duration": 2.13}, {"text": "point to the exact\nsame object, if I'm", "start": 2097.0, "duration": 1.86}, {"text": "trying to access this object\nthrough either variable,", "start": 2098.86, "duration": 4.14}, {"text": "they're both going to\nprint out the same thing.", "start": 2103.0, "duration": 2.64}, {"text": "And that's the side effect.", "start": 2108.33, "duration": 1.31}, {"text": "That's the side effect\nof lists mutable.", "start": 2109.64, "duration": 3.28}, {"text": "If you want to create an\nentirely new copy of the list,", "start": 2117.3, "duration": 4.98}, {"text": "then you can clone it,\nwhich sounds really cool.", "start": 2122.28, "duration": 2.94}, {"text": "But really, it's just\nmaking a copy of the list.", "start": 2125.22, "duration": 2.88}, {"text": "And you clone it using\nthis little notation here,", "start": 2128.1, "duration": 3.04}, {"text": "which is open close square\nbrackets with a colon.", "start": 2131.14, "duration": 3.29}, {"text": "And we've sort of seen\nthis notation here.", "start": 2134.43, "duration": 1.75}, {"text": "And this tells Python\nthis is 0-- sorry.", "start": 2136.18, "duration": 3.17}, {"text": "This is 0 and this is length.", "start": 2139.35, "duration": 3.43}, {"text": "Cool.", "start": 2142.78, "duration": 0.5}, {"text": "But it basically says\ntake every element,", "start": 2146.03, "duration": 1.91}, {"text": "create a new list with\nthose exact same elements,", "start": 2147.94, "duration": 4.59}, {"text": "and assign it to\nthe variable chill.", "start": 2152.53, "duration": 3.14}, {"text": "So here, if I\noriginally have cool", "start": 2155.67, "duration": 1.89}, {"text": "is equal to blue,\ngreen, gray right", "start": 2157.56, "duration": 2.13}, {"text": "here, when I clone it on line\n2 with that funky notation,", "start": 2159.69, "duration": 5.49}, {"text": "I'm creating a new copy of it.", "start": 2165.18, "duration": 2.544}, {"text": "And then on the\nnext line when I'm", "start": 2167.724, "duration": 1.416}, {"text": "appending another\nelement to the copy,", "start": 2169.14, "duration": 4.86}, {"text": "notice I'm just\naltering the copy.", "start": 2174.0, "duration": 2.52}, {"text": "The original stayed the\nsame, because I've cloned it.", "start": 2176.52, "duration": 4.84}, {"text": "So if you don't want to\nhave the side effects-- side", "start": 2181.36, "duration": 3.0}, {"text": "effect issue, then\nyou should clone", "start": 2184.36, "duration": 1.83}, {"text": "your variable-- your list.", "start": 2186.19, "duration": 4.11}, {"text": "So let's see a slightly\nmore complicated example", "start": 2194.61, "duration": 4.76}, {"text": "where you're going to see\nthe difference between sort", "start": 2199.37, "duration": 3.485}, {"text": "and sorted in the context\nof this mutability and side", "start": 2202.855, "duration": 5.915}, {"text": "effects issue.", "start": 2208.77, "duration": 0.821}, {"text": "OK.", "start": 2209.591, "duration": 0.499}, {"text": "So once again, let's create this\nwarm is equal to red, yellow,", "start": 2210.09, "duration": 4.08}, {"text": "orange.", "start": 2214.17, "duration": 0.72}, {"text": "So that's what warm is going\nto point to, this list.", "start": 2214.89, "duration": 5.13}, {"text": "And then sorted warm\nis equal to warm.sort.", "start": 2220.02, "duration": 3.81}, {"text": "So .sort mutates.", "start": 2223.83, "duration": 2.67}, {"text": "So as soon as I do\nthat, that list warm", "start": 2226.5, "duration": 3.33}, {"text": "is now the sorted version of it.", "start": 2229.83, "duration": 3.65}, {"text": "And notice that I've\nassigned the return of this", "start": 2233.48, "duration": 2.98}, {"text": "to sorted warm.", "start": 2236.46, "duration": 1.15}, {"text": "And the return is none,\nbecause L.sort or .sort mutated", "start": 2237.61, "duration": 8.56}, {"text": "the list.", "start": 2246.17, "duration": 0.78}, {"text": "It didn't return a sorted\nversion of the list.", "start": 2246.95, "duration": 3.18}, {"text": "It mutated the list itself.", "start": 2250.13, "duration": 2.22}, {"text": "OK.", "start": 2252.35, "duration": 0.81}, {"text": "So when I print warm\nand I print sorted warm,", "start": 2253.16, "duration": 2.07}, {"text": "I'm printing the mutated\nversion and then this one here.", "start": 2255.23, "duration": 5.25}, {"text": "Sorted, on the other\nhand, returns--", "start": 2260.48, "duration": 4.3}, {"text": "it doesn't-- sorted does not\nsort the list that's given", "start": 2264.78, "duration": 6.17}, {"text": "to it.", "start": 2270.95, "duration": 0.63}, {"text": "And instead, it returns a\nsorted version of the list.", "start": 2271.58, "duration": 3.22}, {"text": "So in this case, if cool is\nequal to these three colors--", "start": 2274.8, "duration": 3.02}, {"text": "gray, green, blue--\nif I do sorted cool,", "start": 2277.82, "duration": 4.94}, {"text": "it's going to return the sorted\nversion of that list, which", "start": 2282.76, "duration": 2.59}, {"text": "is blue, green, gray.", "start": 2285.35, "duration": 1.864}, {"text": "And it's assigned to the\nvariable sorted cool.", "start": 2287.214, "duration": 1.916}, {"text": "So when I print them,\nit's going to show", "start": 2289.13, "duration": 1.666}, {"text": "me the two separate lists.", "start": 2290.796, "duration": 2.434}, {"text": "One being the\noriginal unsorted one,", "start": 2293.23, "duration": 1.726}, {"text": "and one being the\nsorted version.", "start": 2294.956, "duration": 1.374}, {"text": "Last ones a little\nbit more complicated,", "start": 2301.19, "duration": 2.49}, {"text": "but it shows that even\nthough you have nested--", "start": 2303.68, "duration": 4.23}, {"text": "even though you can have nested\nlists, you still-- you're not--", "start": 2307.91, "duration": 5.19}, {"text": "you don't escape this\nidea of side effects.", "start": 2313.1, "duration": 7.53}, {"text": "So first, I'm going to create\nwarm is equal to these two", "start": 2320.63, "duration": 4.14}, {"text": "colors, yellow, orange.", "start": 2324.77, "duration": 1.41}, {"text": "So warm points to\nthese two colors.", "start": 2326.18, "duration": 2.82}, {"text": "Hot is equal to this one\nlist-- a list with one element.", "start": 2329.0, "duration": 5.0}, {"text": "Bright colors is\ngoing to be a list.", "start": 2334.0, "duration": 3.81}, {"text": "And the element inside\nthe list is a list itself.", "start": 2337.81, "duration": 4.55}, {"text": "So since it's a list--\nthis is your list,", "start": 2342.36, "duration": 2.85}, {"text": "and the element inside here,\nwhich is a list itself,", "start": 2345.21, "duration": 3.03}, {"text": "is actually just pointing\nto whatever warm is.", "start": 2348.24, "duration": 2.64}, {"text": "That object.", "start": 2350.88, "duration": 0.613}, {"text": "Then I do-- then I append\nhot to my bright colors.", "start": 2356.7, "duration": 3.84}, {"text": "So the next element\nhere is going", "start": 2360.54, "duration": 1.71}, {"text": "to be another list, which\nmeans it's just pointing", "start": 2362.25, "duration": 3.21}, {"text": "to this other list here.", "start": 2365.46, "duration": 1.38}, {"text": "It's not creating a copy of it.", "start": 2366.84, "duration": 3.324}, {"text": "So each one of\nthese elements here", "start": 2370.164, "duration": 1.416}, {"text": "is actually just pointing\nto these two lists here.", "start": 2371.58, "duration": 3.96}, {"text": "So if I modified\neither one of these,", "start": 2375.54, "duration": 2.46}, {"text": "then bright colors\nwould also be modified.", "start": 2378.0, "duration": 2.2}, {"text": "So let's say I add pink\nhere to my hot list.", "start": 2380.2, "duration": 5.06}, {"text": "We have red and pink.", "start": 2385.26, "duration": 1.7}, {"text": "Then notice that bright\ncolors-- the first element", "start": 2386.96, "duration": 3.769}, {"text": "points to this list,\nand the second element", "start": 2390.729, "duration": 1.791}, {"text": "points to this list,\nwhich I've just modified.", "start": 2392.52, "duration": 3.939}, {"text": "Last thing is-- I'll\nlet you try this", "start": 2396.459, "duration": 1.541}, {"text": "as an exercise in Python Tutor--\nbut the idea here being you", "start": 2398.0, "duration": 4.02}, {"text": "should be careful as you're\nwriting a for loop that", "start": 2402.02, "duration": 2.55}, {"text": "iterates over a list that you're\nmodifying inside the list.", "start": 2404.57, "duration": 3.93}, {"text": "In this case, I'm trying\nto go through the list L1.", "start": 2408.5, "duration": 3.75}, {"text": "And if I find an item\nthat's in L1 and L2,", "start": 2412.25, "duration": 2.88}, {"text": "I want to delete it from L1.", "start": 2415.13, "duration": 3.09}, {"text": "So 1 and 2 are also in L2.", "start": 2418.22, "duration": 2.46}, {"text": "So I want to delete them from\nL1 and be left with 3, 4.", "start": 2420.68, "duration": 3.36}, {"text": "However, the code on the\nleft here doesn't actually", "start": 2424.04, "duration": 2.16}, {"text": "do what I think it's\ndoing, because here I'm", "start": 2426.2, "duration": 5.51}, {"text": "modifying a list as\nI'm iterating over it.", "start": 2431.71, "duration": 1.94}, {"text": "And behind the\nscenes, Python keeps", "start": 2433.65, "duration": 2.22}, {"text": "this-- keeps track of the index\nand doesn't update the index", "start": 2435.87, "duration": 4.35}, {"text": "as you're changing the list.", "start": 2440.22, "duration": 2.59}, {"text": "So it figures out the\nlength of the list", "start": 2442.81, "duration": 2.21}, {"text": "to begin with and how\nmany indices it has.", "start": 2445.02, "duration": 3.47}, {"text": "It doesn't update it as you're\nremoving items from the list.", "start": 2448.49, "duration": 4.22}, {"text": "So the solution to that is\nto make a copy of the list", "start": 2452.71, "duration": 2.88}, {"text": "first, iterate over the copy,\nwhich will remain intact,", "start": 2455.59, "duration": 5.94}, {"text": "and modify the list that you\nwant to modify inside the loop.", "start": 2461.53, "duration": 4.41}, {"text": "So please run both of\nthese in the Python Tutor,", "start": 2465.94, "duration": 2.984}, {"text": "and you'll see that what ends\nup happening is on the left,", "start": 2468.924, "duration": 2.416}, {"text": "you're going to skip\nover one element.", "start": 2471.34, "duration": 2.52}, {"text": "So your code-- so that's\ngoing to be the wrong code.", "start": 2473.86, "duration": 4.02}, {"text": "All right.", "start": 2477.88, "duration": 1.61}]