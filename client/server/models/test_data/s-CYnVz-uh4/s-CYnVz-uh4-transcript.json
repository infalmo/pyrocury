[{"text": "The following content is\nprovided under a Creative", "start": 0.05, "duration": 2.44}, {"text": "Commons license.", "start": 2.49, "duration": 1.52}, {"text": "Your support will help\nMIT OpenCourseWare", "start": 4.01, "duration": 2.34}, {"text": "continue to offer high quality\neducational resources for free.", "start": 6.35, "duration": 4.37}, {"text": "To make a donation or\nview additional materials", "start": 10.72, "duration": 2.61}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.33, "duration": 3.896}, {"text": "at ocw.mit.edu.", "start": 17.226, "duration": 0.625}, {"text": "PROFESSOR: Today we're going\nto introduce graph search", "start": 21.73, "duration": 2.25}, {"text": "in general and talk about\none algorithm, which", "start": 23.98, "duration": 1.916}, {"text": "is breadth-first search, and\nunderstand how in principle you", "start": 25.896, "duration": 3.444}, {"text": "can solve a puzzle\nlike the Rubik's Cube.", "start": 29.34, "duration": 3.84}, {"text": "So before I get to\nRubik's Cubes let", "start": 33.18, "duration": 3.01}, {"text": "me remind you of some\nbasic stuff about graphs.", "start": 36.19, "duration": 5.752}, {"text": "Or I can tell you to start\nout with, graph search is", "start": 41.942, "duration": 8.438}, {"text": "about exploring a graph.", "start": 50.38, "duration": 2.525}, {"text": "And there's many different\nnotions of exploring a graph.", "start": 55.89, "duration": 3.09}, {"text": "Maybe I give you some\nnode in a graph, s,", "start": 58.98, "duration": 2.97}, {"text": "and some other\nnode in a graph, t,", "start": 61.95, "duration": 1.84}, {"text": "and I'd like to\nfind a path that's", "start": 63.79, "duration": 3.15}, {"text": "going to represent a\nproblem like I give you", "start": 66.94, "duration": 2.45}, {"text": "a particular state of a\nRubik's Cube and I want to know", "start": 69.39, "duration": 3.75}, {"text": "is there some path that\ngets me into a solved state?", "start": 73.14, "duration": 3.394}, {"text": "Do I really want to\nsolve this on stage?", "start": 76.534, "duration": 1.666}, {"text": "What the hell?", "start": 78.2, "duration": 1.03}, {"text": "We started.", "start": 79.23, "duration": 2.42}, {"text": "So this is a particularly\neasy state to solve,", "start": 81.65, "duration": 2.76}, {"text": "which is why I set up this way.", "start": 84.41, "duration": 2.406}, {"text": "All right, so there you go.", "start": 86.816, "duration": 1.124}, {"text": "Seven by seven by seven Rubik's\nCube solved in 10 seconds.", "start": 87.94, "duration": 3.57}, {"text": "Amazing.", "start": 91.51, "duration": 2.14}, {"text": "New world record.", "start": 93.65, "duration": 2.38}, {"text": "So you're given some initial\nstate of the Rubik's Cube.", "start": 96.03, "duration": 3.297}, {"text": "You're given the\ntargets that you", "start": 99.327, "duration": 1.375}, {"text": "know what solved looks like.", "start": 100.702, "duration": 1.458}, {"text": "You want to find this path.", "start": 102.16, "duration": 2.84}, {"text": "Maybe you want to\nfind all paths from s.", "start": 105.0, "duration": 2.887}, {"text": "Maybe you just want to\nexplore all the nodes", "start": 107.887, "duration": 1.833}, {"text": "in a graph you can reach from s.", "start": 109.72, "duration": 1.44}, {"text": "Maybe you want to explore all\nthe nodes in a graph or maybe", "start": 111.16, "duration": 2.3}, {"text": "all the edges in a graph.", "start": 113.46, "duration": 1.041}, {"text": "These are all\nexploration problems.", "start": 114.501, "duration": 1.576}, {"text": "They're all going to\nbe solved by algorithms", "start": 116.077, "duration": 1.833}, {"text": "from this class and next class.", "start": 117.91, "duration": 3.73}, {"text": "So before we go\nfurther though, I", "start": 121.64, "duration": 2.71}, {"text": "should remind you\nwhat a graph is", "start": 124.35, "duration": 2.98}, {"text": "and sort of basic\nfeatures of graphs", "start": 127.33, "duration": 2.839}, {"text": "that we're going to be using.", "start": 130.169, "duration": 2.061}, {"text": "This is also 6042 material so\nyou should know it very well.", "start": 132.23, "duration": 3.16}, {"text": "If you don't,\nthere's an appendix", "start": 135.39, "duration": 1.73}, {"text": "in the textbook about it.", "start": 137.12, "duration": 1.7}, {"text": "We have a set of vertices.", "start": 138.82, "duration": 1.277}, {"text": "We have a set of edges.", "start": 140.097, "duration": 0.958}, {"text": "Edges are either\nunordered pairs--", "start": 153.36, "duration": 5.295}, {"text": "some sets of two items--", "start": 161.46, "duration": 2.78}, {"text": "or ordered pairs.", "start": 167.14, "duration": 3.49}, {"text": "In this case, we call\nthe graph undirected.", "start": 178.23, "duration": 4.04}, {"text": "In this case, we call\nthe graph directed.", "start": 182.27, "duration": 2.65}, {"text": "Usually, there's only one type.", "start": 184.92, "duration": 2.71}, {"text": "Either all the\nedges are directed", "start": 187.63, "duration": 1.4}, {"text": "or all the edges are undirected.", "start": 189.03, "duration": 2.66}, {"text": "There is a study of\ngraphs that have both,", "start": 191.69, "duration": 1.75}, {"text": "but we are not doing that here.", "start": 193.44, "duration": 1.957}, {"text": "Some simple examples.", "start": 198.72, "duration": 1.71}, {"text": "Here is a graph.", "start": 203.344, "duration": 0.666}, {"text": "This is an undirected graph.", "start": 209.57, "duration": 1.225}, {"text": "This is a directed graph.", "start": 222.82, "duration": 1.25}, {"text": "The set of vertices\nhere is a, b, c, d.", "start": 228.49, "duration": 1.625}, {"text": "The set of vertices\nhere is a, b, c.", "start": 230.115, "duration": 2.41}, {"text": "The set of edges here is--", "start": 232.525, "duration": 2.655}, {"text": "E is going to be things\nlike a, b; b, c; c, d--", "start": 235.18, "duration": 9.07}, {"text": "I think you get the idea.", "start": 244.25, "duration": 1.3}, {"text": "Just for completeness,\nV is a, b, c, d.", "start": 249.78, "duration": 2.97}, {"text": "Just so you remember\nnotations and so on.", "start": 252.75, "duration": 1.89}, {"text": "One of the issues we're going\nto talk about in this class", "start": 257.214, "duration": 2.375}, {"text": "is how do you represent a graph\nlike this for an algorithm?", "start": 259.589, "duration": 3.973}, {"text": "So it's all fine to say,\noh, this is a set of things.", "start": 263.562, "duration": 2.208}, {"text": "This is a set of things.", "start": 265.77, "duration": 1.3}, {"text": "An obvious representation\nis, you have", "start": 267.07, "duration": 1.64}, {"text": "a list or an array of vertices.", "start": 268.71, "duration": 2.41}, {"text": "You have an array of edges.", "start": 271.12, "duration": 1.4}, {"text": "Each edge knows\nits two end points.", "start": 272.52, "duration": 1.8}, {"text": "That would be a horrible\nrepresentation for a graph", "start": 274.32, "duration": 3.33}, {"text": "because if you're, I\ndon't know, at vertex, a,", "start": 277.65, "duration": 2.27}, {"text": "and you want to know, well\nwhat are the neighbors of a?", "start": 279.92, "duration": 2.42}, {"text": "b and c.", "start": 282.34, "duration": 0.92}, {"text": "You'd have to go through\nthe entire edge list", "start": 283.26, "duration": 2.03}, {"text": "to figure out the\nneighbors of a.", "start": 285.29, "duration": 2.09}, {"text": "So it's been linear time just\nto know where you can go from a.", "start": 287.38, "duration": 3.044}, {"text": "So we're not going to\nuse that representation.", "start": 290.424, "duration": 1.916}, {"text": "We're going to use some\nbetter representations.", "start": 292.34, "duration": 3.09}, {"text": "Something called\nan adjacency list.", "start": 295.43, "duration": 1.73}, {"text": "Over here, you've got things\nlike a, c; b, c; and c, b.", "start": 301.56, "duration": 6.41}, {"text": "So you can have edges\nin both directions.", "start": 307.97, "duration": 2.746}, {"text": "What am I missing?", "start": 310.716, "duration": 0.904}, {"text": "b, a.", "start": 311.62, "duration": 0.5}, {"text": "So that's E, in that case.", "start": 314.892, "duration": 2.588}, {"text": "There are a whole lot of\napplications of graph search.", "start": 322.18, "duration": 3.304}, {"text": "I'll make you a little list\nto talk about few of them.", "start": 325.484, "duration": 2.946}, {"text": "So we've got web crawling.", "start": 332.27, "duration": 2.825}, {"text": "You're Google.", "start": 339.01, "duration": 0.595}, {"text": "You want to find all\nthe pages on the web.", "start": 339.605, "duration": 2.495}, {"text": "Most people don't just tell\nyou, hey, I've got a new page,", "start": 342.1, "duration": 2.95}, {"text": "please index it.", "start": 345.05, "duration": 1.4}, {"text": "You have to just keep\nfollowing links--", "start": 346.45, "duration": 2.07}, {"text": "in the early days of the\nweb, this was a big deal--", "start": 348.52, "duration": 2.19}, {"text": "following links finding\neverything that's out there.", "start": 350.71, "duration": 2.949}, {"text": "It's a little bit of an issue\nbecause if you define it wrong,", "start": 353.659, "duration": 2.541}, {"text": "the internet is infinite\nbecause of all those dynamically", "start": 356.2, "duration": 3.49}, {"text": "generated pages.", "start": 359.69, "duration": 0.91}, {"text": "But to deal with\nthat, Google goes", "start": 360.6, "duration": 2.73}, {"text": "sort of breadth-first\nfor the most part.", "start": 363.33, "duration": 2.02}, {"text": "It's prioritized You want\nto see all the things you", "start": 365.35, "duration": 4.36}, {"text": "can reach from pages you\nalready have and keep going.", "start": 369.71, "duration": 5.73}, {"text": "At some point, you give up\nwhen you run out of time.", "start": 375.44, "duration": 3.69}, {"text": "Social networking.", "start": 379.13, "duration": 2.0}, {"text": "You're on Facebook.", "start": 381.13, "duration": 0.87}, {"text": "You use Friend Finder.", "start": 382.0, "duration": 1.5}, {"text": "It tries to find the friends\nthat are nearest to you.", "start": 383.5, "duration": 2.76}, {"text": "Or friends of friends is\nsort of a level to search.", "start": 386.26, "duration": 4.88}, {"text": "That's essentially a\ngraph search problem.", "start": 391.14, "duration": 2.2}, {"text": "You want to know what's\ntwo levels or three", "start": 393.34, "duration": 3.79}, {"text": "levels of separation from you.", "start": 397.13, "duration": 2.05}, {"text": "And then you loop over those\nand look for other signs", "start": 399.18, "duration": 4.349}, {"text": "that you might be good friends.", "start": 403.529, "duration": 1.291}, {"text": "You are on a network like the\ninternet or some intranet.", "start": 409.56, "duration": 4.9}, {"text": "You want to broadcast a message.", "start": 414.46, "duration": 1.65}, {"text": "So here's you.", "start": 416.11, "duration": 1.23}, {"text": "You want to send data out.", "start": 417.34, "duration": 2.01}, {"text": "That's essentially a\ngraph exploration problem.", "start": 419.35, "duration": 2.48}, {"text": "That message, that packet, is\ngoing to explore the graph.", "start": 421.83, "duration": 3.02}, {"text": "Garbage collection.", "start": 429.46, "duration": 0.865}, {"text": "I hope you all know that\nmodern languages have", "start": 434.34, "duration": 3.029}, {"text": "garbage collection.", "start": 437.369, "duration": 0.791}, {"text": "This is why you don't have to\nworry about freeing things.", "start": 438.16, "duration": 3.58}, {"text": "Even in Python--\neven in CPython,", "start": 441.74, "duration": 2.06}, {"text": "I learned-- there is a garbage\ncollector as of version two.", "start": 443.8, "duration": 3.8}, {"text": "But also in PyPy, and\nJPython and in Java--", "start": 447.6, "duration": 3.99}, {"text": "pretty much every\nfairly modern language", "start": 451.59, "duration": 3.974}, {"text": "you have garbage collection.", "start": 455.564, "duration": 1.166}, {"text": "Meaning, if there's some data\nthat's unreachable from--", "start": 456.73, "duration": 4.05}, {"text": "So you have your variables.", "start": 460.78, "duration": 3.04}, {"text": "Variables that can be\naccessed by the program.", "start": 463.82, "duration": 2.07}, {"text": "Everything that's reachable\nfrom there you have to keep.", "start": 465.89, "duration": 2.52}, {"text": "But if some data structure\nbecomes no longer reachable,", "start": 468.41, "duration": 3.61}, {"text": "you can throw it away\nand regain memory.", "start": 472.02, "duration": 5.875}, {"text": "So that's happening behind\nthe scenes all the time,", "start": 477.895, "duration": 2.125}, {"text": "and the way it's\nbeing done is with", "start": 480.02, "duration": 1.73}, {"text": "their breadth-first\nsearch, which", "start": 481.75, "duration": 1.42}, {"text": "is what we're going\nto talk about today.", "start": 483.17, "duration": 1.82}, {"text": "Another one.", "start": 487.62, "duration": 0.83}, {"text": "Model checking.", "start": 488.45, "duration": 0.645}, {"text": "Model checking is-- you have\nsome finite model of either", "start": 494.89, "duration": 6.36}, {"text": "a piece of code, or a\ncircuit, or chip, whatever,", "start": 501.25, "duration": 2.955}, {"text": "and you want to prove\nthat it actually", "start": 504.205, "duration": 2.015}, {"text": "does what you think it does.", "start": 506.22, "duration": 1.4}, {"text": "And so you've drawn a graph.", "start": 507.62, "duration": 1.91}, {"text": "The graph is all\nthe possible states", "start": 509.53, "duration": 2.26}, {"text": "that your circuit or your\ncomputer program could reach,", "start": 511.79, "duration": 4.21}, {"text": "or that it could possibly have.", "start": 516.0, "duration": 2.393}, {"text": "You start in some\ninitial state, and you", "start": 518.393, "duration": 1.666}, {"text": "want to know among all the\nstates that you can reach,", "start": 520.059, "duration": 2.208}, {"text": "does it have some property.", "start": 522.267, "duration": 1.133}, {"text": "And so you need to visit\nall the vertices that", "start": 523.4, "duration": 2.65}, {"text": "are reachable from\na particular place.", "start": 526.05, "duration": 2.45}, {"text": "And usually people do that\nusing breadth-first search.", "start": 528.5, "duration": 5.22}, {"text": "I use breadth-first\nsearch a lot,", "start": 533.72, "duration": 1.67}, {"text": "myself, to check\nmathematical conjectures.", "start": 535.39, "duration": 4.47}, {"text": "So if you're a mathematician,\nand you think something", "start": 539.86, "duration": 6.41}, {"text": "is true.", "start": 546.27, "duration": 1.452}, {"text": "Like maybe-- It's hard to\ngive an example of that.", "start": 547.722, "duration": 3.878}, {"text": "But you can imagine some graph\nof all the possible inputs", "start": 551.6, "duration": 4.09}, {"text": "to that theorem, and\nyou need to check them", "start": 555.69, "duration": 2.64}, {"text": "for every possible input--", "start": 558.33, "duration": 1.27}, {"text": "If this is true-- the\ntypical way to do that", "start": 559.6, "duration": 1.85}, {"text": "is breadth-first searching\nthrough that entire graph", "start": 561.45, "duration": 3.03}, {"text": "of states.", "start": 564.48, "duration": 2.62}, {"text": "Usually, we're testing\nfinite, special cases", "start": 567.1, "duration": 2.594}, {"text": "of a general conjecture, but\nif we find a counter-example,", "start": 569.694, "duration": 2.416}, {"text": "we're done.", "start": 572.11, "duration": 0.79}, {"text": "Don't have to work\non it anymore.", "start": 572.9, "duration": 1.691}, {"text": "If we don't find a\ncounter-example, usually then", "start": 574.591, "duration": 1.999}, {"text": "we have to do the mathematics.", "start": 576.59, "duration": 1.68}, {"text": "It doesn't solve everything,\nbut it's helpful.", "start": 578.27, "duration": 4.425}, {"text": "And then, the fun\nthing we're going", "start": 587.6, "duration": 4.83}, {"text": "to talk about a\nlittle bit today,", "start": 592.43, "duration": 1.64}, {"text": "is if you want to solve\nsomething like a two", "start": 594.07, "duration": 1.833}, {"text": "by two by two Rubik's\nCube optimally,", "start": 595.903, "duration": 2.036}, {"text": "you can do that using\nbreadth-first search.", "start": 597.939, "duration": 1.791}, {"text": "And you're going to do\nthat on your problem set.", "start": 599.73, "duration": 3.205}, {"text": "To do it solving this one\noptimally using breadth-first", "start": 602.935, "duration": 2.405}, {"text": "search would probably--", "start": 605.34, "duration": 3.46}, {"text": "would definitely-- take\nmore than the lifetime", "start": 608.8, "duration": 2.34}, {"text": "of the universe.", "start": 611.14, "duration": 1.19}, {"text": "So don't try seven\nby seven by seven.", "start": 612.33, "duration": 2.45}, {"text": "Leave that to the\ncubing experts, I guess.", "start": 617.61, "duration": 3.57}, {"text": "I think no one will ever solve\na seven by seven by seven", "start": 621.18, "duration": 2.43}, {"text": "Rubik's Cube optimally.", "start": 623.61, "duration": 2.54}, {"text": "There are ways to find a\nsolution just not the best one.", "start": 626.15, "duration": 4.04}, {"text": "So let me tell you just\nfor fun, as an example.", "start": 630.19, "duration": 3.205}, {"text": "This Pocket Cube, which is a\ntwo by two by two Rubik's Cube.", "start": 636.93, "duration": 4.6}, {"text": "What we have in mind is\ncalled the configuration graph", "start": 641.53, "duration": 4.25}, {"text": "or sometimes\nconfiguration space.", "start": 645.78, "duration": 2.7}, {"text": "But it's a graph, so\nwe'll call it a graph.", "start": 648.48, "duration": 2.221}, {"text": "This graph has a vertex for\neach possible state of the cube.", "start": 654.04, "duration": 7.425}, {"text": "So this is a state.", "start": 670.34, "duration": 2.195}, {"text": "This is a state.", "start": 675.14, "duration": 1.68}, {"text": "This is a state.", "start": 676.82, "duration": 0.82}, {"text": "This is a state.", "start": 677.64, "duration": 1.6}, {"text": "Now I'm hopelessly lost.", "start": 679.24, "duration": 2.55}, {"text": "Anyone want to work on this?", "start": 681.79, "duration": 1.75}, {"text": "Bored?", "start": 683.54, "duration": 2.262}, {"text": "No one?", "start": 685.802, "duration": 0.758}, {"text": "Alright, I'll leave\nit unsolved then.", "start": 686.56, "duration": 1.95}, {"text": "So all those are vertices.", "start": 691.04, "duration": 1.482}, {"text": "There's actually\na lot of vertices.", "start": 692.522, "duration": 1.458}, {"text": "There are 264 million\nvertices or so.", "start": 693.98, "duration": 4.71}, {"text": "If you want.", "start": 698.69, "duration": 0.62}, {"text": "To the side here.", "start": 699.31, "duration": 2.25}, {"text": "Number of vertices is something\nlike 8 factorial times 3", "start": 701.56, "duration": 7.74}, {"text": "to the 8.", "start": 709.3, "duration": 2.65}, {"text": "And one way to see that\nis to draw a two by two", "start": 711.95, "duration": 5.687}, {"text": "by two Rubik's Cube.", "start": 717.637, "duration": 0.833}, {"text": "So these are what you\nmight call cubelets,", "start": 721.458, "duration": 11.432}, {"text": "or cubies I think is the\nstandard term in Rubik's Cube", "start": 732.89, "duration": 3.48}, {"text": "land.", "start": 736.37, "duration": 0.5}, {"text": "There's eight of them\nin a two by two by two.", "start": 741.22, "duration": 1.905}, {"text": "Two cubed.", "start": 743.125, "duration": 1.625}, {"text": "You can essentially permute\nthose cubies within the cube", "start": 744.75, "duration": 3.702}, {"text": "however you like.", "start": 748.452, "duration": 0.708}, {"text": "That's 8 factorial.", "start": 749.16, "duration": 1.86}, {"text": "And then each of them has\nthree possible twists.", "start": 751.02, "duration": 2.214}, {"text": "It could be like this.", "start": 753.234, "duration": 0.916}, {"text": "It could be like this.", "start": 754.15, "duration": 1.03}, {"text": "Or it could be like this.", "start": 755.18, "duration": 2.52}, {"text": "So you've got three for each.", "start": 757.7, "duration": 1.656}, {"text": "And this is actually\nan accurate count.", "start": 759.356, "duration": 1.624}, {"text": "You're not over-counting the\nnumber of configurations.", "start": 760.98, "duration": 2.249}, {"text": "All of those are, at least\nin principle, conceivable.", "start": 763.229, "duration": 2.531}, {"text": "If you take apart the\ncube, you can reassemble it", "start": 765.76, "duration": 2.3}, {"text": "in each of those states.", "start": 768.06, "duration": 1.53}, {"text": "And that number is\nabout 264 million.", "start": 769.59, "duration": 4.34}, {"text": "Which is not so\nbad for computers.", "start": 777.72, "duration": 2.28}, {"text": "You could search that.", "start": 780.0, "duration": 1.764}, {"text": "Life is a little bit easier.", "start": 781.764, "duration": 1.166}, {"text": "You get to divide by\n24 because there's", "start": 782.93, "duration": 2.01}, {"text": "24 symmetries of the cube.", "start": 784.94, "duration": 1.86}, {"text": "Eight times three.", "start": 786.8, "duration": 1.39}, {"text": "You can divide by three,\nalso, because only a third", "start": 788.19, "duration": 4.139}, {"text": "of the configuration space\nis actually reachable.", "start": 792.329, "duration": 2.041}, {"text": "If you're not allowed\nto take the parts apart,", "start": 794.37, "duration": 1.7}, {"text": "if you have to get\nthere by a motion,", "start": 796.07, "duration": 1.65}, {"text": "you can only get to 1/3\nof the two by two by two.", "start": 797.72, "duration": 3.376}, {"text": "So it's a little bit\nsmaller than that,", "start": 801.096, "duration": 1.624}, {"text": "if you're actually doing a\nbreadth-first search, which", "start": 802.72, "duration": 1.83}, {"text": "is what you're going to be\ndoing on your problem set.", "start": 804.55, "duration": 2.208}, {"text": "But in any case, it's feasible.", "start": 806.758, "duration": 2.592}, {"text": "That was vertices.", "start": 809.35, "duration": 1.02}, {"text": "We should talk about edges.", "start": 810.37, "duration": 1.205}, {"text": "For every move--\nevery move takes you", "start": 822.24, "duration": 5.33}, {"text": "from one configuration\nto another.", "start": 827.57, "duration": 2.3}, {"text": "You could traverse it in one\ndirection and make that move.", "start": 829.87, "duration": 3.09}, {"text": "You could also undo that move.", "start": 832.96, "duration": 1.25}, {"text": "Because every move is\nundoable in a Rubik's Cube,", "start": 834.21, "duration": 3.02}, {"text": "this graph is undirected.", "start": 837.23, "duration": 1.71}, {"text": "Or you can think of it as every\nedge works in both directions.", "start": 838.94, "duration": 3.63}, {"text": "So this is a move.", "start": 842.57, "duration": 1.04}, {"text": "It's called a quarter twist.", "start": 843.61, "duration": 2.22}, {"text": "This is a controversy\nif you will.", "start": 845.83, "duration": 1.81}, {"text": "Some people allow a whole\nhalf twist as a single move.", "start": 847.64, "duration": 2.79}, {"text": "Whether you define that as a\nsingle move or a double move", "start": 850.43, "duration": 2.6}, {"text": "is not that big a deal.", "start": 853.03, "duration": 1.35}, {"text": "It just changes\nsome of the answers.", "start": 854.38, "duration": 3.54}, {"text": "But you're still exploring\nessentially the same graph.", "start": 857.92, "duration": 3.05}, {"text": "So that's the graph\nand you'd like", "start": 863.454, "duration": 1.416}, {"text": "to know some\nproperties about it.", "start": 864.87, "duration": 1.374}, {"text": "So let me draw a\npicture of the graph.", "start": 866.244, "duration": 2.336}, {"text": "I'm not going to draw\nall 264 million vertices.", "start": 868.58, "duration": 2.98}, {"text": "But in particular,\nthere's the solved state--", "start": 871.56, "duration": 3.4}, {"text": "we kind of care\nabout that one, where", "start": 874.96, "duration": 2.13}, {"text": "all the colors are aligned--", "start": 877.09, "duration": 2.98}, {"text": "then there's all of\nthe configurations", "start": 880.07, "duration": 4.03}, {"text": "you could reach by one move.", "start": 884.1, "duration": 1.94}, {"text": "So these are the possible\nmoves from the solved state.", "start": 886.04, "duration": 3.91}, {"text": "And then from those\nconfigurations,", "start": 892.95, "duration": 2.45}, {"text": "there's more places you can go.", "start": 895.4, "duration": 2.57}, {"text": "Maybe there's multiple ways\nto get to the same node.", "start": 897.97, "duration": 2.478}, {"text": "But these would be\nall the configurations", "start": 903.32, "duration": 1.93}, {"text": "you can reach in two moves.", "start": 905.25, "duration": 1.94}, {"text": "And so on.", "start": 915.17, "duration": 1.77}, {"text": "And at some point,\nyou run out of graph.", "start": 916.94, "duration": 2.16}, {"text": "So there might be a\nfew nodes out here.", "start": 919.1, "duration": 7.15}, {"text": "The way I'm drawing\nthis, this is everything", "start": 926.25, "duration": 2.33}, {"text": "you can reach in one move, in\ntwo movies, in three moves.", "start": 928.58, "duration": 2.66}, {"text": "At the end, this\nwould be 11 moves,", "start": 931.24, "duration": 3.77}, {"text": "if you allow half twists.", "start": 935.01, "duration": 2.75}, {"text": "And as puzzlers,\nwe're particularly", "start": 937.76, "duration": 3.71}, {"text": "interested in this\nnumber, which you", "start": 941.47, "duration": 3.27}, {"text": "would call, as a graph theorist,\nthe diameter of the graph.", "start": 944.74, "duration": 6.02}, {"text": "Puzzlers call it God's number.", "start": 950.76, "duration": 2.44}, {"text": "If you were God or some omni--", "start": 953.2, "duration": 3.91}, {"text": "something being.", "start": 957.11, "duration": 1.91}, {"text": "You have the optimal algorithm\nfor solving the Rubik's Cube.", "start": 959.02, "duration": 2.84}, {"text": "How many moves do you\nneed If you always", "start": 961.86, "duration": 2.36}, {"text": "follow the best path?", "start": 964.22, "duration": 1.88}, {"text": "And the answer is, in\nthe worst case, 11.", "start": 966.1, "duration": 2.55}, {"text": "So we're interested in the worst\ncase of the best algorithm.", "start": 968.65, "duration": 5.48}, {"text": "For two by two by\ntwo, the answer is 11.", "start": 974.13, "duration": 2.75}, {"text": "For three by three by\nthree, the answer is 20.", "start": 976.88, "duration": 3.17}, {"text": "That was just proved\nlast summer with a couple", "start": 980.05, "duration": 3.02}, {"text": "years of computer time.", "start": 983.07, "duration": 1.58}, {"text": "For four by four by four--", "start": 984.65, "duration": 1.15}, {"text": "I don't have one here--", "start": 985.8, "duration": 0.959}, {"text": "I think we'll never\nknow the answer.", "start": 986.759, "duration": 1.499}, {"text": "For five by five by five,\nwe'll never know the answer.", "start": 988.258, "duration": 2.267}, {"text": "For six, for seven, same deal.", "start": 990.525, "duration": 3.295}, {"text": "But for two by two by\ntwo, you can compute it.", "start": 993.82, "duration": 2.51}, {"text": "You will compute it\non your problem set.", "start": 996.33, "duration": 1.85}, {"text": "And it's kind of nice\nto know because it", "start": 998.18, "duration": 2.22}, {"text": "says whatever configuration I'm\nin, I can solve it in 11 moves.", "start": 1000.4, "duration": 6.4}, {"text": "But the best known\nway to compute it,", "start": 1006.8, "duration": 2.64}, {"text": "is basically to construct\nthis graph one layer at a time", "start": 1009.44, "duration": 4.78}, {"text": "until you're done.", "start": 1014.22, "duration": 1.25}, {"text": "And then you know\nwhat the diameter is.", "start": 1015.47, "duration": 1.84}, {"text": "The trouble is, in between\nhere this grows exponentially.", "start": 1017.31, "duration": 3.6}, {"text": "At some point, it\ndecreases a little bit.", "start": 1020.91, "duration": 2.27}, {"text": "But getting over\nthat exponential hump", "start": 1023.18, "duration": 1.79}, {"text": "is really hard.", "start": 1024.97, "duration": 1.594}, {"text": "And for three by three by\nthree, they used a lot of tricks", "start": 1026.564, "duration": 2.416}, {"text": "to speed up the\nalgorithm, but in the end", "start": 1028.98, "duration": 4.51}, {"text": "it's essentially a\nbreadth-first search.", "start": 1033.49, "duration": 2.27}, {"text": "What's a breadth-first search?", "start": 1035.76, "duration": 1.599}, {"text": "This going layer by layer.", "start": 1037.359, "duration": 1.701}, {"text": "So we're going to\nformalize that in a moment.", "start": 1039.06, "duration": 3.37}, {"text": "But that is the problem.", "start": 1042.43, "duration": 2.659}, {"text": "So just for fun,\nany guesses what", "start": 1045.089, "duration": 12.231}, {"text": "the right answer is for an\nn by n by n Rubik's cube?", "start": 1057.32, "duration": 2.7}, {"text": "What's the diameter?", "start": 1060.02, "duration": 1.701}, {"text": "Not an exact answer,\nbecause I think we'll never", "start": 1061.721, "duration": 1.999}, {"text": "know the exact answer.", "start": 1063.72, "duration": 1.13}, {"text": "But if I want theta\nsomething, what", "start": 1064.85, "duration": 3.708}, {"text": "do you think the something is?", "start": 1068.558, "duration": 1.722}, {"text": "How many people here have\nsolved the Rubik's Cube?", "start": 1074.649, "duration": 2.083}, {"text": "Ever?", "start": 1076.732, "duration": 1.398}, {"text": "So you know what we're\ntalking about here.", "start": 1078.13, "duration": 2.38}, {"text": "Most people have worked on it.", "start": 1080.51, "duration": 3.88}, {"text": "To think about an n by\nn by n Rubik's Cube,", "start": 1084.39, "duration": 3.89}, {"text": "each side has area n squared.", "start": 1088.28, "duration": 3.14}, {"text": "So total surface\narea is 6 n squared.", "start": 1091.42, "duration": 2.79}, {"text": "So there's, roughly, stata n\nsquared little cubies here.", "start": 1094.21, "duration": 4.508}, {"text": "So what do you think the right\n[INAUDIBLE] is for n by n by n?", "start": 1098.718, "duration": 2.583}, {"text": "No guesses?", "start": 1106.702, "duration": 0.778}, {"text": "AUDIENCE: n cubed?", "start": 1112.095, "duration": 1.355}, {"text": "PROFESSOR: n cubed?", "start": 1113.45, "duration": 1.45}, {"text": "Reasonable guess.", "start": 1114.9, "duration": 1.64}, {"text": "But wrong.", "start": 1116.54, "duration": 1.505}, {"text": "It's an upper bounds.", "start": 1118.045, "duration": 1.645}, {"text": "Why n cubed?", "start": 1119.69, "duration": 1.2}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 1123.432, "duration": 0.916}, {"text": "PROFESSOR: Oh, you're\nguessing based on the numbers.", "start": 1128.834, "duration": 2.166}, {"text": "Yeah.", "start": 1131.0, "duration": 0.499}, {"text": "The numbers are\nmisleading, unfortunately.", "start": 1131.499, "duration": 2.001}, {"text": "It's the law of small\nnumbers I guess.", "start": 1133.5, "duration": 2.966}, {"text": "It doesn't really look right.", "start": 1136.466, "duration": 2.834}, {"text": "I know the answer.", "start": 1139.3, "duration": 1.336}, {"text": "I know the answer\nbecause we just", "start": 1140.636, "duration": 1.374}, {"text": "wrote a paper with the answer.", "start": 1142.01, "duration": 1.249}, {"text": "This is a new result.\nFrom this summer.", "start": 1143.259, "duration": 2.681}, {"text": "But I'm curious.", "start": 1145.94, "duration": 2.39}, {"text": "To me the obvious answer is\nn squared because there's", "start": 1148.33, "duration": 2.72}, {"text": "about n squared cubies.", "start": 1151.05, "duration": 1.65}, {"text": "And it's not so hard to show\nin a constant number moves", "start": 1152.7, "duration": 2.64}, {"text": "you can solve a constant\nnumber of cubies.", "start": 1155.34, "duration": 3.671}, {"text": "If you think about the\ngeneral algorithms,", "start": 1159.011, "duration": 1.749}, {"text": "like if you've ever\nlooked up professor's cube", "start": 1160.76, "duration": 1.916}, {"text": "and how to solve it,\nyou're doing like 10 moves,", "start": 1162.676, "duration": 2.524}, {"text": "and then maybe you\nswap two cubies", "start": 1165.2, "duration": 2.52}, {"text": "which you can use to\nsolve a couple of cubies", "start": 1167.72, "duration": 2.81}, {"text": "in a constant number of moves.", "start": 1170.53, "duration": 1.38}, {"text": "So n squared would be\nthe standard answer", "start": 1171.91, "duration": 4.49}, {"text": "if you're following\nstandard algorithms.", "start": 1176.4, "duration": 2.2}, {"text": "But it turns out, you can\ndo a little bit better.", "start": 1178.6, "duration": 2.625}, {"text": "And the right answer is n\nsquared divided by log n.", "start": 1181.225, "duration": 2.125}, {"text": "I think it's cool.", "start": 1183.35, "duration": 1.7}, {"text": "Hopefully, you guys\ncan appreciate that.", "start": 1185.05, "duration": 1.764}, {"text": "Not a lot of people can\nappreciate n squared divided", "start": 1186.814, "duration": 2.166}, {"text": "by log n, but here in\nalgorithms, we're all about n", "start": 1188.98, "duration": 3.385}, {"text": "squared over log n.", "start": 1192.365, "duration": 0.925}, {"text": "If you're interested, the\npaper's on my website.", "start": 1197.77, "duration": 2.65}, {"text": "I think its called, Algorithms\nFor Solving Rubik's Cubes.", "start": 1200.42, "duration": 3.17}, {"text": "There's a constant there.", "start": 1203.59, "duration": 1.52}, {"text": "Current constant is not so good.", "start": 1205.11, "duration": 1.87}, {"text": "Let's say it's in the millions.", "start": 1206.98, "duration": 1.34}, {"text": "[LAUGHTER]", "start": 1208.32, "duration": 3.44}, {"text": "You've got to start somewhere.", "start": 1211.76, "duration": 1.25}, {"text": "The next open problem\nwill be to improve", "start": 1215.754, "duration": 1.666}, {"text": "that constant to\nsomething reasonable that", "start": 1217.42, "duration": 1.75}, {"text": "maybe is close to 20.", "start": 1219.17, "duration": 1.55}, {"text": "But we're far from that.", "start": 1220.72, "duration": 4.53}, {"text": "Let's talk about\ngraph representation.", "start": 1225.25, "duration": 1.895}, {"text": "Before we can talk\nabout exporting a graph,", "start": 1231.289, "duration": 1.791}, {"text": "we need to know what\nwe're given as input.", "start": 1233.08, "duration": 3.6}, {"text": "And there's basically one\nstandard representation", "start": 1236.68, "duration": 3.27}, {"text": "and a bunch of variations of it.", "start": 1239.95, "duration": 3.56}, {"text": "And they're called\nadjacency lists.", "start": 1243.51, "duration": 1.615}, {"text": "So the idea with\nan adjacency list,", "start": 1248.09, "duration": 1.63}, {"text": "is you have an array\ncalled Adj, for adjacency", "start": 1249.72, "duration": 8.716}, {"text": "of size V. Each\nelement in the array", "start": 1258.436, "duration": 3.854}, {"text": "is a pointer to a linked list.", "start": 1262.29, "duration": 1.445}, {"text": "And the idea is that this\narray is indexed by a vertex.", "start": 1267.61, "duration": 4.65}, {"text": "So we're imagining\na world where we", "start": 1278.96, "duration": 2.21}, {"text": "can index arrays by vertices.", "start": 1281.17, "duration": 2.33}, {"text": "So maybe, you just\nlabel your vertices", "start": 1283.5, "duration": 2.46}, {"text": "zero through v minus 1.", "start": 1285.96, "duration": 1.77}, {"text": "Then that's a regular array.", "start": 1287.73, "duration": 2.03}, {"text": "Or, if you want\nto get fancy, you", "start": 1289.76, "duration": 2.042}, {"text": "can think of a vertex as an\narbitrary hashable thing,", "start": 1291.802, "duration": 3.398}, {"text": "and Adj is actually\na hash table.", "start": 1295.2, "duration": 2.5}, {"text": "And that's how you\nprobably do it in Python.", "start": 1297.7, "duration": 2.11}, {"text": "Maybe your vertices are\nobjects, and this is just", "start": 1299.81, "duration": 3.1}, {"text": "hashing based on the\naddress of the object.", "start": 1302.91, "duration": 1.854}, {"text": "But we're not going\nto worry about that.", "start": 1304.764, "duration": 1.666}, {"text": "We're just going\nto write Adj of u.", "start": 1306.43, "duration": 1.94}, {"text": "Assume that somehow you\ncan get to the linked list", "start": 1308.37, "duration": 2.19}, {"text": "corresponding to that vertex.", "start": 1310.56, "duration": 1.208}, {"text": "And the idea is,\nfor every vertex", "start": 1320.68, "duration": 1.74}, {"text": "we just store its\nneighbors, namely", "start": 1322.42, "duration": 3.84}, {"text": "the vertices you can\nreach by one step from u.", "start": 1326.26, "duration": 3.96}, {"text": "So I'm going to define that\na little more formally.", "start": 1330.22, "duration": 2.93}, {"text": "Adj of u is going to be\nthe set of all vertices,", "start": 1333.15, "duration": 3.93}, {"text": "V, such that u, v is an edge.", "start": 1337.08, "duration": 5.35}, {"text": "So if I have a vertex\nlike b, Adj of b", "start": 1351.32, "duration": 4.67}, {"text": "is going to be both a\nand c because in one step", "start": 1355.99, "duration": 2.695}, {"text": "there are outgoing edges\nfrom b to a and b to c.", "start": 1358.685, "duration": 3.325}, {"text": "So Adj of b is a, c.", "start": 1362.01, "duration": 2.72}, {"text": "In that graph.", "start": 1372.26, "duration": 1.27}, {"text": "I should have labeled the\nvertices something different.", "start": 1373.53, "duration": 3.09}, {"text": "Adj of a is going to be\njust c because you can't", "start": 1376.62, "duration": 6.05}, {"text": "get with one step from a to b.", "start": 1382.67, "duration": 2.475}, {"text": "The edge is in the\nwrong direction.", "start": 1385.145, "duration": 2.935}, {"text": "And Adj of c is b.", "start": 1388.08, "duration": 5.16}, {"text": "I think that definition's\npretty clear.", "start": 1397.48, "duration": 1.78}, {"text": "For undirected graphs,\nyou just put braces here.", "start": 1399.26, "duration": 4.03}, {"text": "Which means you store--", "start": 1403.29, "duration": 1.42}, {"text": "I mean, it's the same thing.", "start": 1404.71, "duration": 1.27}, {"text": "Here Adj of c is going\nto be a, b, and d, as you", "start": 1405.98, "duration": 3.2}, {"text": "can get in one step from c to\na, from c to b, from c to d.", "start": 1409.18, "duration": 4.02}, {"text": "For pretty much every--", "start": 1413.2, "duration": 1.32}, {"text": "At least for graph\nexploration problems,", "start": 1414.52, "duration": 2.18}, {"text": "this is the\nrepresentation you want.", "start": 1416.7, "duration": 1.88}, {"text": "Because you're at some\nvertex, and you want to know,", "start": 1418.58, "duration": 1.27}, {"text": "where can I go next.", "start": 1419.85, "duration": 1.08}, {"text": "And Adj of that vertex tells you\nexactly where you can go next.", "start": 1420.93, "duration": 3.63}, {"text": "So this is what you want.", "start": 1424.56, "duration": 1.27}, {"text": "There's a lot of different\nways to actually implement", "start": 1430.03, "duration": 3.01}, {"text": "adjacency lists.", "start": 1433.04, "duration": 3.5}, {"text": "I've talked about two of them.", "start": 1436.54, "duration": 2.9}, {"text": "You could have the vertices\nlabeled zero to v minus 1,", "start": 1439.44, "duration": 3.28}, {"text": "and then this is,\nliterally, an array.", "start": 1442.72, "duration": 2.3}, {"text": "And you have--", "start": 1445.02, "duration": 1.1}, {"text": "I guess I should draw.", "start": 1446.12, "duration": 2.34}, {"text": "In this picture,\nAdj is an array.", "start": 1448.46, "duration": 5.27}, {"text": "So you've got a, b, and c.", "start": 1453.73, "duration": 3.35}, {"text": "Each one of them is a\npointer to a linked list.", "start": 1457.08, "duration": 3.41}, {"text": "This one's actually going\nto be a, c, and we're done.", "start": 1460.49, "duration": 7.02}, {"text": "Sorry, that was b.", "start": 1467.51, "duration": 3.31}, {"text": "Who said it had to be\nalphabetical order?", "start": 1470.82, "duration": 2.7}, {"text": "A is a pointer to c,\nc is a pointer to b.", "start": 1473.52, "duration": 4.59}, {"text": "That's explicitly how\nyou might represent it.", "start": 1478.11, "duration": 2.46}, {"text": "This might be a hash\ntable instead of an array,", "start": 1480.57, "duration": 2.78}, {"text": "if you have weirder vertices.", "start": 1483.35, "duration": 2.52}, {"text": "You can also do it in a more\nobject-oriented fashion.", "start": 1485.87, "duration": 2.5}, {"text": "For every vertex, v, you can\nmake the vertices objects,", "start": 1495.59, "duration": 3.5}, {"text": "and v dot neighbors\ncould store what", "start": 1499.09, "duration": 6.84}, {"text": "we're defining over\nthere to be Adj", "start": 1505.93, "duration": 2.53}, {"text": "of v. This would be the more\nobject-oriented way to do it", "start": 1508.46, "duration": 5.17}, {"text": "I've thought a lot about\nthis, and I like this,", "start": 1513.63, "duration": 2.41}, {"text": "and usually when I implement\ngraphs this is what I do.", "start": 1516.04, "duration": 2.97}, {"text": "But it is actually convenient\nto have this representation.", "start": 1519.01, "duration": 4.19}, {"text": "There's a reason the textbook\nuses this representation.", "start": 1523.2, "duration": 2.465}, {"text": "Because, if you've already\ngot some vertices lying around", "start": 1525.665, "duration": 2.375}, {"text": "and you want to have multiple\ngraphs on those vertices,", "start": 1528.04, "duration": 3.11}, {"text": "this lets you do that.", "start": 1531.15, "duration": 2.56}, {"text": "You can define multiple Adj\narrays, one for graph one, one", "start": 1533.71, "duration": 4.224}, {"text": "for graph two, one\nfor graph three", "start": 1537.934, "duration": 1.416}, {"text": "but they can all talk\nabout the same vertices.", "start": 1539.35, "duration": 2.44}, {"text": "Whereas here, vertex can\nonly belong to one graph.", "start": 1541.79, "duration": 3.62}, {"text": "It can only have one\nneighbor structure", "start": 1545.41, "duration": 2.85}, {"text": "that says what happens.", "start": 1548.26, "duration": 1.13}, {"text": "If you're only dealing\nwith one graph,", "start": 1549.39, "duration": 1.61}, {"text": "this is probably cleaner.", "start": 1551.0, "duration": 1.85}, {"text": "But with multiple graphs, which\nwill happen even in this class,", "start": 1552.85, "duration": 3.37}, {"text": "adjacency lists are\nkind of the way to go.", "start": 1556.22, "duration": 4.314}, {"text": "You can also do\nimplicitly-represented graphs.", "start": 1560.534, "duration": 1.916}, {"text": "Which would be to say,\nAdj of u is a function.", "start": 1573.58, "duration": 7.015}, {"text": "Or v dot neighbors is a\nmethod of the vertex class.", "start": 1583.96, "duration": 12.7}, {"text": "Meaning, it's not just\nstored there explicitly.", "start": 1596.66, "duration": 2.55}, {"text": "Whenever you need it,\nyou call this function", "start": 1599.21, "duration": 2.06}, {"text": "and it computes what you want.", "start": 1601.27, "duration": 4.23}, {"text": "This is useful because\nit uses less space.", "start": 1605.5, "duration": 1.92}, {"text": "You could say this uses\nzero space or maybe v space.", "start": 1607.42, "duration": 4.61}, {"text": "One for each vertex.", "start": 1612.03, "duration": 1.44}, {"text": "It depends.", "start": 1613.47, "duration": 0.669}, {"text": "Maybe you don't even need\nto explicitly represent", "start": 1614.139, "duration": 2.041}, {"text": "all the vertices.", "start": 1616.18, "duration": 1.9}, {"text": "You start with some vertex,\nand given a vertex, somehow", "start": 1618.08, "duration": 5.42}, {"text": "you know how to compute, let's\nsay in constant time or linear", "start": 1623.5, "duration": 3.11}, {"text": "time or something, the\nneighbors of that vertex.", "start": 1626.61, "duration": 3.66}, {"text": "And then from\nthere, you can keep", "start": 1630.27, "duration": 1.57}, {"text": "searching, keep\ncomputing neighbors,", "start": 1631.84, "duration": 1.5}, {"text": "until you find what you want.", "start": 1633.34, "duration": 1.25}, {"text": "Maybe you don't have to\nbuild the whole graph,", "start": 1634.59, "duration": 1.916}, {"text": "you just need to build enough of\nit until you find your answer.", "start": 1636.506, "duration": 3.268}, {"text": "Whatever answer\nyou're searching for.", "start": 1639.774, "duration": 1.541}, {"text": "Can you think of a situation\nwhere that might be the case?", "start": 1641.315, "duration": 2.535}, {"text": "Where implicit representation\nwould be a good idea?", "start": 1647.205, "duration": 2.125}, {"text": "Yes.", "start": 1649.33, "duration": 0.5}, {"text": "Rubik's Cubes.", "start": 1649.83, "duration": 0.88}, {"text": "They're really good.", "start": 1650.71, "duration": 0.833}, {"text": "I never want to\nbuild this space.", "start": 1651.543, "duration": 1.627}, {"text": "It has a bajillion states.", "start": 1653.17, "duration": 2.89}, {"text": "A bajillion vertices.", "start": 1656.06, "duration": 1.11}, {"text": "It would take forever.", "start": 1657.17, "duration": 1.61}, {"text": "There's more\nconfigurations of this cube", "start": 1658.78, "duration": 2.8}, {"text": "than there are particles\nin the known universe.", "start": 1661.58, "duration": 4.01}, {"text": "I just computed that in my head.", "start": 1665.59, "duration": 2.111}, {"text": "[LAUGHTER]", "start": 1667.701, "duration": 2.419}, {"text": "I have done this\ncomputation recently,", "start": 1670.12, "duration": 2.01}, {"text": "and for five by five by five\nit's like 10 to the 40 states.", "start": 1672.13, "duration": 3.49}, {"text": "Or 10 to the 40, 10 to the 60.", "start": 1675.62, "duration": 2.739}, {"text": "There's about 10 to the\n80 particles in the known", "start": 1678.359, "duration": 2.041}, {"text": "universe.", "start": 1680.4, "duration": 0.54}, {"text": "10 to the 83 or something.", "start": 1680.94, "duration": 1.3}, {"text": "So this is probably\n10 to the 200 or so.", "start": 1682.24, "duration": 4.51}, {"text": "It's a lot.", "start": 1686.75, "duration": 1.112}, {"text": "You never want to build that.", "start": 1687.862, "duration": 1.208}, {"text": "But, it's very easy to\nrepresent this state.", "start": 1689.07, "duration": 2.75}, {"text": "Just store where\nall the cubies are.", "start": 1691.82, "duration": 1.7}, {"text": "And it's very easy to see what\nare all the configurations you", "start": 1693.52, "duration": 2.89}, {"text": "can reach in one move.", "start": 1696.41, "duration": 1.23}, {"text": "Just try this move, try\nthis move, try this move.", "start": 1697.64, "duration": 2.99}, {"text": "Put it back and\ntry the next move.", "start": 1700.63, "duration": 1.741}, {"text": "And so on.", "start": 1702.371, "duration": 0.499}, {"text": "For an m by n by\nn cube in order n", "start": 1705.66, "duration": 1.94}, {"text": "time, you can list all\nthe order n next states.", "start": 1707.6, "duration": 2.61}, {"text": "You can list all the\norder n neighbors.", "start": 1710.21, "duration": 1.84}, {"text": "And so you can keep exploring,\nsearching for your state.", "start": 1712.05, "duration": 3.174}, {"text": "Now you don't want to explore\ntoo far for that cube,", "start": 1715.224, "duration": 2.166}, {"text": "but at least you're\nnot hosed just", "start": 1717.39, "duration": 3.63}, {"text": "from the problem of\nrepresenting the graph.", "start": 1721.02, "duration": 3.17}, {"text": "So even for two by\ntwo by two, it's", "start": 1724.19, "duration": 1.84}, {"text": "useful to do this\nmostly to save space.", "start": 1726.03, "duration": 2.135}, {"text": "You're not really saving time.", "start": 1728.165, "duration": 2.145}, {"text": "But you'd like to not have to\nstore all 264 million states", "start": 1730.31, "duration": 4.65}, {"text": "because it's going to be several\ngigabytes and it's annoying.", "start": 1734.96, "duration": 6.89}, {"text": "Speaking of space-- ignoring\nthe implicit representation--", "start": 1741.85, "duration": 3.8}, {"text": "how much space does this\nrepresentation require?", "start": 1745.65, "duration": 3.105}, {"text": "V plus E. This Is going\nto be the bread and butter", "start": 1759.82, "duration": 3.27}, {"text": "of our graph algorithms.", "start": 1763.09, "duration": 1.519}, {"text": "Most of the things we're going\nto talk about achieve V plus E", "start": 1764.609, "duration": 2.541}, {"text": "time.", "start": 1767.15, "duration": 0.5}, {"text": "This is essentially optimal.", "start": 1767.65, "duration": 1.44}, {"text": "It's linear in the\nsize of your graph.", "start": 1769.09, "duration": 3.072}, {"text": "You've got V vertices, E edges.", "start": 1772.162, "duration": 2.538}, {"text": "Technically, in\ncase you're curious,", "start": 1774.7, "duration": 2.46}, {"text": "this is really the size\nof V plus the size of E.", "start": 1777.16, "duration": 3.4}, {"text": "But in the textbook, and\nI guess in the world,", "start": 1780.56, "duration": 4.129}, {"text": "we just omit those sizes of\nwhenever they're in a theta", "start": 1784.689, "duration": 2.291}, {"text": "notation or Big O notation.", "start": 1786.98, "duration": 2.2}, {"text": "So number vertices\nplus number of edges.", "start": 1789.18, "duration": 1.75}, {"text": "that sort of the\nbare minimum you", "start": 1790.93, "duration": 1.374}, {"text": "need if you want an explicit\nrepresentation of the graph.", "start": 1792.304, "duration": 3.152}, {"text": "And we achieve\nthat because we've", "start": 1795.456, "duration": 1.374}, {"text": "got we've got v space just to\nstore the vertices in an array.", "start": 1796.83, "duration": 4.05}, {"text": "And then if you add up--", "start": 1800.88, "duration": 2.94}, {"text": "Each of these is an edge.", "start": 1803.82, "duration": 2.857}, {"text": "You have to be a little careful.", "start": 1806.677, "duration": 1.333}, {"text": "In undirected graphs, each\nof these is a half edge.", "start": 1808.01, "duration": 3.56}, {"text": "So there's actually two\ntimes e nodes over here.", "start": 1811.57, "duration": 3.77}, {"text": "But it's theta E.\nSo theta V plus E", "start": 1815.34, "duration": 4.05}, {"text": "is the amount of space we need.", "start": 1819.39, "duration": 2.75}, {"text": "And ideally, all our algorithms\nwill run in this much time.", "start": 1822.14, "duration": 2.95}, {"text": "Because that's what you need\njust to look at the graph.", "start": 1825.09, "duration": 3.46}, {"text": "So let's do an actual algorithm,\nwhich is breadth-first search.", "start": 1866.71, "duration": 4.88}, {"text": "So to the simplest algorithm\nyou can think of in graphs.", "start": 1874.92, "duration": 3.5}, {"text": "I've already outlined\nit several times.", "start": 1878.42, "duration": 2.67}, {"text": "You start at some node.", "start": 1881.09, "duration": 1.55}, {"text": "You look at all the nodes\nyou can get to from there.", "start": 1882.64, "duration": 2.17}, {"text": "You look at all the nodes\nyou can get to from there.", "start": 1884.81, "duration": 2.166}, {"text": "Keep going until you're done.", "start": 1886.976, "duration": 2.324}, {"text": "So this is going to explore\nall of the vertices that", "start": 1889.3, "duration": 2.81}, {"text": "are reachable from a node.", "start": 1892.11, "duration": 1.92}, {"text": "The challenge-- The\none annoying thing", "start": 1896.72, "duration": 2.55}, {"text": "about breadth-first search\nand why this is not trivial", "start": 1899.27, "duration": 2.25}, {"text": "is that there can\nbe some edges that", "start": 1901.52, "duration": 2.76}, {"text": "go sort of backwards, like\nthat, to some previous layer.", "start": 1904.28, "duration": 8.06}, {"text": "Actually, that's\nnot true, is it?", "start": 1912.34, "duration": 1.902}, {"text": "This can't happen.", "start": 1918.09, "duration": 1.185}, {"text": "You see why?", "start": 1919.275, "duration": 2.945}, {"text": "Because if that edge\nexisted, then from this node", "start": 1922.22, "duration": 4.06}, {"text": "you'd be able to get here.", "start": 1926.28, "duration": 1.925}, {"text": "So in an undirected\ngraph, that can't happen.", "start": 1928.205, "duration": 1.975}, {"text": "In a directed graph,\nyou could conceivably", "start": 1930.18, "duration": 2.34}, {"text": "have a back edge like that.", "start": 1932.52, "duration": 1.14}, {"text": "You'd have to realize, oh,\nthat's a vertex I've already", "start": 1933.66, "duration": 2.61}, {"text": "seen, I don't want to put\nit here, even though it's", "start": 1936.27, "duration": 3.18}, {"text": "something I can\nreach from this node,", "start": 1939.45, "duration": 1.82}, {"text": "because I've already been there.", "start": 1941.27, "duration": 1.691}, {"text": "We've got to worry\nabout things like that.", "start": 1942.961, "duration": 1.749}, {"text": "That's, I guess, the main\nthing to worry about.", "start": 1947.26, "duration": 2.71}, {"text": "So our goal is to\nvisit all the nodes--", "start": 1954.62, "duration": 1.995}, {"text": "the vertices-- reachable\nfrom given node, s.", "start": 1960.95, "duration": 6.605}, {"text": "We want to achieve\nV plus E time.", "start": 1971.47, "duration": 3.25}, {"text": "And the idea is to look\nat the nodes that are", "start": 1980.19, "duration": 10.34}, {"text": "reachable first in zero moves.", "start": 1990.53, "duration": 5.25}, {"text": "Zero moves.", "start": 1995.78, "duration": 1.26}, {"text": "That's s.", "start": 1997.04, "duration": 0.78}, {"text": "Then in one move.", "start": 2000.39, "duration": 3.09}, {"text": "Well that's everything you\ncan reach from s in one step.", "start": 2003.48, "duration": 4.17}, {"text": "That's adjacency of s.", "start": 2007.65, "duration": 1.78}, {"text": "And then two moves,\nand three moves, and so", "start": 2009.43, "duration": 3.38}, {"text": "on until we run out of graph.", "start": 2012.81, "duration": 4.1}, {"text": "But we need to be careful\nto avoid duplicates.", "start": 2016.91, "duration": 10.89}, {"text": "We want to avoid\nrevisiting vertices", "start": 2027.8, "duration": 3.29}, {"text": "for a couple of reasons.", "start": 2031.09, "duration": 1.0}, {"text": "One is if we didn't, we\nwould spend infinite time.", "start": 2032.09, "duration": 3.02}, {"text": "Because we'd just go\nthere and come back,", "start": 2035.11, "duration": 1.835}, {"text": "and go there and come back.", "start": 2036.945, "duration": 1.125}, {"text": "As long as there's\nat least one cycle,", "start": 2038.07, "duration": 1.67}, {"text": "you're going to keep\ngoing around the cycle", "start": 2039.74, "duration": 1.18}, {"text": "forever and ever if you don't\ntry to avoid duplicates.", "start": 2040.92, "duration": 2.36}, {"text": "So let me write down some\ncode for this algorithm.", "start": 2045.707, "duration": 2.083}, {"text": "It's pretty straightforward.", "start": 2047.79, "duration": 1.79}, {"text": "So straightforward, we\ncan be completely explicit", "start": 2049.58, "duration": 2.61}, {"text": "and write pseudocode.", "start": 2052.19, "duration": 1.64}, {"text": "There's a few different ways\nto implement this algorithm.", "start": 2058.824, "duration": 2.375}, {"text": "I'll show you my favorite.", "start": 2061.199, "duration": 2.581}, {"text": "The textbook has a\ndifferent favorite.", "start": 2063.78, "duration": 1.879}, {"text": "I'm going to write in\npure Python, I believe.", "start": 2082.04, "duration": 2.699}, {"text": "Almost done.", "start": 2157.37, "duration": 0.73}, {"text": "I think I got that right.", "start": 2190.65, "duration": 2.51}, {"text": "So this is at the end\nof the while-loop.", "start": 2193.16, "duration": 3.434}, {"text": "And at that point\nwe should be done.", "start": 2196.594, "duration": 2.678}, {"text": "We can do an actual\nexample, maybe.", "start": 2199.272, "duration": 1.458}, {"text": "I'm going to do it on\nan undirected graph,", "start": 2236.61, "duration": 2.95}, {"text": "but this algorithm works just as\nwell on directed and undirected", "start": 2239.56, "duration": 2.91}, {"text": "graphs.", "start": 2242.47, "duration": 0.5}, {"text": "There's an undirected graph.", "start": 2248.33, "duration": 2.62}, {"text": "We're given some\nstart vertex, s,", "start": 2250.95, "duration": 3.94}, {"text": "and we're given\nthe graph by being", "start": 2254.89, "duration": 2.54}, {"text": "given the adjacency lists.", "start": 2257.43, "duration": 2.42}, {"text": "So you could iterate over\nthe vertices of that thing.", "start": 2259.85, "duration": 2.75}, {"text": "Given a vertex, you\ncan list all the edges", "start": 2262.6, "duration": 1.82}, {"text": "you can reach in one step.", "start": 2264.42, "duration": 2.692}, {"text": "And then the top\nof the algorithm's", "start": 2267.112, "duration": 1.458}, {"text": "just some initialization.", "start": 2268.57, "duration": 1.83}, {"text": "The basic structure--", "start": 2270.4, "duration": 1.58}, {"text": "We have this thing called the\nfrontier, which is what we just", "start": 2271.98, "duration": 3.91}, {"text": "reached on the previous level.", "start": 2275.89, "duration": 3.03}, {"text": "I think that's going to\nbe level i minus one.", "start": 2278.92, "duration": 5.56}, {"text": "Just don't want to\nmake an index error.", "start": 2284.48, "duration": 1.745}, {"text": "These are going to be all the\nthings you can reach using", "start": 2288.93, "duration": 2.99}, {"text": "exactly i minus one moves.", "start": 2291.92, "duration": 3.05}, {"text": "And then next is going\nto be all the things", "start": 2294.97, "duration": 2.05}, {"text": "you can reach in i moves.", "start": 2297.02, "duration": 1.54}, {"text": "So to get started,\nwhat we know is s.", "start": 2301.31, "duration": 3.666}, {"text": "s is what you can\nreach in zero moves.", "start": 2304.976, "duration": 3.604}, {"text": "So we set the level\nof s to be zero.", "start": 2308.58, "duration": 2.96}, {"text": "That's the first\nline of the code.", "start": 2311.54, "duration": 1.679}, {"text": "There's this other\nthing called the parent.", "start": 2313.219, "duration": 1.791}, {"text": "We'll worry about that later.", "start": 2315.01, "duration": 1.64}, {"text": "It's optional.", "start": 2316.65, "duration": 1.07}, {"text": "It gives us some\nother fun structure.", "start": 2317.72, "duration": 2.98}, {"text": "We set i to be one because\nwe just finished level zero.", "start": 2320.7, "duration": 4.25}, {"text": "Frontier of what you can reach\nin level zero is just s itself.", "start": 2324.95, "duration": 4.65}, {"text": "So we're going to\nput that on the list.", "start": 2329.6, "duration": 1.96}, {"text": "That is level zero. i equals\none So one minus one is zero.", "start": 2331.56, "duration": 3.31}, {"text": "All good.", "start": 2334.87, "duration": 1.49}, {"text": "And then we're going to iterate.", "start": 2336.36, "duration": 1.45}, {"text": "And this is going\nto be looking at--", "start": 2337.81, "duration": 1.73}, {"text": "The end of the iteration\nis to increment i.", "start": 2339.54, "duration": 2.807}, {"text": "So you could also\ncall this a for-loop", "start": 2342.347, "duration": 1.583}, {"text": "except we don't know\nwhen it's going to end.", "start": 2343.93, "duration": 1.833}, {"text": "So it's easier to\nthink of i incrementing", "start": 2345.763, "duration": 3.257}, {"text": "each step not knowing\nwhen we're going to stop.", "start": 2349.02, "duration": 2.13}, {"text": "We're going to stop whenever\nwe run out of nodes.", "start": 2351.15, "duration": 2.041}, {"text": "So whenever frontier\nis a non-empty list.", "start": 2353.191, "duration": 3.596}, {"text": "the bulk of the work\nhere is computing", "start": 2356.787, "duration": 1.583}, {"text": "what the next level is.", "start": 2358.37, "duration": 1.15}, {"text": "That's called next.", "start": 2359.52, "duration": 1.34}, {"text": "It's going to be level i.", "start": 2360.86, "duration": 1.47}, {"text": "We do some computation.", "start": 2362.33, "duration": 0.98}, {"text": "Eventually we have\nwhat's on the next level.", "start": 2363.31, "duration": 2.71}, {"text": "Then we set frontier next.", "start": 2366.02, "duration": 2.152}, {"text": "Because that's our new level.", "start": 2368.172, "duration": 1.208}, {"text": "We increment i, and then\ninvariant of frontier being", "start": 2369.38, "duration": 3.55}, {"text": "level i minus 1 is preserved.", "start": 2372.93, "duration": 2.712}, {"text": "Right after here.", "start": 2375.642, "duration": 0.708}, {"text": "And then we just keep going\ntill we run out of nodes.", "start": 2376.35, "duration": 3.75}, {"text": "How do we compute next?", "start": 2380.1, "duration": 2.13}, {"text": "Well, we look at every\nnode in the frontier,", "start": 2382.23, "duration": 1.98}, {"text": "and we look at all the nodes\nyou can reach from those nodes.", "start": 2384.21, "duration": 3.45}, {"text": "So every node, u, in the\nfrontier and then we look at--", "start": 2387.66, "duration": 3.07}, {"text": "So this means there\nis an edge from u", "start": 2390.73, "duration": 2.38}, {"text": "to v through the picture.", "start": 2393.11, "duration": 2.55}, {"text": "We look at all the edges\nfrom all the frontier nodes", "start": 2395.66, "duration": 2.86}, {"text": "where you can go.", "start": 2398.52, "duration": 1.35}, {"text": "And then the key thing is\nwe check for duplicates.", "start": 2399.87, "duration": 2.46}, {"text": "We see, have we seen\nthis node before?", "start": 2402.33, "duration": 2.5}, {"text": "If we have, we would have set\nit's level to be something.", "start": 2404.83, "duration": 3.44}, {"text": "If we haven't seen\nit, it will not", "start": 2408.27, "duration": 1.6}, {"text": "be in the level hash table\nor the level dictionary.", "start": 2409.87, "duration": 4.29}, {"text": "And so if it's not in\nthere, we'll put it in there", "start": 2414.16, "duration": 4.19}, {"text": "and add it to the next layer.", "start": 2418.35, "duration": 2.29}, {"text": "So that's how you\navoid duplicates.", "start": 2420.64, "duration": 2.22}, {"text": "You set its level to make sure\nyou will never visit it again,", "start": 2422.86, "duration": 3.03}, {"text": "you add it to the next frontier,\nyou iterate, you're done.", "start": 2425.89, "duration": 2.98}, {"text": "This is one version\nof what you might", "start": 2431.359, "duration": 1.541}, {"text": "call a breadth-first search.", "start": 2432.9, "duration": 1.34}, {"text": "And it achieves\nthis goal, visiting", "start": 2434.24, "duration": 2.03}, {"text": "all the nodes reachable\nfrom s, in linear time.", "start": 2436.27, "duration": 2.95}, {"text": "Let's see how it works\non a real example.", "start": 2439.22, "duration": 2.42}, {"text": "So first frontier is this thing.", "start": 2441.64, "duration": 2.1}, {"text": "Frontier just has the node\ns, so we just look at s,", "start": 2446.67, "duration": 2.45}, {"text": "and we look at all\nthe edges from s.", "start": 2449.12, "duration": 1.81}, {"text": "We get a and x.", "start": 2450.93, "duration": 1.51}, {"text": "So those get added\nto the next frontier.", "start": 2452.44, "duration": 4.02}, {"text": "Maybe before I go too\nfar, let me switch colors.", "start": 2456.46, "duration": 4.58}, {"text": "Multimedia here.", "start": 2465.7, "duration": 2.38}, {"text": "So here's level one.", "start": 2468.08, "duration": 4.496}, {"text": "All of these guys, we're going\nto set their level to one.", "start": 2472.576, "duration": 4.694}, {"text": "They can be reached in one step.", "start": 2477.27, "duration": 1.607}, {"text": "That's pretty clear.", "start": 2478.877, "duration": 0.833}, {"text": "So now frontier is a and x.", "start": 2479.71, "duration": 2.86}, {"text": "That's what next becomes.", "start": 2482.57, "duration": 1.81}, {"text": "Then frontier becomes next.", "start": 2484.38, "duration": 1.86}, {"text": "And so we look at\nall the edges from a.", "start": 2486.24, "duration": 2.27}, {"text": "That's going to be s and z.", "start": 2488.51, "duration": 2.6}, {"text": "s, we've already looked at,\nit already has a level set,", "start": 2491.11, "duration": 2.62}, {"text": "so we ignore that.", "start": 2493.73, "duration": 1.47}, {"text": "So we look at z.", "start": 2495.2, "duration": 0.68}, {"text": "Z does not have a\nlevel indicated here,", "start": 2495.88, "duration": 2.32}, {"text": "so we're going to set\nit to i which happens", "start": 2498.2, "duration": 2.1}, {"text": "to be two at this point.", "start": 2500.3, "duration": 2.04}, {"text": "And we look at x.", "start": 2502.34, "duration": 0.86}, {"text": "It has neighbors s, d, and c.", "start": 2503.2, "duration": 1.96}, {"text": "We look at s again.", "start": 2505.16, "duration": 1.17}, {"text": "We say, oh, we've already\nseen that yet again.", "start": 2506.33, "duration": 2.35}, {"text": "So we're worried about\nthis taking a lot of time", "start": 2508.68, "duration": 2.12}, {"text": "because we look at s\nthree times in total.", "start": 2510.8, "duration": 3.29}, {"text": "Then we look at d.", "start": 2514.09, "duration": 2.2}, {"text": "d hasn't been set, so we set\nit to two. c hasn't been set,", "start": 2516.29, "duration": 2.95}, {"text": "so we set it to two.", "start": 2519.24, "duration": 0.98}, {"text": "So the frontier at\nlevel two is that.", "start": 2520.22, "duration": 5.725}, {"text": "Then we look at all\nthe neighbors of z.", "start": 2525.945, "duration": 1.625}, {"text": "There's a. a's already been set.", "start": 2527.57, "duration": 1.919}, {"text": "Look at all the neighbors of d.", "start": 2529.489, "duration": 1.291}, {"text": "There's x.", "start": 2530.78, "duration": 0.59}, {"text": "There's c.", "start": 2531.37, "duration": 0.5}, {"text": "Those have been set.", "start": 2531.87, "duration": 0.833}, {"text": "There's f.", "start": 2532.703, "duration": 1.147}, {"text": "This one gets added.", "start": 2533.85, "duration": 2.59}, {"text": "Then we look at c.", "start": 2536.44, "duration": 1.04}, {"text": "There's x.", "start": 2537.48, "duration": 0.54}, {"text": "That's been done. d's been done.", "start": 2538.02, "duration": 1.75}, {"text": "f's been done.", "start": 2539.77, "duration": 0.92}, {"text": "v has not been done.", "start": 2540.69, "duration": 2.68}, {"text": "So this becomes a\nfrontier at level three.", "start": 2543.37, "duration": 3.93}, {"text": "Then we look at level three.", "start": 2547.3, "duration": 1.63}, {"text": "There's f.", "start": 2548.93, "duration": 0.647}, {"text": "D's been done, c's been\ndone, b's been done.", "start": 2549.577, "duration": 1.833}, {"text": "We look at v. c's been\ndone. f's been done.", "start": 2551.41, "duration": 3.12}, {"text": "Nothing to add to next.", "start": 2554.53, "duration": 1.18}, {"text": "Next becomes empty.", "start": 2555.71, "duration": 1.07}, {"text": "Frontier becomes empty.", "start": 2556.78, "duration": 1.46}, {"text": "The while-loop finishes.", "start": 2558.24, "duration": 1.29}, {"text": "TA DA!", "start": 2559.53, "duration": 1.23}, {"text": "We've computed-- we've\nvisited all the vertices.", "start": 2560.76, "duration": 2.75}, {"text": "Question.", "start": 2563.51, "duration": 0.943}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 2564.453, "duration": 0.916}, {"text": "What notation?", "start": 2571.325, "duration": 1.585}, {"text": "PROFESSOR: This is\nPython notation.", "start": 2572.91, "duration": 1.55}, {"text": "You may have heard of Python.", "start": 2574.46, "duration": 2.4}, {"text": "This is a dictionary\nwhich has one key value,", "start": 2576.86, "duration": 4.86}, {"text": "s, and has one value, zero.", "start": 2581.72, "duration": 2.0}, {"text": "So you could--", "start": 2583.72, "duration": 2.39}, {"text": "That's shorthand in Python for--", "start": 2586.11, "duration": 2.19}, {"text": "Usually you have a\ncomma separated list.", "start": 2588.3, "duration": 2.14}, {"text": "The colon is specifying\nkey value pairs.", "start": 2590.44, "duration": 3.87}, {"text": "I didn't talk about parent.", "start": 2597.3, "duration": 2.46}, {"text": "We can do that for a little bit.", "start": 2599.76, "duration": 3.55}, {"text": "So parent we're initializing to\nsay, the parent of s is nobody,", "start": 2603.31, "duration": 4.97}, {"text": "and then whenever we\nvisit a new vertex,", "start": 2608.28, "duration": 2.61}, {"text": "v, we set its parent to be\nthe vertex that we came from.", "start": 2610.89, "duration": 4.01}, {"text": "So we had this vertex,\nv. We had an edge", "start": 2614.9, "duration": 1.75}, {"text": "to v from some vertex, u.", "start": 2616.65, "duration": 1.91}, {"text": "We set the parent of v to be u.", "start": 2618.56, "duration": 2.16}, {"text": "So let me add in\nwhat that becomes.", "start": 2620.72, "duration": 3.42}, {"text": "I'll change colors yet again.", "start": 2624.14, "duration": 3.16}, {"text": "Although it gets hard to\nsee any color but red.", "start": 2627.3, "duration": 4.52}, {"text": "So we have s.", "start": 2631.82, "duration": 3.52}, {"text": "When we visited a, then the\nparent of a would become s.", "start": 2635.34, "duration": 5.47}, {"text": "When we visited z, the\nparent of z would be a.", "start": 2640.81, "duration": 4.34}, {"text": "Parent of x is going to be s.", "start": 2645.15, "duration": 2.49}, {"text": "Parent of d is going to be x.", "start": 2647.64, "duration": 2.285}, {"text": "The parent of c\nis going to be x.", "start": 2649.925, "duration": 2.84}, {"text": "The parent of f--", "start": 2652.765, "duration": 1.599}, {"text": "it could have been either\nway, but the way I did it,", "start": 2654.364, "duration": 2.166}, {"text": "d went first, and so\nthat became its parent.", "start": 2656.53, "duration": 4.67}, {"text": "And I think for v,\nc was its parent.", "start": 2661.2, "duration": 4.127}, {"text": "So that's what the parent\npointers will look like.", "start": 2665.327, "duration": 2.083}, {"text": "They always follow edges.", "start": 2667.41, "duration": 1.41}, {"text": "They actually follow\nedges backwards.", "start": 2668.82, "duration": 1.94}, {"text": "If this was a directed\ngraph, the graph", "start": 2670.76, "duration": 1.86}, {"text": "might be directed that way\nbut the parent pointers", "start": 2672.62, "duration": 2.8}, {"text": "go back along the edges.", "start": 2675.42, "duration": 1.85}, {"text": "So it's a way to return.", "start": 2677.27, "duration": 1.12}, {"text": "It's a way to return to s.", "start": 2678.39, "duration": 3.32}, {"text": "If you follow these pointers,\nall roads lead to s.", "start": 2681.71, "duration": 2.87}, {"text": "Because we started at s,\nthat's the property we have.", "start": 2688.14, "duration": 2.41}, {"text": "In fact, these pointers\nalways form a tree,", "start": 2690.55, "duration": 3.63}, {"text": "and the root of the tree is s.", "start": 2694.18, "duration": 2.1}, {"text": "In fact, these pointers form\nwhat are called shortest paths.", "start": 2696.28, "duration": 3.58}, {"text": "Let me write down a\nlittle bit about this.", "start": 2699.86, "duration": 5.87}, {"text": "Shortest path properties.", "start": 2719.97, "duration": 1.315}, {"text": "If you take a node, and\nyou take its parent,", "start": 2745.91, "duration": 5.49}, {"text": "and you take the\nparent of the parent,", "start": 2751.4, "duration": 1.77}, {"text": "and so on, eventually\nyou get to s.", "start": 2753.17, "duration": 3.43}, {"text": "And if you read it\nbackwards, that will actually", "start": 2756.6, "duration": 2.94}, {"text": "be a path in the graph.", "start": 2759.54, "duration": 2.34}, {"text": "And it will be a shortest\npath, in the graph,", "start": 2761.88, "duration": 7.54}, {"text": "from s to v.\nMeaning, if you look", "start": 2769.42, "duration": 5.19}, {"text": "at all paths in the graph\nthat go from s to v--", "start": 2774.61, "duration": 2.57}, {"text": "So say we're going from\ns to v, how about that,", "start": 2777.18, "duration": 4.28}, {"text": "we compute this path out of BFS.", "start": 2781.46, "duration": 1.77}, {"text": "Which is, follow a\nparent of v is c, parent", "start": 2783.23, "duration": 2.22}, {"text": "of c is x, parent of x is s.", "start": 2785.45, "duration": 2.22}, {"text": "Read it backwards.", "start": 2787.67, "duration": 0.93}, {"text": "That gives us a\npath from s to v.", "start": 2788.6, "duration": 1.99}, {"text": "The claim is, that\nis the shortest", "start": 2790.59, "duration": 1.55}, {"text": "way to get from s to v. It\nmight not be the only one.", "start": 2792.14, "duration": 3.28}, {"text": "Like if you're going from s\nto f, there's two short paths.", "start": 2795.42, "duration": 2.91}, {"text": "There's this one\nof length three.", "start": 2798.33, "duration": 2.0}, {"text": "There's this one\nof length three..", "start": 2800.33, "duration": 1.83}, {"text": "Uses three edges.", "start": 2802.16, "duration": 1.23}, {"text": "Same length.", "start": 2803.39, "duration": 1.91}, {"text": "And in the parent\npointers, we can only", "start": 2805.3, "duration": 1.81}, {"text": "afford to encode\none of those paths", "start": 2807.11, "duration": 1.53}, {"text": "because in general there might\nbe exponentially many ways", "start": 2808.64, "duration": 2.375}, {"text": "to get from one node to another.", "start": 2811.015, "duration": 1.675}, {"text": "We find a shortest path, not\nnecessarily the only one.", "start": 2812.69, "duration": 4.25}, {"text": "And the length of that path--", "start": 2816.94, "duration": 3.66}, {"text": "So shortest here means that\nyou use the fewest edges.", "start": 2820.6, "duration": 3.15}, {"text": "And the length will\nbe level of v. That's", "start": 2823.75, "duration": 4.16}, {"text": "what we're keeping track of.", "start": 2827.91, "duration": 2.819}, {"text": "If the level's zero, you can\nget there with zero steps.", "start": 2830.729, "duration": 2.291}, {"text": "If the level's one, you\nget there with one steps.", "start": 2833.02, "duration": 2.04}, {"text": "Because we're visiting\neverything you can possibly", "start": 2835.06, "duration": 2.083}, {"text": "get in k steps, the\nlevel is telling you what", "start": 2837.143, "duration": 2.687}, {"text": "that shortest path distance is.", "start": 2839.83, "duration": 1.581}, {"text": "And the parent\npointers are actually", "start": 2841.411, "duration": 1.499}, {"text": "giving you the shortest path.", "start": 2842.91, "duration": 2.12}, {"text": "That's the cool thing about BFS.", "start": 2845.03, "duration": 2.06}, {"text": "Yeah, BFS explores the vertices.", "start": 2847.09, "duration": 1.53}, {"text": "Sometimes, that's\nall you care about.", "start": 2848.62, "duration": 1.796}, {"text": "But in some sense,\nwhat really matters,", "start": 2850.416, "duration": 1.624}, {"text": "is it finds the shortest way to\nget from anywhere to anywhere.", "start": 2852.04, "duration": 4.16}, {"text": "For a Rubik's Cube,\nthat's nice because you", "start": 2856.2, "duration": 4.0}, {"text": "run BFS from the start\nstate of the Rubik's Cube.", "start": 2860.2, "duration": 3.06}, {"text": "Then you say, oh,\nI'm in this state.", "start": 2863.26, "duration": 1.93}, {"text": "You look up this state.", "start": 2865.19, "duration": 1.534}, {"text": "You look at its level.", "start": 2866.724, "duration": 0.916}, {"text": "It says, oh, you can\nget there in nine steps.", "start": 2867.64, "duration": 2.95}, {"text": "That's, I think, the average.", "start": 2870.59, "duration": 1.67}, {"text": "So I'm guessing.", "start": 2872.26, "duration": 1.241}, {"text": "I don't know how to\ndo this in nine steps.", "start": 2873.501, "duration": 1.749}, {"text": "Great, so now you\nknow how to solve it.", "start": 2878.47, "duration": 1.75}, {"text": "You just look at\nthe parent pointer.", "start": 2880.22, "duration": 1.5}, {"text": "The parent pointer gives\nyou another configuration.", "start": 2881.72, "duration": 1.375}, {"text": "You say, oh, what move was that?", "start": 2883.095, "duration": 1.935}, {"text": "And then you do that move.", "start": 2885.03, "duration": 1.45}, {"text": "I'm not going to solve it.", "start": 2886.48, "duration": 1.46}, {"text": "Then you look at the\nparent pointer of that.", "start": 2887.94, "duration": 1.42}, {"text": "You do that move.", "start": 2889.36, "duration": 0.685}, {"text": "You look at the parent\npointer of that.", "start": 2890.045, "duration": 1.465}, {"text": "You do that move.", "start": 2891.51, "duration": 0.57}, {"text": "Eventually, you'll get\nto the solved state,", "start": 2892.08, "duration": 1.791}, {"text": "and you will do it using\nthe fewest possible moves.", "start": 2893.871, "duration": 2.559}, {"text": "So if you can afford to put the\nwhole graph in memory, which", "start": 2896.43, "duration": 4.16}, {"text": "you can't for a big Rubik's Cube\nbut you can for a small one,", "start": 2900.59, "duration": 2.86}, {"text": "then this will give you a\nstrategy, the optimal strategy,", "start": 2903.45, "duration": 4.11}, {"text": "God's algorithm if you will,\nfor every configuration.", "start": 2907.56, "duration": 4.84}, {"text": "It solves all of them.", "start": 2912.4, "duration": 1.8}, {"text": "Which is great.", "start": 2914.2, "duration": 1.999}, {"text": "What is the running\ntime of this algorithm?", "start": 2916.199, "duration": 1.791}, {"text": "I claim it's order V plus E.\nBut it looked a little wasteful", "start": 2917.99, "duration": 3.88}, {"text": "because it was checking\nvertices over and over and over.", "start": 2921.87, "duration": 3.43}, {"text": "But if you think\nabout it carefully,", "start": 2925.3, "duration": 1.96}, {"text": "you're only looking--", "start": 2927.26, "duration": 1.986}, {"text": "what's the right\nway to say this--", "start": 2929.246, "duration": 2.024}, {"text": "you only check every edge once.", "start": 2931.27, "duration": 4.314}, {"text": "Or in undirected graphs,\nyou check them twice,", "start": 2935.584, "duration": 1.916}, {"text": "once from each side.", "start": 2937.5, "duration": 3.32}, {"text": "A vertex enters the\nfrontier only once.", "start": 2940.82, "duration": 3.47}, {"text": "Because once it's in the\nfrontier, it gets a level set.", "start": 2944.29, "duration": 3.32}, {"text": "And once it has a level set,\nit'll never go in again.", "start": 2947.61, "duration": 3.84}, {"text": "It'll never get added to next.", "start": 2951.45, "duration": 3.0}, {"text": "So s gets added once then we\ncheck all the neighbors of s.", "start": 2954.45, "duration": 2.99}, {"text": "a gets added once, then we\ncheck all the neighbors of a.", "start": 2957.44, "duration": 2.47}, {"text": "Each of these guys\ngets added once.", "start": 2959.91, "duration": 1.61}, {"text": "We check all the neighbors.", "start": 2961.52, "duration": 1.43}, {"text": "So the total running\ntime is going", "start": 2962.95, "duration": 1.46}, {"text": "to be the sum over all\nvertices of the size", "start": 2964.41, "duration": 3.08}, {"text": "of the adjacency list of v. So\nthis is the number of neighbors", "start": 2967.49, "duration": 6.04}, {"text": "that v has.", "start": 2973.53, "duration": 1.69}, {"text": "And this is going to be?", "start": 2975.22, "duration": 2.359}, {"text": "Answer?", "start": 2977.579, "duration": 0.5}, {"text": "AUDIENCE: Two times\nthe number of edges.", "start": 2982.336, "duration": 1.668}, {"text": "PROFESSOR: Sorry", "start": 2984.004, "duration": 0.666}, {"text": "AUDIENCE: Double\nthe number of edges.", "start": 2984.67, "duration": 1.541}, {"text": "PROFESSOR: Twice the number of\nedges for undirected graphs.", "start": 2986.211, "duration": 2.719}, {"text": "It's going to be the number\nof edges for directed graphs.", "start": 2988.93, "duration": 2.4}, {"text": "This is the Handshaking Lemma.", "start": 2991.33, "duration": 1.44}, {"text": "If you don't remember\nthe Handshaking Lemma,", "start": 2992.77, "duration": 1.9}, {"text": "you should read the textbook.", "start": 2994.67, "duration": 2.66}, {"text": "Six o four two stuff.", "start": 2997.33, "duration": 1.786}, {"text": "Basically you visit\nevery edge twice.", "start": 3003.3, "duration": 3.48}, {"text": "For directed graphs, you\nvisit every edge once.", "start": 3006.78, "duration": 4.09}, {"text": "But it's order E. We\nalso spend order V", "start": 3010.87, "duration": 2.72}, {"text": "because we touch every vertex.", "start": 3013.59, "duration": 2.2}, {"text": "So the total running\ntime is order V plus E.", "start": 3015.79, "duration": 2.98}, {"text": "In fact, the way this is going,\nyou can be a little tighter", "start": 3018.77, "duration": 4.47}, {"text": "and say it's order E. I just\nwant to mention in reality--", "start": 3023.24, "duration": 3.587}, {"text": "Sometimes you don't care about\njust what you can reach from s,", "start": 3026.827, "duration": 2.583}, {"text": "you really want to\nvisit every vertex.", "start": 3029.41, "duration": 2.0}, {"text": "Then you need another\nouter loop that's", "start": 3031.41, "duration": 2.3}, {"text": "iterating over all the vertices\nas potential choices for s.", "start": 3033.71, "duration": 4.46}, {"text": "And you then can visit all the\nvertices in the entire graph", "start": 3038.17, "duration": 2.99}, {"text": "even if it's disconnected.", "start": 3041.16, "duration": 1.77}, {"text": "We'll talk more about\nthat next class.", "start": 3042.93, "duration": 2.11}, {"text": "That's it for BFS.", "start": 3045.04, "duration": 1.567}]