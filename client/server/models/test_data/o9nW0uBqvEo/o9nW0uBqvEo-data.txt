{
    "metadata": {
        "id": "o9nW0uBqvEo",
        "avgHeat": 0.35,
        "runtime": 3085.1530000000002,
        "dale-challReadabilityScore": 7.159685182838963,
        "lexicalDiversity": 0.4828409430020889,
        "posComposition": {
            "DT": 0.103,
            "JJ": 0.056,
            "NN": 0.128,
            "VBZ": 0.047,
            "VBN": 0.011,
            "IN": 0.117,
            "NNP": 0.023,
            "PRP$": 0.003,
            "MD": 0.014,
            "VB": 0.061,
            "VBP": 0.057,
            "TO": 0.045,
            "NNS": 0.037,
            "CC": 0.034,
            "RB": 0.059,
            "PRP": 0.093,
            "VBD": 0.01,
            "RP": 0.006,
            "PDT": 0.001,
            "WDT": 0.006,
            "VBG": 0.031,
            "POS": 0.002,
            "WP": 0.01,
            "RBS": 0.0,
            ":": 0.007,
            "CD": 0.018,
            "WRB": 0.009,
            "EX": 0.003,
            "JJR": 0.003,
            "RBR": 0.002,
            "UH": 0.0,
            "JJS": 0.002,
            "FW": 0.0,
            "NNPS": 0.0
        },
        "syllableRate": 4.394,
        "topicScores": [
            [
                "time",
                0.10070567859170058
            ],
            [
                "ok",
                0.10081210448719498
            ],
            [
                "loop",
                0.11049830432806945
            ],
            [
                "order",
                0.1122889947348098
            ],
            [
                "list",
                0.11627499499623359
            ],
            [
                "n",
                0.1185998936459335
            ],
            [
                "algorithm",
                0.12771883044781715
            ],
            [
                "operation",
                0.14299717744897886
            ],
            [
                "thing",
                0.14377738837165707
            ],
            [
                "growth",
                0.14641895902607557
            ],
            [
                "look",
                0.14995172598054926
            ],
            [
                "size",
                0.15251763389621545
            ],
            [
                "case",
                0.153900693052234
            ],
            [
                "way",
                0.1648081706008899
            ],
            [
                "problem",
                0.16898955710536792
            ],
            [
                "set",
                0.17034592332857082
            ],
            [
                "element",
                0.17274522855916075
            ],
            [
                "length",
                0.17460734588808202
            ],
            [
                "example",
                0.17577419769033298
            ],
            [
                "bad",
                0.17669093405463168
            ],
            [
                "count",
                0.17876396367974282
            ],
            [
                "big",
                0.1791975821396833
            ],
            [
                "number",
                0.1805691907046675
            ],
            [
                "right",
                0.18078578497296524
            ],
            [
                "step",
                0.1816465175659283
            ],
            [
                "Creative Commons",
                0.1841206821226192
            ],
            [
                "linear",
                0.18656915259720983
            ],
            [
                "term",
                0.1889175924975888
            ],
            [
                "input",
                0.1914678925955503
            ],
            [
                "second",
                0.19622281986483525
            ]
        ],
        "topicsList": [
            "time",
            "ok",
            "loop",
            "order",
            "list",
            "n",
            "algorithm",
            "operation",
            "thing",
            "growth",
            "look",
            "size",
            "case",
            "way",
            "problem",
            "set",
            "element",
            "length",
            "example",
            "bad",
            "count",
            "big",
            "number",
            "right",
            "step",
            "Creative Commons",
            "linear",
            "term",
            "input",
            "second"
        ]
    },
    "chunks": {
        "o9nW0uBqvEo-0": {
            "id": "o9nW0uBqvEo-0",
            "heat": 0.1,
            "start": 0.0,
            "text": " The following content is provided under a Creative Commons license. Your support will help MIT OpenCourseWare continue to offer high quality educational resources for free. To make a donation or view additional materials from hundreds of MIT courses, visit MITOpenCourseWare@ocw.mit.edu. PROFESSOR: OK, folks. Welcome back. Hope you had a nice long weekend with no classes. You got caught up on all those problem sets that have been sneaking up on you. You enjoyed watching the Patriots and Tom Brady come back. Oh, sorry, I'm showing my local bias. Before we talk about today's topic, I want to take a second to set the stage. And I want you to stop and think about what you've seen so far in this course. We're coming up on the end of the first section of the course. And you've already seen a lot. You've certainly learned about fundamentals of computation. You've seen different kinds of data structures, both mutable and immutable, so tuples and lists, dictionaries, different ways of pulling things together. You've seen a range of algorithms from simple linear code to loops, fors and whiles. You've seen iterative algorithms. You've seen recursive algorithms. You've seen classes of algorithms. Divide and conquer. Greedy algorithms. Bisection search. A range of things. And then most recently, you start pulling things together with classes-- a way to group together",
            "metrics": {
                "relativeDCReadability": 1.094386124382734,
                "lexicalDiversity": 0.6033755274261603,
                "posComposition": {
                    "DT": 0.072,
                    "JJ": 0.084,
                    "NN": 0.127,
                    "VBZ": 0.013,
                    "VBN": 0.046,
                    "IN": 0.097,
                    "NNP": 0.072,
                    "PRP$": 0.008,
                    "MD": 0.004,
                    "VB": 0.038,
                    "VBP": 0.076,
                    "TO": 0.03,
                    "NNS": 0.089,
                    "CC": 0.042,
                    "RB": 0.051,
                    "PRP": 0.08,
                    "VBD": 0.008,
                    "RP": 0.013,
                    "PDT": 0.004,
                    "WDT": 0.004,
                    "VBG": 0.025,
                    "POS": 0.004,
                    "WP": 0.004,
                    "RBS": 0.004,
                    ":": 0.004
                },
                "syllableRate": 3.142,
                "topicScores": [
                    [
                        "Creative Commons",
                        0.19105947061460368
                    ],
                    [
                        "Creative Commons license",
                        0.24924472275753085
                    ],
                    [
                        "MIT",
                        0.3155949084591213
                    ],
                    [
                        "algorithm",
                        0.3190325395096846
                    ],
                    [
                        "course",
                        0.4125533852464924
                    ],
                    [
                        "thing",
                        0.41972560698609335
                    ],
                    [
                        "PROFESSOR",
                        0.5155511672485054
                    ],
                    [
                        "range",
                        0.5497734363230591
                    ],
                    [
                        "class",
                        0.5530490956030375
                    ],
                    [
                        "set",
                        0.5550795630910997
                    ],
                    [
                        "different",
                        0.5583148640313996
                    ],
                    [
                        "way",
                        0.5626264307878338
                    ],
                    [
                        "Patriots",
                        0.6476955323929899
                    ],
                    [
                        "Tom",
                        0.6476955323929899
                    ],
                    [
                        "Brady",
                        0.6476955323929899
                    ],
                    [
                        "MIT course",
                        0.7027752529592148
                    ],
                    [
                        "Tom Brady",
                        0.722681085426812
                    ],
                    [
                        "MIT OpenCourseWare",
                        0.7349209933150008
                    ],
                    [
                        "following",
                        0.7740299161811303
                    ],
                    [
                        "content",
                        0.7860689166109966
                    ],
                    [
                        "free",
                        0.8163467231311746
                    ],
                    [
                        "MITOpenCourseWare@ocw.mit.edu",
                        0.8331833272909903
                    ],
                    [
                        "support",
                        0.8375356857638164
                    ],
                    [
                        "high",
                        0.8468606851774232
                    ],
                    [
                        "quality",
                        0.8468606851774232
                    ],
                    [
                        "educational",
                        0.8468606851774232
                    ],
                    [
                        "resource",
                        0.8468606851774232
                    ],
                    [
                        "folk",
                        0.8595545211360979
                    ],
                    [
                        "donation",
                        0.8704787365203578
                    ],
                    [
                        "additional",
                        0.8704787365203578
                    ]
                ],
                "topTopicSimilarity": 0.16666666666666666,
                "sharedTopicScores": [
                    [
                        "Creative Commons",
                        0.19105947061460368
                    ],
                    [
                        "algorithm",
                        0.3190325395096846
                    ],
                    [
                        "thing",
                        0.41972560698609335
                    ],
                    [
                        "set",
                        0.5550795630910997
                    ],
                    [
                        "way",
                        0.5626264307878338
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-90": {
            "id": "o9nW0uBqvEo-90",
            "heat": 0.181,
            "start": 90.0,
            "text": " data that belongs together along with methods or procedures that are designed to manipulate that data. So you've had actually a fairly good coverage already of a lot of the fundamentals of computation. And you're starting to get geared up to be able to tackle a pretty interesting range of problems. Today and Monday, we're going to take a little bit of a different look at computation. Because now that you've got the tools to start building up your own personal armamentarium of tools, we'd like to ask a couple of important questions. The primary one of which is how efficient are my algorithms? And by efficiency, we'll see it refers both to space and time, but primarily to time. And we'd like to know both how fast are my algorithms going to run and how could I reason about past performance. And that's what we're going to do with today's topics. We're going to talk about orders of growth. We'll define what that means in a few minutes. We're going to talk about what's called the big O notation. And we're going to begin to explore different classes of algorithms. Before we do that though, let's talk about why. And I want to suggest to you there are two reasons this is important to be considering. First question is how could we reason about an algorithm something you write in order to predict how much time is it going to need to solve a problem of a particular size? I might be testing my code on small scale examples.",
            "metrics": {
                "relativeDCReadability": 1.0018895276207265,
                "lexicalDiversity": 0.4963768115942029,
                "posComposition": {
                    "NNS": 0.058,
                    "WDT": 0.011,
                    "VBZ": 0.033,
                    "RB": 0.025,
                    "IN": 0.101,
                    "CC": 0.04,
                    "VBP": 0.054,
                    "VBN": 0.018,
                    "TO": 0.08,
                    "VB": 0.087,
                    "DT": 0.076,
                    "PRP": 0.076,
                    "JJ": 0.069,
                    "NN": 0.12,
                    "VBG": 0.04,
                    "RP": 0.007,
                    "NNP": 0.014,
                    "PRP$": 0.014,
                    "MD": 0.025,
                    "CD": 0.007,
                    "WRB": 0.022,
                    "WP": 0.011,
                    "POS": 0.007,
                    "EX": 0.004
                },
                "syllableRate": 3.342,
                "topicScores": [
                    [
                        "algorithm",
                        0.34572225234144316
                    ],
                    [
                        "datum",
                        0.4099943726146861
                    ],
                    [
                        "time",
                        0.4175939908088605
                    ],
                    [
                        "reason",
                        0.41824878970263396
                    ],
                    [
                        "computation",
                        0.46117621871286923
                    ],
                    [
                        "today",
                        0.5211777331138148
                    ],
                    [
                        "tool",
                        0.526343148351999
                    ],
                    [
                        "question",
                        0.5276937811214661
                    ],
                    [
                        "problem",
                        0.5308650734080338
                    ],
                    [
                        "important",
                        0.5370325225369786
                    ],
                    [
                        "different",
                        0.5382630334466215
                    ],
                    [
                        "order",
                        0.5465827305636943
                    ],
                    [
                        "Monday",
                        0.5648895903911999
                    ],
                    [
                        "method",
                        0.7481504279434461
                    ],
                    [
                        "procedure",
                        0.7481504279434461
                    ],
                    [
                        "good",
                        0.8172117235579702
                    ],
                    [
                        "coverage",
                        0.8172117235579702
                    ],
                    [
                        "lot",
                        0.8172117235579702
                    ],
                    [
                        "fundamental",
                        0.8172117235579702
                    ],
                    [
                        "able",
                        0.8445631292506169
                    ],
                    [
                        "interesting",
                        0.8445631292506169
                    ],
                    [
                        "range",
                        0.8445631292506169
                    ],
                    [
                        "little",
                        0.8596619476212727
                    ],
                    [
                        "bit",
                        0.8596619476212727
                    ],
                    [
                        "look",
                        0.8596619476212727
                    ],
                    [
                        "performance",
                        0.8605902629136729
                    ],
                    [
                        "topic",
                        0.8645289450776154
                    ],
                    [
                        "growth",
                        0.8678110268171128
                    ],
                    [
                        "primary",
                        0.8682295958041294
                    ],
                    [
                        "personal",
                        0.8694172971752042
                    ]
                ],
                "topTopicSimilarity": 0.2,
                "sharedTopicScores": [
                    [
                        "algorithm",
                        0.34572225234144316
                    ],
                    [
                        "time",
                        0.4175939908088605
                    ],
                    [
                        "problem",
                        0.5308650734080338
                    ],
                    [
                        "order",
                        0.5465827305636943
                    ],
                    [
                        "look",
                        0.8596619476212727
                    ],
                    [
                        "growth",
                        0.8678110268171128
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-180": {
            "id": "o9nW0uBqvEo-180",
            "heat": 0.1,
            "start": 180.0,
            "text": " And I want to know if I'd run it on a really big one, how long is it going to take? Can I predict that? Can I make guesses about how much time I'm going to need to solve this problem? Especially if it's in a real world circumstance where time is going to be crucial. Equally important is going the other direction. We want you to begin to reason about the algorithms you write to be able to say how do certain choices in a design of an algorithm influence how much time it's going to take. If I choose to do this recursively, is that going to be different than iteratively? If I choose to do this with a particular kind of structure in my algorithm, what does that say about the amount of time I'm going to need? And you're going to see there's a nice association between classes of algorithms and the interior structure of them. And in particular, we want to ask some fundamental questions. Are there fundamental limits to how much time it's going to take to solve a particular problem, no matter what kind of algorithm I design around this? And we'll see that there are some nice challenges about that. So that's what we're going to do over the next two days. Before we do though, let's maybe ask the obvious question-- why should we care? Could be on a quiz, might matter to you. Better choice is because it actually makes a difference. And I say that because it may not be as obvious to you as it was in an earlier generation. So people with my gray hair or what's left of my gray hair like to tell stories.",
            "metrics": {
                "relativeDCReadability": 0.9869190333279085,
                "lexicalDiversity": 0.45544554455445546,
                "posComposition": {
                    "CC": 0.023,
                    "PRP": 0.099,
                    "VBP": 0.056,
                    "TO": 0.076,
                    "VB": 0.086,
                    "IN": 0.129,
                    "MD": 0.023,
                    "DT": 0.083,
                    "RB": 0.026,
                    "JJ": 0.089,
                    "CD": 0.007,
                    "WRB": 0.023,
                    "VBZ": 0.046,
                    "VBG": 0.033,
                    "NNS": 0.03,
                    "NN": 0.112,
                    "NNP": 0.01,
                    "PRP$": 0.01,
                    "WP": 0.013,
                    "EX": 0.007,
                    "WDT": 0.003,
                    "POS": 0.003,
                    ":": 0.003,
                    "JJR": 0.007,
                    "VBD": 0.003
                },
                "syllableRate": 3.55,
                "topicScores": [
                    [
                        "time",
                        0.28821520826123714
                    ],
                    [
                        "algorithm",
                        0.3256046063326444
                    ],
                    [
                        "particular",
                        0.41997122508307877
                    ],
                    [
                        "problem",
                        0.5307896907609224
                    ],
                    [
                        "kind",
                        0.5439841304025153
                    ],
                    [
                        "nice",
                        0.5456901496687617
                    ],
                    [
                        "fundamental",
                        0.5478510705800882
                    ],
                    [
                        "design",
                        0.5484782499286225
                    ],
                    [
                        "structure",
                        0.5484782499286225
                    ],
                    [
                        "choice",
                        0.5486008455676072
                    ],
                    [
                        "gray",
                        0.5532925345476577
                    ],
                    [
                        "hair",
                        0.5532925345476577
                    ],
                    [
                        "obvious",
                        0.5574935323076297
                    ],
                    [
                        "big",
                        0.8241312170566351
                    ],
                    [
                        "crucial",
                        0.8574930637353644
                    ],
                    [
                        "direction",
                        0.864939460691959
                    ],
                    [
                        "guess",
                        0.8732150599953317
                    ],
                    [
                        "important",
                        0.8813369805565736
                    ],
                    [
                        "real",
                        0.8821574350876505
                    ],
                    [
                        "world",
                        0.8821574350876505
                    ],
                    [
                        "circumstance",
                        0.8821574350876505
                    ],
                    [
                        "question",
                        0.8840887936757789
                    ],
                    [
                        "day",
                        0.889880675180453
                    ],
                    [
                        "able",
                        0.8932396395372417
                    ],
                    [
                        "certain",
                        0.8932396395372417
                    ],
                    [
                        "influence",
                        0.8932396395372417
                    ],
                    [
                        "well",
                        0.8939735755717629
                    ],
                    [
                        "difference",
                        0.8939735755717629
                    ],
                    [
                        "generation",
                        0.8950933545556845
                    ],
                    [
                        "story",
                        0.8961196342052077
                    ]
                ],
                "topTopicSimilarity": 0.13333333333333333,
                "sharedTopicScores": [
                    [
                        "time",
                        0.28821520826123714
                    ],
                    [
                        "algorithm",
                        0.3256046063326444
                    ],
                    [
                        "problem",
                        0.5307896907609224
                    ],
                    [
                        "big",
                        0.8241312170566351
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-270": {
            "id": "o9nW0uBqvEo-270",
            "heat": 0.1,
            "start": 270.0,
            "text": " I'll make it short. But I started programming 41 years ago-- no, sorry, 45 years ago-- on punch cards. You don't know what those are unless you've been to a museum on a machine that filled a half a room and that took about five minutes to execute what you can do in a fraction of a second on your phone. Right. This is to tell you're living in a great time, not independent of what's going to happen on November 8th. All right. We'll stay away from those topics as well, won't we? My point is yeah, I tell old stories. I'm an old guy. But you might argue look, computers are getting so much faster. Does it really matter? And I want to say to you-- maybe it's obvious to you-- yes, absolutely it does. Because in conjunction with us getting faster computers, we're increasing the sizes of the problems. The data sets we want to analyze are getting massive. And I'll give you an example. I just pulled this off of Google, of course. In 2014-- I don't have more recent numbers-- Google served-- I think I have that number right-- 30 trillion pages on the web. It's either 30 trillionaire or 30 quadrillion. I can't count that many zeros there. It covered 100 million gigabytes of data. And I suggest to you if you want to find a piece of information on the web, can you write a simple little search algorithm that's going to sequentially go through all the pages and find anything in any reasonable amount of time? Probably not. Right? It's just growing way too fast.",
            "metrics": {
                "relativeDCReadability": 1.0337282497380609,
                "lexicalDiversity": 0.5353535353535354,
                "posComposition": {
                    "PRP": 0.118,
                    "MD": 0.027,
                    "VB": 0.061,
                    "JJ": 0.061,
                    "CC": 0.03,
                    "VBD": 0.02,
                    "VBG": 0.027,
                    "CD": 0.037,
                    "NNS": 0.054,
                    "RB": 0.071,
                    ":": 0.027,
                    "DT": 0.088,
                    "IN": 0.098,
                    "NN": 0.098,
                    "VBP": 0.057,
                    "WP": 0.01,
                    "VBN": 0.003,
                    "TO": 0.037,
                    "WDT": 0.003,
                    "PRP$": 0.007,
                    "VBZ": 0.03,
                    "NNP": 0.02,
                    "RBR": 0.007,
                    "UH": 0.003,
                    "EX": 0.003,
                    "PDT": 0.003
                },
                "syllableRate": 3.308,
                "topicScores": [
                    [
                        "right",
                        0.37686387288170253
                    ],
                    [
                        "Google",
                        0.41516767068899124
                    ],
                    [
                        "fast",
                        0.4309239250054213
                    ],
                    [
                        "year",
                        0.49487430425741114
                    ],
                    [
                        "you--",
                        0.5226407177646926
                    ],
                    [
                        "web",
                        0.5417025296032135
                    ],
                    [
                        "old",
                        0.5482344330592722
                    ],
                    [
                        "time",
                        0.5518185372239263
                    ],
                    [
                        "computer",
                        0.5543281535855322
                    ],
                    [
                        "datum",
                        0.555722286528567
                    ],
                    [
                        "page",
                        0.5690519135633805
                    ],
                    [
                        "November",
                        0.6137793079587368
                    ],
                    [
                        "short",
                        0.740251744654489
                    ],
                    [
                        "card",
                        0.8390376552463681
                    ],
                    [
                        "sorry",
                        0.8502043068105373
                    ],
                    [
                        "phone",
                        0.8545807906106532
                    ],
                    [
                        "punch",
                        0.8603077457892597
                    ],
                    [
                        "8th",
                        0.8717628064473241
                    ],
                    [
                        "museum",
                        0.8824869924273234
                    ],
                    [
                        "machine",
                        0.8824869924273234
                    ],
                    [
                        "room",
                        0.8824869924273234
                    ],
                    [
                        "minute",
                        0.8824869924273234
                    ],
                    [
                        "fraction",
                        0.8824869924273234
                    ],
                    [
                        "second",
                        0.8824869924273234
                    ],
                    [
                        "story",
                        0.8847895613235918
                    ],
                    [
                        "guy",
                        0.8876445780099221
                    ],
                    [
                        "great",
                        0.8892791449040149
                    ],
                    [
                        "independent",
                        0.8892791449040149
                    ],
                    [
                        "course",
                        0.8933694201518008
                    ],
                    [
                        "problem",
                        0.8983287380315133
                    ]
                ],
                "topTopicSimilarity": 0.13333333333333333,
                "sharedTopicScores": [
                    [
                        "right",
                        0.37686387288170253
                    ],
                    [
                        "time",
                        0.5518185372239263
                    ],
                    [
                        "second",
                        0.8824869924273234
                    ],
                    [
                        "problem",
                        0.8983287380315133
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-360": {
            "id": "o9nW0uBqvEo-360",
            "heat": 0.1,
            "start": 360.0,
            "text": " This, by the way, is of course, why Google makes a lot of money off of their map reduced algorithm for searching the web, written by the way, or co-written by an MIT grad and the parent of a current MIT student. So there's a nice hook in there, not that Google pays MIT royalties for that wonderful thing, by the way. All right. Bad jokes aside, searching Google-- ton of time. Searching a genomics data set-- ton of time. The data sets are growing so fast. You're working for the US government. You want to track terrorists using image surveillance from around the world, growing incredibly rapidly. Pick a problem. The data sets grow so quickly that even if the computers speed up, you still need to think about how to come up with efficient ways to solve those problems. So I want to suggest to you while sometimes simple solutions are great, they are the easy ones to rate-- too write. Sorry. At times, you need to be more sophisticated. Therefore, we want to reason about how do we measure efficiency and how do we relate algorithm design choices to the cost that's going to be associated with it? OK. Even when we do that, we've got a choice to make. Because we could talk about both efficiency in terms of time or in terms of space, meaning how much storage do I have inside the computer? And the reason that's relevant is there's actually in many cases a trade-off between those two. And you've actually seen an example, which you may or may not remember. You may recall when we introduced dictionaries,",
            "metrics": {
                "relativeDCReadability": 1.0258343974878188,
                "lexicalDiversity": 0.519298245614035,
                "posComposition": {
                    "DT": 0.098,
                    "IN": 0.13,
                    "NN": 0.137,
                    "VBZ": 0.028,
                    "WRB": 0.025,
                    "NNP": 0.046,
                    "PRP$": 0.004,
                    "VBN": 0.014,
                    "VBG": 0.032,
                    "CC": 0.025,
                    "JJ": 0.046,
                    "EX": 0.007,
                    "RB": 0.067,
                    "NNS": 0.067,
                    ":": 0.011,
                    "VBP": 0.063,
                    "PRP": 0.067,
                    "TO": 0.042,
                    "VB": 0.049,
                    "RP": 0.007,
                    "RBR": 0.004,
                    "WDT": 0.011,
                    "VBD": 0.007,
                    "MD": 0.014,
                    "CD": 0.004
                },
                "syllableRate": 3.4,
                "topicScores": [
                    [
                        "MIT",
                        0.22622456736267113
                    ],
                    [
                        "Google",
                        0.2923699387583595
                    ],
                    [
                        "way",
                        0.3395891043060551
                    ],
                    [
                        "time",
                        0.35651255427231726
                    ],
                    [
                        "write",
                        0.41506465652720076
                    ],
                    [
                        "MIT student",
                        0.5165300300016072
                    ],
                    [
                        "data",
                        0.5335580810503183
                    ],
                    [
                        "problem",
                        0.5339612595151615
                    ],
                    [
                        "ton",
                        0.5346081769180658
                    ],
                    [
                        "set",
                        0.5402251584273077
                    ],
                    [
                        "computer",
                        0.5557147598243367
                    ],
                    [
                        "algorithm",
                        0.5622615027414095
                    ],
                    [
                        "choice",
                        0.5665487454190555
                    ],
                    [
                        "term",
                        0.5666187930916264
                    ],
                    [
                        "MIT grad",
                        0.568503447364095
                    ],
                    [
                        "current MIT",
                        0.568503447364095
                    ],
                    [
                        "efficiency",
                        0.5728163124720526
                    ],
                    [
                        "reason",
                        0.5731784386753324
                    ],
                    [
                        "MIT royalty",
                        0.6349811030853626
                    ],
                    [
                        "course",
                        0.7865371942669994
                    ],
                    [
                        "web",
                        0.7865371942669994
                    ],
                    [
                        "lot",
                        0.8010836409072047
                    ],
                    [
                        "money",
                        0.8010836409072047
                    ],
                    [
                        "map",
                        0.8010836409072047
                    ],
                    [
                        "parent",
                        0.8010836409072047
                    ],
                    [
                        "wonderful",
                        0.8472217574010862
                    ],
                    [
                        "thing",
                        0.8472217574010862
                    ],
                    [
                        "nice",
                        0.8583774529467346
                    ],
                    [
                        "hook",
                        0.8583774529467346
                    ],
                    [
                        "bad",
                        0.8626255164677049
                    ]
                ],
                "topTopicSimilarity": 0.26666666666666666,
                "sharedTopicScores": [
                    [
                        "way",
                        0.3395891043060551
                    ],
                    [
                        "time",
                        0.35651255427231726
                    ],
                    [
                        "problem",
                        0.5339612595151615
                    ],
                    [
                        "set",
                        0.5402251584273077
                    ],
                    [
                        "algorithm",
                        0.5622615027414095
                    ],
                    [
                        "term",
                        0.5666187930916264
                    ],
                    [
                        "thing",
                        0.8472217574010862
                    ],
                    [
                        "bad",
                        0.8626255164677049
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-450": {
            "id": "o9nW0uBqvEo-450",
            "heat": 0.121,
            "start": 450.0,
            "text": " I showed you a variation where you could compute Fibonacci using the dictionary to keep track of intermediate values. And we'll see in next week that it actually tremendously reduces the time complexity. That's called a trade-off, in the sense that sometimes I can pre-compute portions of the answer, store them away, so that when I've tried to a bigger version of the answer I can just look up those portions. So there's going to be a trade-off here. We're going to focus, for purposes of this lecture and the next one, on time efficiency. How much time is it going to take our algorithms to solve a problem? OK. What are the challenges in doing that before we look at the actual tools? And in fact, this is going to lead into the tools. The first one is even if I've decided on an algorithm, there are lots of ways to implement that. A while loop and a for loop might have slightly different behavior. I could choose to do it with temporary variables or using direct substitution. There's lots of little choices. So an algorithm could be implemented many different ways. How do I measure the actual efficiency of the algorithm? Second one is I might, for a given problem, have different choices of algorithm. A recursive solution versus an iterative one. Using divide and conquer versus straightforward search. We're going to see some examples of that. So I've got to somehow separate those pieces out. And in particular, I'd like to separate out the choice of implementation from the choice of algorithm.",
            "metrics": {
                "relativeDCReadability": 1.1027206274707808,
                "lexicalDiversity": 0.49818181818181817,
                "posComposition": {
                    "PRP": 0.073,
                    "VBD": 0.007,
                    "DT": 0.109,
                    "NN": 0.145,
                    "WRB": 0.015,
                    "MD": 0.033,
                    "VB": 0.073,
                    "NNP": 0.025,
                    "VBG": 0.029,
                    "TO": 0.044,
                    "IN": 0.127,
                    "JJ": 0.073,
                    "NNS": 0.058,
                    "CC": 0.025,
                    "RB": 0.029,
                    "VBZ": 0.029,
                    "WDT": 0.004,
                    "VBN": 0.022,
                    "RP": 0.015,
                    "VBP": 0.04,
                    "JJR": 0.004,
                    "EX": 0.011,
                    "PRP$": 0.004,
                    "WP": 0.004,
                    "CD": 0.004
                },
                "syllableRate": 3.525,
                "topicScores": [
                    [
                        "algorithm",
                        0.30534434044898584
                    ],
                    [
                        "choice",
                        0.3739407747534483
                    ],
                    [
                        "time",
                        0.42713964927730835
                    ],
                    [
                        "different",
                        0.4378282628070973
                    ],
                    [
                        "trade",
                        0.5174596619042329
                    ],
                    [
                        "Fibonacci",
                        0.5225334294419114
                    ],
                    [
                        "tool",
                        0.5235603214720236
                    ],
                    [
                        "answer",
                        0.5311881936335873
                    ],
                    [
                        "portion",
                        0.5373642645037817
                    ],
                    [
                        "problem",
                        0.5484389797266185
                    ],
                    [
                        "lot",
                        0.5491414174764835
                    ],
                    [
                        "actual",
                        0.559303873259749
                    ],
                    [
                        "efficiency",
                        0.5595998748640209
                    ],
                    [
                        "way",
                        0.5621317138919507
                    ],
                    [
                        "loop",
                        0.5678879480077957
                    ],
                    [
                        "value",
                        0.8238035234634218
                    ],
                    [
                        "intermediate",
                        0.848678779684355
                    ],
                    [
                        "complexity",
                        0.8503491952403406
                    ],
                    [
                        "variation",
                        0.8592887541205011
                    ],
                    [
                        "dictionary",
                        0.8592887541205011
                    ],
                    [
                        "track",
                        0.8592887541205011
                    ],
                    [
                        "week",
                        0.8812588263087769
                    ],
                    [
                        "sense",
                        0.8932436734502491
                    ],
                    [
                        "big",
                        0.8932436734502491
                    ],
                    [
                        "version",
                        0.8932436734502491
                    ],
                    [
                        "purpose",
                        0.89887954859979
                    ],
                    [
                        "behavior",
                        0.9001798689591027
                    ],
                    [
                        "substitution",
                        0.9018847536077987
                    ],
                    [
                        "lecture",
                        0.9063580429021133
                    ],
                    [
                        "second",
                        0.9070338699490047
                    ]
                ],
                "topTopicSimilarity": 0.23333333333333334,
                "sharedTopicScores": [
                    [
                        "algorithm",
                        0.30534434044898584
                    ],
                    [
                        "time",
                        0.42713964927730835
                    ],
                    [
                        "problem",
                        0.5484389797266185
                    ],
                    [
                        "way",
                        0.5621317138919507
                    ],
                    [
                        "loop",
                        0.5678879480077957
                    ],
                    [
                        "big",
                        0.8932436734502491
                    ],
                    [
                        "second",
                        0.9070338699490047
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-540": {
            "id": "o9nW0uBqvEo-540",
            "heat": 0.1,
            "start": 540.0,
            "text": " I want to measure how hard is the algorithm, not can I come up with a slightly more efficient way of coming up with an implementation. So here are three ways I might do it. And we're going to look at each one of them very briefly. The obvious one is we could be scientists-- time it. Write the code, run a bunch of test case, run a timer, use that to try and come up with a way of estimating efficiency. We'll see some challenges with that. Slightly more abstractly, we could count operations. We could say here are the set of fundamental operations-- mathematical operations, comparisons, setting values, retrieving values. And simply say how many of those operations do I use in my algorithm as a function of the size of the input? And that could be used to give us a sense of efficiency. We're going to see both of those are flawed somewhat more in the first case than the second one. And so we're going to abstract that second one to a more abstract notion of something we call an order of growth. And I'll come back to that in a couple of minutes. This is the one we're going to focus on. It's one that computer scientists use. It leads to what we call complexity classes. So order of growth or big O notation is a way of abstractly describing the behavior of an algorithm, and especially the equivalences of different algorithms. But let's look at those. Timing. Python provides a timer for you. You could import the time module. And then you can call, as you can see right down here.",
            "metrics": {
                "relativeDCReadability": 1.0384307393926342,
                "lexicalDiversity": 0.4826388888888889,
                "posComposition": {
                    "PRP": 0.087,
                    "VBP": 0.045,
                    "TO": 0.035,
                    "VB": 0.076,
                    "WRB": 0.007,
                    "JJ": 0.042,
                    "VBZ": 0.024,
                    "DT": 0.122,
                    "NN": 0.139,
                    "RB": 0.062,
                    "MD": 0.038,
                    "RP": 0.01,
                    "IN": 0.111,
                    "RBR": 0.014,
                    "VBG": 0.031,
                    "CD": 0.021,
                    "NNS": 0.052,
                    "CC": 0.035,
                    ":": 0.007,
                    "NNP": 0.017,
                    "WDT": 0.007,
                    "PRP$": 0.003,
                    "VBN": 0.007,
                    "WP": 0.003,
                    "POS": 0.003
                },
                "syllableRate": 3.383,
                "topicScores": [
                    [
                        "way",
                        0.35911022650700014
                    ],
                    [
                        "algorithm",
                        0.371755716299267
                    ],
                    [
                        "operation",
                        0.430045557242765
                    ],
                    [
                        "efficiency",
                        0.5170398524484937
                    ],
                    [
                        "value",
                        0.5418011877187305
                    ],
                    [
                        "growth",
                        0.5467233388306634
                    ],
                    [
                        "order",
                        0.5517139877932792
                    ],
                    [
                        "second",
                        0.5541260043990489
                    ],
                    [
                        "case",
                        0.5547851007146398
                    ],
                    [
                        "timer",
                        0.5562074593901656
                    ],
                    [
                        "set",
                        0.5562747397900437
                    ],
                    [
                        "abstract",
                        0.5702809304705888
                    ],
                    [
                        "implementation",
                        0.7587141149886122
                    ],
                    [
                        "hard",
                        0.7991850433598997
                    ],
                    [
                        "obvious",
                        0.8838537002913601
                    ],
                    [
                        "timing",
                        0.885526167095383
                    ],
                    [
                        "scientists--",
                        0.8913806134240138
                    ],
                    [
                        "code",
                        0.8921383991161232
                    ],
                    [
                        "test",
                        0.8921383991161232
                    ],
                    [
                        "input",
                        0.8944434294871879
                    ],
                    [
                        "comparison",
                        0.8989282899318436
                    ],
                    [
                        "bunch",
                        0.8991896554867241
                    ],
                    [
                        "minute",
                        0.9029509572319818
                    ],
                    [
                        "challenge",
                        0.9046994307586972
                    ],
                    [
                        "mathematical",
                        0.9058354962558045
                    ],
                    [
                        "class",
                        0.9069674013286543
                    ],
                    [
                        "Python",
                        0.9107716628768799
                    ],
                    [
                        "module",
                        0.9115411181489669
                    ],
                    [
                        "fundamental",
                        0.9120795738741876
                    ],
                    [
                        "function",
                        0.9147077255239031
                    ]
                ],
                "topTopicSimilarity": 0.3,
                "sharedTopicScores": [
                    [
                        "way",
                        0.35911022650700014
                    ],
                    [
                        "algorithm",
                        0.371755716299267
                    ],
                    [
                        "operation",
                        0.430045557242765
                    ],
                    [
                        "growth",
                        0.5467233388306634
                    ],
                    [
                        "order",
                        0.5517139877932792
                    ],
                    [
                        "second",
                        0.5541260043990489
                    ],
                    [
                        "case",
                        0.5547851007146398
                    ],
                    [
                        "set",
                        0.5562747397900437
                    ],
                    [
                        "input",
                        0.8944434294871879
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-630": {
            "id": "o9nW0uBqvEo-630",
            "heat": 0.1,
            "start": 630.0,
            "text": " I might have defined a really simple little function-- convert Celsius to Fahrenheit. And in particular, I could invoke the clock method from the time module. And what that does is it gives me a number as the number of some fractions of a second currently there. Having done that I could call the function. And then I could call the clock again, and take the difference to tell me how much time it took to execute this. It's going to be a tiny amount of time. And then I could certainly print out some statistics. I could do that over a large number of runs-- different sizes of the input-- and come up with a sense of how much time does it take. Here's the problem with that. Not a bad idea. But again, my goal is to evaluate algorithms. Do different algorithms have different amounts of time associated with them? The good news is is that if I measure running time, it will certainly vary as the algorithm changes. Just what I want to measure. Sorry. But one of the problems is that it will also vary as a function of the implementation. Right? If I use a loop that's got a couple of more steps inside of it in one algorithm than another, it's going to change the time. And I don't really care about that difference. So I'm confounding or conflating implementation influence on time with algorithm influence on time. Not so good. Worse, timing will depend on the computer. My Mac here is pretty old. Well, at least for computer versions. It's about five years old. I'm sure some of you have much more recent Macs",
            "metrics": {
                "relativeDCReadability": 0.9885518006050381,
                "lexicalDiversity": 0.4794520547945205,
                "posComposition": {
                    "PRP": 0.086,
                    "MD": 0.031,
                    "VB": 0.065,
                    "VBN": 0.01,
                    "DT": 0.11,
                    "RB": 0.062,
                    "JJ": 0.072,
                    "NN": 0.134,
                    ":": 0.01,
                    "NNP": 0.034,
                    "TO": 0.024,
                    "CC": 0.034,
                    "IN": 0.13,
                    "WP": 0.007,
                    "VBZ": 0.051,
                    "NNS": 0.038,
                    "EX": 0.003,
                    "VBG": 0.021,
                    "WRB": 0.007,
                    "VBD": 0.007,
                    "RP": 0.007,
                    "PRP$": 0.003,
                    "VBP": 0.027,
                    "CD": 0.01,
                    "WDT": 0.003,
                    "JJR": 0.007,
                    "JJS": 0.003,
                    "RBR": 0.003
                },
                "syllableRate": 3.433,
                "topicScores": [
                    [
                        "time",
                        0.24521908910445409
                    ],
                    [
                        "algorithm",
                        0.34075323813730307
                    ],
                    [
                        "Fahrenheit",
                        0.3793140139300337
                    ],
                    [
                        "Celsius",
                        0.4100418684637105
                    ],
                    [
                        "number",
                        0.4215032033428858
                    ],
                    [
                        "different",
                        0.43832716824902435
                    ],
                    [
                        "clock",
                        0.5258680709780007
                    ],
                    [
                        "old",
                        0.5505947608209293
                    ],
                    [
                        "bad",
                        0.5542271134186396
                    ],
                    [
                        "problem",
                        0.5547313612555956
                    ],
                    [
                        "function",
                        0.5551089639887244
                    ],
                    [
                        "good",
                        0.5592273385358523
                    ],
                    [
                        "change",
                        0.5618391148946077
                    ],
                    [
                        "computer",
                        0.5629401057933895
                    ],
                    [
                        "implementation",
                        0.563762321280972
                    ],
                    [
                        "influence",
                        0.5659387191791525
                    ],
                    [
                        "Macs",
                        0.6756865660763569
                    ],
                    [
                        "simple",
                        0.803116701359423
                    ],
                    [
                        "little",
                        0.803116701359423
                    ],
                    [
                        "module",
                        0.8314989261132651
                    ],
                    [
                        "particular",
                        0.8512582322865854
                    ],
                    [
                        "method",
                        0.859927322984768
                    ],
                    [
                        "fraction",
                        0.8818114051246788
                    ],
                    [
                        "second",
                        0.8818114051246788
                    ],
                    [
                        "right",
                        0.889603306356608
                    ],
                    [
                        "statistic",
                        0.8914638748156218
                    ],
                    [
                        "idea",
                        0.9008868049494736
                    ],
                    [
                        "tiny",
                        0.9068061709544969
                    ],
                    [
                        "large",
                        0.9140386683188124
                    ],
                    [
                        "runs--",
                        0.9140386683188124
                    ]
                ],
                "topTopicSimilarity": 0.23333333333333334,
                "sharedTopicScores": [
                    [
                        "time",
                        0.24521908910445409
                    ],
                    [
                        "algorithm",
                        0.34075323813730307
                    ],
                    [
                        "number",
                        0.4215032033428858
                    ],
                    [
                        "bad",
                        0.5542271134186396
                    ],
                    [
                        "problem",
                        0.5547313612555956
                    ],
                    [
                        "second",
                        0.8818114051246788
                    ],
                    [
                        "right",
                        0.889603306356608
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-720": {
            "id": "o9nW0uBqvEo-720",
            "heat": 0.1,
            "start": 720.0,
            "text": " or other kinds of machines. Your speeds may be different from mine. That's not going to help me in trying to measure this. And even if I could measure it on small sized problems, it doesn't necessarily predict what happens when I go to a really large sized problems, because of issues like the time it takes to get things out of memory and bring them back in to the computer. So what it says is that timing does vary based on what I'd like to measure, but it varies on a lot of other factors. And it's really not all that valuable. OK. Got rid of the first one. Let's abstract that. By abstract, I'm going to make the following assumption. I'm going to identify a set of primitive operations. Kind of get to say what they are, but the obvious one is to say what does the machine do for me automatically. That would be things like arithmetic or mathematical operations, multiplication, division, subtraction, comparisons, something equal to another thing, something greater than, something less than, assignments, set a name to a value, and retrieval from memory. I'm going to assume that all of these operations take about the same amount of time inside my machine. Nice thing here is then it doesn't matter which machine I'm using. I'm measuring how long does the algorithm take by counting how many operations of this type are done inside of the algorithm. And I'm going to use that count to come up with a number of operations executed",
            "metrics": {
                "relativeDCReadability": 0.9529972744431138,
                "lexicalDiversity": 0.5074074074074074,
                "posComposition": {
                    "CC": 0.033,
                    "JJ": 0.056,
                    "NNS": 0.067,
                    "IN": 0.141,
                    "PRP$": 0.007,
                    "MD": 0.015,
                    "VB": 0.07,
                    "NN": 0.122,
                    "DT": 0.085,
                    "VBZ": 0.052,
                    "RB": 0.048,
                    "VBG": 0.037,
                    "TO": 0.056,
                    "PRP": 0.074,
                    "VBN": 0.015,
                    "WP": 0.019,
                    "WRB": 0.011,
                    "VBP": 0.044,
                    "PDT": 0.004,
                    "NNP": 0.019,
                    "CD": 0.004,
                    "POS": 0.004,
                    "JJR": 0.007,
                    "WDT": 0.004,
                    "RP": 0.004,
                    "VBD": 0.004
                },
                "syllableRate": 3.292,
                "topicScores": [
                    [
                        "operation",
                        0.346681532926427
                    ],
                    [
                        "machine",
                        0.3858729751899108
                    ],
                    [
                        "thing",
                        0.38935447829564995
                    ],
                    [
                        "kind",
                        0.547199777236969
                    ],
                    [
                        "sized",
                        0.5482322239729973
                    ],
                    [
                        "problem",
                        0.5511507360423346
                    ],
                    [
                        "abstract",
                        0.5617367201942387
                    ],
                    [
                        "memory",
                        0.5648838091510014
                    ],
                    [
                        "algorithm",
                        0.5718566838254399
                    ],
                    [
                        "set",
                        0.5734666072409506
                    ],
                    [
                        "time",
                        0.5738598708426491
                    ],
                    [
                        "count",
                        0.5802972030982395
                    ],
                    [
                        "speed",
                        0.881850599303646
                    ],
                    [
                        "computer",
                        0.8821700589870116
                    ],
                    [
                        "factor",
                        0.8884946866735399
                    ],
                    [
                        "different",
                        0.8912053540026755
                    ],
                    [
                        "valuable",
                        0.8932512199135674
                    ],
                    [
                        "assumption",
                        0.9046723641131624
                    ],
                    [
                        "small",
                        0.90940152925894
                    ],
                    [
                        "large",
                        0.90940152925894
                    ],
                    [
                        "issue",
                        0.90940152925894
                    ],
                    [
                        "nice",
                        0.9119445184336794
                    ],
                    [
                        "timing",
                        0.9144063041499606
                    ],
                    [
                        "lot",
                        0.9144063041499606
                    ],
                    [
                        "multiplication",
                        0.9176342689032948
                    ],
                    [
                        "division",
                        0.9176342689032948
                    ],
                    [
                        "subtraction",
                        0.9176342689032948
                    ],
                    [
                        "comparison",
                        0.9176342689032948
                    ],
                    [
                        "great",
                        0.9176342689032948
                    ],
                    [
                        "assignment",
                        0.9176342689032948
                    ]
                ],
                "topTopicSimilarity": 0.23333333333333334,
                "sharedTopicScores": [
                    [
                        "operation",
                        0.346681532926427
                    ],
                    [
                        "thing",
                        0.38935447829564995
                    ],
                    [
                        "problem",
                        0.5511507360423346
                    ],
                    [
                        "algorithm",
                        0.5718566838254399
                    ],
                    [
                        "set",
                        0.5734666072409506
                    ],
                    [
                        "time",
                        0.5738598708426491
                    ],
                    [
                        "count",
                        0.5802972030982395
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-810": {
            "id": "o9nW0uBqvEo-810",
            "heat": 0.102,
            "start": 810.0,
            "text": " as a function of the size of the input. And if I'm lucky, that'll give me a sense of what's the efficiency of the algorithm. So this one's pretty boring. It's got three steps. Right? A multiplication, a division, and an addition-- four, if you count the return. But if I had a little thing here that added up the integers from 0 up to x, I've got a little loop inside here. And I could count operations. So in this case, it's just, as I said, three operations. Here, I've got one operation. I'm doing an assignment. And then inside here, in essence, there's one operation to set i to a value from that iterator. Initially, it's going to be 0. And then it's going to be 1. And you get the idea. And here, that's actually two operations. It's nice Python shorthand. But what is that operation? It says take the value of total and the value of i, add them together-- it's one operation-- and then set that value, or rather, set the name total to that new value. So a second operation. So you can see in here, I've got three operations. And what else do I have? Well, I'm going to go through this loop x times. Right? I do it for i equals 0. And therefore, i equal 1, and so on. So I'm going to run through that loop x times. And if I put that together, I get a nice little expression. 1 plus 3x. Actually, I probably cheated here. I shouldn't say cheated. I probably should have counted the return",
            "metrics": {
                "relativeDCReadability": 1.0921114001304937,
                "lexicalDiversity": 0.49140893470790376,
                "posComposition": {
                    "IN": 0.089,
                    "DT": 0.103,
                    "NN": 0.124,
                    "CC": 0.058,
                    "PRP": 0.103,
                    "VBP": 0.052,
                    "JJ": 0.048,
                    "MD": 0.017,
                    "VB": 0.048,
                    "WP": 0.01,
                    "VBZ": 0.038,
                    "RB": 0.1,
                    "POS": 0.003,
                    "VBG": 0.021,
                    "VBD": 0.027,
                    "CD": 0.052,
                    "NNS": 0.031,
                    "NNP": 0.024,
                    ":": 0.01,
                    "RP": 0.003,
                    "TO": 0.027,
                    "EX": 0.003,
                    "VBN": 0.007
                },
                "syllableRate": 3.3,
                "topicScores": [
                    [
                        "operation",
                        0.2686008561774964
                    ],
                    [
                        "value",
                        0.34818452947825673
                    ],
                    [
                        "x",
                        0.4462432521047624
                    ],
                    [
                        "loop",
                        0.4509131015346093
                    ],
                    [
                        "little",
                        0.45182828199014013
                    ],
                    [
                        "right",
                        0.5379065950781491
                    ],
                    [
                        "return",
                        0.5572273815888055
                    ],
                    [
                        "time",
                        0.5605584857847209
                    ],
                    [
                        "nice",
                        0.5865097025840162
                    ],
                    [
                        "total",
                        0.5889666882021043
                    ],
                    [
                        "Python",
                        0.6831519699538889
                    ],
                    [
                        "input",
                        0.824744628509639
                    ],
                    [
                        "function",
                        0.8506171893512305
                    ],
                    [
                        "size",
                        0.8506171893512305
                    ],
                    [
                        "algorithm",
                        0.8762759331482238
                    ],
                    [
                        "lucky",
                        0.8896041707366893
                    ],
                    [
                        "sense",
                        0.8955049057543268
                    ],
                    [
                        "efficiency",
                        0.8955049057543268
                    ],
                    [
                        "boring",
                        0.8959149695871023
                    ],
                    [
                        "step",
                        0.9065773544119565
                    ],
                    [
                        "multiplication",
                        0.9229960054316964
                    ],
                    [
                        "division",
                        0.9229960054316964
                    ],
                    [
                        "addition--",
                        0.9273895602575055
                    ],
                    [
                        "assignment",
                        0.9304087154505131
                    ],
                    [
                        "iterator",
                        0.9317902102024613
                    ],
                    [
                        "thing",
                        0.93448653576012
                    ],
                    [
                        "integer",
                        0.93448653576012
                    ],
                    [
                        "idea",
                        0.935005923569354
                    ],
                    [
                        "case",
                        0.9351856919474115
                    ],
                    [
                        "essence",
                        0.9358420823094322
                    ]
                ],
                "topTopicSimilarity": 0.3333333333333333,
                "sharedTopicScores": [
                    [
                        "operation",
                        0.2686008561774964
                    ],
                    [
                        "loop",
                        0.4509131015346093
                    ],
                    [
                        "right",
                        0.5379065950781491
                    ],
                    [
                        "time",
                        0.5605584857847209
                    ],
                    [
                        "input",
                        0.824744628509639
                    ],
                    [
                        "size",
                        0.8506171893512305
                    ],
                    [
                        "algorithm",
                        0.8762759331482238
                    ],
                    [
                        "step",
                        0.9065773544119565
                    ],
                    [
                        "thing",
                        0.93448653576012
                    ],
                    [
                        "case",
                        0.9351856919474115
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-900": {
            "id": "o9nW0uBqvEo-900",
            "heat": 0.1,
            "start": 900.0,
            "text": " as one more operation, so that would be 1 plus 3x plus 1, or 3x plus 2 operations. Why should you care? It's a little closer to what I'd like. Because now I've got an expression that tells me something about how much time is this going to take as I change the size of the problem. If x is equal to 10, it's going to take me 32 operations. If x is equal to 100, 302 operations. If x is equal to 1,000, 3,002 operations. And if I wanted the actual time, I'd just multiply that by whatever that constant amount of time is for each operation. I've got a good estimate of that. Sounds pretty good. Not quite what we want, but it's close. So if I was counting operations, what could I say about it? First of all, it certainly depends on the algorithm. That's great. Number of operations is going to directly relate to the algorithm I'm trying to measure, which is what I'm after. Unfortunately, it still depends a little bit on the implementation. Let me show you what I mean by that by backing up for a second. Suppose I were to change this for loop to a while loop. I'll set i equal to 0 outside of the loop. And then while i is less than x plus 1, I'll do the things inside of that. That would actually add one more operation inside the loop, because I both have to set the value of i and I have to test the value of i,",
            "metrics": {
                "relativeDCReadability": 1.0795248410061065,
                "lexicalDiversity": 0.46715328467153283,
                "posComposition": {
                    "IN": 0.135,
                    "CD": 0.055,
                    "JJR": 0.011,
                    "NN": 0.099,
                    "DT": 0.099,
                    "MD": 0.029,
                    "VB": 0.058,
                    "CC": 0.033,
                    "NNS": 0.026,
                    "WRB": 0.007,
                    "PRP": 0.102,
                    "VBZ": 0.055,
                    "JJ": 0.055,
                    "TO": 0.051,
                    "WP": 0.018,
                    "RB": 0.044,
                    "VBP": 0.036,
                    "VBD": 0.015,
                    "WDT": 0.015,
                    "VBG": 0.022,
                    "NNP": 0.026,
                    "VBN": 0.004,
                    "RP": 0.004,
                    "RBR": 0.004
                },
                "syllableRate": 3.05,
                "topicScores": [
                    [
                        "operation",
                        0.25370231565778995
                    ],
                    [
                        "x",
                        0.34499260130173665
                    ],
                    [
                        "equal",
                        0.3523773675267671
                    ],
                    [
                        "loop",
                        0.37603653087654887
                    ],
                    [
                        "time",
                        0.4328031381007983
                    ],
                    [
                        "3x",
                        0.4692429701045989
                    ],
                    [
                        "close",
                        0.5499193948394019
                    ],
                    [
                        "good",
                        0.5559134099684216
                    ],
                    [
                        "algorithm",
                        0.5561049672147992
                    ],
                    [
                        "little",
                        0.5578786548070861
                    ],
                    [
                        "value",
                        0.5636388806791265
                    ],
                    [
                        "problem",
                        0.8740157198452203
                    ],
                    [
                        "expression",
                        0.8961667084472377
                    ],
                    [
                        "size",
                        0.8961667084472377
                    ],
                    [
                        "great",
                        0.9101258912743452
                    ],
                    [
                        "actual",
                        0.9104816931351302
                    ],
                    [
                        "number",
                        0.9113842805006579
                    ],
                    [
                        "implementation",
                        0.9125154045328495
                    ],
                    [
                        "second",
                        0.9135394301019663
                    ],
                    [
                        "constant",
                        0.9160395189199534
                    ],
                    [
                        "estimate",
                        0.9185598678753419
                    ],
                    [
                        "bit",
                        0.928451381864962
                    ],
                    [
                        "thing",
                        0.931443532734071
                    ],
                    [
                        "actual time",
                        3.719622962053618
                    ],
                    [
                        "good estimate",
                        4.245072129878118
                    ],
                    [
                        "little bit",
                        4.585102653218843
                    ]
                ],
                "topTopicSimilarity": 0.34615384615384615,
                "sharedTopicScores": [
                    [
                        "operation",
                        0.25370231565778995
                    ],
                    [
                        "loop",
                        0.37603653087654887
                    ],
                    [
                        "time",
                        0.4328031381007983
                    ],
                    [
                        "algorithm",
                        0.5561049672147992
                    ],
                    [
                        "problem",
                        0.8740157198452203
                    ],
                    [
                        "size",
                        0.8961667084472377
                    ],
                    [
                        "number",
                        0.9113842805006579
                    ],
                    [
                        "second",
                        0.9135394301019663
                    ],
                    [
                        "thing",
                        0.931443532734071
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-990": {
            "id": "o9nW0uBqvEo-990",
            "heat": 0.314,
            "start": 990.0,
            "text": " as well as doing the other operations down here. And so rather than getting 3x plus 1, I would get 4x plus 1. Eh. As the government says, what's the difference between three and for when you're talking about really big numbers? Problem is in terms of counting, it does depend. And I want to get rid of that in a second, so it still depends a little bit on the implementation. I remind you, I wanted to measure impact of the algorithm. But the other good news is the count is independent of which computer I run on. As long as all my computers come with the same set of basic operations, I don't care what the time of my computer is versus yours to do those operations on measuring how much time it would take. And I should say, by the way, one of the reasons I want to do it is last to know is it going to take 37.42 femtoseconds or not, but rather to say if this algorithm has a particular behavior, if I double the size of the input, does that double the amount of time I need? Does that quadruple the amount of time I need? Does it increase it by a factor of 10? And here, what matters isn't the speed of the computer. It's the number of operations. The last one I'm not going to really worry about. But we'd have to really think about what are the operations we want to count. I made an assumption that the amount of time it takes to retrieve something from memory is the same as the amount of time it takes to do a numerical computation. That may not be accurate. But this one could probably be dealt with by just agreeing on what are the common operations",
            "metrics": {
                "relativeDCReadability": 1.0345387000477677,
                "lexicalDiversity": 0.4326923076923077,
                "posComposition": {
                    "RB": 0.064,
                    "IN": 0.138,
                    "VBG": 0.026,
                    "DT": 0.112,
                    "JJ": 0.064,
                    "NNS": 0.042,
                    "CC": 0.038,
                    "CD": 0.032,
                    "PRP": 0.087,
                    "MD": 0.019,
                    "VB": 0.074,
                    "NNP": 0.006,
                    "NN": 0.109,
                    "VBZ": 0.061,
                    "WP": 0.01,
                    "WRB": 0.006,
                    "VBP": 0.045,
                    "TO": 0.038,
                    "VBD": 0.006,
                    "WDT": 0.013,
                    "PRP$": 0.006,
                    "VBN": 0.003
                },
                "syllableRate": 3.558,
                "topicScores": [
                    [
                        "time",
                        0.2823974005112374
                    ],
                    [
                        "operation",
                        0.29602893671977437
                    ],
                    [
                        "computer",
                        0.35804996456453647
                    ],
                    [
                        "algorithm",
                        0.5430685376619637
                    ],
                    [
                        "number",
                        0.5439606189428129
                    ],
                    [
                        "count",
                        0.5482037712981841
                    ],
                    [
                        "3x",
                        0.8354940032701073
                    ],
                    [
                        "problem",
                        0.8743037947507912
                    ],
                    [
                        "4x",
                        0.8760671026510471
                    ],
                    [
                        "implementation",
                        0.8786123734358704
                    ],
                    [
                        "government",
                        0.8842743124442927
                    ],
                    [
                        "big",
                        0.8842743124442927
                    ],
                    [
                        "counting",
                        0.8891884230253347
                    ],
                    [
                        "difference",
                        0.891034108618148
                    ],
                    [
                        "second",
                        0.8930492031573215
                    ],
                    [
                        "term",
                        0.8956950334358466
                    ],
                    [
                        "computation",
                        0.8992142530244563
                    ],
                    [
                        "little",
                        0.8993547763669058
                    ],
                    [
                        "bit",
                        0.8993547763669058
                    ],
                    [
                        "accurate",
                        0.90013445409701
                    ],
                    [
                        "basic",
                        0.9009960711686159
                    ],
                    [
                        "impact",
                        0.9023225671264522
                    ],
                    [
                        "way",
                        0.9029005167793561
                    ],
                    [
                        "particular",
                        0.9029005167793561
                    ],
                    [
                        "behavior",
                        0.9029005167793561
                    ],
                    [
                        "input",
                        0.9029005167793561
                    ],
                    [
                        "good",
                        0.9047898541525645
                    ],
                    [
                        "news",
                        0.9047898541525645
                    ],
                    [
                        "independent",
                        0.9047898541525645
                    ],
                    [
                        "set",
                        0.9068819687191522
                    ]
                ],
                "topTopicSimilarity": 0.4,
                "sharedTopicScores": [
                    [
                        "time",
                        0.2823974005112374
                    ],
                    [
                        "operation",
                        0.29602893671977437
                    ],
                    [
                        "algorithm",
                        0.5430685376619637
                    ],
                    [
                        "number",
                        0.5439606189428129
                    ],
                    [
                        "count",
                        0.5482037712981841
                    ],
                    [
                        "problem",
                        0.8743037947507912
                    ],
                    [
                        "big",
                        0.8842743124442927
                    ],
                    [
                        "second",
                        0.8930492031573215
                    ],
                    [
                        "term",
                        0.8956950334358466
                    ],
                    [
                        "way",
                        0.9029005167793561
                    ],
                    [
                        "input",
                        0.9029005167793561
                    ],
                    [
                        "set",
                        0.9068819687191522
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-1080": {
            "id": "o9nW0uBqvEo-1080",
            "heat": 0.254,
            "start": 1080.0,
            "text": " and then doing the measurement. So this is closer. Excuse me. And certainly, that count varies for different inputs. And we can use it to come up with a relationship between the inputs and the count. And for the most part, it reflects the algorithm, not the implementation. But it's still got that last piece left there, so I need to get rid of the last piece. So what can we say here? Timing and counting do evaluate or reflect implementations? I don't want that. Timing also evaluates the machines. What I want to do is just evaluate the algorithm. And especially, I want to understand how does it scale? I'm going to say what I said a few minutes ago again. If I were to take an algorithm, and I say I know what its complexity is, my question is if I double the size of the input, what does that say to the speed? Because that's going to tell me something about the algorithm. I want to say what happens when I scale it? And in particular, I want to relate that to the size of the input. So here's what we're going to do. We're going to introduce orders of growth. It's a wonderful tool in computer science. And what we're going to focus on is that idea of counting operations. But we're not going to worry about small variations, whether it's three or four steps inside of the loop. We're going to show that that doesn't matter. And if you think about my statement of does it double in terms of size or speed or not-- or I'm sorry-- time or not, whether it goes from three to six or four to eight, it's still a doubling. So I don't care about those pieces inside. I'm going to focus on what happens when the size of the problem gets arbitrarily large.",
            "metrics": {
                "relativeDCReadability": 0.9552892937591176,
                "lexicalDiversity": 0.44011976047904194,
                "posComposition": {
                    "CC": 0.06,
                    "RB": 0.063,
                    "VBG": 0.036,
                    "DT": 0.087,
                    "NN": 0.096,
                    "IN": 0.117,
                    "VBZ": 0.063,
                    "RBR": 0.003,
                    "PRP": 0.108,
                    "NNS": 0.036,
                    "JJ": 0.03,
                    "MD": 0.006,
                    "VB": 0.078,
                    "TO": 0.057,
                    "RP": 0.003,
                    "JJS": 0.003,
                    "VBD": 0.012,
                    "EX": 0.003,
                    "VBP": 0.063,
                    "WP": 0.027,
                    "NNP": 0.009,
                    "WRB": 0.009,
                    "PRP$": 0.009,
                    "CD": 0.018,
                    ":": 0.006
                },
                "syllableRate": 3.8,
                "topicScores": [
                    [
                        "input",
                        0.3656390552427726
                    ],
                    [
                        "algorithm",
                        0.3689476338314472
                    ],
                    [
                        "size",
                        0.3745796947263135
                    ],
                    [
                        "count",
                        0.4395085591214749
                    ],
                    [
                        "piece",
                        0.44379863705441075
                    ],
                    [
                        "implementation",
                        0.5421785810882809
                    ],
                    [
                        "timing",
                        0.5472938376491461
                    ],
                    [
                        "speed",
                        0.5728273257532618
                    ],
                    [
                        "measurement",
                        0.8467902578389904
                    ],
                    [
                        "close",
                        0.8704175088952681
                    ],
                    [
                        "different",
                        0.9056647292655923
                    ],
                    [
                        "machine",
                        0.9142397761210053
                    ],
                    [
                        "relationship",
                        0.9165878020358174
                    ],
                    [
                        "growth",
                        0.9232823926242882
                    ],
                    [
                        "science",
                        0.9239099417738696
                    ],
                    [
                        "operation",
                        0.9244946352828498
                    ],
                    [
                        "loop",
                        0.9250412019973479
                    ],
                    [
                        "not--",
                        0.9260355030741204
                    ],
                    [
                        "doubling",
                        0.9264896818930086
                    ],
                    [
                        "large",
                        0.9273251296807179
                    ],
                    [
                        "counting",
                        0.9273805839052669
                    ],
                    [
                        "complexity",
                        0.9299735852949705
                    ],
                    [
                        "question",
                        0.9299735852949705
                    ],
                    [
                        "particular",
                        0.9322657299272353
                    ],
                    [
                        "minute",
                        0.9336979437771329
                    ],
                    [
                        "computer",
                        0.9340491361888246
                    ],
                    [
                        "small",
                        0.9350402518044443
                    ],
                    [
                        "variation",
                        0.9350402518044443
                    ],
                    [
                        "order",
                        0.9378745963397136
                    ],
                    [
                        "wonderful",
                        0.93839074641525
                    ]
                ],
                "topTopicSimilarity": 0.26666666666666666,
                "sharedTopicScores": [
                    [
                        "input",
                        0.3656390552427726
                    ],
                    [
                        "algorithm",
                        0.3689476338314472
                    ],
                    [
                        "size",
                        0.3745796947263135
                    ],
                    [
                        "count",
                        0.4395085591214749
                    ],
                    [
                        "growth",
                        0.9232823926242882
                    ],
                    [
                        "operation",
                        0.9244946352828498
                    ],
                    [
                        "loop",
                        0.9250412019973479
                    ],
                    [
                        "order",
                        0.9378745963397136
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-1170": {
            "id": "o9nW0uBqvEo-1170",
            "heat": 0.1,
            "start": 1170.0,
            "text": " I don't care about counting things from 0 up to x when x is 10 or 20. What happens when it's a million? 100 million? What's the asymptotic behavior of this? And I want to relate that time needed against the size of the input, so I can make that comparison I suggested. OK. So to do that, we've got to do a couple of things. We have to decide what are we going to measure? And then we have to think about how do we count without worrying about implementation details. So we're going to express efficiency in terms of size of input. And usually, this is going to be obvious. If I've got a procedure that takes one argument that's an integer, the size of the integer is the thing I'm going to measure things in. If I double the size of that integer, what happens to the computation? If I'm computing something over a list, typically the length of the list is going to be the thing I'm going to use to characterize the size of the problem. If I've got-- and we'll see this in a second-- a function that takes more than one argument, I get to decide what's the parameter I want to use. If I'm searching to see is this element in that list, typically, I'm going to worry about what's the size of the list, not what's the size of the element. But we have to specify what is that we're measuring. And we're going to see examples of that in just a second. OK. So now, we start thinking about that sounds great. Certainly fun computing something numeric. Sum of integers from 0 up to x.",
            "metrics": {
                "relativeDCReadability": 1.0327088017331356,
                "lexicalDiversity": 0.4542483660130719,
                "posComposition": {
                    "PRP": 0.085,
                    "VBP": 0.072,
                    "RB": 0.039,
                    "VB": 0.078,
                    "IN": 0.124,
                    "VBG": 0.049,
                    "NNS": 0.023,
                    "CD": 0.029,
                    "TO": 0.069,
                    "WRB": 0.01,
                    "NNP": 0.02,
                    "VBZ": 0.056,
                    "CC": 0.023,
                    "WP": 0.026,
                    "DT": 0.114,
                    "JJ": 0.02,
                    "NN": 0.121,
                    "VBN": 0.01,
                    "MD": 0.007,
                    "VBD": 0.007,
                    "WDT": 0.01,
                    ":": 0.007,
                    "JJR": 0.003
                },
                "syllableRate": 3.492,
                "topicScores": [
                    [
                        "size",
                        0.25182962287061494
                    ],
                    [
                        "thing",
                        0.3207296774077071
                    ],
                    [
                        "list",
                        0.36837928480683463
                    ],
                    [
                        "integer",
                        0.36867470405569885
                    ],
                    [
                        "input",
                        0.5309041864580558
                    ],
                    [
                        "argument",
                        0.5541520175740466
                    ],
                    [
                        "element",
                        0.5646004519010852
                    ],
                    [
                        "asymptotic",
                        0.8776185212221442
                    ],
                    [
                        "behavior",
                        0.8776185212221442
                    ],
                    [
                        "time",
                        0.8899248997113739
                    ],
                    [
                        "comparison",
                        0.8899248997113739
                    ],
                    [
                        "detail",
                        0.891480057062105
                    ],
                    [
                        "obvious",
                        0.8972918233274887
                    ],
                    [
                        "computation",
                        0.901459957671911
                    ],
                    [
                        "problem",
                        0.9031453313431399
                    ],
                    [
                        "couple",
                        0.9034028719188829
                    ],
                    [
                        "implementation",
                        0.9050091986855224
                    ],
                    [
                        "second",
                        0.9082350233908217
                    ],
                    [
                        "great",
                        0.9101214407252506
                    ],
                    [
                        "numeric",
                        0.9109519180665075
                    ],
                    [
                        "sum",
                        0.9117199695867632
                    ],
                    [
                        "x.",
                        0.9117199695867632
                    ],
                    [
                        "efficiency",
                        0.9135343154016199
                    ],
                    [
                        "term",
                        0.9135343154016199
                    ],
                    [
                        "procedure",
                        0.9176181545128218
                    ],
                    [
                        "length",
                        0.9206396972369073
                    ],
                    [
                        "function",
                        0.9218826693925131
                    ],
                    [
                        "parameter",
                        0.9218826693925131
                    ],
                    [
                        "example",
                        0.9248865232461747
                    ],
                    [
                        "asymptotic behavior",
                        3.3518803136450317
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "size",
                        0.25182962287061494
                    ],
                    [
                        "thing",
                        0.3207296774077071
                    ],
                    [
                        "list",
                        0.36837928480683463
                    ],
                    [
                        "input",
                        0.5309041864580558
                    ],
                    [
                        "element",
                        0.5646004519010852
                    ],
                    [
                        "time",
                        0.8899248997113739
                    ],
                    [
                        "problem",
                        0.9031453313431399
                    ],
                    [
                        "second",
                        0.9082350233908217
                    ],
                    [
                        "term",
                        0.9135343154016199
                    ],
                    [
                        "length",
                        0.9206396972369073
                    ],
                    [
                        "example",
                        0.9248865232461747
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-1260": {
            "id": "o9nW0uBqvEo-1260",
            "heat": 0.1,
            "start": 1260.0,
            "text": " It's kind of obvious x is the size of my problem. How many steps does it take? I can count that. But in some cases, the amount of time the code takes is going to depend on the input. So let's take this little piece of code here. And I do hope by now, even though we flash up code, you're already beginning to recognize what does it do. Not the least of which, by the clever name that we chose. But this is obviously just a little function. It runs through a loop-- sorry, a for loop that takes i for each element in a list L. And it's checking to see is i equal to the element I've provided. And when it is, I'm going to return true. If I get all the way through the loop and I didn't find it, I'm going to return false. It's just saying is e in my input list L? How many steps is this going to take? Well, we can certainly count the number of steps in the loop. Right? We've got a set i. We've got to compare i and potentially we've got to return. So there's at most three steps inside the loop. But depends on how lucky I'm feeling. Right? If e happens to be the first element in the list-- it goes through the loop once-- I'm done. Great. I'm not always that lucky. If e is not in the list, then it will go through this entire loop until it gets all the way through the elements of L before saying false. So this-- sort of a best case scenario. This is the worst case scenario. Again, if I'm assigned and say well, let's run some trials.",
            "metrics": {
                "relativeDCReadability": 0.895993207676989,
                "lexicalDiversity": 0.4713375796178344,
                "posComposition": {
                    "PRP": 0.092,
                    "VBZ": 0.07,
                    "NN": 0.137,
                    "IN": 0.118,
                    "JJ": 0.045,
                    "DT": 0.111,
                    "PRP$": 0.006,
                    "NNP": 0.035,
                    "NNS": 0.022,
                    "VB": 0.061,
                    "MD": 0.01,
                    "CC": 0.029,
                    "VBG": 0.029,
                    "TO": 0.032,
                    "POS": 0.006,
                    "RB": 0.064,
                    "VBP": 0.051,
                    "RP": 0.003,
                    "WP": 0.003,
                    "JJS": 0.013,
                    "WDT": 0.003,
                    "VBD": 0.01,
                    ":": 0.013,
                    "VBN": 0.019,
                    "WRB": 0.006,
                    "PDT": 0.006,
                    "EX": 0.003,
                    "CD": 0.003
                },
                "syllableRate": 3.225,
                "topicScores": [
                    [
                        "loop",
                        0.3100545707370882
                    ],
                    [
                        "step",
                        0.3805585348902717
                    ],
                    [
                        "element",
                        0.38294949098895226
                    ],
                    [
                        "L",
                        0.42013541565624846
                    ],
                    [
                        "code",
                        0.4357488769494873
                    ],
                    [
                        "list",
                        0.4425138378148207
                    ],
                    [
                        "case",
                        0.4427982657688971
                    ],
                    [
                        "right",
                        0.5143984933652552
                    ],
                    [
                        "scenario",
                        0.5513592275535334
                    ],
                    [
                        "way",
                        0.5548869180946937
                    ],
                    [
                        "false",
                        0.5548869180946938
                    ],
                    [
                        "little",
                        0.5620453511507155
                    ],
                    [
                        "input",
                        0.5622514398856139
                    ],
                    [
                        "lucky",
                        0.5730371882880423
                    ],
                    [
                        "problem",
                        0.8437752220382752
                    ],
                    [
                        "obvious",
                        0.8723787019542351
                    ],
                    [
                        "size",
                        0.8723787019542351
                    ],
                    [
                        "great",
                        0.9015818723293235
                    ],
                    [
                        "function",
                        0.9062857802638244
                    ],
                    [
                        "time",
                        0.9105527784455154
                    ],
                    [
                        "true",
                        0.9124147984702908
                    ],
                    [
                        "piece",
                        0.915499866147731
                    ],
                    [
                        "sorry",
                        0.9211085364499575
                    ],
                    [
                        "clever",
                        0.9221156199463373
                    ],
                    [
                        "trial",
                        0.9253416012205699
                    ],
                    [
                        "equal",
                        0.9280766773545615
                    ],
                    [
                        "number",
                        0.9336942705051176
                    ],
                    [
                        "set",
                        0.9352110920625091
                    ],
                    [
                        "i.",
                        0.9352110920625091
                    ],
                    [
                        "once--",
                        0.9375678141506444
                    ]
                ],
                "topTopicSimilarity": 0.43333333333333335,
                "sharedTopicScores": [
                    [
                        "loop",
                        0.3100545707370882
                    ],
                    [
                        "step",
                        0.3805585348902717
                    ],
                    [
                        "element",
                        0.38294949098895226
                    ],
                    [
                        "list",
                        0.4425138378148207
                    ],
                    [
                        "case",
                        0.4427982657688971
                    ],
                    [
                        "right",
                        0.5143984933652552
                    ],
                    [
                        "way",
                        0.5548869180946937
                    ],
                    [
                        "input",
                        0.5622514398856139
                    ],
                    [
                        "problem",
                        0.8437752220382752
                    ],
                    [
                        "size",
                        0.8723787019542351
                    ],
                    [
                        "time",
                        0.9105527784455154
                    ],
                    [
                        "number",
                        0.9336942705051176
                    ],
                    [
                        "set",
                        0.9352110920625091
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-1350": {
            "id": "o9nW0uBqvEo-1350",
            "heat": 0.1,
            "start": 1350.0,
            "text": " Let's do a bunch of examples and see how many steps does it go through. And that would be the average case. On average, I'm likely to look at half the elements in the list before I find it. Right? If I'm lucky, it's early on. If I'm not so lucky, it's later on. Which one do I use? Well, we're going to focus on this one. Because that gives you an upper bound on the amount of time it's going to take. What happens in the worst case scenario? We will find at times it's valuable to look at the average case to give us a rough sense of what's going to happen on average. But usually, when we talk about complexity, we're going to focus on the worst case behavior. So to say it in a little bit different way, let's go back to my example. Suppose you gave it a list L of some length. Length of L, you can call that len if you like. Then my best case would be the minimum running type. And in this case, it will be for the first element in the list. And notice in that case, the number of steps I take would be independent of the length of L. That's great. It doesn't matter how long the list is. If I'm always going to find the first element, I'm done. The average case would be the average over the number of steps I take, depending on the length of the list. It's going to grow linearly with the length of the list. It's a good practical measure. But the one I want to focus on will be the worst case. And here, the amount of time as we're going to see in a couple of slides, is linear in the size of the problem. Meaning if I double the length of the list in the worst case,",
            "metrics": {
                "relativeDCReadability": 0.8739194337699001,
                "lexicalDiversity": 0.48672566371681414,
                "posComposition": {
                    "VB": 0.077,
                    "PRP": 0.1,
                    "DT": 0.127,
                    "NN": 0.153,
                    "IN": 0.147,
                    "NNS": 0.021,
                    "CC": 0.021,
                    "WRB": 0.009,
                    "JJ": 0.071,
                    "VBZ": 0.041,
                    "MD": 0.024,
                    "VBP": 0.047,
                    "TO": 0.038,
                    "PDT": 0.003,
                    "RB": 0.032,
                    "NNP": 0.024,
                    "CD": 0.006,
                    "VBG": 0.024,
                    "WP": 0.006,
                    "JJS": 0.015,
                    "POS": 0.003,
                    "PRP$": 0.006,
                    "VBD": 0.003,
                    "VBN": 0.003
                },
                "syllableRate": 3.567,
                "topicScores": [
                    [
                        "case",
                        0.22673106040264704
                    ],
                    [
                        "list",
                        0.27198036148911237
                    ],
                    [
                        "length",
                        0.2842393511076197
                    ],
                    [
                        "average",
                        0.287218020275905
                    ],
                    [
                        "bad",
                        0.35399150482828423
                    ],
                    [
                        "element",
                        0.4204505866166735
                    ],
                    [
                        "step",
                        0.42914704333498765
                    ],
                    [
                        "time",
                        0.4307036751905127
                    ],
                    [
                        "lucky",
                        0.5371364508478916
                    ],
                    [
                        "example",
                        0.5508540586238417
                    ],
                    [
                        "number",
                        0.5550686206992111
                    ],
                    [
                        "good",
                        0.5727904380297977
                    ],
                    [
                        "L.",
                        0.6603897936027154
                    ],
                    [
                        "bad case",
                        0.7814710034302518
                    ],
                    [
                        "bunch",
                        0.8156164320348592
                    ],
                    [
                        "average case",
                        0.860351477322999
                    ],
                    [
                        "likely",
                        0.8899992769399476
                    ],
                    [
                        "scenario",
                        0.9111152180260403
                    ],
                    [
                        "behavior",
                        0.9147756492853462
                    ],
                    [
                        "type",
                        0.9197692270200847
                    ],
                    [
                        "great",
                        0.9223675035872863
                    ],
                    [
                        "upper",
                        0.9226020753787272
                    ],
                    [
                        "complexity",
                        0.9237652712577954
                    ],
                    [
                        "different",
                        0.9251008446435418
                    ],
                    [
                        "way",
                        0.9251008446435418
                    ],
                    [
                        "measure",
                        0.925515081169445
                    ],
                    [
                        "valuable",
                        0.9262921925933469
                    ],
                    [
                        "rough",
                        0.9262921925933469
                    ],
                    [
                        "sense",
                        0.9262921925933469
                    ],
                    [
                        "problem",
                        0.9265035958343857
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "case",
                        0.22673106040264704
                    ],
                    [
                        "list",
                        0.27198036148911237
                    ],
                    [
                        "length",
                        0.2842393511076197
                    ],
                    [
                        "bad",
                        0.35399150482828423
                    ],
                    [
                        "element",
                        0.4204505866166735
                    ],
                    [
                        "step",
                        0.42914704333498765
                    ],
                    [
                        "time",
                        0.4307036751905127
                    ],
                    [
                        "example",
                        0.5508540586238417
                    ],
                    [
                        "number",
                        0.5550686206992111
                    ],
                    [
                        "way",
                        0.9251008446435418
                    ],
                    [
                        "problem",
                        0.9265035958343857
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-1440": {
            "id": "o9nW0uBqvEo-1440",
            "heat": 0.158,
            "start": 1440.0,
            "text": " it's going to take me twice as much time to find that it's not there. If I increase the length in the list by a factor of 10, in the worst case, it's going to take me 10 times as much time as it did in the earlier case to find out that the problem's not there. And that linear relationship is what I want to capture. So I'm going to focus on that. What's the worst case behavior? And we're about ready to start talking about orders of growth, but here then is what orders of growth are going to provide for me. I want to evaluate efficiency, particularly when the input is very large. What happens when I really scale this up? I want to express the growth of the program's runtime as that input grows. Not the exact runtime, but that notion of if I doubled it, how much longer does it take? What's the relationship between increasing the size of the input and the increase in the amount of time it takes to solve it? We're going to put an upper bound on that growth. And if you haven't seen this in math, it basically says I want to come up with a description that is at least as big as-- sorry-- as big as or bigger than the actual amount of time it's going to take. And I'm going to not worry about being precise. We're going to talk about the order of rather than exact. I don't need to know to the femtosecond how long this is going to take, or to exactly one operation how long this is going to take. But I want to say things like this is going to grow linearly.",
            "metrics": {
                "relativeDCReadability": 1.039306058494479,
                "lexicalDiversity": 0.4512987012987013,
                "posComposition": {
                    "PRP": 0.091,
                    "VBZ": 0.058,
                    "VBG": 0.045,
                    "TO": 0.075,
                    "VB": 0.081,
                    "RB": 0.078,
                    "JJ": 0.036,
                    "NN": 0.123,
                    "IN": 0.123,
                    "VBP": 0.045,
                    "DT": 0.097,
                    "CD": 0.01,
                    "JJS": 0.01,
                    "NNS": 0.013,
                    "VBD": 0.006,
                    "JJR": 0.01,
                    "RP": 0.01,
                    "POS": 0.006,
                    "CC": 0.032,
                    "WP": 0.016,
                    "NNP": 0.003,
                    "WRB": 0.016,
                    "VBN": 0.003,
                    "WDT": 0.003,
                    ":": 0.006
                },
                "syllableRate": 3.342,
                "topicScores": [
                    [
                        "time",
                        0.30452954136698546
                    ],
                    [
                        "growth",
                        0.3570211963812452
                    ],
                    [
                        "case",
                        0.38202334664311255
                    ],
                    [
                        "order",
                        0.4153978312777644
                    ],
                    [
                        "long",
                        0.42289198095027253
                    ],
                    [
                        "input",
                        0.42371328747125836
                    ],
                    [
                        "increase",
                        0.4242270449756702
                    ],
                    [
                        "big",
                        0.43615019218750023
                    ],
                    [
                        "bad",
                        0.5014994567905506
                    ],
                    [
                        "exact",
                        0.5440404277218114
                    ],
                    [
                        "relationship",
                        0.5456752061695737
                    ],
                    [
                        "runtime",
                        0.5478441401398993
                    ],
                    [
                        "length",
                        0.8407650192724456
                    ],
                    [
                        "list",
                        0.8407650192724456
                    ],
                    [
                        "factor",
                        0.8407650192724456
                    ],
                    [
                        "early",
                        0.8407650192724456
                    ],
                    [
                        "problem",
                        0.8407650192724456
                    ],
                    [
                        "behavior",
                        0.8633950796646237
                    ],
                    [
                        "linear",
                        0.8651735078620997
                    ],
                    [
                        "large",
                        0.8759937094302517
                    ],
                    [
                        "efficiency",
                        0.8912179391731293
                    ],
                    [
                        "ready",
                        0.8932609786641938
                    ],
                    [
                        "precise",
                        0.8946062021842653
                    ],
                    [
                        "program",
                        0.904343507952468
                    ],
                    [
                        "math",
                        0.9063414362830597
                    ],
                    [
                        "notion",
                        0.9067650216225535
                    ],
                    [
                        "size",
                        0.9088181084291516
                    ],
                    [
                        "upper",
                        0.9105870207068776
                    ],
                    [
                        "bound",
                        0.9105870207068776
                    ],
                    [
                        "description",
                        0.9121315062322833
                    ]
                ],
                "topTopicSimilarity": 0.4,
                "sharedTopicScores": [
                    [
                        "time",
                        0.30452954136698546
                    ],
                    [
                        "growth",
                        0.3570211963812452
                    ],
                    [
                        "case",
                        0.38202334664311255
                    ],
                    [
                        "order",
                        0.4153978312777644
                    ],
                    [
                        "input",
                        0.42371328747125836
                    ],
                    [
                        "big",
                        0.43615019218750023
                    ],
                    [
                        "bad",
                        0.5014994567905506
                    ],
                    [
                        "length",
                        0.8407650192724456
                    ],
                    [
                        "list",
                        0.8407650192724456
                    ],
                    [
                        "problem",
                        0.8407650192724456
                    ],
                    [
                        "linear",
                        0.8651735078620997
                    ],
                    [
                        "size",
                        0.9088181084291516
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-1530": {
            "id": "o9nW0uBqvEo-1530",
            "heat": 0.236,
            "start": 1530.0,
            "text": " I double the size of the input, it doubles the amount of time. Or this is going to grow quadratically. I double the size of the input, it's going to take four times as much time to solve it. Or if I'm really lucky, this is going to have constant growth. No matter how I change the input, it's not going to take any more time. To do that, we're going to look at the largest factors in the runtime. Which piece of the program takes the most time? And so in orders of growth, we are going to look for as tight as possible an upper bound on the growth as a function of the size of the input in the worst case. Nice long definition. Almost ready to look at some examples. So here's the notation we're going to use. It's called Big O notation. I have to admit-- and John's not here today to remind me the history-- I think it comes because we used Omicron-- God knows why. Sounds like something from Futurama. But we used Omicron as our symbol to define this. I'm having such good luck with bad jokes today. You're not even wincing when I throw those things out. But that's OK. It's called Big O notation. We're going to use it. We're going to describe the rules of it. Is this the tradition of it? It describes the worst case, because it's often the bottleneck we're after. And as we said, it's going to express the growth of the program relative to the input size. OK. Let's see how we go from counting operations to getting to orders of growth. Then we're going to define some examples of ordered growth. And we're going to start looking at algorithms. Here's a piece of code you've seen before. Again, hopefully, you recognize or can see",
            "metrics": {
                "relativeDCReadability": 0.9772616638407495,
                "lexicalDiversity": 0.49404761904761907,
                "posComposition": {
                    "PRP": 0.11,
                    "VBP": 0.06,
                    "DT": 0.104,
                    "NN": 0.137,
                    "IN": 0.101,
                    "VBZ": 0.051,
                    "CC": 0.027,
                    "VBG": 0.051,
                    "TO": 0.062,
                    "VB": 0.06,
                    "RB": 0.054,
                    "CD": 0.003,
                    "NNS": 0.033,
                    "JJ": 0.03,
                    "NNP": 0.048,
                    "WRB": 0.012,
                    "JJR": 0.006,
                    "JJS": 0.009,
                    "RBS": 0.003,
                    "VBN": 0.009,
                    ":": 0.009,
                    "POS": 0.006,
                    "VBD": 0.009,
                    "PRP$": 0.003,
                    "RP": 0.003,
                    "MD": 0.003
                },
                "syllableRate": 3.692,
                "topicScores": [
                    [
                        "growth",
                        0.29687527966200383
                    ],
                    [
                        "input",
                        0.2993836957345252
                    ],
                    [
                        "time",
                        0.3143972037712722
                    ],
                    [
                        "size",
                        0.33630778463613936
                    ],
                    [
                        "Big o",
                        0.35531146966018745
                    ],
                    [
                        "ok",
                        0.38002621665693426
                    ],
                    [
                        "notation",
                        0.42653168636937533
                    ],
                    [
                        "bad",
                        0.43345415355506195
                    ],
                    [
                        "order",
                        0.43493222579348995
                    ],
                    [
                        "case",
                        0.5491845013912531
                    ],
                    [
                        "program",
                        0.5607895451352837
                    ],
                    [
                        "example",
                        0.5613652631628715
                    ],
                    [
                        "today",
                        0.5632472707331035
                    ],
                    [
                        "piece",
                        0.5643982226095572
                    ],
                    [
                        "Futurama",
                        0.6484581211413369
                    ],
                    [
                        "John",
                        0.6695192454717382
                    ],
                    [
                        "God",
                        0.6695192454717382
                    ],
                    [
                        "Omicron",
                        0.6766960645660313
                    ],
                    [
                        "Big o notation",
                        0.8419354336302919
                    ],
                    [
                        "lucky",
                        0.8943071858154582
                    ],
                    [
                        "constant",
                        0.8943071858154582
                    ],
                    [
                        "runtime",
                        0.8958630552801623
                    ],
                    [
                        "nice",
                        0.9067036331548245
                    ],
                    [
                        "definition",
                        0.9067036331548245
                    ],
                    [
                        "long",
                        0.9121051544059134
                    ],
                    [
                        "large",
                        0.912352321803417
                    ],
                    [
                        "factor",
                        0.912352321803417
                    ],
                    [
                        "ready",
                        0.9191925307152029
                    ],
                    [
                        "tight",
                        0.9191927543960668
                    ],
                    [
                        "possible",
                        0.9191927543960668
                    ]
                ],
                "topTopicSimilarity": 0.3,
                "sharedTopicScores": [
                    [
                        "growth",
                        0.29687527966200383
                    ],
                    [
                        "input",
                        0.2993836957345252
                    ],
                    [
                        "time",
                        0.3143972037712722
                    ],
                    [
                        "size",
                        0.33630778463613936
                    ],
                    [
                        "ok",
                        0.38002621665693426
                    ],
                    [
                        "bad",
                        0.43345415355506195
                    ],
                    [
                        "order",
                        0.43493222579348995
                    ],
                    [
                        "case",
                        0.5491845013912531
                    ],
                    [
                        "example",
                        0.5613652631628715
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-1620": {
            "id": "o9nW0uBqvEo-1620",
            "heat": 0.288,
            "start": 1620.0,
            "text": " fairly quickly what it's doing. Computing factorials the iterative way. Basically, remember n factorial is n times n minus 1 times n minus 2 all the way down to 1. Hopefully, assuming n is a non-negative integer. Here, we're going to set up an internal variable called answer. And then we're just going to run over a loop. As long as n is bigger than 1, we're going to multiply answer by n, store it back into answer, decrease n by 1. We'll keep doing that until we get out of the loop. And we're going to return answer. We'll start by counting steps. And that's, by the way, just to remind you that in fact, there are two steps here. So what do I have? I've got one step up there. Set answer to one. I'm setting up n-- sorry, I'm not setting up n. I'm going to test n. And then I'm going to do two steps here, because I got a multiply answer by n and then set it to answer. And now similarly, we've got two steps there because I'm subtracting 1 from n and then setting it to n. So I've got 2 plus 4 plus the test, which is 5. I've got 1 outside here. I got 1 outside there. And I'm going to go through this loop n times. So I would suggest that if I count the number of steps, it's 1 plus 5n plus 1. Sort of what we did before. 5n plus 2 is the total number of steps that I use here. But now, I'm interested in what's the worst case behavior? Well, in this case, it is the worst case behavior because it doesn't have decisions anywhere in here.",
            "metrics": {
                "relativeDCReadability": 1.0666883518235866,
                "lexicalDiversity": 0.5254777070063694,
                "posComposition": {
                    "RB": 0.086,
                    "WP": 0.013,
                    "PRP": 0.105,
                    "VBZ": 0.035,
                    "VBG": 0.051,
                    "NNS": 0.045,
                    "DT": 0.051,
                    "JJ": 0.035,
                    "NN": 0.108,
                    "NNP": 0.016,
                    "VB": 0.051,
                    "VBD": 0.022,
                    "CD": 0.067,
                    "PDT": 0.003,
                    "IN": 0.108,
                    "TO": 0.038,
                    "VBP": 0.07,
                    "RP": 0.013,
                    "VBN": 0.006,
                    "CC": 0.045,
                    "JJR": 0.003,
                    "MD": 0.01,
                    "EX": 0.006,
                    ":": 0.003,
                    "WDT": 0.003,
                    "JJS": 0.006
                },
                "syllableRate": 3.358,
                "topicScores": [
                    [
                        "n",
                        0.24878563452485902
                    ],
                    [
                        "answer",
                        0.2909828750063725
                    ],
                    [
                        "step",
                        0.2930481020740192
                    ],
                    [
                        "way",
                        0.4340933123962492
                    ],
                    [
                        "time",
                        0.44161886080547336
                    ],
                    [
                        "loop",
                        0.44972427463377895
                    ],
                    [
                        "case",
                        0.4523198038094836
                    ],
                    [
                        "factorial",
                        0.5566272874706606
                    ],
                    [
                        "bad",
                        0.5705048948651135
                    ],
                    [
                        "multiply",
                        0.5731421903779753
                    ],
                    [
                        "behavior",
                        0.5742322526018899
                    ],
                    [
                        "number",
                        0.5750724983633493
                    ],
                    [
                        "5n",
                        0.5783751271507851
                    ],
                    [
                        "test",
                        0.580010245687253
                    ],
                    [
                        "computing",
                        0.889492790438885
                    ],
                    [
                        "integer",
                        0.9008909344875519
                    ],
                    [
                        "iterative",
                        0.9037403371800052
                    ],
                    [
                        "negative",
                        0.9142955164757369
                    ],
                    [
                        "non",
                        0.920028134325184
                    ],
                    [
                        "internal",
                        0.9294176850685639
                    ],
                    [
                        "variable",
                        0.9294176850685639
                    ],
                    [
                        "big",
                        0.9350211140922192
                    ],
                    [
                        "sorry",
                        0.9408773660967166
                    ],
                    [
                        "total",
                        0.9492078691645464
                    ],
                    [
                        "interested",
                        0.9495449514693506
                    ],
                    [
                        "decision",
                        0.9498625864992668
                    ],
                    [
                        "bad case",
                        2.835740967639963
                    ],
                    [
                        "case behavior",
                        2.9406188264861104
                    ],
                    [
                        "iterative way",
                        3.6428547374054823
                    ],
                    [
                        "n time",
                        3.7113895215920363
                    ]
                ],
                "topTopicSimilarity": 0.3,
                "sharedTopicScores": [
                    [
                        "n",
                        0.24878563452485902
                    ],
                    [
                        "step",
                        0.2930481020740192
                    ],
                    [
                        "way",
                        0.4340933123962492
                    ],
                    [
                        "time",
                        0.44161886080547336
                    ],
                    [
                        "loop",
                        0.44972427463377895
                    ],
                    [
                        "case",
                        0.4523198038094836
                    ],
                    [
                        "bad",
                        0.5705048948651135
                    ],
                    [
                        "number",
                        0.5750724983633493
                    ],
                    [
                        "big",
                        0.9350211140922192
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-1710": {
            "id": "o9nW0uBqvEo-1710",
            "heat": 0.476,
            "start": 1710.0,
            "text": " But I just want to know what's the asymptotic complexity? And I'm going to say-- oh, sorry-- that is to say I could do this different ways. I could have done this with two steps like that. That would have made it not just 1 plus 5n plus 1. It would have made it 1 plus 6n plus 1 because I've got an extra step. I put that up because I want to remind you I don't care about implementation differences. And so I want to know what captures both of those behaviors. And in Big O notation, I say that's order n. Grows linearly. So I'm going to keep doing this to you until you really do wince at me. If I were to double the size of n, whether I use this version or that version, the amount of time the number of steps is basically going to double. Now you say, wait a minute. 5n plus 2-- if n is 10 that's 52. And if n is 20, that's 102. That's not quite doubling it. And you're right. But remember, we really care about this in the asymptotic case. When n gets really big, those extra little pieces don't matter. And so what we're going to do is we're going to ignore the additive constants and we're going to ignore the multiplicative constants when we talk about orders of growth. So what does o of n measure? Well, we're just summarizing here. We want to describe how much time is needed to compute or how does the amount of time, rather, needed to computer problem growth as the size of the problem itself grows.",
            "metrics": {
                "relativeDCReadability": 1.0979470603513517,
                "lexicalDiversity": 0.49830508474576274,
                "posComposition": {
                    "CC": 0.054,
                    "PRP": 0.105,
                    "RB": 0.064,
                    "VBP": 0.068,
                    "TO": 0.051,
                    "VB": 0.071,
                    "WP": 0.014,
                    "VBZ": 0.047,
                    "DT": 0.085,
                    "JJ": 0.051,
                    "NN": 0.092,
                    "VBG": 0.031,
                    ":": 0.01,
                    "WDT": 0.014,
                    "MD": 0.014,
                    "NNS": 0.031,
                    "VBN": 0.02,
                    "IN": 0.092,
                    "CD": 0.044,
                    "VBD": 0.01,
                    "NNP": 0.014,
                    "POS": 0.007,
                    "WRB": 0.014
                },
                "syllableRate": 3.208,
                "topicScores": [
                    [
                        "n",
                        0.3377270208491625
                    ],
                    [
                        "step",
                        0.43844585265882274
                    ],
                    [
                        "time",
                        0.4476664383240203
                    ],
                    [
                        "big",
                        0.48222378847320135
                    ],
                    [
                        "o",
                        0.4840653353174235
                    ],
                    [
                        "asymptotic",
                        0.5529952470599865
                    ],
                    [
                        "5n",
                        0.5529952470599865
                    ],
                    [
                        "extra",
                        0.5645168075925178
                    ],
                    [
                        "size",
                        0.5646490289503475
                    ],
                    [
                        "growth",
                        0.5711331162570975
                    ],
                    [
                        "constant",
                        0.571386934716347
                    ],
                    [
                        "version",
                        0.5721847444182425
                    ],
                    [
                        "order",
                        0.5739432312479251
                    ],
                    [
                        "problem",
                        0.582781601569464
                    ],
                    [
                        "complexity",
                        0.7711874933346009
                    ],
                    [
                        "say--",
                        0.8353221337491723
                    ],
                    [
                        "way",
                        0.8604264370237745
                    ],
                    [
                        "sorry--",
                        0.8800452862756939
                    ],
                    [
                        "different",
                        0.8800452862756939
                    ],
                    [
                        "behavior",
                        0.8978091197884791
                    ],
                    [
                        "minute",
                        0.9072675207962365
                    ],
                    [
                        "implementation",
                        0.9094833529722045
                    ],
                    [
                        "6n",
                        0.9121403880560893
                    ],
                    [
                        "right",
                        0.9126590214272736
                    ],
                    [
                        "case",
                        0.913681524949206
                    ],
                    [
                        "notation",
                        0.9153176080366858
                    ],
                    [
                        "measure",
                        0.9162520337832657
                    ],
                    [
                        "wince",
                        0.9234605717324422
                    ],
                    [
                        "number",
                        0.925176350156428
                    ],
                    [
                        "little",
                        0.9325775615661609
                    ]
                ],
                "topTopicSimilarity": 0.4,
                "sharedTopicScores": [
                    [
                        "n",
                        0.3377270208491625
                    ],
                    [
                        "step",
                        0.43844585265882274
                    ],
                    [
                        "time",
                        0.4476664383240203
                    ],
                    [
                        "big",
                        0.48222378847320135
                    ],
                    [
                        "size",
                        0.5646490289503475
                    ],
                    [
                        "growth",
                        0.5711331162570975
                    ],
                    [
                        "order",
                        0.5739432312479251
                    ],
                    [
                        "problem",
                        0.582781601569464
                    ],
                    [
                        "way",
                        0.8604264370237745
                    ],
                    [
                        "right",
                        0.9126590214272736
                    ],
                    [
                        "case",
                        0.913681524949206
                    ],
                    [
                        "number",
                        0.925176350156428
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-1800": {
            "id": "o9nW0uBqvEo-1800",
            "heat": 0.441,
            "start": 1800.0,
            "text": " So we want an expression that counts that asymptotic behavior. And we're going to focus as a consequence on the term that grows most rapidly. So here are some examples. And I know if you're following along, you can already see the answers here. But we're going to do this to simply give you a sense of that. If I'm counting operations and I come up with an expression that has n squared plus 2n plus 2 operations, that expression I say is order n squared. The 2 and the 2n don't matter. And think about what happens if you make n really big. n squared is much more dominant than the other terms. We say that's order n squared. Even this expression we say is order n squared. So in this case, for lower values of n, this term is going to be the big one in terms of number of steps. I have no idea how I wrote such an inefficient algorithm that it took 100,000 steps to do something. But if I had that expression for smaller values of n, this matters a lot. This is a really big number. But when I'm interested in the growth, then that's the term that dominates. And you see the idea or begin to see the idea here that when I have-- sorry, let me go back there-- when I have expressions, if it's a polynomial expression, it's the highest order term. It's the term that captures the complexity. Both of these are quadratic. This term is order n, because n grows faster than log of n.",
            "metrics": {
                "relativeDCReadability": 1.046434718110975,
                "lexicalDiversity": 0.4785714285714286,
                "posComposition": {
                    "IN": 0.107,
                    "PRP": 0.089,
                    "VBP": 0.068,
                    "DT": 0.125,
                    "NN": 0.136,
                    "WDT": 0.018,
                    "VBZ": 0.064,
                    "JJ": 0.046,
                    "CC": 0.043,
                    "VBG": 0.018,
                    "TO": 0.021,
                    "VB": 0.043,
                    "RBS": 0.004,
                    "RB": 0.064,
                    "NNS": 0.046,
                    "MD": 0.004,
                    "RP": 0.004,
                    "VBN": 0.004,
                    "CD": 0.021,
                    "VBD": 0.025,
                    "WP": 0.004,
                    "RBR": 0.007,
                    "JJR": 0.007,
                    "WRB": 0.014,
                    "PDT": 0.004,
                    ":": 0.007,
                    "JJS": 0.004,
                    "NNP": 0.004
                },
                "syllableRate": 3.133,
                "topicScores": [
                    [
                        "n",
                        0.24375421518579132
                    ],
                    [
                        "term",
                        0.2743408360823816
                    ],
                    [
                        "expression",
                        0.29657174567816347
                    ],
                    [
                        "order",
                        0.32027370442040165
                    ],
                    [
                        "big",
                        0.4422787460282021
                    ],
                    [
                        "idea",
                        0.4529902242956597
                    ],
                    [
                        "value",
                        0.5595800518887288
                    ],
                    [
                        "operation",
                        0.568018433707515
                    ],
                    [
                        "step",
                        0.5697072696978254
                    ],
                    [
                        "number",
                        0.570699538082628
                    ],
                    [
                        "behavior",
                        0.7851149371079955
                    ],
                    [
                        "asymptotic",
                        0.8130193210132164
                    ],
                    [
                        "example",
                        0.8698388370072239
                    ],
                    [
                        "consequence",
                        0.8765536395231196
                    ],
                    [
                        "answer",
                        0.8996609074961144
                    ],
                    [
                        "sense",
                        0.9136025864924434
                    ],
                    [
                        "lot",
                        0.9166495792505606
                    ],
                    [
                        "complexity",
                        0.9207080167417606
                    ],
                    [
                        "quadratic",
                        0.9215056881495087
                    ],
                    [
                        "case",
                        0.9265892205306494
                    ],
                    [
                        "low",
                        0.9265892205306495
                    ],
                    [
                        "dominant",
                        0.9270819419029426
                    ],
                    [
                        "growth",
                        0.930942856350155
                    ],
                    [
                        "sorry",
                        0.9317673133278861
                    ],
                    [
                        "polynomial",
                        0.9317673133278861
                    ],
                    [
                        "inefficient",
                        0.9331554980847185
                    ],
                    [
                        "algorithm",
                        0.9331554980847185
                    ],
                    [
                        "small",
                        0.9342164498381984
                    ],
                    [
                        "interested",
                        0.9360104920933588
                    ],
                    [
                        "high",
                        0.9367785564775486
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "n",
                        0.24375421518579132
                    ],
                    [
                        "term",
                        0.2743408360823816
                    ],
                    [
                        "order",
                        0.32027370442040165
                    ],
                    [
                        "big",
                        0.4422787460282021
                    ],
                    [
                        "operation",
                        0.568018433707515
                    ],
                    [
                        "step",
                        0.5697072696978254
                    ],
                    [
                        "number",
                        0.570699538082628
                    ],
                    [
                        "example",
                        0.8698388370072239
                    ],
                    [
                        "case",
                        0.9265892205306494
                    ],
                    [
                        "growth",
                        0.930942856350155
                    ],
                    [
                        "algorithm",
                        0.9331554980847185
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-1890": {
            "id": "o9nW0uBqvEo-1890",
            "heat": 0.435,
            "start": 1890.0,
            "text": " This funky looking term, even though that looks like the big number there and it is a big number, that expression we see is order n log n. Because again, if I plot out as how this changes as I make n really large, this term eventually takes over as the dominant term. What about that one? What's the big term there? How many people think it's n to the 30th? Show of hands. How many people think it's 3 to the n? Show of hands. Thank you. You're following along. You're also paying attention. How many people think I should stop asking questions? No show of hands. All right. But you're right. Exponentials are much worse than powers. Even something like this-- again, it's going to take a big value of n before it gets there, but it does get there. And that, by the way, is important, because we're going to see later on in the term that there are some problems where it's believed that all of the solutions are exponential. And that's a pain, because it says it's always going to be expensive to compute. So that's how we're going to reason about these things. And to see it visually, here are the differences between those different classes. Something that's constant-- the amount of time doesn't change as I change the size of the input. Something that linear grows as a straight line, as you would expect. Nice behavior. Quadratic starts to grow more quickly. The log is always better than linear because it slows down as we increase the size.",
            "metrics": {
                "relativeDCReadability": 0.884954387380265,
                "lexicalDiversity": 0.5106382978723404,
                "posComposition": {
                    "DT": 0.11,
                    "NN": 0.092,
                    "VBG": 0.035,
                    "RB": 0.064,
                    "IN": 0.128,
                    "VBZ": 0.074,
                    "JJ": 0.089,
                    "EX": 0.011,
                    "CC": 0.021,
                    "PRP": 0.085,
                    "WDT": 0.007,
                    "VBP": 0.06,
                    "RP": 0.011,
                    "WRB": 0.011,
                    "WP": 0.007,
                    "CD": 0.007,
                    "NNP": 0.035,
                    "NNS": 0.057,
                    "TO": 0.032,
                    "MD": 0.007,
                    "VB": 0.035,
                    "JJR": 0.007,
                    ":": 0.007,
                    "VBN": 0.004,
                    "RBR": 0.004
                },
                "syllableRate": 3.125,
                "topicScores": [
                    [
                        "term",
                        0.3123214115421603
                    ],
                    [
                        "n",
                        0.3295179324453387
                    ],
                    [
                        "big",
                        0.3486943459179791
                    ],
                    [
                        "hand",
                        0.37057741758200535
                    ],
                    [
                        "people",
                        0.3955397690023383
                    ],
                    [
                        "change",
                        0.4410922519624384
                    ],
                    [
                        "number",
                        0.4645067975181181
                    ],
                    [
                        "right",
                        0.5368180204135345
                    ],
                    [
                        "exponential",
                        0.5545643760636406
                    ],
                    [
                        "size",
                        0.5613168826753907
                    ],
                    [
                        "log",
                        0.5633561961922793
                    ],
                    [
                        "linear",
                        0.5735442484132841
                    ],
                    [
                        "funky",
                        0.7926085319408864
                    ],
                    [
                        "expression",
                        0.7926085319408864
                    ],
                    [
                        "large",
                        0.7926085319408864
                    ],
                    [
                        "dominant",
                        0.7926085319408864
                    ],
                    [
                        "order",
                        0.8039084775805825
                    ],
                    [
                        "30th",
                        0.871716132091348
                    ],
                    [
                        "attention",
                        0.9013336984661025
                    ],
                    [
                        "question",
                        0.9034936570455506
                    ],
                    [
                        "power",
                        0.9096963065327504
                    ],
                    [
                        "nice",
                        0.9103780643505184
                    ],
                    [
                        "behavior",
                        0.9103780643505184
                    ],
                    [
                        "thing",
                        0.9137069868466972
                    ],
                    [
                        "class",
                        0.9145074458808001
                    ],
                    [
                        "input",
                        0.915247683661039
                    ],
                    [
                        "quadratic",
                        0.9171741704572576
                    ],
                    [
                        "important",
                        0.9177676750300591
                    ],
                    [
                        "way",
                        0.9230928586475791
                    ],
                    [
                        "pain",
                        0.9239312681610989
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "term",
                        0.3123214115421603
                    ],
                    [
                        "n",
                        0.3295179324453387
                    ],
                    [
                        "big",
                        0.3486943459179791
                    ],
                    [
                        "number",
                        0.4645067975181181
                    ],
                    [
                        "right",
                        0.5368180204135345
                    ],
                    [
                        "size",
                        0.5613168826753907
                    ],
                    [
                        "linear",
                        0.5735442484132841
                    ],
                    [
                        "order",
                        0.8039084775805825
                    ],
                    [
                        "thing",
                        0.9137069868466972
                    ],
                    [
                        "input",
                        0.915247683661039
                    ],
                    [
                        "way",
                        0.9230928586475791
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-1980": {
            "id": "o9nW0uBqvEo-1980",
            "heat": 0.58,
            "start": 1980.0,
            "text": " n log n or log linear is a funky term, but we're going to see it's a very common complexity for really valuable algorithms in computer science. And it has a nice behavior, sort of between the linear and the quadratic. And exponential blows up. Just to remind you of that-- well, sorry-- let me show you how we're going to do the reasoning about this. So here's how we're going to reason about it. We've already seen some code where I started working through this process of counting operations. Here are the tools I want you to use. Given a piece of code, you're going to reason about each chunk of code separately. If you've got sequential pieces of code, then the rules are called the law of addition for order of growth is that the order of growth of the combination is the combination of the order of the growth. Say that quickly 10 times. But let's look at an example of that. Here are two loops. You've already seen examples of how to reason about those loops. For this one, it's linear in the size of n. I'm going to go through the loop n times doing a constant amount of things each time around. But what I just showed, that's order n. This one-- again, I'm doing just a constant number of things inside the loop-- but notice, that it's n squared. So that's order n squared. n times n. The combination is I have to do this work and then that work. So I write that as saying that is order of n plus order of n",
            "metrics": {
                "relativeDCReadability": 1.0098954053546225,
                "lexicalDiversity": 0.4897260273972603,
                "posComposition": {
                    "JJ": 0.051,
                    "NN": 0.175,
                    "CC": 0.034,
                    "VBP": 0.058,
                    "VBZ": 0.045,
                    "DT": 0.123,
                    "PRP": 0.079,
                    "VBG": 0.038,
                    "TO": 0.031,
                    "VB": 0.027,
                    "RB": 0.062,
                    "IN": 0.137,
                    "RP": 0.007,
                    ":": 0.014,
                    "WRB": 0.014,
                    "NNP": 0.01,
                    "VBN": 0.014,
                    "VBD": 0.014,
                    "NNS": 0.041,
                    "FW": 0.003,
                    "CD": 0.014,
                    "POS": 0.003,
                    "WP": 0.003,
                    "MD": 0.003
                },
                "syllableRate": 3.242,
                "topicScores": [
                    [
                        "n",
                        0.268342102833117
                    ],
                    [
                        "order",
                        0.27728767382121744
                    ],
                    [
                        "code",
                        0.36641791630791265
                    ],
                    [
                        "time",
                        0.3760238467192697
                    ],
                    [
                        "combination",
                        0.4300767376180392
                    ],
                    [
                        "growth",
                        0.431816853310786
                    ],
                    [
                        "linear",
                        0.433316384675397
                    ],
                    [
                        "loop",
                        0.4383849813287506
                    ],
                    [
                        "work",
                        0.4486730566991847
                    ],
                    [
                        "log",
                        0.46835650401674
                    ],
                    [
                        "piece",
                        0.5525917189433126
                    ],
                    [
                        "constant",
                        0.56121440153378
                    ],
                    [
                        "example",
                        0.5641101901916724
                    ],
                    [
                        "thing",
                        0.5672277088596236
                    ],
                    [
                        "science",
                        0.7644307878510299
                    ],
                    [
                        "funky",
                        0.7931289131427983
                    ],
                    [
                        "term",
                        0.7931289131427983
                    ],
                    [
                        "computer",
                        0.7931289131427983
                    ],
                    [
                        "common",
                        0.8057036412274461
                    ],
                    [
                        "complexity",
                        0.8057036412274461
                    ],
                    [
                        "valuable",
                        0.8057036412274461
                    ],
                    [
                        "algorithm",
                        0.8057036412274461
                    ],
                    [
                        "quadratic",
                        0.8300419101686581
                    ],
                    [
                        "nice",
                        0.8522914581820507
                    ],
                    [
                        "behavior",
                        0.8522914581820507
                    ],
                    [
                        "that--",
                        0.869986532258522
                    ],
                    [
                        "exponential",
                        0.8751953784014012
                    ],
                    [
                        "operation",
                        0.8904570616048259
                    ],
                    [
                        "sorry--",
                        0.8957560514062824
                    ],
                    [
                        "reasoning",
                        0.9028566198864868
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "n",
                        0.268342102833117
                    ],
                    [
                        "order",
                        0.27728767382121744
                    ],
                    [
                        "time",
                        0.3760238467192697
                    ],
                    [
                        "growth",
                        0.431816853310786
                    ],
                    [
                        "linear",
                        0.433316384675397
                    ],
                    [
                        "loop",
                        0.4383849813287506
                    ],
                    [
                        "example",
                        0.5641101901916724
                    ],
                    [
                        "thing",
                        0.5672277088596236
                    ],
                    [
                        "term",
                        0.7931289131427983
                    ],
                    [
                        "algorithm",
                        0.8057036412274461
                    ],
                    [
                        "operation",
                        0.8904570616048259
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-2070": {
            "id": "o9nW0uBqvEo-2070",
            "heat": 0.296,
            "start": 2070.0,
            "text": " squared. But by this up here, that is the same as saying what's the order of growth of n plus n squared. Oh yeah. We just saw that. Says it's n squared. So addition or the law of addition let's be reasonable about the fact that this will be an order n squared algorithm. Second one I'm going to use is called the law of multiplication. And this says when I have nested statements or nested loops, I need to reason about those. And in that case, what I want to argue-- or not argue-- state is that the order of growth here is a multiplication. That is, when I have nested things, I figure out what's the order of growth of the inner part, what's the order growth of the outer part, and I'm going to multiply-- bleh, try again-- I'm going to multiply together those orders of growth, get the overall order of growth. If you think about it, it makes sense. Look at my little example here. It's a trivial little example. But I'm looping for i from 0 up to n. For every value of i, I'm looping for j from 0 up to n. And then I'm printing out A. I'm the Fonz. I'm saying heyyy a lot. Oh, come on. At least throw something, I mean, when it's that bad. Right? Want to make sure you're still awake. OK. You get the idea. But what I want to show you here is notice the order of growth. That's order n. Right? I'm doing that n times. But I'm doing that for each value of i. The outer piece here loops also n times.",
            "metrics": {
                "relativeDCReadability": 0.9860496001507728,
                "lexicalDiversity": 0.4966887417218543,
                "posComposition": {
                    "VBN": 0.02,
                    "CC": 0.04,
                    "IN": 0.109,
                    "DT": 0.103,
                    "RB": 0.053,
                    "VBZ": 0.056,
                    "JJ": 0.066,
                    "VBG": 0.033,
                    "WP": 0.017,
                    "NN": 0.159,
                    "NNP": 0.03,
                    "PRP": 0.089,
                    "VBD": 0.01,
                    "POS": 0.003,
                    "VB": 0.036,
                    "MD": 0.003,
                    "CD": 0.01,
                    "VBP": 0.07,
                    "TO": 0.03,
                    "WRB": 0.01,
                    "NNS": 0.023,
                    ":": 0.013,
                    "WDT": 0.003,
                    "RP": 0.007,
                    "PRP$": 0.003,
                    "JJS": 0.003
                },
                "syllableRate": 3.183,
                "topicScores": [
                    [
                        "order",
                        0.23108392549875306
                    ],
                    [
                        "growth",
                        0.25789049229844657
                    ],
                    [
                        "n",
                        0.30866797734192014
                    ],
                    [
                        "loop",
                        0.37611274734408445
                    ],
                    [
                        "multiplication",
                        0.5436018724537467
                    ],
                    [
                        "law",
                        0.5531075059763316
                    ],
                    [
                        "time",
                        0.5546213378832301
                    ],
                    [
                        "example",
                        0.5573837836179615
                    ],
                    [
                        "addition",
                        0.5640919576987475
                    ],
                    [
                        "little",
                        0.5642202097662068
                    ],
                    [
                        "outer",
                        0.5659634848622064
                    ],
                    [
                        "value",
                        0.5689972974364419
                    ],
                    [
                        "argue--",
                        0.572864495803336
                    ],
                    [
                        "a.",
                        0.658328305028432
                    ],
                    [
                        "Fonz",
                        0.6612230405885048
                    ],
                    [
                        "algorithm",
                        0.9042277793444593
                    ],
                    [
                        "right",
                        0.9078043557013199
                    ],
                    [
                        "sense",
                        0.9162541405823122
                    ],
                    [
                        "reasonable",
                        0.9204644300018383
                    ],
                    [
                        "fact",
                        0.9204644300018383
                    ],
                    [
                        "nested",
                        0.9210074716439683
                    ],
                    [
                        "lot",
                        0.9229482697081655
                    ],
                    [
                        "case",
                        0.9230430399612349
                    ],
                    [
                        "bad",
                        0.9244404851218423
                    ],
                    [
                        "thing",
                        0.9247674156391986
                    ],
                    [
                        "inner",
                        0.9247674156391986
                    ],
                    [
                        "multiply--",
                        0.9247674156391986
                    ],
                    [
                        "bleh",
                        0.9247674156391986
                    ],
                    [
                        "again--",
                        0.9247674156391986
                    ],
                    [
                        "statement",
                        0.9256487614443881
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "order",
                        0.23108392549875306
                    ],
                    [
                        "growth",
                        0.25789049229844657
                    ],
                    [
                        "n",
                        0.30866797734192014
                    ],
                    [
                        "loop",
                        0.37611274734408445
                    ],
                    [
                        "time",
                        0.5546213378832301
                    ],
                    [
                        "example",
                        0.5573837836179615
                    ],
                    [
                        "algorithm",
                        0.9042277793444593
                    ],
                    [
                        "right",
                        0.9078043557013199
                    ],
                    [
                        "case",
                        0.9230430399612349
                    ],
                    [
                        "bad",
                        0.9244404851218423
                    ],
                    [
                        "thing",
                        0.9247674156391986
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-2160": {
            "id": "o9nW0uBqvEo-2160",
            "heat": 0.331,
            "start": 2160.0,
            "text": " For each value of i, I'm doing order n things. So I'm doing order of n times order of n steps. And by that law, that is the same order of n times n or n squared. So this is a quadratic expression. You're going to see that a lot. Nested loops typically have that kind of behavior. Not always, but typically have that kind of behavior. So what you're going to see is there's a set of complexity classes. And we're about to start filling these in. Order one is constant. Says amount of time it takes doesn't depend on the size of the problem. These are really rare that you get. They tend to be trivial pieces of code, but they're valuable. Log n reflects logarithmic runtime. You can sort of read the rest of them. These are the kinds of things that we're going to deal with. We are going to see examples here, here, and here. And later on, we're going to come back and see these, which are really nice examples to have. Just to remind you why these orders of growth matter-- sorry, that's just reminding you what they look like. We've already done that. Here is the difference between constant log, linear, log linear squared, and exponential. When n is equal to 10, 100, 1,000 or a million. I know you know this, but I want to drive home the difference. Something that's constant is wonderful, no matter how big the problem is.",
            "metrics": {
                "relativeDCReadability": 0.9417630097519227,
                "lexicalDiversity": 0.48863636363636365,
                "posComposition": {
                    "IN": 0.106,
                    "DT": 0.091,
                    "NN": 0.136,
                    "PRP": 0.08,
                    "VBP": 0.083,
                    "VBG": 0.034,
                    "JJ": 0.068,
                    "NNS": 0.042,
                    "CC": 0.042,
                    "WDT": 0.011,
                    "VBZ": 0.053,
                    "RB": 0.072,
                    "VBN": 0.011,
                    "TO": 0.042,
                    "VB": 0.049,
                    "NNP": 0.027,
                    "WP": 0.008,
                    "EX": 0.004,
                    "CD": 0.019,
                    "MD": 0.004,
                    "WRB": 0.011,
                    ":": 0.004,
                    "POS": 0.004
                },
                "syllableRate": 2.883,
                "topicScores": [
                    [
                        "n",
                        0.26192816753144504
                    ],
                    [
                        "order",
                        0.2906198023143239
                    ],
                    [
                        "time",
                        0.4229016611586452
                    ],
                    [
                        "kind",
                        0.4238243673962089
                    ],
                    [
                        "constant",
                        0.4420793573383564
                    ],
                    [
                        "log",
                        0.4424642701087972
                    ],
                    [
                        "behavior",
                        0.5173320073148453
                    ],
                    [
                        "thing",
                        0.559434129490965
                    ],
                    [
                        "problem",
                        0.5608367165336079
                    ],
                    [
                        "linear",
                        0.563025779491132
                    ],
                    [
                        "difference",
                        0.5672822605030001
                    ],
                    [
                        "example",
                        0.5729301365705121
                    ],
                    [
                        "value",
                        0.8212309214991175
                    ],
                    [
                        "step",
                        0.848487341748957
                    ],
                    [
                        "expression",
                        0.8846989988606208
                    ],
                    [
                        "law",
                        0.8870257452503741
                    ],
                    [
                        "lot",
                        0.8929307067488161
                    ],
                    [
                        "quadratic",
                        0.8984955661485843
                    ],
                    [
                        "nested",
                        0.898744042818781
                    ],
                    [
                        "class",
                        0.9065377310215661
                    ],
                    [
                        "loop",
                        0.9110290334029363
                    ],
                    [
                        "valuable",
                        0.9167355702175639
                    ],
                    [
                        "complexity",
                        0.9179634552848996
                    ],
                    [
                        "runtime",
                        0.9180342462568943
                    ],
                    [
                        "exponential",
                        0.9187485677407762
                    ],
                    [
                        "set",
                        0.922926911234358
                    ],
                    [
                        "code",
                        0.9270149826794531
                    ],
                    [
                        "logarithmic",
                        0.9281658937154285
                    ],
                    [
                        "size",
                        0.9288306670729801
                    ],
                    [
                        "rare",
                        0.930241139759641
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "n",
                        0.26192816753144504
                    ],
                    [
                        "order",
                        0.2906198023143239
                    ],
                    [
                        "time",
                        0.4229016611586452
                    ],
                    [
                        "thing",
                        0.559434129490965
                    ],
                    [
                        "problem",
                        0.5608367165336079
                    ],
                    [
                        "linear",
                        0.563025779491132
                    ],
                    [
                        "example",
                        0.5729301365705121
                    ],
                    [
                        "step",
                        0.848487341748957
                    ],
                    [
                        "loop",
                        0.9110290334029363
                    ],
                    [
                        "set",
                        0.922926911234358
                    ],
                    [
                        "size",
                        0.9288306670729801
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-2250": {
            "id": "o9nW0uBqvEo-2250",
            "heat": 0.404,
            "start": 2250.0,
            "text": " Takes the same amount of time. Something that is log is pretty nice. Increase the size of the problem by 10, it increases by a factor of 2. From another 10, it only increases by a factor of another 50%. It only increases a little bit. That's a gorgeous kind of problem to have. Linear-- not so bad. I go from 10 to 100 to 1,000 to a million. You can see log linear is not bad either. Right? A factor of 10 increase here is only a factor of 20 increase there. A factor of 10 increase there is only a factor of 30 increase there. So log linear doesn't grow that badly. But look at the difference between n squared and 2 to the n. I actually did think of printing this out. By the way, Python will compute this. But it was taken pages and pages and pages. I didn't want to do it. You get the point. Exponential-- always much worse. Always much worse than a quadratic or a power expression. And you really see the difference here. All right. The reason I put this up is as you design algorithms, your goal is to be as high up in this listing as you can. The closer you are to the top of this list, the better off you are. If you have a solution that's down here, bring a sleeping bag and some coffee. You're going to be there for a while. Right? You really want to try and avoid that if you can. So now what we want to do, both for the rest of today in the last 15 minutes and then next week,",
            "metrics": {
                "relativeDCReadability": 0.9807512709108147,
                "lexicalDiversity": 0.4340277777777778,
                "posComposition": {
                    "IN": 0.118,
                    "DT": 0.122,
                    "JJ": 0.049,
                    "NN": 0.142,
                    "VBG": 0.014,
                    "WDT": 0.01,
                    "VBZ": 0.045,
                    "NNP": 0.028,
                    "CD": 0.049,
                    "PRP": 0.073,
                    "RB": 0.104,
                    "TO": 0.038,
                    "VB": 0.049,
                    ":": 0.007,
                    "VBP": 0.035,
                    "MD": 0.014,
                    "EX": 0.003,
                    "CC": 0.035,
                    "NNS": 0.017,
                    "VBN": 0.007,
                    "VBD": 0.014,
                    "RP": 0.01,
                    "JJR": 0.01,
                    "PRP$": 0.003,
                    "WP": 0.003
                },
                "syllableRate": 3.092,
                "topicScores": [
                    [
                        "increase",
                        0.24612009559129455
                    ],
                    [
                        "factor",
                        0.2736291776647836
                    ],
                    [
                        "bad",
                        0.36340246031045637
                    ],
                    [
                        "right",
                        0.40456535224168677
                    ],
                    [
                        "log",
                        0.43071321953099445
                    ],
                    [
                        "page",
                        0.4317399968083123
                    ],
                    [
                        "problem",
                        0.5487294991079329
                    ],
                    [
                        "linear",
                        0.5583287103611448
                    ],
                    [
                        "difference",
                        0.5659552206762553
                    ],
                    [
                        "Python",
                        0.6735212998249267
                    ],
                    [
                        "time",
                        0.8455502664274471
                    ],
                    [
                        "nice",
                        0.8693392365404184
                    ],
                    [
                        "bit",
                        0.8966625431451344
                    ],
                    [
                        "size",
                        0.9013143410429999
                    ],
                    [
                        "little",
                        0.9083840959850723
                    ],
                    [
                        "gorgeous",
                        0.9173210914607932
                    ],
                    [
                        "kind",
                        0.9173210914607932
                    ],
                    [
                        "point",
                        0.9211864330424624
                    ],
                    [
                        "Exponential--",
                        0.9219234408212305
                    ],
                    [
                        "expression",
                        0.9226049014030786
                    ],
                    [
                        "coffee",
                        0.9253803595535467
                    ],
                    [
                        "week",
                        0.927069177959534
                    ],
                    [
                        "way",
                        0.9279901405310851
                    ],
                    [
                        "n.",
                        0.9312229485196807
                    ],
                    [
                        "power",
                        0.9316082620644125
                    ],
                    [
                        "reason",
                        0.9331900066769583
                    ],
                    [
                        "algorithm",
                        0.9331900066769583
                    ],
                    [
                        "goal",
                        0.9331900066769583
                    ],
                    [
                        "list",
                        0.9336507616277456
                    ],
                    [
                        "well",
                        0.9336507616277456
                    ]
                ],
                "topTopicSimilarity": 0.3,
                "sharedTopicScores": [
                    [
                        "bad",
                        0.36340246031045637
                    ],
                    [
                        "right",
                        0.40456535224168677
                    ],
                    [
                        "problem",
                        0.5487294991079329
                    ],
                    [
                        "linear",
                        0.5583287103611448
                    ],
                    [
                        "time",
                        0.8455502664274471
                    ],
                    [
                        "size",
                        0.9013143410429999
                    ],
                    [
                        "way",
                        0.9279901405310851
                    ],
                    [
                        "algorithm",
                        0.9331900066769583
                    ],
                    [
                        "list",
                        0.9336507616277456
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-2340": {
            "id": "o9nW0uBqvEo-2340",
            "heat": 0.319,
            "start": 2340.0,
            "text": " is start identifying common algorithms and what is their complexity. As I said to you way back at the beginning of this lecture, which I'm sure you remember, it's not just to be able to identify the complexity. I want you to see how choices algorithm design are going to lead to particular kinds of consequences in terms of what this is going to cost you. That's your goal here. All right. We've already seen some examples. I'm going to do one more here. But simple iterative loop algorithms are typically linear. Here's another version of searching. Imagine I'll have an unsorted list. Arbitrary order. Here's another way of doing the linear search. Looks a little bit faster. I'm going to set a flag initially to false. And then I'm going to loop for i from 0 up to the length of L. I'm going to use that to index into the list, pull out each element of the list in turn, and check to see is it the thing I'm looking for. As soon as I find it, I'm going to send-- sorry-- set the flag to true. OK? So that when I return out of the loop, I can just return found. And if I found it to be true, if I never found it, found will still be false and I'll return it. We could count the operations here, but you've already seen examples of doing that. This is linear, because I'm looping n times if n is the length of the list over there. And the number of things I do inside the loop is constant.",
            "metrics": {
                "relativeDCReadability": 0.9513228139426958,
                "lexicalDiversity": 0.4722222222222222,
                "posComposition": {
                    "VBZ": 0.042,
                    "JJ": 0.056,
                    "VBG": 0.045,
                    "NN": 0.115,
                    "CC": 0.028,
                    "WP": 0.007,
                    "PRP$": 0.007,
                    "IN": 0.104,
                    "PRP": 0.108,
                    "VBD": 0.014,
                    "TO": 0.062,
                    "RB": 0.073,
                    "DT": 0.094,
                    "WDT": 0.003,
                    "VBP": 0.062,
                    "VB": 0.069,
                    "WRB": 0.007,
                    "NNS": 0.035,
                    "VBN": 0.01,
                    "CD": 0.007,
                    "JJR": 0.003,
                    "NNP": 0.021,
                    "MD": 0.017,
                    "RBR": 0.003,
                    ":": 0.007
                },
                "syllableRate": 3.275,
                "topicScores": [
                    [
                        "loop",
                        0.3362581838524507
                    ],
                    [
                        "list",
                        0.36883917263047217
                    ],
                    [
                        "algorithm",
                        0.4224532082882705
                    ],
                    [
                        "linear",
                        0.4289282970529857
                    ],
                    [
                        "complexity",
                        0.4863871134896678
                    ],
                    [
                        "search",
                        0.5374161016079276
                    ],
                    [
                        "example",
                        0.5532604802671955
                    ],
                    [
                        "true",
                        0.5532649023028923
                    ],
                    [
                        "way",
                        0.5567835888619903
                    ],
                    [
                        "flag",
                        0.5571746651090207
                    ],
                    [
                        "length",
                        0.559382422555351
                    ],
                    [
                        "false",
                        0.5620981890519599
                    ],
                    [
                        "thing",
                        0.5654110494990896
                    ],
                    [
                        "L.",
                        0.6531594486801425
                    ],
                    [
                        "common",
                        0.8575823793787122
                    ],
                    [
                        "lecture",
                        0.8724236948457006
                    ],
                    [
                        "beginning",
                        0.8797816036163604
                    ],
                    [
                        "sure",
                        0.8797816036163604
                    ],
                    [
                        "able",
                        0.8797816036163604
                    ],
                    [
                        "choice",
                        0.8918972607236154
                    ],
                    [
                        "design",
                        0.8918972607236154
                    ],
                    [
                        "particular",
                        0.8918972607236154
                    ],
                    [
                        "kind",
                        0.8918972607236154
                    ],
                    [
                        "consequence",
                        0.8918972607236154
                    ],
                    [
                        "term",
                        0.8918972607236154
                    ],
                    [
                        "goal",
                        0.8933853589967613
                    ],
                    [
                        "arbitrary",
                        0.8971585576155057
                    ],
                    [
                        "order",
                        0.8971585576155057
                    ],
                    [
                        "simple",
                        0.9097071846753578
                    ],
                    [
                        "unsorted",
                        0.9139547565298038
                    ]
                ],
                "topTopicSimilarity": 0.3333333333333333,
                "sharedTopicScores": [
                    [
                        "loop",
                        0.3362581838524507
                    ],
                    [
                        "list",
                        0.36883917263047217
                    ],
                    [
                        "algorithm",
                        0.4224532082882705
                    ],
                    [
                        "linear",
                        0.4289282970529857
                    ],
                    [
                        "example",
                        0.5532604802671955
                    ],
                    [
                        "way",
                        0.5567835888619903
                    ],
                    [
                        "length",
                        0.559382422555351
                    ],
                    [
                        "thing",
                        0.5654110494990896
                    ],
                    [
                        "term",
                        0.8918972607236154
                    ],
                    [
                        "order",
                        0.8971585576155057
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-2430": {
            "id": "o9nW0uBqvEo-2430",
            "heat": 0.349,
            "start": 2430.0,
            "text": " Now, you might say, wait a minute. This is really brain damaged, or if you're being more politically correct, computationally challenged. OK? In the sense of once I've found it, why bother looking at the rest of the list? So in fact, I could just return true right here. Does that change the order of growth of this algorithm? No. Changes the average time. I'm going to stop faster. But remember the order of growth captures what's the worst case behavior. And the worst case behavior is the elements not in the list I got to look at everything. So this will be an example of a linear algorithm. And you can see, I'm looping length of L times over the loop inside of there. It's taking the order one to test it. So it's order n. And if I were to actually count it, there's the expression. It's 1 plus 4n plus 1, which is 4n plus 2, which by my rule says I don't care about the additive constant. I only care about the dominant term. And I don't care about that multiplicative constant. It's order n. An example of a template you're going to see a lot. Now, order n where n is the length of the list and I need to specify that. That's the thing I'm after. If you think about it, I cheated. Sorry-- I never cheat. I'm tenure. I never cheat. I just mislead you badly. Not a chance. How do I know that accessing an element of the list",
            "metrics": {
                "relativeDCReadability": 1.0642166309517498,
                "lexicalDiversity": 0.4854014598540146,
                "posComposition": {
                    "RB": 0.073,
                    "PRP": 0.113,
                    "MD": 0.015,
                    "VB": 0.058,
                    "DT": 0.12,
                    "NN": 0.157,
                    "VBZ": 0.055,
                    "VBD": 0.018,
                    "CC": 0.036,
                    "IN": 0.109,
                    "VBP": 0.058,
                    "VBG": 0.026,
                    "RBR": 0.007,
                    "JJ": 0.033,
                    "NNP": 0.018,
                    "VBN": 0.004,
                    "WRB": 0.011,
                    "TO": 0.022,
                    "WP": 0.004,
                    "JJS": 0.007,
                    "NNS": 0.007,
                    "EX": 0.007,
                    "CD": 0.022,
                    "WDT": 0.007,
                    "PRP$": 0.004,
                    "FW": 0.004,
                    ":": 0.004
                },
                "syllableRate": 3.058,
                "topicScores": [
                    [
                        "order",
                        0.29907222060401917
                    ],
                    [
                        "list",
                        0.3529639544888039
                    ],
                    [
                        "n.",
                        0.5354928500434385
                    ],
                    [
                        "algorithm",
                        0.5409080335277424
                    ],
                    [
                        "case",
                        0.545272199967614
                    ],
                    [
                        "behavior",
                        0.5484402783816732
                    ],
                    [
                        "bad",
                        0.5507078851313254
                    ],
                    [
                        "constant",
                        0.5517121228276786
                    ],
                    [
                        "example",
                        0.552079048936436
                    ],
                    [
                        "growth",
                        0.552723206216102
                    ],
                    [
                        "time",
                        0.5608085477107552
                    ],
                    [
                        "length",
                        0.5636794133133136
                    ],
                    [
                        "loop",
                        0.5693833037391567
                    ],
                    [
                        "4n",
                        0.5723358867492847
                    ],
                    [
                        "element",
                        0.5749702328653711
                    ],
                    [
                        "L",
                        0.6772140941709244
                    ],
                    [
                        "minute",
                        0.8408806643983998
                    ],
                    [
                        "brain",
                        0.8810827158572673
                    ],
                    [
                        "correct",
                        0.8810827158572673
                    ],
                    [
                        "fact",
                        0.9062151966224802
                    ],
                    [
                        "sense",
                        0.9066806735234529
                    ],
                    [
                        "rest",
                        0.9066806735234529
                    ],
                    [
                        "true",
                        0.9118211779821003
                    ],
                    [
                        "average",
                        0.9160790743698893
                    ],
                    [
                        "expression",
                        0.9168583728460807
                    ],
                    [
                        "term",
                        0.9185834105518752
                    ],
                    [
                        "lot",
                        0.9206964201472363
                    ],
                    [
                        "linear",
                        0.9229929664542226
                    ],
                    [
                        "tenure",
                        0.9233760750303928
                    ],
                    [
                        "chance",
                        0.9246445547143795
                    ]
                ],
                "topTopicSimilarity": 0.43333333333333335,
                "sharedTopicScores": [
                    [
                        "order",
                        0.29907222060401917
                    ],
                    [
                        "list",
                        0.3529639544888039
                    ],
                    [
                        "algorithm",
                        0.5409080335277424
                    ],
                    [
                        "case",
                        0.545272199967614
                    ],
                    [
                        "bad",
                        0.5507078851313254
                    ],
                    [
                        "example",
                        0.552079048936436
                    ],
                    [
                        "growth",
                        0.552723206216102
                    ],
                    [
                        "time",
                        0.5608085477107552
                    ],
                    [
                        "length",
                        0.5636794133133136
                    ],
                    [
                        "loop",
                        0.5693833037391567
                    ],
                    [
                        "element",
                        0.5749702328653711
                    ],
                    [
                        "term",
                        0.9185834105518752
                    ],
                    [
                        "linear",
                        0.9229929664542226
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-2520": {
            "id": "o9nW0uBqvEo-2520",
            "heat": 0.519,
            "start": 2520.0,
            "text": " takes constant time? I made an assumption about that. And this is a reasonable thing to ask about-- both what am I assuming about the constant operations and how do I know that's actually true? Well, it gives me a chance to point out something that Python does very effectively. Not all languages do. But think about a list. Suppose I've got a list that's all integers. I'm going to need some amount of memory to represent each integer. So if a byte is 8 bits, I might reserve 4 bytes or 32 bits to cover any reasonable sized integer. When I represent a list, I could simply have each of them in turn. So what do I need to know? I'm going to allocate out a particular length-- say 4 bytes, 32 bits, 32 sequential elements of memory to represent each integer. And then I just need to know where's the first part of the list, what's the address and memory of the first part of the list. And to get to the i-th element, I take that base plus 4 bytes times i. And I can go straight to this point without having to walk down the list. That's nice. OK? It says, in fact, I can get to any element of memory-- I'm sorry-- any element of the list in constant time. OK. Now, what if the things I'm representing aren't integers? They're arbitrary things and they take up a big chunk of space. Well, if the list is heterogeneous, we use a nice technique called indirection. And that simply says we, again, have a list. We know the address of this point.",
            "metrics": {
                "relativeDCReadability": 1.141940512354916,
                "lexicalDiversity": 0.5,
                "posComposition": {
                    "VBZ": 0.045,
                    "JJ": 0.062,
                    "NN": 0.14,
                    "PRP": 0.086,
                    "VBD": 0.007,
                    "DT": 0.134,
                    "IN": 0.079,
                    "CC": 0.038,
                    "TO": 0.048,
                    "VB": 0.051,
                    ":": 0.014,
                    "WP": 0.014,
                    "VBP": 0.075,
                    "VBG": 0.017,
                    "NNS": 0.048,
                    "WRB": 0.01,
                    "RB": 0.045,
                    "NNP": 0.021,
                    "RP": 0.014,
                    "WDT": 0.01,
                    "CD": 0.024,
                    "MD": 0.014,
                    "VBN": 0.007
                },
                "syllableRate": 3.283,
                "topicScores": [
                    [
                        "list",
                        0.2606993604541153
                    ],
                    [
                        "integer",
                        0.31106104661261386
                    ],
                    [
                        "byte",
                        0.386352756729472
                    ],
                    [
                        "element",
                        0.3866958869638632
                    ],
                    [
                        "time",
                        0.43975488747589203
                    ],
                    [
                        "constant",
                        0.44077338710320246
                    ],
                    [
                        "memory",
                        0.44636765500740383
                    ],
                    [
                        "point",
                        0.4475330386947567
                    ],
                    [
                        "bit",
                        0.44779260678538746
                    ],
                    [
                        "thing",
                        0.4601827437801292
                    ],
                    [
                        "reasonable",
                        0.5723561331953871
                    ],
                    [
                        "nice",
                        0.5784849203975011
                    ],
                    [
                        "address",
                        0.579927997592662
                    ],
                    [
                        "Python",
                        0.6277536656952722
                    ],
                    [
                        "true",
                        0.8874241342583304
                    ],
                    [
                        "assumption",
                        0.9013088956860945
                    ],
                    [
                        "about--",
                        0.9114733293726832
                    ],
                    [
                        "operation",
                        0.9114733293726832
                    ],
                    [
                        "turn",
                        0.9156869370887524
                    ],
                    [
                        "language",
                        0.9162370713860538
                    ],
                    [
                        "chance",
                        0.9179707666631656
                    ],
                    [
                        "i.",
                        0.9211742738888364
                    ],
                    [
                        "space",
                        0.9266838878179654
                    ],
                    [
                        "sized",
                        0.9270716238488081
                    ],
                    [
                        "indirection",
                        0.9272489441360254
                    ],
                    [
                        "fact",
                        0.9309438295429066
                    ],
                    [
                        "sequential",
                        0.9313577666936574
                    ],
                    [
                        "particular",
                        0.9366036985876152
                    ],
                    [
                        "length--",
                        0.9366036985876152
                    ],
                    [
                        "base",
                        0.9385130964575321
                    ]
                ],
                "topTopicSimilarity": 0.16666666666666666,
                "sharedTopicScores": [
                    [
                        "list",
                        0.2606993604541153
                    ],
                    [
                        "element",
                        0.3866958869638632
                    ],
                    [
                        "time",
                        0.43975488747589203
                    ],
                    [
                        "thing",
                        0.4601827437801292
                    ],
                    [
                        "operation",
                        0.9114733293726832
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-2610": {
            "id": "o9nW0uBqvEo-2610",
            "heat": 0.459,
            "start": 2610.0,
            "text": " We know the address there for the i-th element of this list. But inside of here, we don't store the actual value. We store a pointer to where it is in memory. Just what these things are indicating. So they can be arbitrary size. But again, I can get to any element in constant time, which is exactly what I want. So that's great. OK. Now, suppose I tell you that the list is sorted. It's in increasing order. I can be more clever about my algorithm. Because now, as I loop through it, I can say if it's the thing I'm looking for, just return true. If the element of the list is bigger than the thing I'm looking for, I'm done. I don't need to look at the rest of the list, because I know it can't be there because it's ordered or sorted. I can just return false. If I get all the way through the loop, I can return false. So I only have to look until I get to a point where the thing in the list is bigger than what I'm looking for. It's the order of growth here. Again, the average time behavior will be faster. But the order of growth is I've got to do order of length of the list to go through the loop, order of one to do the test, and in the worst case, again, I still have to go through the entire list. So the order of growth here is the same. It is, again, linear in the length of the list, even though the runtime will be different depending whether it's sorted or not. I want you to hold on to that idea, because we're going to come back to the sorted list next week to see that there actually are much more efficient ways to use the fact that a list is",
            "metrics": {
                "relativeDCReadability": 0.8929765057337132,
                "lexicalDiversity": 0.4036144578313253,
                "posComposition": {
                    "PRP": 0.108,
                    "VBP": 0.069,
                    "DT": 0.111,
                    "NN": 0.142,
                    "RB": 0.066,
                    "IN": 0.145,
                    "JJ": 0.054,
                    "CC": 0.018,
                    "VB": 0.066,
                    "TO": 0.045,
                    "WRB": 0.006,
                    "VBZ": 0.045,
                    "NNP": 0.009,
                    "WP": 0.009,
                    "NNS": 0.006,
                    "VBG": 0.021,
                    "MD": 0.027,
                    "WDT": 0.003,
                    "VBN": 0.018,
                    "JJR": 0.009,
                    "PRP$": 0.003,
                    "PDT": 0.003,
                    "RBR": 0.006,
                    "CD": 0.003,
                    "JJS": 0.003,
                    "EX": 0.003
                },
                "syllableRate": 3.475,
                "topicScores": [
                    [
                        "list",
                        0.23078813382551946
                    ],
                    [
                        "order",
                        0.2799340989230177
                    ],
                    [
                        "thing",
                        0.3659948933770497
                    ],
                    [
                        "growth",
                        0.42307590205760204
                    ],
                    [
                        "element",
                        0.43185841661340885
                    ],
                    [
                        "loop",
                        0.4366040264931733
                    ],
                    [
                        "false",
                        0.5471500965435315
                    ],
                    [
                        "big",
                        0.5584258141590616
                    ],
                    [
                        "length",
                        0.5672173951358201
                    ],
                    [
                        "time",
                        0.5672368396310796
                    ],
                    [
                        "way",
                        0.5747189014160116
                    ],
                    [
                        "sorted",
                        0.5760308901695846
                    ],
                    [
                        "address",
                        0.8730260309389285
                    ],
                    [
                        "value",
                        0.8747656332340061
                    ],
                    [
                        "memory",
                        0.8873220584722159
                    ],
                    [
                        "actual",
                        0.8874563639624439
                    ],
                    [
                        "size",
                        0.9010833073291051
                    ],
                    [
                        "pointer",
                        0.9040362242716554
                    ],
                    [
                        "great",
                        0.9087152298557349
                    ],
                    [
                        "arbitrary",
                        0.9113773008809722
                    ],
                    [
                        "constant",
                        0.9152508267296149
                    ],
                    [
                        "algorithm",
                        0.9172572322751719
                    ],
                    [
                        "true",
                        0.9186967866063981
                    ],
                    [
                        "fast",
                        0.9253535107818284
                    ],
                    [
                        "clever",
                        0.9298818366516142
                    ],
                    [
                        "rest",
                        0.9331810675312093
                    ],
                    [
                        "average",
                        0.933308705247974
                    ],
                    [
                        "test",
                        0.9338979189979468
                    ],
                    [
                        "bad",
                        0.9338979189979468
                    ],
                    [
                        "case",
                        0.9338979189979468
                    ]
                ],
                "topTopicSimilarity": 0.4666666666666667,
                "sharedTopicScores": [
                    [
                        "list",
                        0.23078813382551946
                    ],
                    [
                        "order",
                        0.2799340989230177
                    ],
                    [
                        "thing",
                        0.3659948933770497
                    ],
                    [
                        "growth",
                        0.42307590205760204
                    ],
                    [
                        "element",
                        0.43185841661340885
                    ],
                    [
                        "loop",
                        0.4366040264931733
                    ],
                    [
                        "big",
                        0.5584258141590616
                    ],
                    [
                        "length",
                        0.5672173951358201
                    ],
                    [
                        "time",
                        0.5672368396310796
                    ],
                    [
                        "way",
                        0.5747189014160116
                    ],
                    [
                        "size",
                        0.9010833073291051
                    ],
                    [
                        "algorithm",
                        0.9172572322751719
                    ],
                    [
                        "bad",
                        0.9338979189979468
                    ],
                    [
                        "case",
                        0.9338979189979468
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-2700": {
            "id": "o9nW0uBqvEo-2700",
            "heat": 0.169,
            "start": 2700.0,
            "text": " sorted to do the search. But both of these versions same order growth, order n. OK. So lurching through a list-- right, sorry-- searching through a list in sequence is linear because of that loop. There are other things that have a similar flavor. And I'm going to do these quickly to get to the last example. Imagine I give you a string of characters that are all soon to be composed of decimal digits. I just want to add them all up. This is also linear, because there's the loop. I'm going to loop over the characters in the string. I'm going to cast them into integers, add them in, and return the value. This is linear in the length of the input s. Notice the pattern. That loop-- that in-iterative loop-- it's got that linear behavior, because inside of the loop constant number of things that I'm executing. We already looked at fact iter. Same idea. There's the loop I'm going to do that n times inside the loop a constant amount of things. So looping around it is order n. There's the actual expression. But again, the pattern I want you to see here is that this is order n. OK. Last example for today. I know you're all secretly looking at your watches. Standard loops, typically linear. What about nested loops? What about loops that have loops inside of them? How long do they take? I want to show you a couple of examples. And mostly, I want to show you how to reason about them.",
            "metrics": {
                "relativeDCReadability": 1.0534209840647282,
                "lexicalDiversity": 0.48175182481751827,
                "posComposition": {
                    "VBN": 0.011,
                    "TO": 0.047,
                    "VB": 0.051,
                    "DT": 0.113,
                    "NN": 0.139,
                    "CC": 0.018,
                    "IN": 0.135,
                    "NNS": 0.051,
                    "JJ": 0.066,
                    "NNP": 0.026,
                    "VBG": 0.033,
                    ":": 0.015,
                    "VBZ": 0.044,
                    "EX": 0.015,
                    "VBP": 0.066,
                    "WDT": 0.015,
                    "PRP": 0.091,
                    "RB": 0.044,
                    "VBD": 0.007,
                    "PRP$": 0.004,
                    "WP": 0.007,
                    "WRB": 0.004
                },
                "syllableRate": 3.142,
                "topicScores": [
                    [
                        "loop",
                        0.24560591261723042
                    ],
                    [
                        "linear",
                        0.3307577570961058
                    ],
                    [
                        "order",
                        0.3688091512685159
                    ],
                    [
                        "n.",
                        0.4198795313260719
                    ],
                    [
                        "thing",
                        0.43458170197387613
                    ],
                    [
                        "example",
                        0.4351115909171101
                    ],
                    [
                        "search",
                        0.5269436439582753
                    ],
                    [
                        "pattern",
                        0.557421910045267
                    ],
                    [
                        "string",
                        0.5594745278249549
                    ],
                    [
                        "constant",
                        0.5638498562198354
                    ],
                    [
                        "character",
                        0.5668045008170144
                    ],
                    [
                        "Notice",
                        0.6740504115681416
                    ],
                    [
                        "growth",
                        0.8849009626613641
                    ],
                    [
                        "flavor",
                        0.889829169480912
                    ],
                    [
                        "version",
                        0.8921043032969924
                    ],
                    [
                        "list--",
                        0.8965613483665744
                    ],
                    [
                        "right",
                        0.8965613483665744
                    ],
                    [
                        "sorry--",
                        0.8965613483665744
                    ],
                    [
                        "digit",
                        0.9002714677336782
                    ],
                    [
                        "sequence",
                        0.903114835544171
                    ],
                    [
                        "similar",
                        0.9040380261291792
                    ],
                    [
                        "idea",
                        0.9103353212835107
                    ],
                    [
                        "value",
                        0.9110163326754613
                    ],
                    [
                        "decimal",
                        0.9132648428839246
                    ],
                    [
                        "iter",
                        0.9155911563141848
                    ],
                    [
                        "standard",
                        0.9158510490581012
                    ],
                    [
                        "expression",
                        0.9188156332911233
                    ],
                    [
                        "today",
                        0.9205035824633848
                    ],
                    [
                        "watch",
                        0.9212464298614808
                    ],
                    [
                        "integer",
                        0.922729941719485
                    ]
                ],
                "topTopicSimilarity": 0.23333333333333334,
                "sharedTopicScores": [
                    [
                        "loop",
                        0.24560591261723042
                    ],
                    [
                        "linear",
                        0.3307577570961058
                    ],
                    [
                        "order",
                        0.3688091512685159
                    ],
                    [
                        "thing",
                        0.43458170197387613
                    ],
                    [
                        "example",
                        0.4351115909171101
                    ],
                    [
                        "growth",
                        0.8849009626613641
                    ],
                    [
                        "right",
                        0.8965613483665744
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-2790": {
            "id": "o9nW0uBqvEo-2790",
            "heat": 0.327,
            "start": 2790.0,
            "text": " Suppose I gave you two lists composed of integers, and I want to know is the first list a subset of the second list. Codes in the handbook, by the way, if you want to go run it. But basically, the simple idea would be I'm going to loop over every element in the first list. And for each one of those, I want to say is it in the second list? So I'll use the same kind of trick. I'll set up a flag that's initially false. And then I'm going to loop over everything in the second list. And if that thing is equal to the thing I'm looking for, I'll set match to true and break out of the loop-- the inner loop. If I get all the way through the second list and I haven't found the thing I'm looking for, when I break out or come out of this loop, matched in that case, will still be false and all return false. But if up here, I found something that matched, match would be true. I break out of it. It's not false. Therefore, a return true. I want you look at the code. You should be able to look at this and realize what it's doing. For each element in the first list, I walk through the second list to say is that element there. And if it is, I return true. If that's true for all of the elements in the first list, I return true overall. OK. Order of growth. Outer loop-- this loop I'm going to execute the length of L1 times. Right? I've got to walk down that first list. If I call that n, it's going to take that n times over the outer loop.",
            "metrics": {
                "relativeDCReadability": 0.8788980591255015,
                "lexicalDiversity": 0.4728434504792332,
                "posComposition": {
                    "NNP": 0.019,
                    "PRP": 0.105,
                    "VBD": 0.016,
                    "CD": 0.006,
                    "NNS": 0.016,
                    "IN": 0.137,
                    "CC": 0.038,
                    "VBP": 0.064,
                    "TO": 0.038,
                    "VB": 0.067,
                    "VBZ": 0.032,
                    "DT": 0.128,
                    "JJ": 0.083,
                    "NN": 0.134,
                    "RB": 0.029,
                    "MD": 0.022,
                    "VBG": 0.022,
                    "RP": 0.016,
                    "WDT": 0.003,
                    ":": 0.006,
                    "PDT": 0.003,
                    "VBN": 0.006,
                    "WRB": 0.003,
                    "WP": 0.003
                },
                "syllableRate": 3.1,
                "topicScores": [
                    [
                        "list",
                        0.22445063919111627
                    ],
                    [
                        "second",
                        0.30761222672434974
                    ],
                    [
                        "loop",
                        0.31076491659624317
                    ],
                    [
                        "true",
                        0.3133039577767403
                    ],
                    [
                        "return",
                        0.37146672036987927
                    ],
                    [
                        "false",
                        0.37512358952056923
                    ],
                    [
                        "element",
                        0.3836263081570025
                    ],
                    [
                        "match",
                        0.38840640501282386
                    ],
                    [
                        "thing",
                        0.441732550821635
                    ],
                    [
                        "way",
                        0.5606159192523712
                    ],
                    [
                        "code",
                        0.5618721523921326
                    ],
                    [
                        "outer",
                        0.5786416197272608
                    ],
                    [
                        "time",
                        0.5816070820647782
                    ],
                    [
                        "second list",
                        0.687225429581467
                    ],
                    [
                        "L1",
                        0.6970816012369935
                    ],
                    [
                        "integer",
                        0.8348879363962759
                    ],
                    [
                        "subset",
                        0.8446718692366745
                    ],
                    [
                        "handbook",
                        0.8838567526414952
                    ],
                    [
                        "simple",
                        0.9024264565759427
                    ],
                    [
                        "trick",
                        0.9066834045190106
                    ],
                    [
                        "idea",
                        0.9086462151232177
                    ],
                    [
                        "kind",
                        0.924173552476352
                    ],
                    [
                        "flag",
                        0.9284265263974957
                    ],
                    [
                        "inner",
                        0.9294820055727162
                    ],
                    [
                        "case",
                        0.9316289520543991
                    ],
                    [
                        "order",
                        0.933652732738408
                    ],
                    [
                        "growth",
                        0.933652732738408
                    ],
                    [
                        "equal",
                        0.9341030631019358
                    ],
                    [
                        "able",
                        0.9432585526743497
                    ],
                    [
                        "length",
                        0.9468672135237147
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "list",
                        0.22445063919111627
                    ],
                    [
                        "second",
                        0.30761222672434974
                    ],
                    [
                        "loop",
                        0.31076491659624317
                    ],
                    [
                        "element",
                        0.3836263081570025
                    ],
                    [
                        "thing",
                        0.441732550821635
                    ],
                    [
                        "way",
                        0.5606159192523712
                    ],
                    [
                        "time",
                        0.5816070820647782
                    ],
                    [
                        "case",
                        0.9316289520543991
                    ],
                    [
                        "order",
                        0.933652732738408
                    ],
                    [
                        "growth",
                        0.933652732738408
                    ],
                    [
                        "length",
                        0.9468672135237147
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-2880": {
            "id": "o9nW0uBqvEo-2880",
            "heat": 0.322,
            "start": 2880.0,
            "text": " But what about n here? All of the earlier examples, we had a constant number of operations inside of the loop. Here, we don't. We've got another loop that's looping over in principle all the elements of the second list. So in each iteration is going to execute the inner loop up to length of L2 times, where inside of this inner loop there is a constant number of operations. Ah, nice. That's the multiplicative law of orders of growth. It says if this is order length L1. And we're going to do that then order length of L2 times, the order of growth is a product. And the most common or the worst case behavior is going to be when the lists are of the same length and none of the elements of L1 are in L2. And in that case, we're going to get something that's order n squared quadratic, where n is the length of the list in terms of number of operations. I don't really care about subsets. I've got one more example. We could similarly do intersection. If I wanted to say what is the intersection of two lists? What elements are on both list 1 and list 2? Same basic idea. Here, I've got a pair of nested loops. I'm looping over everything in L1. For that, I'm looping over everything in L2. And if they are the same, I'm going to put that into a temporary variable. Once I've done that, I need to clean things up. So I'm going to write another loop that",
            "metrics": {
                "relativeDCReadability": 0.9872017486898843,
                "lexicalDiversity": 0.4729241877256318,
                "posComposition": {
                    "CC": 0.029,
                    "WP": 0.011,
                    "IN": 0.137,
                    "NN": 0.155,
                    "RB": 0.036,
                    "DT": 0.119,
                    "JJR": 0.007,
                    "VBZ": 0.051,
                    "PRP": 0.065,
                    "VBD": 0.018,
                    "JJ": 0.047,
                    "NNS": 0.051,
                    "VBP": 0.065,
                    "VBN": 0.007,
                    "WDT": 0.007,
                    "VBG": 0.032,
                    "RP": 0.014,
                    "PDT": 0.004,
                    "NNP": 0.036,
                    "TO": 0.032,
                    "VB": 0.036,
                    "WRB": 0.011,
                    "EX": 0.004,
                    "RBS": 0.004,
                    "JJS": 0.004,
                    "CD": 0.014,
                    "MD": 0.004
                },
                "syllableRate": 3.133,
                "topicScores": [
                    [
                        "loop",
                        0.2557928019807566
                    ],
                    [
                        "L2",
                        0.28657325819031154
                    ],
                    [
                        "list",
                        0.3138315895786624
                    ],
                    [
                        "L1",
                        0.31424893118014535
                    ],
                    [
                        "length",
                        0.3302133667709268
                    ],
                    [
                        "order",
                        0.33248505115021965
                    ],
                    [
                        "operation",
                        0.407295540974688
                    ],
                    [
                        "number",
                        0.41230696082262236
                    ],
                    [
                        "element",
                        0.44043910158644134
                    ],
                    [
                        "constant",
                        0.5293936872436787
                    ],
                    [
                        "time",
                        0.5462601143817442
                    ],
                    [
                        "growth",
                        0.5491351317773843
                    ],
                    [
                        "example",
                        0.5572428126302463
                    ],
                    [
                        "inner",
                        0.5613736747399946
                    ],
                    [
                        "case",
                        0.5705211060630039
                    ],
                    [
                        "intersection",
                        0.5712852718205134
                    ],
                    [
                        "L2 time",
                        0.6214897263778811
                    ],
                    [
                        "early",
                        0.8698661089301865
                    ],
                    [
                        "nice",
                        0.8923652099864564
                    ],
                    [
                        "second",
                        0.9015610162181564
                    ],
                    [
                        "principle",
                        0.9080597672153946
                    ],
                    [
                        "product",
                        0.910699386759897
                    ],
                    [
                        "iteration",
                        0.9147843202851574
                    ],
                    [
                        "subset",
                        0.916566323900624
                    ],
                    [
                        "idea",
                        0.922392176771735
                    ],
                    [
                        "multiplicative",
                        0.9230658041220279
                    ],
                    [
                        "law",
                        0.9230658041220279
                    ],
                    [
                        "variable",
                        0.9253836490022335
                    ],
                    [
                        "quadratic",
                        0.9265683563178826
                    ],
                    [
                        "basic",
                        0.9280387854605975
                    ]
                ],
                "topTopicSimilarity": 0.4,
                "sharedTopicScores": [
                    [
                        "loop",
                        0.2557928019807566
                    ],
                    [
                        "list",
                        0.3138315895786624
                    ],
                    [
                        "length",
                        0.3302133667709268
                    ],
                    [
                        "order",
                        0.33248505115021965
                    ],
                    [
                        "operation",
                        0.407295540974688
                    ],
                    [
                        "number",
                        0.41230696082262236
                    ],
                    [
                        "element",
                        0.44043910158644134
                    ],
                    [
                        "time",
                        0.5462601143817442
                    ],
                    [
                        "growth",
                        0.5491351317773843
                    ],
                    [
                        "example",
                        0.5572428126302463
                    ],
                    [
                        "case",
                        0.5705211060630039
                    ],
                    [
                        "second",
                        0.9015610162181564
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-2970": {
            "id": "o9nW0uBqvEo-2970",
            "heat": 0.148,
            "start": 2970.0,
            "text": " sets up an internal variable and then runs through everything in the list I accumulated, making sure that it's not already there. And as long as it isn't, I'm going to put it in the result and return it. I did it quickly. You can look through it. You'll see it does the right thing. What I want it to see is what's the order of growth. I need to look at this piece. Then I need to look at that piece. This piece-- well, it's order length L1 to do the outer loop. For each version of e1, I've got to do order of length L2 things inside to accumulate them. So that's quadratic. What about the second loop? Well, this one is a little more subtle. I'm only looping over temp, which is at most going to be length L1 long. But I'm checking to see is that element in a list? And it depends on the implementation. But typically, that's going to take up to the length of the list to do it. I got to look to see is it there or not. And so that inner loop if we assume the lists are the same size is also going to take potentially up to length L1 steps. And so this is, again, quadratic. It's actually two quadratics-- one for the first nested loop, one for the second one, because there's an implicit second loop right there. But overall, it's quadratic. So what you see in general-- this is a really dumb way to compute n squared.",
            "metrics": {
                "relativeDCReadability": 0.9057814580808113,
                "lexicalDiversity": 0.4568345323741007,
                "posComposition": {
                    "NNS": 0.022,
                    "RP": 0.007,
                    "DT": 0.097,
                    "JJ": 0.068,
                    "NN": 0.115,
                    "CC": 0.036,
                    "RB": 0.09,
                    "VBZ": 0.072,
                    "IN": 0.094,
                    "PRP": 0.104,
                    "VBD": 0.011,
                    "VBG": 0.025,
                    "VBP": 0.04,
                    "TO": 0.061,
                    "VB": 0.068,
                    "MD": 0.007,
                    "WP": 0.014,
                    ":": 0.011,
                    "NNP": 0.018,
                    "VBN": 0.007,
                    "NNPS": 0.004,
                    "RBR": 0.004,
                    "WDT": 0.004,
                    "RBS": 0.004,
                    "EX": 0.007,
                    "CD": 0.011
                },
                "syllableRate": 2.958,
                "topicScores": [
                    [
                        "loop",
                        0.31445047829408107
                    ],
                    [
                        "length",
                        0.33674108249272855
                    ],
                    [
                        "list",
                        0.37346040662947627
                    ],
                    [
                        "l1",
                        0.40468709375685014
                    ],
                    [
                        "quadratic",
                        0.41399535662624043
                    ],
                    [
                        "order",
                        0.43118457108696573
                    ],
                    [
                        "second",
                        0.4424893146155377
                    ],
                    [
                        "piece",
                        0.5271439931545898
                    ],
                    [
                        "thing",
                        0.5558751157314296
                    ],
                    [
                        "long",
                        0.5571187520499441
                    ],
                    [
                        "right",
                        0.5649856820967866
                    ],
                    [
                        "l2",
                        0.6631639362895952
                    ],
                    [
                        "length l1",
                        0.7975702347377477
                    ],
                    [
                        "sure",
                        0.8047943705921984
                    ],
                    [
                        "internal",
                        0.8159684650809321
                    ],
                    [
                        "variable",
                        0.8159684650809321
                    ],
                    [
                        "result",
                        0.8696724980628138
                    ],
                    [
                        "growth",
                        0.8939718394899917
                    ],
                    [
                        "subtle",
                        0.912728971335925
                    ],
                    [
                        "implementation",
                        0.9163782215910492
                    ],
                    [
                        "outer",
                        0.9174235981222283
                    ],
                    [
                        "step",
                        0.9190766539772103
                    ],
                    [
                        "e1",
                        0.919543452007679
                    ],
                    [
                        "version",
                        0.9247630673469954
                    ],
                    [
                        "temp",
                        0.9254270914147188
                    ],
                    [
                        "little",
                        0.9291745231400299
                    ],
                    [
                        "nested",
                        0.9310858264784679
                    ],
                    [
                        "element",
                        0.9312912616452903
                    ],
                    [
                        "inner",
                        0.9344119899746819
                    ],
                    [
                        "size",
                        0.9344119899746819
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "loop",
                        0.31445047829408107
                    ],
                    [
                        "length",
                        0.33674108249272855
                    ],
                    [
                        "list",
                        0.37346040662947627
                    ],
                    [
                        "order",
                        0.43118457108696573
                    ],
                    [
                        "second",
                        0.4424893146155377
                    ],
                    [
                        "thing",
                        0.5558751157314296
                    ],
                    [
                        "right",
                        0.5649856820967866
                    ],
                    [
                        "growth",
                        0.8939718394899917
                    ],
                    [
                        "step",
                        0.9190766539772103
                    ],
                    [
                        "element",
                        0.9312912616452903
                    ],
                    [
                        "size",
                        0.9344119899746819
                    ]
                ]
            }
        },
        "o9nW0uBqvEo-3060": {
            "id": "o9nW0uBqvEo-3060",
            "heat": 0.199,
            "start": 3060.0,
            "text": " When you have nested loops, typically, it's going to be quadratic behavior. And so what we've done then is we've started to build up examples. We've now seen simple looping mechanisms, simple iterative mechanisms, nested loops. They tend to naturally give rise to linear and quadratic complexity. And next time, we're going to start looking at more interesting classes. And we'll see you next time.",
            "metrics": {
                "relativeDCReadability": 0.9901147990978225,
                "lexicalDiversity": 0.5915492957746479,
                "posComposition": {
                    "WRB": 0.014,
                    "PRP": 0.127,
                    "VBP": 0.085,
                    "VBN": 0.07,
                    "NNS": 0.07,
                    "RB": 0.07,
                    "VBZ": 0.028,
                    "VBG": 0.056,
                    "TO": 0.07,
                    "VB": 0.085,
                    "JJ": 0.127,
                    "NN": 0.07,
                    "CC": 0.056,
                    "WP": 0.014,
                    "RP": 0.014,
                    "IN": 0.014,
                    "RBR": 0.014,
                    "MD": 0.014
                },
                "syllableRate": 0.925,
                "topicScores": [
                    [
                        "loop",
                        0.4447651907995157
                    ],
                    [
                        "time",
                        0.5586366045780495
                    ],
                    [
                        "quadratic",
                        0.5598804508300765
                    ],
                    [
                        "mechanism",
                        0.5640280099868104
                    ],
                    [
                        "simple",
                        0.5715964047198143
                    ],
                    [
                        "behavior",
                        0.747768586968059
                    ],
                    [
                        "example",
                        0.8169089652310159
                    ],
                    [
                        "complexity",
                        0.8594174054934982
                    ],
                    [
                        "class",
                        0.8691871672714679
                    ],
                    [
                        "iterative",
                        0.8700358003967263
                    ],
                    [
                        "nested",
                        0.8700358003967263
                    ],
                    [
                        "interesting",
                        0.9084730976383218
                    ],
                    [
                        "rise",
                        0.9157398816955522
                    ],
                    [
                        "linear",
                        0.9157398816955522
                    ],
                    [
                        "quadratic behavior",
                        1.9723159124671814
                    ],
                    [
                        "quadratic complexity",
                        3.2129742484230897
                    ],
                    [
                        "nested loop",
                        3.423277147165386
                    ],
                    [
                        "iterative mechanism",
                        3.5000455583527224
                    ],
                    [
                        "simple iterative",
                        3.721806461942756
                    ],
                    [
                        "interesting class",
                        3.753600861319673
                    ],
                    [
                        "simple iterative mechanism",
                        21.107764290545358
                    ]
                ],
                "topTopicSimilarity": 0.19047619047619047,
                "sharedTopicScores": [
                    [
                        "loop",
                        0.4447651907995157
                    ],
                    [
                        "time",
                        0.5586366045780495
                    ],
                    [
                        "example",
                        0.8169089652310159
                    ],
                    [
                        "linear",
                        0.9157398816955522
                    ]
                ]
            }
        }
    }
}