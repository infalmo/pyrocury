[{"text": "The following content is\nprovided under a Creative", "start": 0.79, "duration": 2.4}, {"text": "Commons license.", "start": 3.19, "duration": 1.54}, {"text": "Your support will help\nMIT OpenCourseWare", "start": 4.73, "duration": 2.3}, {"text": "continue to offer high quality\neducational resources for free.", "start": 7.03, "duration": 4.36}, {"text": "To make a donation or\nview additional materials", "start": 11.39, "duration": 2.6}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.99, "duration": 3.89}, {"text": "at ocw.mit.edu.", "start": 17.88, "duration": 0.96}, {"text": "PROFESSOR: All right\neveryone let's get started.", "start": 31.056, "duration": 3.024}, {"text": "All right good afternoon on\nthis rainy, rainy sad afternoon.", "start": 34.08, "duration": 3.21}, {"text": "So-- I'm glad we're\ninside though-- all right", "start": 37.29, "duration": 2.61}, {"text": "so Lecture 4 of 6.0001 in 600.", "start": 39.9, "duration": 4.73}, {"text": "Quick, quick recap of\nwhat we did last time.", "start": 44.63, "duration": 2.22}, {"text": "So last time we did a little\nbit more string manipulations,", "start": 46.85, "duration": 3.57}, {"text": "and then we saw how you can\nuse for loops over strings", "start": 50.42, "duration": 3.21}, {"text": "directly.", "start": 53.63, "duration": 0.75}, {"text": "So instead of having for\nloops that iterate over", "start": 54.38, "duration": 2.93}, {"text": "range-- so 0, 1, 2,\n3, 4, and so on--", "start": 57.31, "duration": 2.74}, {"text": "you saw that it was more\npowerful to sometimes use", "start": 60.05, "duration": 2.55}, {"text": "for loops that iterate over\nstring objects directly.", "start": 62.6, "duration": 5.751}, {"text": "So that was the first\nhalf of the lecture.", "start": 68.351, "duration": 1.749}, {"text": "In the second half, we started\nlooking at different ways", "start": 70.1, "duration": 2.94}, {"text": "that you can implement the\ndifferent implementations", "start": 73.04, "duration": 5.88}, {"text": "to the same problem.", "start": 78.92, "duration": 0.9}, {"text": "So we saw the problem of\nfinding the cube root,", "start": 79.82, "duration": 3.06}, {"text": "and we saw some implementations.", "start": 82.88, "duration": 3.09}, {"text": "We saw the Guess\nand Check method,", "start": 85.97, "duration": 2.19}, {"text": "and the approximation method.", "start": 88.16, "duration": 2.01}, {"text": "And then we looked\nat what I thought", "start": 90.17, "duration": 2.1}, {"text": "was the most powerful method,\nwhich was the bisection method.", "start": 92.27, "duration": 3.064}, {"text": "And this one, if you\nremember, I played a game", "start": 95.334, "duration": 1.916}, {"text": "with someone in the\naudience where I guessed", "start": 97.25, "duration": 2.43}, {"text": "a number between 0 and 100.", "start": 99.68, "duration": 2.49}, {"text": "And we saw that I was able\nto guess that number really,", "start": 102.17, "duration": 2.49}, {"text": "really quickly using\nthe bisection method.", "start": 104.66, "duration": 2.46}, {"text": "And that's the\nmethod that you're", "start": 107.12, "duration": 1.634}, {"text": "going to implement-- that you\nare currently implementing--", "start": 108.754, "duration": 2.416}, {"text": "in your problem set.", "start": 111.17, "duration": 2.82}, {"text": "OK so today-- so that sort\nof finishes introduction", "start": 113.99, "duration": 9.91}, {"text": "to some of the more basic\nmechanisms in Python.", "start": 123.9, "duration": 3.234}, {"text": "And today we're going\nto talk about how", "start": 127.134, "duration": 1.625}, {"text": "to structure your programs\nsuch that you write", "start": 128.759, "duration": 2.881}, {"text": "nice, coherent code-- reusable\ncode-- by hiding away some", "start": 131.64, "duration": 4.02}, {"text": "of the details in your code.", "start": 135.66, "duration": 2.207}, {"text": "And to do that we're going\nto look at these things", "start": 137.867, "duration": 2.083}, {"text": "called functions.", "start": 139.95, "duration": 2.91}, {"text": "All right so just\nstepping back and sort", "start": 142.86, "duration": 2.59}, {"text": "of getting a high-level view of\nhow we write the code so far.", "start": 145.45, "duration": 3.42}, {"text": "So so far the way that\nyou've been writing code", "start": 148.87, "duration": 3.57}, {"text": "for your programs\nis you open a file,", "start": 152.44, "duration": 2.41}, {"text": "you type some code to solve\na particular problem given,", "start": 154.85, "duration": 2.91}, {"text": "like in your problem\nsets, each file", "start": 157.76, "duration": 3.86}, {"text": "contains some piece of code, you\nhave sequences of instructions", "start": 161.62, "duration": 4.06}, {"text": "that contain maybe assignments,\nloops, conditionals,", "start": 165.68, "duration": 3.36}, {"text": "and so on and so on.", "start": 169.04, "duration": 1.66}, {"text": "But really you have one\nfile that contains each code", "start": 170.7, "duration": 3.65}, {"text": "and you write everything\nin that particular file.", "start": 174.35, "duration": 3.84}, {"text": "But this is OK for\nsmaller problems", "start": 178.19, "duration": 2.845}, {"text": "that we've been seeing\nso far, but when", "start": 181.035, "duration": 1.625}, {"text": "you're starting to write\nlarge pieces of code", "start": 182.66, "duration": 2.04}, {"text": "it's going to get really\nmessy, really quickly.", "start": 184.7, "duration": 2.82}, {"text": "So think about if you\nwant to use a for loop", "start": 187.52, "duration": 2.82}, {"text": "in one part of\nyour code, and you", "start": 190.34, "duration": 2.414}, {"text": "find it useful to use\nthat same for loop", "start": 192.754, "duration": 1.666}, {"text": "in another part of your code.", "start": 194.42, "duration": 2.28}, {"text": "Some point in the future as\nyou're debugging your code,", "start": 196.7, "duration": 2.59}, {"text": "you might want to change\nyour original for loop,", "start": 199.29, "duration": 2.0}, {"text": "you have to figure out\nall the other places", "start": 201.29, "duration": 1.791}, {"text": "where you've used that type\nof for loop for example.", "start": 203.081, "duration": 3.939}, {"text": "So as you're scaling\nyour code, you'll", "start": 207.02, "duration": 3.42}, {"text": "find it harder to keep\ntrack of these details.", "start": 210.44, "duration": 2.545}, {"text": "So this is where functions\nwill come into play in today's", "start": 212.985, "duration": 2.375}, {"text": "lecture-- will help you out.", "start": 215.36, "duration": 1.83}, {"text": "So if you want to be\nconsidered a good programmer,", "start": 220.49, "duration": 5.09}, {"text": "a good programming style would\nbe to not necessarily add", "start": 225.58, "duration": 3.84}, {"text": "lots and lots of lines\nof code, but really", "start": 229.42, "duration": 1.8}, {"text": "to add more functionality\nto your programs.", "start": 231.22, "duration": 3.39}, {"text": "So how many different things--\nhow many different features--", "start": 234.61, "duration": 2.82}, {"text": "can your program do, rather\nthan how long can your code be.", "start": 237.43, "duration": 3.99}, {"text": "And that'll help you\nlater on look at your code", "start": 241.42, "duration": 2.714}, {"text": "if you need it for\na future class,", "start": 244.134, "duration": 1.416}, {"text": "and it'll help others if they\nwant to look at your code", "start": 245.55, "duration": 2.291}, {"text": "later on if they find it useful.", "start": 247.841, "duration": 3.089}, {"text": "So today we're introducing\nthis idea of functions.", "start": 250.93, "duration": 3.0}, {"text": "And functions are\nmechanisms to achieve", "start": 253.93, "duration": 2.469}, {"text": "decomposition and abstraction.", "start": 256.399, "duration": 3.011}, {"text": "So these are two\nkey words here that", "start": 259.41, "duration": 1.787}, {"text": "are going to pop up\nin today's lecture", "start": 261.197, "duration": 1.583}, {"text": "and also in future lectures.", "start": 262.78, "duration": 2.08}, {"text": "So before I introduce\ndecomposition and abstraction", "start": 264.86, "duration": 3.67}, {"text": "in the context of\nfunctions, let's", "start": 268.53, "duration": 1.89}, {"text": "first take a look at just\nsort of a real-life example.", "start": 270.42, "duration": 3.325}, {"text": "So let's take a projector.", "start": 273.745, "duration": 1.685}, {"text": "I'm using one right now.", "start": 275.43, "duration": 2.28}, {"text": "Quick show of hands.", "start": 277.71, "duration": 2.61}, {"text": "If I give you all of the\nelectronic components", "start": 280.32, "duration": 2.22}, {"text": "that are part of a projector--\nresistors, a fan, a light bulb,", "start": 282.54, "duration": 4.93}, {"text": "a lens, the casing, all of\nthe different parts in it.", "start": 287.47, "duration": 3.86}, {"text": "Who here would be able\nto build a projector?", "start": 291.33, "duration": 6.1}, {"text": "Do I see a hand?", "start": 297.43, "duration": 0.72}, {"text": "No?", "start": 298.15, "duration": 0.53}, {"text": "Ooh oh yeah nice!", "start": 298.68, "duration": 2.23}, {"text": "You can also lie.", "start": 300.91, "duration": 1.05}, {"text": "I won't know the difference.", "start": 301.96, "duration": 1.65}, {"text": "But if you can do that,\nI'd be very impressed.", "start": 303.61, "duration": 3.18}, {"text": "All right so you can't really\nput together a projector right?", "start": 306.79, "duration": 3.51}, {"text": "Another show of hands.", "start": 310.3, "duration": 2.31}, {"text": "If I gave you a projector\nthat's fully assembled", "start": 312.61, "duration": 2.916}, {"text": "and I gave you a\ncomputer, for example,", "start": 315.526, "duration": 1.624}, {"text": "who would be able to maybe\nfigure out within let's say", "start": 317.15, "duration": 2.25}, {"text": "an hour how to make\nthem work together?", "start": 319.4, "duration": 3.96}, {"text": "Good, a fair bit of the class.", "start": 323.36, "duration": 2.37}, {"text": "That's perfect.", "start": 325.73, "duration": 1.06}, {"text": "That's exactly the answers\nI was trying to get at here.", "start": 326.79, "duration": 3.14}, {"text": "So none of us really\nknow how a projector", "start": 329.93, "duration": 4.7}, {"text": "works-- the internals--\nbut a lot more of us", "start": 334.63, "duration": 2.79}, {"text": "know how to work a\nprojector, just given maybe", "start": 337.42, "duration": 3.3}, {"text": "a set of basic instructions\nor just intuitively speaking.", "start": 340.72, "duration": 4.44}, {"text": "So you see the projector\nas sort of a black box.", "start": 345.16, "duration": 2.52}, {"text": "You don't need to know how\nit works in order to use it.", "start": 347.68, "duration": 3.59}, {"text": "You know maybe what inputs\nit might take, what's it", "start": 351.27, "duration": 3.88}, {"text": "supposed to do at a high level.", "start": 355.15, "duration": 1.89}, {"text": "Take whatever's on my screen and\nput it up on the large screen", "start": 357.04, "duration": 4.08}, {"text": "there, just magnify\nit, but you don't", "start": 361.12, "duration": 2.64}, {"text": "know how it does it-- how\nthe components work together.", "start": 363.76, "duration": 3.22}, {"text": "So that's the idea\nof abstraction.", "start": 366.98, "duration": 2.07}, {"text": "You don't need to know how\nthe projector works in order", "start": 369.05, "duration": 2.33}, {"text": "to use it.", "start": 371.38, "duration": 2.25}, {"text": "OK that's abstraction.", "start": 373.63, "duration": 2.22}, {"text": "The other half of that\nwas decomposition.", "start": 375.85, "duration": 3.3}, {"text": "So let's say that now,\ngiven a projector,", "start": 379.15, "duration": 3.6}, {"text": "I want to project a very,\nvery large image down", "start": 382.75, "duration": 2.94}, {"text": "on a very large stage.", "start": 385.69, "duration": 3.15}, {"text": "For example, this is\nfrom one of the Olympics.", "start": 388.84, "duration": 2.85}, {"text": "It's a stage of what,\nlike 10 football fields,", "start": 391.69, "duration": 2.25}, {"text": "something like that?", "start": 393.94, "duration": 1.4}, {"text": "Something massive.", "start": 395.34, "duration": 0.75}, {"text": "You could build one\nprojector that's", "start": 396.09, "duration": 1.99}, {"text": "able to project a\nvery large image,", "start": 398.08, "duration": 1.68}, {"text": "but that would be\nreally expensive", "start": 399.76, "duration": 2.04}, {"text": "and you'd have to build\nthis one projector that's", "start": 401.8, "duration": 2.12}, {"text": "used for this one time.", "start": 403.92, "duration": 3.512}, {"text": "So instead what\nyou could do is you", "start": 407.432, "duration": 1.458}, {"text": "can take a bunch of\nsmaller projectors", "start": 408.89, "duration": 3.96}, {"text": "and feed different inputs\nto each one of them.", "start": 412.85, "duration": 3.935}, {"text": "And as you're feeding\ndifferent inputs,", "start": 416.785, "duration": 1.625}, {"text": "each one's going to\nshow a different output.", "start": 418.41, "duration": 2.12}, {"text": "And then you're going\nto be able to have", "start": 420.53, "duration": 1.32}, {"text": "all of these different\nprojectors working together", "start": 421.85, "duration": 2.083}, {"text": "to solve this larger\nproblem of projecting", "start": 423.933, "duration": 3.497}, {"text": "this really cool image\non a very large stage.", "start": 427.43, "duration": 4.49}, {"text": "So that's the idea\nof decomposition.", "start": 431.92, "duration": 4.95}, {"text": "You take the same projector,\nfeed it different inputs,", "start": 436.87, "duration": 5.1}, {"text": "it does the exact same\nthing behind the scenes,", "start": 441.97, "duration": 2.04}, {"text": "but it will produce\na different output", "start": 444.01, "duration": 1.583}, {"text": "for each one of these\ndifferent inputs.", "start": 445.593, "duration": 3.329}, {"text": "So these different devices\nare going to work together", "start": 448.922, "duration": 2.208}, {"text": "to achieve the same\ncommon goal, and that's", "start": 451.13, "duration": 2.25}, {"text": "the idea of decomposition.", "start": 453.38, "duration": 3.44}, {"text": "So these is where I apply\nto the problem of projecting", "start": 456.82, "duration": 4.13}, {"text": "large image, or a\nprojector in general,", "start": 460.95, "duration": 2.37}, {"text": "but we can apply these exact\nsame concepts to programming.", "start": 463.32, "duration": 4.5}, {"text": "So decomposition is\nreally just the problem", "start": 467.82, "duration": 3.36}, {"text": "of creating structure\nin your code.", "start": 471.18, "duration": 2.05}, {"text": "In the projector example,\nwe have separate devices", "start": 473.23, "duration": 2.66}, {"text": "working together.", "start": 475.89, "duration": 2.51}, {"text": "In programming, to\nachieve decomposition", "start": 478.4, "duration": 3.01}, {"text": "you're dividing your code\ninto smaller modules.", "start": 481.41, "duration": 2.2}, {"text": "These are going to\nbe self-contained,", "start": 483.61, "duration": 1.94}, {"text": "and you can think of them as\nsort of little mini-programs.", "start": 485.55, "duration": 3.69}, {"text": "You feed in some input to\nthem, they do a little task,", "start": 489.24, "duration": 3.047}, {"text": "and then they give\nyou something back.", "start": 492.287, "duration": 1.583}, {"text": "They go off and do\ntheir thing and then", "start": 493.87, "duration": 1.79}, {"text": "they give back a result.", "start": 495.66, "duration": 3.85}, {"text": "These modules can be used\nto break up your code,", "start": 499.51, "duration": 4.21}, {"text": "and the important thing\nis that they're reusable.", "start": 503.72, "duration": 2.95}, {"text": "So you write a module once--\na little piece of code", "start": 506.67, "duration": 2.21}, {"text": "that does something\nonce-- you debug it once,", "start": 508.88, "duration": 4.248}, {"text": "and then you can reuse it\nmany, many times in your code", "start": 513.128, "duration": 2.291}, {"text": "with different inputs.", "start": 515.419, "duration": 2.551}, {"text": "Benefit of this is it\nkeeps your code organized", "start": 517.97, "duration": 3.15}, {"text": "and it keeps your code coherent.", "start": 521.12, "duration": 3.375}, {"text": "So functions are going to be\nused to achieve decomposition", "start": 524.495, "duration": 3.465}, {"text": "and to create\nstructure in our code.", "start": 527.96, "duration": 1.96}, {"text": "We're going to see functions\ntoday in this lecture,", "start": 529.92, "duration": 2.317}, {"text": "and in a few weeks, you're\ngoing to actually see--", "start": 532.237, "duration": 2.083}, {"text": "when we talk about object\noriented programming-- how", "start": 534.32, "duration": 2.166}, {"text": "you can achieve\ndecomposition with classes.", "start": 536.486, "duration": 3.114}, {"text": "And with classes you can\ncreate your own object types", "start": 539.6, "duration": 2.91}, {"text": "like adding some floats.", "start": 542.51, "duration": 1.172}, {"text": "You can create your own object\ntypes for whatever you want,", "start": 543.682, "duration": 2.458}, {"text": "but that's later.", "start": 546.14, "duration": 2.49}, {"text": "OK so decomposition is creating\nstructure in your code.", "start": 548.63, "duration": 3.85}, {"text": "And abstraction is the idea\nof suppressing details.", "start": 552.48, "duration": 3.15}, {"text": "So in the projector example,\nremember, abstraction", "start": 555.63, "duration": 2.15}, {"text": "was you didn't need to know\nexactly how the projector", "start": 557.78, "duration": 2.67}, {"text": "worked in order to use it.", "start": 560.45, "duration": 1.4}, {"text": "And it's going to be the\nsame idea in programming.", "start": 561.85, "duration": 2.65}, {"text": "So once you write a piece of\ncode that does a little task,", "start": 564.5, "duration": 3.967}, {"text": "you don't need to rewrite\nthat piece of code many times.", "start": 568.467, "duration": 2.333}, {"text": "You've written it\nonce, and you write", "start": 570.8, "duration": 2.737}, {"text": "this thing called a function\nspecification for it,", "start": 573.537, "duration": 2.083}, {"text": "or a docstring.", "start": 575.62, "duration": 1.17}, {"text": "And this is a piece of\ntext that tells anyone", "start": 576.79, "duration": 3.212}, {"text": "else who would want to use it\nin the future-- other people,", "start": 580.002, "duration": 2.458}, {"text": "maybe yourself-- it tells\nthem how to use this function.", "start": 582.46, "duration": 3.81}, {"text": "What inputs does it take?", "start": 586.27, "duration": 2.06}, {"text": "What's the type of the inputs?", "start": 588.33, "duration": 1.25}, {"text": "What is the function\nsupposed to do?", "start": 589.58, "duration": 1.97}, {"text": "And what is the output that\nyou're going to get out of it?", "start": 591.55, "duration": 3.25}, {"text": "So they don't need to know\nexactly how you implemented", "start": 594.8, "duration": 2.25}, {"text": "the function.", "start": 597.05, "duration": 0.66}, {"text": "They just need to know\ninputs, what it does,", "start": 597.71, "duration": 1.98}, {"text": "what's the output.", "start": 599.69, "duration": 0.93}, {"text": "Those three things.", "start": 600.62, "duration": 3.74}, {"text": "OK so these functions are\nthen reusable chunks of code.", "start": 604.36, "duration": 3.68}, {"text": "And we'll see in a few\nexamples in today's lecture", "start": 608.04, "duration": 2.28}, {"text": "how to write some and\nhow to call functions.", "start": 610.32, "duration": 5.104}, {"text": "And as we're going\nthrough today's code,", "start": 615.424, "duration": 1.666}, {"text": "I want you to sort of\nthink about functions", "start": 617.09, "duration": 2.7}, {"text": "with two different hats on.", "start": 619.79, "duration": 2.55}, {"text": "The first hat is from someone\nwho's writing the function.", "start": 622.34, "duration": 3.81}, {"text": "So in the projector\nexample, someone", "start": 626.15, "duration": 1.5}, {"text": "had to build the\nfirst projector.", "start": 627.65, "duration": 1.86}, {"text": "Someone had to know how to put\nall these components together.", "start": 629.51, "duration": 3.43}, {"text": "So that's going to be\nyou writing a function,", "start": 632.94, "duration": 2.55}, {"text": "so you need to know how\nto make the function work.", "start": 635.49, "duration": 3.11}, {"text": "And then the other hat\nis you as someone--", "start": 638.6, "duration": 3.12}, {"text": "as a programmer-- who is\njust using the function.", "start": 641.72, "duration": 2.49}, {"text": "You're assuming it's already\nbeen implemented correctly,", "start": 644.21, "duration": 2.97}, {"text": "and now you're just\nusing it to do something.", "start": 647.18, "duration": 3.12}, {"text": "So these are some of the\nfunction characteristics", "start": 654.68, "duration": 2.339}, {"text": "and we'll see an example\non the next slide.", "start": 657.019, "duration": 1.791}, {"text": "So a function's\ngoing to have a name.", "start": 658.81, "duration": 2.52}, {"text": "You have to call it something.", "start": 661.33, "duration": 1.422}, {"text": "It's going to have\nsome parameters.", "start": 662.752, "duration": 1.458}, {"text": "These are the inputs\nto the function.", "start": 664.21, "duration": 1.83}, {"text": "You can have 0 inputs or\nas many as you'd like.", "start": 666.04, "duration": 3.48}, {"text": "Function should\nhave a docstring.", "start": 669.52, "duration": 2.07}, {"text": "This is how you\nachieve abstraction.", "start": 671.59, "duration": 1.667}, {"text": "So it's optional, but\nhighly recommended,", "start": 673.257, "duration": 1.708}, {"text": "and this is how you\ntell other people", "start": 674.965, "duration": 1.965}, {"text": "how to use your function.", "start": 676.93, "duration": 2.85}, {"text": "Function has a body, which\nis the meat and potatoes", "start": 679.78, "duration": 2.76}, {"text": "of the function-- what it does.", "start": 682.54, "duration": 2.22}, {"text": "And a function's going\nto return something.", "start": 684.76, "duration": 2.78}, {"text": "It computes its thing and\nthen it gives back-- spits", "start": 687.54, "duration": 2.67}, {"text": "back some answer.", "start": 690.21, "duration": 2.15}, {"text": "OK here's an example of\na function definition", "start": 692.36, "duration": 5.3}, {"text": "and a function call.", "start": 697.66, "duration": 2.64}, {"text": "Function definition is up here.", "start": 700.3, "duration": 2.67}, {"text": "I'll just draw it here.", "start": 702.97, "duration": 3.63}, {"text": "This is the function\ndefinition up here.", "start": 706.6, "duration": 3.7}, {"text": "And this is the\nfunction call down here.", "start": 710.3, "duration": 2.89}, {"text": "So remember, someone has\nto write the function that", "start": 713.19, "duration": 4.51}, {"text": "does something to begin with.", "start": 717.7, "duration": 1.21}, {"text": "So this is how you\nwrite the function.", "start": 718.91, "duration": 1.77}, {"text": "The first is\nwhoops-- the first is", "start": 720.68, "duration": 2.09}, {"text": "going to be this def keyword.", "start": 722.77, "duration": 4.67}, {"text": "And def stands for--\nit tells Python", "start": 727.44, "duration": 2.74}, {"text": "I'm going to define a function.", "start": 730.18, "duration": 3.58}, {"text": "Next is the name\nof the function.", "start": 733.76, "duration": 1.91}, {"text": "In this case, I'm calling\nthe function is_even.", "start": 735.67, "duration": 3.96}, {"text": "And the function\nname should really", "start": 739.63, "duration": 1.77}, {"text": "be something descriptive.", "start": 741.4, "duration": 1.8}, {"text": "Whereas someone who is\njust using this function", "start": 743.2, "duration": 2.07}, {"text": "or looking at it can\npretty much tell what", "start": 745.27, "duration": 2.07}, {"text": "it's supposed to do without\ngoing a lot farther than that.", "start": 747.34, "duration": 4.376}, {"text": "They're just\nlooking at the name.", "start": 751.716, "duration": 1.374}, {"text": "And then in parentheses you give\nit any parameters, also known", "start": 755.92, "duration": 3.36}, {"text": "as arguments.", "start": 759.28, "duration": 1.17}, {"text": "And these parameters are\nthe inputs to the function.", "start": 760.45, "duration": 3.47}, {"text": "And then you do colon.", "start": 763.92, "duration": 1.037}, {"text": "OK so this is the first line\nof the function definition.", "start": 768.16, "duration": 5.076}, {"text": "And after this,\neverything that's", "start": 773.236, "duration": 1.374}, {"text": "going to be part of the function\nis going to be indented.", "start": 774.61, "duration": 4.26}, {"text": "The next part is going\nto be the docstring,", "start": 778.87, "duration": 2.226}, {"text": "or the specification,\nand this is", "start": 781.096, "duration": 1.374}, {"text": "how we achieve abstraction\nusing functions.", "start": 782.47, "duration": 4.74}, {"text": "Specification, or the docstring,\nstarts with triple quotes", "start": 787.21, "duration": 3.271}, {"text": "and ends with triple\nquotes, and you can sort of", "start": 790.481, "duration": 1.999}, {"text": "think about this as\na multi-line comment.", "start": 792.48, "duration": 2.95}, {"text": "It's just going\nto be text that's", "start": 795.43, "duration": 1.53}, {"text": "going to be visible to\nwhoever uses the function,", "start": 796.96, "duration": 3.36}, {"text": "and it should tell them\nthe following things: What", "start": 800.32, "duration": 2.82}, {"text": "are the inputs to the function?", "start": 803.14, "duration": 2.32}, {"text": "What is the function\nsupposed to do generally?", "start": 805.46, "duration": 2.36}, {"text": "And what is the function\ngoing to give back", "start": 807.82, "duration": 2.73}, {"text": "to whoever called it?", "start": 810.55, "duration": 1.168}, {"text": "The next part is going to\nbe the body of the function.", "start": 815.55, "duration": 3.66}, {"text": "We'll talk about what's\ninside it in the next slide.", "start": 819.21, "duration": 2.22}, {"text": "And that's it.", "start": 824.17, "duration": 0.96}, {"text": "That's all for the\nfunction definition.", "start": 825.13, "duration": 2.75}, {"text": "def blah, blah, blah, indented,\neverything inside the function.", "start": 827.88, "duration": 4.86}, {"text": "So this is you writing\nthe function definition.", "start": 832.74, "duration": 4.86}, {"text": "Once the function\ndefinition's written,", "start": 837.6, "duration": 2.61}, {"text": "you can call the function.", "start": 840.21, "duration": 1.44}, {"text": "And that's this part down here.", "start": 841.65, "duration": 3.34}, {"text": "And here, when\nyou call function,", "start": 844.99, "duration": 1.43}, {"text": "you just say its name, and\nthen you give it parameters.", "start": 846.42, "duration": 3.864}, {"text": "And you give it\nas many parameters", "start": 850.284, "duration": 1.416}, {"text": "as the function is expecting--\nin this case, only one", "start": 851.7, "duration": 2.28}, {"text": "parameter.", "start": 853.98, "duration": 0.926}, {"text": "So what's inside\nthe function body?", "start": 863.0, "duration": 2.434}, {"text": "You can put anything\ninside the function body.", "start": 865.434, "duration": 1.916}, {"text": "You remember,\nthink of a function", "start": 867.35, "duration": 1.05}, {"text": "as sort of a small procedure\nor a little mini-program", "start": 868.4, "duration": 2.25}, {"text": "that does something.", "start": 870.65, "duration": 1.38}, {"text": "So you can do anything\ninside the function", "start": 872.03, "duration": 2.01}, {"text": "that you can do in the regular\nprogram-- print things,", "start": 874.04, "duration": 3.21}, {"text": "do mathematical\noperations, and so on.", "start": 877.25, "duration": 3.17}, {"text": "The last line is the most\nimportant part of the function", "start": 880.42, "duration": 2.46}, {"text": "though.", "start": 882.88, "duration": 2.07}, {"text": "And it's this return statement--\nthat's what we call it.", "start": 884.95, "duration": 2.95}, {"text": "So it's a line of code\nthat starts with return,", "start": 887.9, "duration": 2.71}, {"text": "which is a keyword.", "start": 890.61, "duration": 2.3}, {"text": "And then it's going\nto be some value.", "start": 892.91, "duration": 3.46}, {"text": "Notice this is an\nexpression here--", "start": 896.37, "duration": 1.97}, {"text": "i%2 == 0 is an expression\nthat's going to evaluate to some", "start": 898.34, "duration": 3.665}, {"text": "value.", "start": 902.005, "duration": 0.5}, {"text": "And as long as this\npart is something", "start": 906.33, "duration": 2.66}, {"text": "that evaluates some value,\nit can be anything you want.", "start": 908.99, "duration": 4.59}, {"text": "And this line here return\nsomething tells Python, OK", "start": 913.58, "duration": 3.27}, {"text": "after you have finished\nexecuting everything", "start": 916.85, "duration": 2.19}, {"text": "inside the function, what\nvalue should I return?", "start": 919.04, "duration": 5.24}, {"text": "And whoever called\nthe function is", "start": 924.28, "duration": 2.5}, {"text": "going to get back that\nvalue, and the function", "start": 926.78, "duration": 1.92}, {"text": "call itself will be\nreplaced by that value.", "start": 928.7, "duration": 3.553}, {"text": "OK so let's look at an example.", "start": 932.253, "duration": 2.287}, {"text": "I'm going to introduce\nthe idea of scope now.", "start": 939.37, "duration": 4.12}, {"text": "And scope just means-- is\nanother word for environment.", "start": 943.49, "duration": 6.34}, {"text": "So if I told you that you\ncould think of functions", "start": 949.83, "duration": 2.22}, {"text": "as little mini-programs,\nthe scope of a function", "start": 952.05, "duration": 3.56}, {"text": "is going to be a completely\nseparate environment", "start": 955.61, "duration": 4.59}, {"text": "than the environment\nof the main program.", "start": 960.2, "duration": 3.27}, {"text": "So as soon as you\nmake a function call,", "start": 963.47, "duration": 3.33}, {"text": "behind the scenes\nwhat Python says is,", "start": 966.8, "duration": 2.01}, {"text": "OK I'm in the main program\nbut I see a function call.", "start": 968.81, "duration": 3.36}, {"text": "I'm going to step out\nof this main program.", "start": 972.17, "duration": 1.89}, {"text": "I'm going to go off into\nthis new environment.", "start": 974.06, "duration": 2.82}, {"text": "I'm going to create entirely\nnew set of variables that just", "start": 976.88, "duration": 2.94}, {"text": "exist within this environment.", "start": 979.82, "duration": 3.48}, {"text": "I'm going to do\nsome computations.", "start": 983.3, "duration": 1.94}, {"text": "When I see the return, I'm going\nto take this one return value.", "start": 985.24, "duration": 3.25}, {"text": "I'm going to exit\nthat environment,", "start": 988.49, "duration": 1.82}, {"text": "and then I'm going to come\nback to the main program.", "start": 990.31, "duration": 4.2}, {"text": "So as you're entering\nfrom one scope to another,", "start": 994.51, "duration": 2.64}, {"text": "you're sort of passing\nthese values back and forth.", "start": 997.15, "duration": 3.7}, {"text": "So when you're entering a scope,\nyou're passing a variable back", "start": 1000.85, "duration": 3.14}, {"text": "into the function.", "start": 1003.99, "duration": 2.465}, {"text": "And when the\nfunction's finished,", "start": 1006.455, "duration": 1.375}, {"text": "you're passing a value\nback to whoever called it.", "start": 1007.83, "duration": 4.56}, {"text": "So once again, this top part\nis the function definition.", "start": 1012.39, "duration": 3.66}, {"text": "And any arguments for\nthe function definition", "start": 1016.05, "duration": 3.15}, {"text": "are called formal parameters.", "start": 1019.2, "duration": 2.58}, {"text": "And they're called\nformal parameters", "start": 1021.78, "duration": 1.5}, {"text": "because notice they don't\nactually have a value yet.", "start": 1023.28, "duration": 2.97}, {"text": "In the function\ndefinition, you're", "start": 1026.25, "duration": 1.829}, {"text": "sort of writing the function\nassuming that, in this case,", "start": 1028.079, "duration": 3.191}, {"text": "x is going to have some value.", "start": 1031.27, "duration": 2.339}, {"text": "But you don't know\nwhat it is yet.", "start": 1033.609, "duration": 3.021}, {"text": "You only know what\nvalue x takes when you", "start": 1036.63, "duration": 3.06}, {"text": "make a function call down here.", "start": 1039.69, "duration": 1.72}, {"text": "So this is your\nfunction definition,", "start": 1044.42, "duration": 1.5}, {"text": "and then later on in\nyour main program,", "start": 1045.92, "duration": 2.169}, {"text": "you might define some\nvariable x is equal to 3.", "start": 1048.089, "duration": 3.411}, {"text": "And then you make\na function call.", "start": 1051.5, "duration": 2.16}, {"text": "f of x here is\nyour function call.", "start": 1053.66, "duration": 3.08}, {"text": "And it says, OK I'm\ncalling f with the value 3,", "start": 1059.35, "duration": 3.14}, {"text": "because x takes the value 3,\nand then I'm going to map 3", "start": 1062.49, "duration": 3.12}, {"text": "into the function.", "start": 1065.61, "duration": 0.81}, {"text": "The values that are passed\ninto the function call", "start": 1069.16, "duration": 2.491}, {"text": "are called actual parameters,\nbecause they're going actually", "start": 1071.651, "duration": 2.499}, {"text": "have a value.", "start": 1074.15, "duration": 0.56}, {"text": "So let's step through this\nprogram-- this small program--", "start": 1077.37, "duration": 2.97}, {"text": "and see what exactly happens\nbehind the scenes in the scope.", "start": 1080.34, "duration": 3.54}, {"text": "And if you're just\nstarting to program,", "start": 1083.88, "duration": 1.79}, {"text": "I think it would be\nhighly valuable if you", "start": 1085.67, "duration": 1.75}, {"text": "take a piece of paper as you're\ndoing some of these exercises", "start": 1087.42, "duration": 3.72}, {"text": "and you write down\nsomething similar to what", "start": 1091.14, "duration": 2.01}, {"text": "I'm going to go through here.", "start": 1093.15, "duration": 1.47}, {"text": "I think it'll help\na lot, and you'll", "start": 1094.62, "duration": 2.25}, {"text": "be able to see exactly\nstep-by-step what variables", "start": 1096.87, "duration": 3.39}, {"text": "take what values and\nwhich scope you're in.", "start": 1100.26, "duration": 3.57}, {"text": "So here we go.", "start": 1103.83, "duration": 2.07}, {"text": "When the program\nfirst starts, we're", "start": 1105.9, "duration": 1.86}, {"text": "creating this global scope.", "start": 1107.76, "duration": 1.97}, {"text": "It's the main program scope.", "start": 1109.73, "duration": 3.76}, {"text": "In the main program\nscope, the first thing", "start": 1113.49, "duration": 2.16}, {"text": "that Python is going\nto see is this part", "start": 1115.65, "duration": 2.58}, {"text": "here-- def f of x and\nthen some stuff inside.", "start": 1118.23, "duration": 6.51}, {"text": "This tells Python I\nhave a function named x,", "start": 1124.74, "duration": 4.23}, {"text": "but I don't care what's\ninside the code yet.", "start": 1128.97, "duration": 3.48}, {"text": "I don't care what's inside\nthe function definition", "start": 1132.45, "duration": 2.58}, {"text": "yet, because I haven't\ncalled the function yet.", "start": 1135.03, "duration": 4.54}, {"text": "So to Python it's\njust some code just", "start": 1139.57, "duration": 1.97}, {"text": "sitting in the global scope.", "start": 1141.54, "duration": 2.615}, {"text": "So whenever you see\ndef, you're just", "start": 1147.48, "duration": 1.8}, {"text": "putting some code in there.", "start": 1149.28, "duration": 1.3}, {"text": "Then you go onto the next\nline-- x is equal to 3.", "start": 1150.58, "duration": 2.81}, {"text": "So in the global scope, you now\nhave also a variable x is 3.", "start": 1153.39, "duration": 4.59}, {"text": "And then the next\nline-- z is equal to f", "start": 1157.98, "duration": 2.25}, {"text": "of x is a function call.", "start": 1160.23, "duration": 2.52}, {"text": "As soon as you hit\na function call,", "start": 1162.75, "duration": 1.92}, {"text": "you create a new scope--\na new environment.", "start": 1164.67, "duration": 3.36}, {"text": "So we're temporarily leaving\nthe global scope and sort", "start": 1168.03, "duration": 3.621}, {"text": "of portaling into a\nnew scope, where we're", "start": 1171.651, "duration": 4.089}, {"text": "going to try to figure out what\nthis function's going to do", "start": 1175.74, "duration": 2.79}, {"text": "and what it's going to return.", "start": 1178.53, "duration": 2.59}, {"text": "So the first thing you do\nis you map the parameters.", "start": 1181.12, "duration": 4.22}, {"text": "So x here-- I'm\ncalling f of x with 3--", "start": 1185.34, "duration": 3.596}, {"text": "so first thing I'm\ndoing is I'm mapping", "start": 1188.936, "duration": 1.624}, {"text": "every one of the parameters in\nthe definition to their values.", "start": 1190.56, "duration": 3.22}, {"text": "So first thing I'm doing\nis x gets the value 3.", "start": 1193.78, "duration": 2.402}, {"text": "Next line here is x\nis equal to x plus 1.", "start": 1199.69, "duration": 3.97}, {"text": "So we're still inside\nthe function call f,", "start": 1203.66, "duration": 2.46}, {"text": "so x gets the value 4.", "start": 1206.12, "duration": 1.37}, {"text": "We're printing this and\nthen we're returning x.", "start": 1210.26, "duration": 3.33}, {"text": "So in the scope of\nf, x is equal to 4,", "start": 1213.59, "duration": 2.59}, {"text": "so we're returning\nthat value back", "start": 1216.18, "duration": 1.88}, {"text": "to whoever called it,\nwhich was this function", "start": 1218.06, "duration": 2.43}, {"text": "call within the global scope.", "start": 1220.49, "duration": 2.5}, {"text": "So this part right here-- f\nof x, which was the function", "start": 1222.99, "duration": 2.6}, {"text": "call-- gets replaced with 4.", "start": 1225.59, "duration": 3.0}, {"text": "So inside the main\nprogram, z is equal to 4.", "start": 1228.59, "duration": 5.19}, {"text": "And that's how we pass\nparameters into the function,", "start": 1233.78, "duration": 3.08}, {"text": "and we got a parameter\nback from the function.", "start": 1236.86, "duration": 2.52}, {"text": "As soon as the function\nreturns something,", "start": 1239.38, "duration": 2.83}, {"text": "the scope that you were in\nfor the function gets erased.", "start": 1242.21, "duration": 3.14}, {"text": "You forget about every variable\nthat was created in there,", "start": 1245.35, "duration": 3.42}, {"text": "delete that scope, and\nyou're back to wherever", "start": 1248.77, "duration": 2.04}, {"text": "you started calling it.", "start": 1250.81, "duration": 3.09}, {"text": "One warning though.", "start": 1253.9, "duration": 1.62}, {"text": "So what happens if there's\nno return statement?", "start": 1255.52, "duration": 3.0}, {"text": "I said that every function\nhas to return something.", "start": 1258.52, "duration": 4.02}, {"text": "If you don't explicitly\nput a return statement,", "start": 1262.54, "duration": 2.67}, {"text": "Python is going to\nadd one for you.", "start": 1265.21, "duration": 2.31}, {"text": "You don't have to do this.", "start": 1267.52, "duration": 1.71}, {"text": "And it's going to actually\nhave return None-- N-o-n-e.", "start": 1269.23, "duration": 5.76}, {"text": "And None is the\nspecial type-- None", "start": 1274.99, "duration": 3.63}, {"text": "is the value for a special\ntype called NoneType,", "start": 1278.62, "duration": 3.89}, {"text": "and it represents the\nabsence of a value.", "start": 1282.51, "duration": 1.75}, {"text": "What's that?", "start": 1288.46, "duration": 0.71}, {"text": "Not a string.", "start": 1289.17, "duration": 1.14}, {"text": "Not a--", "start": 1290.31, "duration": 0.96}, {"text": "None is not a string.", "start": 1291.27, "duration": 2.25}, {"text": "None is not a string, exactly.", "start": 1293.52, "duration": 1.8}, {"text": "It's a special type.", "start": 1295.32, "duration": 1.617}, {"text": "OK so before we go on, I wanted\nto go through a small exercise", "start": 1300.07, "duration": 4.69}, {"text": "in Spyder just to show\nyou the difference", "start": 1304.76, "duration": 2.17}, {"text": "that None and printing\nand returning makes.", "start": 1306.93, "duration": 3.36}, {"text": "So here are two\nfunctions that I wrote.", "start": 1310.29, "duration": 3.07}, {"text": "One is is_even_with_return.", "start": 1313.36, "duration": 1.88}, {"text": "That's its name, so\npretty descriptive.", "start": 1315.24, "duration": 3.55}, {"text": "It's pretty much the same\ncode we saw in the slides.", "start": 1318.79, "duration": 3.47}, {"text": "It just has this extra\nlittle print thing.", "start": 1322.26, "duration": 2.54}, {"text": "It gets the remainder\nwhen i is divided by 2.", "start": 1324.8, "duration": 5.1}, {"text": "And it returns whether the\nremainder is equal to 0.", "start": 1329.9, "duration": 3.43}, {"text": "So it'll either return a\ntrue or a false-- a Boolean.", "start": 1333.33, "duration": 4.99}, {"text": "OK so my function call is this:\nI'm saying is_even_with_return", "start": 1338.32, "duration": 5.17}, {"text": "with a value 3.", "start": 1343.49, "duration": 3.42}, {"text": "When I make this\nfunction call, this 3", "start": 1346.91, "duration": 2.4}, {"text": "gets mapped into here--\nthis variable here--", "start": 1349.31, "duration": 3.15}, {"text": "so i is equal to 3.", "start": 1352.46, "duration": 2.73}, {"text": "I'm going to print with\nreturn, and then I'm", "start": 1355.19, "duration": 2.13}, {"text": "going to say remainder\nis equal to 3 percent", "start": 1357.32, "duration": 2.07}, {"text": "2, which comes out to value 1,\nbecause there's a remainder 1.", "start": 1359.39, "duration": 4.5}, {"text": "And I'm going to\nreturn whether 1", "start": 1363.89, "duration": 1.38}, {"text": "is equal to 0, which is false.", "start": 1365.27, "duration": 2.85}, {"text": "So this line here\nreturns false, but am I", "start": 1368.12, "duration": 3.54}, {"text": "doing anything with the false?", "start": 1371.66, "duration": 1.74}, {"text": "Not really.", "start": 1373.4, "duration": 1.26}, {"text": "It's just sort of\nsitting in the code here.", "start": 1374.66, "duration": 2.85}, {"text": "So this gets evaluated to false.", "start": 1377.51, "duration": 5.46}, {"text": "I'm not printing it.", "start": 1382.97, "duration": 0.859}, {"text": "I'm not doing any\noperations with it.", "start": 1383.829, "duration": 1.541}, {"text": "It's just sitting there.", "start": 1385.37, "duration": 1.0}, {"text": "So it won't show up anywhere.", "start": 1386.37, "duration": 1.24}, {"text": "If I want the result\nto show up somewhere,", "start": 1387.61, "duration": 1.75}, {"text": "then I have to print it.", "start": 1389.36, "duration": 1.03}, {"text": "So that's what this\nnext line is doing.", "start": 1390.39, "duration": 1.625}, {"text": "So that one should\nbe straightforward.", "start": 1395.54, "duration": 2.46}, {"text": "is_even_without_return's\na little bit trickier,", "start": 1398.0, "duration": 1.96}, {"text": "but not too bad.", "start": 1399.96, "duration": 1.64}, {"text": "I have print,\nwithout_return inside here,", "start": 1401.6, "duration": 3.94}, {"text": "and then I'm going\nto get a remainder is", "start": 1405.54, "duration": 2.94}, {"text": "equal to i percent 2.", "start": 1408.48, "duration": 1.12}, {"text": "And notice that I'm not--\nI don't have any return.", "start": 1409.6, "duration": 3.02}, {"text": "So implicitly, Python's going\nto add a return None for me,", "start": 1412.62, "duration": 3.48}, {"text": "like that.", "start": 1416.1, "duration": 0.709}, {"text": "You don't have to add it.", "start": 1416.809, "duration": 1.041}, {"text": "So when I make the\nfunction call here,", "start": 1420.76, "duration": 1.62}, {"text": "it's going to do the same thing,\nexcept that return in this case", "start": 1422.38, "duration": 2.76}, {"text": "is not going to be a Boolean.", "start": 1425.14, "duration": 1.23}, {"text": "It's going to be\nthis special None.", "start": 1426.37, "duration": 2.88}, {"text": "So this is going to\nget evaluated to None.", "start": 1429.25, "duration": 5.64}, {"text": "Again I'm not printing it out.", "start": 1434.89, "duration": 1.86}, {"text": "It's just sitting there.", "start": 1436.75, "duration": 2.4}, {"text": "If I were to print out\nthe result of that,", "start": 1439.15, "duration": 4.52}, {"text": "you'd be printing out this\nvalue None, which if I run it,", "start": 1443.67, "duration": 3.15}, {"text": "you'll see here it just\nprints it out right there.", "start": 1446.82, "duration": 4.95}, {"text": "So as you're doing your next\np set, it's about functions", "start": 1451.77, "duration": 3.66}, {"text": "and you're seeing these Nones\npopping out in some places.", "start": 1455.43, "duration": 2.94}, {"text": "Check to make sure that you've\nactually returned something,", "start": 1458.37, "duration": 2.61}, {"text": "as opposed to just printed\nsomething inside the function", "start": 1460.98, "duration": 3.28}, {"text": "like we did here.", "start": 1464.26, "duration": 0.71}, {"text": "All right so that's\nthe difference.", "start": 1469.352, "duration": 1.458}, {"text": "And the last thing I want to\nmention about this is_even", "start": 1470.81, "duration": 2.78}, {"text": "function is how\nuseful it can be.", "start": 1473.59, "duration": 3.09}, {"text": "So notice this is the\nfunction as in the slides,", "start": 1476.68, "duration": 4.8}, {"text": "and once you write the\nfunction once, you can use it", "start": 1481.48, "duration": 4.83}, {"text": "many, many times in your code.", "start": 1486.31, "duration": 1.83}, {"text": "So here I'm using\nthe function is_even", "start": 1488.14, "duration": 3.6}, {"text": "to print the numbers\nbetween 0 and 19, including", "start": 1491.74, "duration": 2.91}, {"text": "and whether the\nnumber is even or odd.", "start": 1494.65, "duration": 3.25}, {"text": "So notice this\npiece of code here,", "start": 1497.9, "duration": 2.12}, {"text": "once I've written\nthis function is_even,", "start": 1500.02, "duration": 1.74}, {"text": "looks really, really nice right?", "start": 1501.76, "duration": 3.51}, {"text": "I have for all the numbers in\nthis range if the number i is", "start": 1505.27, "duration": 6.01}, {"text": "even, this is going to\nreturn a true or false", "start": 1511.28, "duration": 5.43}, {"text": "for all the numbers\n0, 1, 2, 3, 4.", "start": 1516.71, "duration": 3.42}, {"text": "If it's true, then I'm\ngoing to print out even,", "start": 1520.13, "duration": 2.19}, {"text": "and otherwise I'm\ngoing to print out odd.", "start": 1522.32, "duration": 2.13}, {"text": "So if I run this,\nit's going to do this.", "start": 1524.45, "duration": 2.1}, {"text": "0 even, 1 odd, 2\neven, and so on.", "start": 1526.55, "duration": 3.18}, {"text": "So notice using functions makes\nmy code really nice looking.", "start": 1529.73, "duration": 4.429}, {"text": "If I wasn't using\nfunctions, I'd have", "start": 1534.159, "duration": 1.541}, {"text": "to put these two lines\nsomewhere inside here", "start": 1535.7, "duration": 5.096}, {"text": "and it would look a\nlittle bit messier.", "start": 1540.796, "duration": 1.624}, {"text": "So I've said this\nmaybe once or twice", "start": 1548.22, "duration": 1.78}, {"text": "before: in Python\neverything is an object.", "start": 1550.0, "duration": 3.45}, {"text": "Might not have meant\nanything back then,", "start": 1556.66, "duration": 2.25}, {"text": "but I think you're\ngoing to see what I mean", "start": 1558.91, "duration": 2.88}, {"text": "using this particular example.", "start": 1561.79, "duration": 2.68}, {"text": "So if in Python everything's an\nobject-- integers are objects,", "start": 1564.47, "duration": 4.85}, {"text": "floats are objects, even\nfunctions are objects.", "start": 1569.32, "duration": 3.84}, {"text": "So as you can pass objects\nas parameters back and forth", "start": 1573.16, "duration": 4.77}, {"text": "as function parameters, you\ncan also pass other functions", "start": 1577.93, "duration": 3.21}, {"text": "as parameters.", "start": 1581.14, "duration": 2.76}, {"text": "Let's see what this means.", "start": 1583.9, "duration": 1.65}, {"text": "So we have three function\ndefinitions here-- func_a,", "start": 1585.55, "duration": 3.87}, {"text": "func_b, and func_c.", "start": 1589.42, "duration": 3.63}, {"text": "And then I have three lines of\ncode here in my main program.", "start": 1593.05, "duration": 3.19}, {"text": "So I have one called a\nfunc_a, one called a func_b,", "start": 1596.24, "duration": 3.69}, {"text": "and one call to func_c.", "start": 1599.93, "duration": 2.04}, {"text": "Let's trace through, just\nlike in the previous example,", "start": 1601.97, "duration": 2.4}, {"text": "and see what exactly happens.", "start": 1604.37, "duration": 2.46}, {"text": "First thing I create\nis my global scope.", "start": 1606.83, "duration": 3.18}, {"text": "And I have three\nfunction definitions.", "start": 1610.01, "duration": 2.239}, {"text": "Again I don't care\nwhat's in the code", "start": 1612.249, "duration": 1.541}, {"text": "yet, because I haven't\ncalled the functions yet.", "start": 1613.79, "duration": 2.37}, {"text": "Python just knows there's these\nfunctions with these names that", "start": 1616.16, "duration": 3.0}, {"text": "contain some code.", "start": 1619.16, "duration": 0.81}, {"text": "After these definitions, I\ncome to this line here-- print", "start": 1622.576, "duration": 2.374}, {"text": "func_a.", "start": 1624.95, "duration": 1.15}, {"text": "As soon as I make\na function call,", "start": 1626.1, "duration": 2.025}, {"text": "I'm going to create\na new scope and I'm", "start": 1628.125, "duration": 1.625}, {"text": "going to hop into there.", "start": 1629.75, "duration": 2.22}, {"text": "Inside func_a, I'm going to go\nand look at what func_a does.", "start": 1631.97, "duration": 5.445}, {"text": "It doesn't take\nin the parameters,", "start": 1637.415, "duration": 1.545}, {"text": "it just prints out\nthis message here.", "start": 1638.96, "duration": 4.35}, {"text": "And then it leaves; it's done.", "start": 1643.31, "duration": 3.19}, {"text": "There's no return,\nso we return None.", "start": 1646.5, "duration": 3.96}, {"text": "So func_a returns\nNone to whoever", "start": 1650.46, "duration": 1.8}, {"text": "called it, which\nwas that line there,", "start": 1652.26, "duration": 4.17}, {"text": "so that is going to be None.", "start": 1656.43, "duration": 2.26}, {"text": "Next line.", "start": 1662.95, "duration": 0.84}, {"text": "This one right here-- print\n5 plus some function call.", "start": 1663.79, "duration": 4.64}, {"text": "Again I'm going to hop\ninto func_b's scope", "start": 1668.43, "duration": 2.55}, {"text": "and see what to do there.", "start": 1670.98, "duration": 1.17}, {"text": "So first I'm going\nto map my parameters.", "start": 1672.15, "duration": 3.49}, {"text": "So 2-- whoops-- 2\ngets mapped to y.", "start": 1675.64, "duration": 4.97}, {"text": "So inside func_b's scope, y\nis going to get the value 2.", "start": 1680.61, "duration": 2.665}, {"text": "That's the very first\nthing I'm doing--", "start": 1683.275, "duration": 1.625}, {"text": "mapping all the parameters.", "start": 1684.9, "duration": 2.084}, {"text": "Then I'm going to\nprint this thing here,", "start": 1686.984, "duration": 1.666}, {"text": "and then I'm going to return y.", "start": 1688.65, "duration": 2.31}, {"text": "So inside func_b,\ny has the value 2,", "start": 1690.96, "duration": 2.16}, {"text": "and I'm returning 2 back\nto whoever called me.", "start": 1693.12, "duration": 2.42}, {"text": "So this is the value\n2 and I'm going", "start": 1698.48, "duration": 4.11}, {"text": "to print 5 plus 2, which is 7.", "start": 1702.59, "duration": 1.54}, {"text": "Last one.", "start": 1706.83, "duration": 0.69}, {"text": "This is the trickiest.", "start": 1707.52, "duration": 1.23}, {"text": "Oop, that popped up.", "start": 1708.75, "duration": 1.23}, {"text": "If you think you've got\nit, try that exercise.", "start": 1709.98, "duration": 1.92}, {"text": "But otherwise follow along.", "start": 1711.9, "duration": 2.79}, {"text": "print func_c func_a.", "start": 1714.69, "duration": 3.93}, {"text": "So I see that I am going\nto enter func_c's scope.", "start": 1718.62, "duration": 6.48}, {"text": "So I'm going to look\nat what func_c does.", "start": 1725.1, "duration": 3.02}, {"text": "First thing I do is I'm\nmapping all the parameters.", "start": 1728.12, "duration": 2.52}, {"text": "Don't even worry about\nthe fact that this", "start": 1730.64, "duration": 1.74}, {"text": "is a function right now.", "start": 1732.38, "duration": 1.44}, {"text": "Just pretend it's\nx or something.", "start": 1733.82, "duration": 3.03}, {"text": "So you say func_a\nis going to get", "start": 1736.85, "duration": 2.67}, {"text": "mapped to the variable\nz inside func_c.", "start": 1739.52, "duration": 3.87}, {"text": "So z is func_c.", "start": 1743.39, "duration": 2.64}, {"text": "Just mapping parameters\nfrom actual to formal.", "start": 1746.03, "duration": 4.16}, {"text": "Then what do we\ndo inside func_c?", "start": 1750.19, "duration": 1.62}, {"text": "We print out inside func_c,\nand then we return z.", "start": 1751.81, "duration": 10.59}, {"text": "This is the cool part.", "start": 1762.4, "duration": 2.48}, {"text": "Inside func_c, z is func_a.", "start": 1764.88, "duration": 4.29}, {"text": "So if you replace z\nwith func_a, this here", "start": 1769.17, "duration": 3.87}, {"text": "becomes return func_a\nopen close parentheses.", "start": 1773.04, "duration": 3.8}, {"text": "Look familiar?", "start": 1776.84, "duration": 1.87}, {"text": "We did that function\ncall right there right?", "start": 1778.71, "duration": 2.25}, {"text": "So that's just\nanother function call.", "start": 1780.96, "duration": 1.56}, {"text": "So with that being\nanother function call,", "start": 1788.222, "duration": 1.708}, {"text": "you're going to\ncreate another scope,", "start": 1789.93, "duration": 1.74}, {"text": "and you're going to\npop into that one.", "start": 1791.67, "duration": 1.83}, {"text": "So we're one, two, I\nguess two scopes deep,", "start": 1793.5, "duration": 3.55}, {"text": "and we're trying to figure\nout where we're going.", "start": 1797.05, "duration": 2.43}, {"text": "So func_a's scope is\ngoing to be up here.", "start": 1799.48, "duration": 2.66}, {"text": "So what does func_a do?", "start": 1802.14, "duration": 1.26}, {"text": "It just prints out this,\nand it returns None.", "start": 1803.4, "duration": 3.3}, {"text": "So we're going to\nreturn None to whoever", "start": 1806.7, "duration": 1.68}, {"text": "called us, which was func_c.", "start": 1808.38, "duration": 3.83}, {"text": "So this line here\nbecomes return None.", "start": 1812.21, "duration": 3.29}, {"text": "And so this line here\nis going to return None", "start": 1818.84, "duration": 1.97}, {"text": "to whoever called it, which\nwas this line down here.", "start": 1820.81, "duration": 4.618}, {"text": "Oops, I didn't mean\nto cross that out.", "start": 1825.428, "duration": 3.432}, {"text": "So that line here is\ngoing to print None.", "start": 1828.86, "duration": 3.68}, {"text": "So if you just go\nstep-by-step, it", "start": 1832.54, "duration": 3.06}, {"text": "shouldn't be too\nbad to try to map", "start": 1835.6, "duration": 2.16}, {"text": "what happens with variable\nnames and formal parameters", "start": 1837.76, "duration": 3.45}, {"text": "and actual parameters.", "start": 1841.21, "duration": 1.8}, {"text": "That's why I highly recommend\npieces of paper and pens.", "start": 1843.01, "duration": 5.01}, {"text": "One last thing I want\nto mention about scope", "start": 1848.02, "duration": 3.57}, {"text": "before we do another example.", "start": 1851.59, "duration": 2.2}, {"text": "So there are three\nsort of situations", "start": 1853.79, "duration": 2.0}, {"text": "you might find yourself in.", "start": 1855.79, "duration": 1.62}, {"text": "The first one is probably\nthe most typical,", "start": 1857.41, "duration": 4.46}, {"text": "and this is when you\ndefine a function.", "start": 1861.87, "duration": 3.68}, {"text": "And it's using a\nvariable named x", "start": 1865.55, "duration": 1.84}, {"text": "in this case that's also\ndefined outside of the function.", "start": 1867.39, "duration": 4.12}, {"text": "And that doesn't matter\nbecause of the idea of scopes.", "start": 1871.51, "duration": 4.97}, {"text": "So inside the global scope,\nyou can have variables x.", "start": 1876.48, "duration": 3.109}, {"text": "When you're inside\na different scope,", "start": 1879.589, "duration": 1.541}, {"text": "you can have whatever\nvariable names you want.", "start": 1881.13, "duration": 2.7}, {"text": "And when you're\ninside that scope,", "start": 1883.83, "duration": 1.419}, {"text": "Python's going to use\nthose variable names,", "start": 1885.249, "duration": 1.791}, {"text": "so they don't interfere\nwith each other at all.", "start": 1887.04, "duration": 3.49}, {"text": "So in this example, I've defined\na variable x is equal to 1,", "start": 1890.53, "duration": 2.81}, {"text": "and then I incremented, and that\ndoesn't interfere with the fact", "start": 1893.34, "duration": 3.6}, {"text": "that we have a\nvariable x outside.", "start": 1896.94, "duration": 3.42}, {"text": "This one's a little\nbit trickier.", "start": 1900.36, "duration": 3.39}, {"text": "I define this function\ng, and all g does", "start": 1903.75, "duration": 6.05}, {"text": "is access a variable x.", "start": 1909.8, "duration": 2.31}, {"text": "But notice inside g, I've\nnever actually declared", "start": 1912.11, "duration": 3.69}, {"text": "or initialized a variable x.", "start": 1915.8, "duration": 2.82}, {"text": "In this f, I said\nx is equal to 1.", "start": 1918.62, "duration": 2.83}, {"text": "But in here, I'm\njust sort of using x.", "start": 1921.45, "duration": 4.27}, {"text": "So this does not\ngive you an error.", "start": 1925.72, "duration": 2.17}, {"text": "In fact it's OK for you\nto do this in Python.", "start": 1927.89, "duration": 2.3}, {"text": "Python says, OK\nI'm in this scope,", "start": 1930.19, "duration": 1.74}, {"text": "but I don't have\na variable named", "start": 1931.93, "duration": 1.73}, {"text": "x, so let me just go into the\nscope of whoever called me.", "start": 1933.66, "duration": 4.52}, {"text": "So I'm going to just\ntemporarily hop out of the scope", "start": 1938.18, "duration": 2.87}, {"text": "and see is there\nvariable x outside of me?", "start": 1941.05, "duration": 3.57}, {"text": "And it'll find this\nvariable x here,", "start": 1944.62, "duration": 1.77}, {"text": "and it's going to\nprint out its values.", "start": 1946.39, "duration": 2.602}, {"text": "So that's OK.", "start": 1948.992, "duration": 0.982}, {"text": "This last example here\nis actually not allowed", "start": 1953.42, "duration": 2.16}, {"text": "in Python-- similar to\nthis one-- except that I'm", "start": 1955.58, "duration": 3.81}, {"text": "trying to increment\na value of x,", "start": 1959.39, "duration": 3.45}, {"text": "but then I'm also\ntrying to reassign it", "start": 1962.84, "duration": 2.31}, {"text": "to the same value of x.", "start": 1965.15, "duration": 2.58}, {"text": "The problem with that is I\nnever actually initialized", "start": 1967.73, "duration": 2.79}, {"text": "x inside h.", "start": 1970.52, "duration": 2.78}, {"text": "So if I said-- if inside\nh, I said x is equal to 1,", "start": 1973.3, "duration": 4.93}, {"text": "and then I did x\nplus equals to 1,", "start": 1978.23, "duration": 2.21}, {"text": "then it would be this\nexample here-- f of y.", "start": 1980.44, "duration": 3.21}, {"text": "But I didn't do that.", "start": 1983.65, "duration": 1.63}, {"text": "I just tried to access\nx and then incremented", "start": 1985.28, "duration": 5.3}, {"text": "and then tried to reassign it.", "start": 1990.58, "duration": 1.56}, {"text": "And that's actually\nnot allowed in Python.", "start": 1992.14, "duration": 3.6}, {"text": "There is a way around it\nusing global variables.", "start": 1995.74, "duration": 4.42}, {"text": "But it's actually frowned\nupon to use global variables,", "start": 2000.16, "duration": 3.84}, {"text": "though global variables\nare part of the readings", "start": 2004.0, "duration": 2.24}, {"text": "for this lecture.", "start": 2006.24, "duration": 3.134}, {"text": "And the reason why\nit's not a great idea", "start": 2009.374, "duration": 1.666}, {"text": "to use global variables is\nbecause global variables", "start": 2011.04, "duration": 3.66}, {"text": "sort of give you this\nloophole around scopes,", "start": 2014.7, "duration": 5.64}, {"text": "so it allows you to write code\nthat can become very messy.", "start": 2020.34, "duration": 5.19}, {"text": "So using global variables,\nyou can be inside a function", "start": 2025.53, "duration": 3.0}, {"text": "and then modify a\nvariable that's defined", "start": 2028.53, "duration": 2.43}, {"text": "outside of your function.", "start": 2030.96, "duration": 2.35}, {"text": "And that sort of defeats\nthe purpose of functions", "start": 2033.31, "duration": 2.6}, {"text": "and using them in writing\nthese coherent modules that", "start": 2035.91, "duration": 3.46}, {"text": "are separate.", "start": 2039.37, "duration": 1.0}, {"text": "That said, it might sometimes be\nuseful to use global variables,", "start": 2043.37, "duration": 4.51}, {"text": "as you'll see in a\ncouple lectures from now.", "start": 2047.88, "duration": 2.598}, {"text": "OK cool.", "start": 2053.11, "duration": 3.01}, {"text": "So let's go on to the\nlast scope example.", "start": 2056.12, "duration": 3.329}, {"text": "OK this slide is here,\nand notice I've bolded,", "start": 2059.449, "duration": 3.391}, {"text": "underlined, and italicized\nthe Python Tutor,", "start": 2062.84, "duration": 2.64}, {"text": "because I find it\nextremely helpful.", "start": 2065.48, "duration": 2.766}, {"text": "So the Python Tutor--\nas I've mentioned", "start": 2068.246, "duration": 1.624}, {"text": "in one of the assignments--\nit was actually developed", "start": 2069.87, "duration": 2.329}, {"text": "by a grad student here,\nor post-grad student", "start": 2072.199, "duration": 2.051}, {"text": "slash post-doc here.", "start": 2074.25, "duration": 2.01}, {"text": "And it allows you to go\nthrough Python, paste a code,", "start": 2076.26, "duration": 5.629}, {"text": "go through it step-by-step.", "start": 2081.889, "duration": 1.731}, {"text": "Like with each\niteration, it'll show you", "start": 2083.62, "duration": 1.869}, {"text": "exactly what values\neach variable has,", "start": 2085.489, "duration": 3.271}, {"text": "what scope you're in,\nwhen scopes get created,", "start": 2088.76, "duration": 3.33}, {"text": "when scopes get destroyed,\nvariables within each scope.", "start": 2092.09, "duration": 3.67}, {"text": "So pretty much\nevery single detail", "start": 2095.76, "duration": 1.7}, {"text": "you need to sort of\nunderstand functions.", "start": 2097.46, "duration": 2.9}, {"text": "As we're starting to-- you can\nsee we've had couple questions,", "start": 2100.36, "duration": 2.63}, {"text": "and these were great questions.", "start": 2102.99, "duration": 2.307}, {"text": "So if you're still trying to\nunderstand what's going on,", "start": 2105.297, "duration": 2.333}, {"text": "I would highly suggest\nyou take a piece of code", "start": 2107.63, "duration": 2.58}, {"text": "and just run it in\nthe Python Tutor", "start": 2110.21, "duration": 1.53}, {"text": "and you should be able to\nsee exactly what happens,", "start": 2111.74, "duration": 2.88}, {"text": "in sort of a similar way\nthat I've drawn my diagrams.", "start": 2114.62, "duration": 5.28}, {"text": "In all of the codes for\nthis particular lecture,", "start": 2119.9, "duration": 3.9}, {"text": "I've put links to\nthe Python Tutor", "start": 2123.8, "duration": 1.817}, {"text": "for each one of those exercises.", "start": 2125.617, "duration": 1.333}, {"text": "So you can just copy\nand paste those,", "start": 2126.95, "duration": 2.19}, {"text": "and it'll automatically\npopulate it", "start": 2129.14, "duration": 1.59}, {"text": "with that particular\nexample, so you just", "start": 2130.73, "duration": 1.83}, {"text": "have to click, step, step, step.", "start": 2132.56, "duration": 2.19}, {"text": "OK so having made my plug for\nPython Tutor, let's go on.", "start": 2134.75, "duration": 6.7}, {"text": "OK so here's an example.", "start": 2141.45, "duration": 2.62}, {"text": "It's going to show\ncouple things.", "start": 2144.07, "duration": 3.28}, {"text": "One is print versus return,\nand also this idea of you", "start": 2147.35, "duration": 6.56}, {"text": "can nest functions.", "start": 2153.91, "duration": 1.542}, {"text": "So just like you could\nhave nested loops,", "start": 2155.452, "duration": 1.708}, {"text": "nested conditionals-- you\ncan also nest functions", "start": 2157.16, "duration": 2.54}, {"text": "within functions.", "start": 2159.7, "duration": 2.83}, {"text": "So let's draw some diagrams\njust like before of the scopes.", "start": 2162.53, "duration": 4.79}, {"text": "First thing we're going to\ndo is when we have a program,", "start": 2167.32, "duration": 2.64}, {"text": "we're going to create\nthe global scope", "start": 2169.96, "duration": 1.83}, {"text": "and we're going to add\nevery variable that we have.", "start": 2171.79, "duration": 2.935}, {"text": "And then when we\nreach a function call,", "start": 2174.725, "duration": 1.625}, {"text": "we're going to do\nsomething about that.", "start": 2176.35, "duration": 3.307}, {"text": "So the first thing\nin the global scope", "start": 2179.657, "duration": 1.583}, {"text": "is this function definition.", "start": 2181.24, "duration": 3.9}, {"text": "Again in my global scope,\nI just have g as some code", "start": 2185.14, "duration": 3.6}, {"text": "because I have\nnot called it yet.", "start": 2188.74, "duration": 2.55}, {"text": "I only go inside a function\nwhen I make a function call.", "start": 2191.29, "duration": 3.37}, {"text": "So g contains some code.", "start": 2194.66, "duration": 2.9}, {"text": "So we're done with\n75% of that code.", "start": 2197.56, "duration": 4.26}, {"text": "Next line is x is equal to 3.", "start": 2201.82, "duration": 3.57}, {"text": "So I'm making x be a variable\ninside my global scope", "start": 2205.39, "duration": 2.94}, {"text": "with value 3.", "start": 2208.33, "duration": 1.29}, {"text": "And then I have this\nz is equal to g of x.", "start": 2209.62, "duration": 4.47}, {"text": "This is a function call.", "start": 2214.09, "duration": 2.22}, {"text": "When I see a function call, I'm\ngoing to create a new scope.", "start": 2216.31, "duration": 3.22}, {"text": "So here is the scope of g.", "start": 2219.53, "duration": 1.39}, {"text": "With the scope of g, I'm mapping\nvariables to actual parameters", "start": 2223.51, "duration": 8.14}, {"text": "to formal parameters.", "start": 2231.65, "duration": 2.022}, {"text": "So the first thing\nI'm doing is I'm", "start": 2233.672, "duration": 1.458}, {"text": "saying inside g what is the\nvalue of actual parameter x?", "start": 2235.13, "duration": 4.32}, {"text": "And x is going to be the\nvalue 3, because I've called", "start": 2239.45, "duration": 4.19}, {"text": "g of x with x is equal to 3.", "start": 2243.64, "duration": 1.65}, {"text": "Next, what I see\ninside this function--", "start": 2249.88, "duration": 3.75}, {"text": "so this is the inside of the\nfunction-- is this bit here.", "start": 2253.63, "duration": 4.017}, {"text": "It's another\nfunction definition.", "start": 2260.39, "duration": 2.76}, {"text": "Again since I'm just\ndefining the function", "start": 2263.15, "duration": 1.8}, {"text": "and I'm not calling it, all\nPython sees is h is some code.", "start": 2264.95, "duration": 6.89}, {"text": "I haven't called\nthe function h yet,", "start": 2271.84, "duration": 1.58}, {"text": "because I'm just defining\nit here with def.", "start": 2273.42, "duration": 4.0}, {"text": "So that finishes this part here.", "start": 2277.42, "duration": 3.01}, {"text": "The next line is x\nis equal to x plus 1.", "start": 2280.43, "duration": 4.2}, {"text": "So inside the scope of g,\nI'm incrementing x to be 4.", "start": 2284.63, "duration": 4.01}, {"text": "Then I'm printing out this line.", "start": 2288.64, "duration": 3.29}, {"text": "And then I've reached here-- h.", "start": 2291.93, "duration": 3.1}, {"text": "This is actually a function\ncall, and I'm calling h.", "start": 2295.03, "duration": 4.704}, {"text": "As soon as I make\na function call,", "start": 2299.734, "duration": 1.416}, {"text": "I'm creating another scope.", "start": 2301.15, "duration": 1.68}, {"text": "So I'm temporarily going\nout of the scope of g", "start": 2302.83, "duration": 2.83}, {"text": "and going into the scope of h.", "start": 2305.66, "duration": 3.46}, {"text": "So Python knows that\nh contains some code,", "start": 2309.12, "duration": 2.2}, {"text": "and now I can go inside h\nand do whatever I need to do.", "start": 2311.32, "duration": 3.43}, {"text": "So the first-- so h doesn't\nhave any parameters,", "start": 2314.75, "duration": 3.34}, {"text": "so I don't need to populate\nanything like that in there.", "start": 2318.09, "duration": 4.26}, {"text": "h does define a variable called\nx, which is abc; it's a string.", "start": 2322.35, "duration": 6.47}, {"text": "And then that's all h does.", "start": 2328.82, "duration": 4.29}, {"text": "What does it return?", "start": 2333.11, "duration": 1.045}, {"text": "None.", "start": 2337.24, "duration": 0.5}, {"text": "I heard murmuring,\nbut I think None", "start": 2337.74, "duration": 1.95}, {"text": "was what you guys were saying.", "start": 2339.69, "duration": 1.29}, {"text": "So since there's no\nreturn statement,", "start": 2340.98, "duration": 2.576}, {"text": "h is going to return None.", "start": 2343.556, "duration": 3.254}, {"text": "So h returns None.", "start": 2346.81, "duration": 2.59}, {"text": "Back to whoever called it,\nwhich was this code inside g.", "start": 2349.4, "duration": 4.39}, {"text": "So that gets\nreplaced with None--", "start": 2353.79, "duration": 1.83}, {"text": "the thing that I've--\nthis circled red h here.", "start": 2355.62, "duration": 4.2}, {"text": "As soon as h\nreturns, we're going", "start": 2359.82, "duration": 2.184}, {"text": "to get rid of that scope--\nall the variables created", "start": 2362.004, "duration": 2.166}, {"text": "within it-- and\nwe're done with h.", "start": 2364.17, "duration": 3.36}, {"text": "So now we're back into g.", "start": 2367.53, "duration": 1.77}, {"text": "And we just finished\nexecuting this", "start": 2369.3, "duration": 2.46}, {"text": "and this got replaced with None.", "start": 2371.76, "duration": 3.1}, {"text": "We're not printing it out, so\nthis doesn't show up anywhere;", "start": 2374.86, "duration": 3.98}, {"text": "it's just there.", "start": 2378.84, "duration": 2.316}, {"text": "So we're finished\nwith that line.", "start": 2381.156, "duration": 1.374}, {"text": "And the next line is return x.", "start": 2382.53, "duration": 1.28}, {"text": "So x inside g is 4,\nso 4 gets returned", "start": 2386.99, "duration": 3.66}, {"text": "back to whoever called it, which\nwas in the global scope here.", "start": 2390.65, "duration": 4.32}, {"text": "So this gets replaced with 4.", "start": 2394.97, "duration": 1.86}, {"text": "So once we've returned x,\nwe've completely exited out", "start": 2399.66, "duration": 3.54}, {"text": "of the scope of g,\nand we've come back", "start": 2403.2, "duration": 3.9}, {"text": "to whoever called us,\nwhich was global scope", "start": 2407.1, "duration": 3.42}, {"text": "and we've replaced\nz is equal to g", "start": 2410.52, "duration": 1.56}, {"text": "of x and that completely\ngot replaced with 4-- the", "start": 2412.08, "duration": 2.34}, {"text": "returned value.", "start": 2414.42, "duration": 0.765}, {"text": "So that's sort of\nshowing nested functions.", "start": 2418.06, "duration": 4.96}, {"text": "All right just circling back\nto decomposition-abstraction.", "start": 2423.02, "duration": 2.77}, {"text": "This is the last slide.", "start": 2425.79, "duration": 1.28}, {"text": "You can see if you look\nat the code associated", "start": 2427.07, "duration": 3.84}, {"text": "with today's lecture, there\nare some other examples", "start": 2430.91, "duration": 2.647}, {"text": "where you can see\njust how powerful it", "start": 2433.557, "duration": 1.583}, {"text": "is to use functions.", "start": 2435.14, "duration": 1.02}, {"text": "And you can write really\nclean and simple code", "start": 2436.16, "duration": 2.34}, {"text": "if you define your own functions\nand then just use them later.", "start": 2438.5, "duration": 4.63}, {"text": "And the beauty of defining\nyour own functions", "start": 2443.13, "duration": 1.91}, {"text": "that you can use\nmultiple times later", "start": 2445.04, "duration": 1.59}, {"text": "is you only have to debug\nthe function once right?", "start": 2446.63, "duration": 2.58}, {"text": "I know debugging is not\nyour favorite thing,", "start": 2449.21, "duration": 1.912}, {"text": "but you only have to\ndebug this one thing once,", "start": 2451.122, "duration": 1.958}, {"text": "and then you can know that\nit's right and it works well,", "start": 2453.08, "duration": 2.54}, {"text": "and you can just use\nit multiple times.", "start": 2455.62, "duration": 2.47}, {"text": "All right thanks everyone.", "start": 2458.09, "duration": 2.9}]