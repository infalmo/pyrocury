[{"text": "The following\ncontent is provided", "start": 0.08, "duration": 1.69}, {"text": "under a Creative\nCommons license.", "start": 1.77, "duration": 2.24}, {"text": "Your support will help MIT\nOpenCourseWare continue", "start": 4.01, "duration": 2.85}, {"text": "to offer high quality\neducational resources for free.", "start": 6.86, "duration": 3.86}, {"text": "To make a donation or\nview additional materials", "start": 10.72, "duration": 2.61}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.33, "duration": 3.898}, {"text": "at ocw.mit.edu.", "start": 17.228, "duration": 0.625}, {"text": "PROFESSOR: So today's\nlecture is on sorting.", "start": 23.29, "duration": 3.72}, {"text": "We'll be talking about specific\nsorting algorithms today.", "start": 27.01, "duration": 4.3}, {"text": "I want to start\nby motivating why", "start": 31.31, "duration": 3.26}, {"text": "we're interested in sorting,\nwhich should be fairly easy.", "start": 34.57, "duration": 2.535}, {"text": "Then I want to discuss\na particular sorting", "start": 39.69, "duration": 2.8}, {"text": "algorithm that's\ncalled insertion sort.", "start": 42.49, "duration": 2.98}, {"text": "That's probably the\nsimplest sorting algorithm", "start": 45.47, "duration": 2.39}, {"text": "you can write, it's\nfive lines of code.", "start": 47.86, "duration": 4.082}, {"text": "It's not the best\nsorting algorithm", "start": 51.942, "duration": 1.458}, {"text": "that's out there and so\nwe'll try and improve it.", "start": 53.4, "duration": 4.03}, {"text": "We'll also talk about merge\nsort, which is a divide", "start": 57.43, "duration": 3.04}, {"text": "and conquer algorithm\nand that's going", "start": 60.47, "duration": 2.78}, {"text": "to motivate the last thing\nthat I want to spend time on,", "start": 63.25, "duration": 5.76}, {"text": "which is recurrences and\nhow you solve recurrences.", "start": 69.01, "duration": 3.29}, {"text": "Typically the\nrecurrences that we'll", "start": 72.3, "duration": 1.93}, {"text": "be looking at in double o six\nare going to come from divide", "start": 74.23, "duration": 3.89}, {"text": "and conquer problems\nlike merge sort", "start": 78.12, "duration": 2.64}, {"text": "but you'll see\nthis over and over.", "start": 80.76, "duration": 3.54}, {"text": "So let's talk about why\nwe're interested in sorting.", "start": 84.3, "duration": 2.665}, {"text": "There's some fairly\nobvious applications", "start": 90.11, "duration": 4.26}, {"text": "like if you want to\nmaintain a phone book,", "start": 94.37, "duration": 3.12}, {"text": "you've got a bunch of names\nand numbers corresponding", "start": 97.49, "duration": 4.52}, {"text": "to a telephone\ndirectory and you want", "start": 102.01, "duration": 2.82}, {"text": "to keep them in\nsorted order so it's", "start": 104.83, "duration": 1.5}, {"text": "easy to search, mp3 organizers,\nspreadsheets, et cetera.", "start": 106.33, "duration": 5.18}, {"text": "So there's lots of\nobvious applications.", "start": 111.51, "duration": 3.08}, {"text": "There's also some\ninteresting problems", "start": 114.59, "duration": 5.04}, {"text": "that become easy once\nitems are sorted.", "start": 119.63, "duration": 6.27}, {"text": "One example of that\nis finding a median.", "start": 133.79, "duration": 4.38}, {"text": "So let's say that you\nhave a bunch of items", "start": 143.86, "duration": 3.36}, {"text": "in an array a zero through\nn and a zero through n", "start": 147.22, "duration": 8.99}, {"text": "contains n numbers and\nthey're not sorted.", "start": 156.21, "duration": 2.44}, {"text": "When you sort, you\nturn this into b 0", "start": 164.85, "duration": 4.1}, {"text": "through n, where if\nit's just numbers, then", "start": 168.95, "duration": 3.81}, {"text": "you may sort them in increasing\norder or decreasing order.", "start": 172.76, "duration": 2.9}, {"text": "Let's just call it\nincreasing order for now.", "start": 175.66, "duration": 3.03}, {"text": "Or if they're records,\nand they're not numbers,", "start": 178.69, "duration": 2.96}, {"text": "then you have to provide\na comparison function", "start": 181.65, "duration": 2.87}, {"text": "to determine which record is\nsmaller than another record.", "start": 184.52, "duration": 3.53}, {"text": "And that's another\ninput that you", "start": 188.05, "duration": 1.47}, {"text": "have to have in order\nto do the sorting.", "start": 189.52, "duration": 3.46}, {"text": "So it doesn't really\nmatter what the items are", "start": 192.98, "duration": 2.33}, {"text": "as long as you have the\ncomparison function.", "start": 195.31, "duration": 2.27}, {"text": "Think of it as less\nthan or equal to.", "start": 197.58, "duration": 2.35}, {"text": "And if you have that and\nit's straightforward,", "start": 199.93, "duration": 3.82}, {"text": "obviously, to check that 3\nis less than 4, et cetera.", "start": 203.75, "duration": 3.34}, {"text": "But it may be a little\nmore complicated", "start": 207.09, "duration": 2.55}, {"text": "for more sophisticated\nsorting applications.", "start": 209.64, "duration": 3.35}, {"text": "But the bottom line is that if\nyou have your algorithm that", "start": 212.99, "duration": 3.58}, {"text": "takes a comparison\nfunction as an input,", "start": 216.57, "duration": 2.55}, {"text": "you're going to be able to,\nafter a certain amount of time,", "start": 219.12, "duration": 3.55}, {"text": "get B 0 n.", "start": 222.67, "duration": 2.43}, {"text": "Now if you wanted to find the\nmedian of the set of numbers", "start": 225.1, "duration": 3.58}, {"text": "that were originally\nin the array A,", "start": 228.68, "duration": 3.04}, {"text": "what would you do once you\nhave the sorted array B?", "start": 231.72, "duration": 4.37}, {"text": "AUDIENCE: Isn't there a more\nefficient algorithm for median?", "start": 236.09, "duration": 3.034}, {"text": "PROFESSOR: Absolutely.", "start": 239.124, "duration": 0.916}, {"text": "But this is sort of a side\neffect of having a sorted list.", "start": 240.04, "duration": 8.08}, {"text": "If you happen to\nhave a sorted list,", "start": 248.12, "duration": 2.12}, {"text": "there's many ways\nthat you could imagine", "start": 250.24, "duration": 4.85}, {"text": "building up a sorted list.", "start": 255.09, "duration": 1.22}, {"text": "One way is you have something\nthat's completely unsorted", "start": 256.31, "duration": 3.469}, {"text": "and you run insertion\nsort or merge sort.", "start": 259.779, "duration": 2.841}, {"text": "Another way would be to\nmaintain a sorted list as you're", "start": 262.62, "duration": 2.52}, {"text": "getting items put into the list.", "start": 265.14, "duration": 2.52}, {"text": "So if you happened\nto have a sorted list", "start": 267.66, "duration": 1.98}, {"text": "and you need to have this\nsorted list for some reason,", "start": 269.64, "duration": 2.96}, {"text": "the point I'm making here\nis that finding the median", "start": 272.6, "duration": 2.84}, {"text": "is easy.", "start": 275.44, "duration": 1.7}, {"text": "And it's easy because\nall you have to do", "start": 277.14, "duration": 2.29}, {"text": "is look at-- depending\non whether n is odd", "start": 279.43, "duration": 4.375}, {"text": "or even-- look at B of n over 2.", "start": 283.805, "duration": 3.722}, {"text": "That would give you the\nmedian because you'd", "start": 287.527, "duration": 1.833}, {"text": "have a bunch of numbers\nthat are less than that", "start": 289.36, "duration": 4.85}, {"text": "and the equal set of numbers\nthat are greater than that,", "start": 294.21, "duration": 2.62}, {"text": "which is the\ndefinition of median.", "start": 296.83, "duration": 2.94}, {"text": "So this is not necessarily the\nbest way, as you pointed out,", "start": 299.77, "duration": 5.26}, {"text": "of finding the median.", "start": 305.03, "duration": 1.37}, {"text": "But it's constant time if\nyou have a sorted list.", "start": 306.4, "duration": 4.92}, {"text": "That's the point\nI wanted to make.", "start": 311.32, "duration": 3.33}, {"text": "There are other things\nthat you could do.", "start": 314.65, "duration": 2.07}, {"text": "And this came up\nin Erik's lecture,", "start": 316.72, "duration": 4.06}, {"text": "which is the notion of\nbinary search-- finding", "start": 320.78, "duration": 4.79}, {"text": "an element in an array--\na specific element.", "start": 325.57, "duration": 3.08}, {"text": "You have a list of items--\nagain a 0 through n.", "start": 328.65, "duration": 5.44}, {"text": "And you're looking for a\nspecific number or item.", "start": 334.09, "duration": 5.51}, {"text": "You could, obviously,\nscan the array,", "start": 343.55, "duration": 3.09}, {"text": "and that would take you\nlinear time to find this item.", "start": 346.64, "duration": 3.62}, {"text": "If the array happened\nto be sorted,", "start": 350.26, "duration": 2.84}, {"text": "then you can find this\nin logarithmic time", "start": 353.1, "duration": 5.43}, {"text": "using what's called\nbinary search.", "start": 358.53, "duration": 1.765}, {"text": "Let's say you're looking\nfor a specific item.", "start": 363.6, "duration": 2.28}, {"text": "Let's call it k.", "start": 365.88, "duration": 2.4}, {"text": "Binary search, roughly\nspeaking, would", "start": 368.28, "duration": 2.86}, {"text": "work like-- you go compare\nk to, again, B of n over 2,", "start": 371.14, "duration": 9.06}, {"text": "and decide, given\nthat B is sorted,", "start": 380.2, "duration": 3.58}, {"text": "you get to look at\n1/2 of the array.", "start": 383.78, "duration": 4.62}, {"text": "If B of n over 2 is not\nexactly k, then-- well,", "start": 388.4, "duration": 4.68}, {"text": "if it's exactly k you're done.", "start": 393.08, "duration": 1.31}, {"text": "Otherwise, you look\nat the left half.", "start": 394.39, "duration": 2.38}, {"text": "You do your divide\nand conquer paradigm.", "start": 396.77, "duration": 2.9}, {"text": "And you can do this\nin logarithmic time.", "start": 399.67, "duration": 3.15}, {"text": "So keep this in mind,\nbecause binary search", "start": 402.82, "duration": 2.88}, {"text": "is going to come up\nin today's lecture", "start": 405.7, "duration": 2.83}, {"text": "and again in other lectures.", "start": 408.53, "duration": 2.23}, {"text": "It's really a great\nparadigm of divide", "start": 410.76, "duration": 2.99}, {"text": "and conquer--\nprobably the simplest.", "start": 413.75, "duration": 2.27}, {"text": "And it, essentially,\ntakes something", "start": 416.02, "duration": 1.67}, {"text": "that's linear--\na linear search--", "start": 417.69, "duration": 3.35}, {"text": "and turns it into\nlogarithmic search.", "start": 421.04, "duration": 2.73}, {"text": "So those are a\ncouple of problems", "start": 423.77, "duration": 2.77}, {"text": "that become easy if\nyou have a sorted list.", "start": 426.54, "duration": 4.41}, {"text": "And there's some not\nso obvious applications", "start": 430.95, "duration": 10.32}, {"text": "of sorting-- for example,\ndata compression.", "start": 441.27, "duration": 3.88}, {"text": "If you wanted to\ncompress a file,", "start": 445.15, "duration": 2.64}, {"text": "one of the things that\nyou could do is to--", "start": 447.79, "duration": 2.74}, {"text": "and it's a set of items--\nyou could sort the items.", "start": 450.53, "duration": 4.8}, {"text": "And that automatically\nfinds duplicates.", "start": 455.33, "duration": 2.54}, {"text": "And you could say, if I have 100\nitems that are all identical,", "start": 457.87, "duration": 5.07}, {"text": "I'm going to compress the file\nby representing the item once", "start": 462.94, "duration": 4.839}, {"text": "and, then, having\na number associated", "start": 467.779, "duration": 1.541}, {"text": "with the frequency of that\nitem-- similar to what", "start": 469.32, "duration": 3.45}, {"text": "document distance does.", "start": 472.77, "duration": 1.67}, {"text": "Document distance can\nbe viewed as a way", "start": 474.44, "duration": 3.31}, {"text": "of compressing\nyour initial input.", "start": 477.75, "duration": 2.02}, {"text": "Obviously, you lose the works of\nShakespeare or whatever it was.", "start": 479.77, "duration": 3.47}, {"text": "And it becomes a bunch\nof words and frequencies.", "start": 483.24, "duration": 3.32}, {"text": "But it is something that\ncompresses the input", "start": 486.56, "duration": 6.31}, {"text": "and gives you a\ndifferent representation.", "start": 492.87, "duration": 2.72}, {"text": "And so people use sorting as a\nsubroutine in data compression.", "start": 495.59, "duration": 4.805}, {"text": "Computer graphics uses sorting.", "start": 503.19, "duration": 4.17}, {"text": "Most of the time,\nwhen you render", "start": 507.36, "duration": 3.2}, {"text": "scenes in computer graphics,\nyou have many layers", "start": 510.56, "duration": 2.31}, {"text": "corresponding to the scenes.", "start": 512.87, "duration": 1.689}, {"text": "It turns out that,\nin computer graphics,", "start": 514.559, "duration": 3.991}, {"text": "most of the time you're\nactually rendering", "start": 518.55, "duration": 1.749}, {"text": "front to back because,\nwhen you have a big opaque", "start": 520.299, "duration": 4.111}, {"text": "object in front, you want\nto render that first,", "start": 524.41, "duration": 4.477}, {"text": "so you don't have to worry\nabout everything that's", "start": 528.887, "duration": 2.083}, {"text": "occluded by this\nbig opaque object.", "start": 530.97, "duration": 3.09}, {"text": "And that makes things\nmore efficient.", "start": 534.06, "duration": 2.53}, {"text": "And so you keep things\nsorted front to back,", "start": 536.59, "duration": 2.11}, {"text": "most of the time, in\ncomputer graphics rendering.", "start": 538.7, "duration": 2.46}, {"text": "But some of the time, if you're\nworried about transparency,", "start": 541.16, "duration": 2.7}, {"text": "you have to render\nthings back to front.", "start": 543.86, "duration": 1.8}, {"text": "So typically, you\nhave sorted lists", "start": 545.66, "duration": 2.73}, {"text": "corresponding to the different\nobjects in both orders--", "start": 548.39, "duration": 3.16}, {"text": "both increasing order\nand decreasing order.", "start": 551.55, "duration": 2.18}, {"text": "And you're maintaining that.", "start": 553.73, "duration": 1.5}, {"text": "So sorting is a real\nimportant subroutine", "start": 555.23, "duration": 3.96}, {"text": "in pretty much any sophisticated\napplication you look at.", "start": 559.19, "duration": 3.9}, {"text": "So it's worthwhile to look\nat the variety of sorting", "start": 563.09, "duration": 3.69}, {"text": "algorithms that are out there.", "start": 566.78, "duration": 1.57}, {"text": "And we're going to do\nsome simple ones, today.", "start": 568.35, "duration": 2.082}, {"text": "But if you go and\nlook at Wikipedia", "start": 570.432, "duration": 1.458}, {"text": "and do a Google search,\nthere's all sorts", "start": 571.89, "duration": 3.38}, {"text": "of sorts like cocktail\nsort, and bitonic sort,", "start": 575.27, "duration": 2.76}, {"text": "and what have you.", "start": 578.03, "duration": 3.87}, {"text": "And there's reasons why each of\nthese sorting algorithms exist.", "start": 581.9, "duration": 4.0}, {"text": "Because in specific\ncases, they end up", "start": 585.9, "duration": 3.93}, {"text": "winning on types of inputs\nor types of problems.", "start": 589.83, "duration": 3.225}, {"text": "So let's take a look at our\nfirst sorting algorithm.", "start": 595.66, "duration": 3.81}, {"text": "I'm not going to write code\nbut it will be in the notes.", "start": 599.47, "duration": 4.17}, {"text": "And it is in your document\ndistance Python files.", "start": 603.64, "duration": 5.22}, {"text": "But I'll just give\nyou pseudocode here", "start": 608.86, "duration": 1.91}, {"text": "and walk through what\ninsertion sort looks like", "start": 610.77, "duration": 2.98}, {"text": "because the purpose\nof describing", "start": 613.75, "duration": 3.71}, {"text": "this algorithm to you is\nto analyze its complexity.", "start": 617.46, "duration": 3.296}, {"text": "We need to do some\ncounting here,", "start": 620.756, "duration": 1.374}, {"text": "with respect to this\nalgorithm, to figure out", "start": 622.13, "duration": 3.1}, {"text": "how fast it's going to run\nin and what the worst case", "start": 625.23, "duration": 3.38}, {"text": "complexity is.", "start": 628.61, "duration": 1.67}, {"text": "So what is insertion sort?", "start": 630.28, "duration": 2.305}, {"text": "For i equals 1, 2, through n,\ngiven an input to be sorted,", "start": 632.585, "duration": 9.195}, {"text": "what we're going to do is\nwe're going to insert A of i", "start": 641.78, "duration": 4.82}, {"text": "in the right position.", "start": 646.6, "duration": 1.87}, {"text": "And we're going\nto assume that we", "start": 648.47, "duration": 2.7}, {"text": "are sort of midway through\nthe sorting process, where", "start": 651.17, "duration": 4.05}, {"text": "we have sorted A 0\nthrough i minus 1.", "start": 655.22, "duration": 5.7}, {"text": "And we're going to\nexpand this to this array", "start": 660.92, "duration": 3.42}, {"text": "to have i plus 1 elements.", "start": 664.34, "duration": 3.25}, {"text": "And A of i is going\nto get inserted", "start": 667.59, "duration": 2.06}, {"text": "into the correct position.", "start": 669.65, "duration": 3.18}, {"text": "And we're going to do\nthis by pairwise swaps", "start": 672.83, "duration": 10.81}, {"text": "down to the correct position\nfor the number that is initially", "start": 683.64, "duration": 9.09}, {"text": "in A of i.", "start": 692.73, "duration": 0.76}, {"text": "So let's go through\nan example of this.", "start": 696.05, "duration": 6.36}, {"text": "We're going to sort\nin increasing order.", "start": 702.41, "duration": 2.43}, {"text": "Just have six numbers.", "start": 704.84, "duration": 1.045}, {"text": "And initially, we\nhave 5, 2, 4, 6, 1, 3.", "start": 710.43, "duration": 4.375}, {"text": "And we're going to\ntake a look at this.", "start": 714.805, "duration": 1.625}, {"text": "And you start with the index\n1, or the second element,", "start": 716.43, "duration": 4.12}, {"text": "because the very first\nelement-- it's a single element", "start": 720.55, "duration": 3.07}, {"text": "and it's already\nsorted by definition.", "start": 723.62, "duration": 2.43}, {"text": "But you start from here.", "start": 726.05, "duration": 1.88}, {"text": "And this is what\nwe call our key.", "start": 727.93, "duration": 2.96}, {"text": "And that's essentially a pointer\nto where we're at, right now.", "start": 730.89, "duration": 4.36}, {"text": "And the key keeps\nmoving to the right", "start": 735.25, "duration": 1.77}, {"text": "as we go through the different\nsteps of the algorithm.", "start": 737.02, "duration": 2.987}, {"text": "And so what you do\nis you look at this", "start": 740.007, "duration": 1.583}, {"text": "and you have-- this is A of i.", "start": 741.59, "duration": 3.24}, {"text": "That's your key.", "start": 744.83, "duration": 1.2}, {"text": "And you have A of\n0 to 0, which is 5.", "start": 746.03, "duration": 4.04}, {"text": "And since we want to\nsort in increasing order,", "start": 750.07, "duration": 4.19}, {"text": "this is not sorted.", "start": 754.26, "duration": 1.68}, {"text": "And so we do a swap.", "start": 755.94, "duration": 1.78}, {"text": "So what this would do in\nthis step is to do a swap.", "start": 757.72, "duration": 4.68}, {"text": "And we would go obtain\n2, 5, 4, 6, 1, 3.", "start": 762.4, "duration": 9.43}, {"text": "So all that's happened here,\nin this step-- in the very", "start": 771.83, "duration": 3.25}, {"text": "first step where the key\nis in the second position--", "start": 775.08, "duration": 2.28}, {"text": "is one swap happened.", "start": 777.36, "duration": 2.66}, {"text": "Now, your key is\nhere, at item 4.", "start": 780.02, "duration": 3.32}, {"text": "Again, you need to put\n4 into the right spot.", "start": 783.34, "duration": 2.64}, {"text": "And so you do pairwise swaps.", "start": 785.98, "duration": 2.69}, {"text": "And in this case, you\nhave to do one swap.", "start": 788.67, "duration": 2.61}, {"text": "And you get 2, 4, 5.", "start": 791.28, "duration": 1.47}, {"text": "And you're done\nwith this iteration.", "start": 792.75, "duration": 2.9}, {"text": "So what happens here is\nyou have 2, 4, 5, 6, 1, 3.", "start": 795.65, "duration": 12.2}, {"text": "And now, the key\nis over here, at 6.", "start": 807.85, "duration": 5.16}, {"text": "Now, at this point,\nthings are kind of easy,", "start": 813.01, "duration": 4.85}, {"text": "in the sense that you look\nat it and you say, well, I", "start": 817.86, "duration": 3.32}, {"text": "know this part is\nalready started.", "start": 821.18, "duration": 2.3}, {"text": "6 is greater than 5.", "start": 823.48, "duration": 1.49}, {"text": "So you have to do nothing.", "start": 824.97, "duration": 2.03}, {"text": "So there's no swaps that\nhappen in this step.", "start": 827.0, "duration": 4.53}, {"text": "So all that happens\nhere is you're", "start": 831.53, "duration": 4.91}, {"text": "going to move the key to\none step to the right.", "start": 836.44, "duration": 5.84}, {"text": "So you have 2, 4, 5, 6, 1, 3.", "start": 842.28, "duration": 4.09}, {"text": "And your key is now at 1.", "start": 846.37, "duration": 3.9}, {"text": "Here, you have to do more work.", "start": 850.27, "duration": 1.64}, {"text": "Now, you see one aspect of the\ncomplexity of this algorithm--", "start": 851.91, "duration": 4.86}, {"text": "given that you're doing\npairwise swaps-- the way", "start": 856.77, "duration": 2.7}, {"text": "this algorithm was defined, in\npseudocode, out there, was I'm", "start": 859.47, "duration": 3.95}, {"text": "going to use pairwise swaps\nto find the correct position.", "start": 863.42, "duration": 4.34}, {"text": "So what you're going\nto do is you're", "start": 867.76, "duration": 1.88}, {"text": "going to have to\nswap first 1 and 6.", "start": 869.64, "duration": 4.44}, {"text": "And then you'll\nswap-- 1 is over here.", "start": 874.08, "duration": 2.23}, {"text": "So you'll swap this\nposition and that position.", "start": 876.31, "duration": 3.66}, {"text": "And then you'll\nswap-- essentially,", "start": 879.97, "duration": 4.61}, {"text": "do 4 swaps to get to\nthe point where you have", "start": 884.58, "duration": 5.33}, {"text": "1, 2, 4, 5, 6, 3.", "start": 889.91, "duration": 3.06}, {"text": "So this is the result.", "start": 892.97, "duration": 3.68}, {"text": "1, 2, 4, 5, 6, 3.", "start": 899.19, "duration": 4.58}, {"text": "And the important thing\nto understand, here,", "start": 903.77, "duration": 2.59}, {"text": "is that you've done\nfour swaps to get 1", "start": 906.36, "duration": 2.69}, {"text": "to the correct position.", "start": 909.05, "duration": 1.11}, {"text": "Now, you could imagine a\ndifferent data structure", "start": 910.16, "duration": 2.32}, {"text": "where you move this over\nthere and you shift them", "start": 912.48, "duration": 2.99}, {"text": "all to the right.", "start": 915.47, "duration": 1.46}, {"text": "But in fact, that shifting\nof these four elements", "start": 916.93, "duration": 3.3}, {"text": "is going to be computed\nin our model as four", "start": 920.23, "duration": 3.4}, {"text": "operations, or\nfour steps, anyway.", "start": 923.63, "duration": 2.614}, {"text": "So there's no getting\naway from the fact", "start": 926.244, "duration": 1.666}, {"text": "that you have to do\nfour things here.", "start": 927.91, "duration": 2.75}, {"text": "And the way the code that\nwe have for insertion sort", "start": 930.66, "duration": 6.17}, {"text": "does this is by\nusing pairwise swaps.", "start": 936.83, "duration": 2.57}, {"text": "So we're almost done.", "start": 939.4, "duration": 2.07}, {"text": "Now, we have the key at 3.", "start": 941.47, "duration": 8.02}, {"text": "And now, 3 needs to get put\ninto the correct position.", "start": 949.49, "duration": 3.42}, {"text": "And so you've got\nto do a few swaps.", "start": 952.91, "duration": 2.44}, {"text": "This is the last step.", "start": 955.35, "duration": 2.97}, {"text": "And what happens here is 3 is\ngoing to get swapped with 6.", "start": 958.32, "duration": 5.26}, {"text": "And then 3 needs to\nget swapped with 5.", "start": 963.58, "duration": 2.94}, {"text": "And then 3 needs to\nget swapped with 4.", "start": 966.52, "duration": 3.25}, {"text": "And then, since 3 is\ngreater than 2, you're done.", "start": 969.77, "duration": 3.215}, {"text": "So you have 1, 2, 3, 4, 5, 6.", "start": 972.985, "duration": 3.34}, {"text": "And that's it.", "start": 978.88, "duration": 2.3}, {"text": "So, analysis.", "start": 981.18, "duration": 1.64}, {"text": "How many steps do I have?", "start": 985.38, "duration": 1.25}, {"text": "AUDIENCE: n squared?", "start": 990.67, "duration": 1.48}, {"text": "PROFESSOR: No, how\nmany steps do I have?", "start": 992.15, "duration": 4.16}, {"text": "I guess that wasn't\na good question.", "start": 996.31, "duration": 3.81}, {"text": "If I think of a step as\nbeing a movement of the key,", "start": 1000.12, "duration": 3.81}, {"text": "how many steps do I have?", "start": 1003.93, "duration": 2.285}, {"text": "I have theta n steps.", "start": 1006.215, "duration": 3.715}, {"text": "And in this case, you can\nthink of it as n minus 1 steps,", "start": 1009.93, "duration": 6.64}, {"text": "since you started with 2.", "start": 1016.57, "duration": 1.46}, {"text": "But let's just call\nit theta n steps,", "start": 1018.03, "duration": 5.87}, {"text": "in terms of key positions.", "start": 1023.9, "duration": 2.88}, {"text": "And you're right.", "start": 1030.06, "duration": 1.09}, {"text": "It is n square because,\nat any given step,", "start": 1031.15, "duration": 4.199}, {"text": "it's quite possible that\nI have to do theta n work.", "start": 1035.349, "duration": 4.381}, {"text": "And one example is\nthis one, right here,", "start": 1039.73, "duration": 2.67}, {"text": "where I had to do four swaps.", "start": 1042.4, "duration": 2.76}, {"text": "And in general, you can\nconstruct a scenario", "start": 1045.16, "duration": 2.439}, {"text": "where, towards the\nend of the algorithm,", "start": 1047.599, "duration": 3.871}, {"text": "you'd have to do theta n work.", "start": 1051.47, "duration": 2.65}, {"text": "But if you had a list\nthat was reverse sorted.", "start": 1054.12, "duration": 3.44}, {"text": "You would, essentially,\nhave to do, on an average n", "start": 1057.56, "duration": 3.4}, {"text": "by two swaps as you go\nthrough each of the steps.", "start": 1060.96, "duration": 2.89}, {"text": "And that's theta n.", "start": 1063.85, "duration": 1.45}, {"text": "So each step is theta n swaps.", "start": 1065.3, "duration": 6.85}, {"text": "And when I say\nswaps, I could also", "start": 1075.93, "duration": 2.81}, {"text": "say each step is theta\nn compares and swaps.", "start": 1078.74, "duration": 7.905}, {"text": "And this is going\nto be important", "start": 1086.645, "duration": 1.375}, {"text": "because I'm going to ask\nyou an interesting question", "start": 1088.02, "duration": 2.41}, {"text": "in a minute.", "start": 1090.43, "duration": 1.27}, {"text": "But let me summarize.", "start": 1091.7, "duration": 2.14}, {"text": "What I have here is a\ntheta n squared algorithm.", "start": 1093.84, "duration": 2.63}, {"text": "The reason this is\na theta n squared", "start": 1096.47, "duration": 1.5}, {"text": "algorithm is because\nI have theta n steps", "start": 1097.97, "duration": 4.79}, {"text": "and each step is theta n.", "start": 1102.76, "duration": 4.1}, {"text": "When I'm counting,\nwhat am I counting", "start": 1106.86, "duration": 2.28}, {"text": "it terms of operations?", "start": 1109.14, "duration": 1.59}, {"text": "The assumption here--\nunspoken assumption--", "start": 1110.73, "duration": 2.78}, {"text": "has been that an operation\nis a compare and a swap", "start": 1113.51, "duration": 3.3}, {"text": "and they're, essentially,\nequal in cost.", "start": 1116.81, "duration": 2.73}, {"text": "And in most computers,\nthat's true.", "start": 1119.54, "duration": 2.31}, {"text": "You have a single\ninstruction and, say, the x86", "start": 1121.85, "duration": 3.36}, {"text": "or the MIPS architecture\nthat can do a compare,", "start": 1125.21, "duration": 2.49}, {"text": "and the same thing for\nswapping registers.", "start": 1127.7, "duration": 2.96}, {"text": "So perfectly\nreasonably assumption", "start": 1130.66, "duration": 1.98}, {"text": "that compares and\nswaps for numbers", "start": 1132.64, "duration": 3.84}, {"text": "have exactly the same cost.", "start": 1136.48, "duration": 1.93}, {"text": "But if you had a record and\nyou were comparing records,", "start": 1138.41, "duration": 3.49}, {"text": "and the comparison function that\nyou used for the records was", "start": 1141.9, "duration": 3.8}, {"text": "in itself a method\ncall or a subroutine,", "start": 1145.7, "duration": 3.12}, {"text": "it's quite possible\nthat all you're doing", "start": 1148.82, "duration": 2.47}, {"text": "is swapping pointers or\nreferences to do the swap,", "start": 1151.29, "duration": 4.31}, {"text": "but the comparison could be\nsubstantially more expensive.", "start": 1155.6, "duration": 2.385}, {"text": "Most of the time-- and\nwe'll differentiate", "start": 1162.87, "duration": 2.05}, {"text": "if it becomes\nnecessary-- we're going", "start": 1164.92, "duration": 2.23}, {"text": "to be counting comparisons\nin the sorting algorithms", "start": 1167.15, "duration": 2.41}, {"text": "that we'll be putting out.", "start": 1169.56, "duration": 1.67}, {"text": "And we'll be assuming that\neither comparison swaps are", "start": 1171.23, "duration": 4.9}, {"text": "roughly the same or\nthat compares are--", "start": 1176.13, "duration": 4.91}, {"text": "and we'll say which one,\nof course-- that compares", "start": 1181.04, "duration": 3.53}, {"text": "are substantially more\nexpensive than swaps.", "start": 1184.57, "duration": 3.26}, {"text": "So if you had either of those\ncases for insertion sort,", "start": 1187.83, "duration": 4.44}, {"text": "you have a theta n\nsquared algorithm.", "start": 1192.27, "duration": 1.956}, {"text": "You have theta n\nsquared compares", "start": 1194.226, "duration": 1.374}, {"text": "and theta n squared swaps.", "start": 1195.6, "duration": 2.6}, {"text": "Now, here's a question.", "start": 1198.2, "duration": 2.58}, {"text": "Let's say that compares are\nmore expensive than swaps.", "start": 1200.78, "duration": 10.399}, {"text": "And so, I'm concerned\nabout the theta", "start": 1211.179, "duration": 1.541}, {"text": "n squared comparison cost.", "start": 1212.72, "duration": 2.03}, {"text": "I'm not as concerned, because of\nthe constant factors involved,", "start": 1217.27, "duration": 3.61}, {"text": "with the theta n\nsquared swap cost.", "start": 1220.88, "duration": 1.83}, {"text": "This is a question question.", "start": 1225.41, "duration": 3.32}, {"text": "What's a simple fix-- change\nto this algorithm that", "start": 1228.73, "duration": 4.86}, {"text": "would give me a better\ncomplexity in the case", "start": 1233.59, "duration": 3.67}, {"text": "where compares are\nmore expensive,", "start": 1237.26, "duration": 2.64}, {"text": "or I'm only looking at the\ncomplexity of compares.", "start": 1239.9, "duration": 3.4}, {"text": "So the theta\nwhatever of compares.", "start": 1243.3, "duration": 3.69}, {"text": "Anyone?", "start": 1246.99, "duration": 0.96}, {"text": "Yeah, back there.", "start": 1247.95, "duration": 0.711}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 1248.661, "duration": 0.875}, {"text": "PROFESSOR: You could\ncompare with the middle.", "start": 1256.356, "duration": 1.874}, {"text": "What did I call it?", "start": 1258.23, "duration": 0.791}, {"text": "I called it something.", "start": 1261.91, "duration": 1.21}, {"text": "What you just said, I\ncalled it something.", "start": 1263.12, "duration": 3.041}, {"text": "AUDIENCE: Binary search.", "start": 1266.161, "duration": 0.999}, {"text": "PROFESSOR: Binary search.", "start": 1267.16, "duration": 0.58}, {"text": "That's right.", "start": 1267.74, "duration": 0.57}, {"text": "Two cushions for this one.", "start": 1268.31, "duration": 1.97}, {"text": "So you pick them\nup after lecture.", "start": 1270.28, "duration": 1.941}, {"text": "So you're exactly right.", "start": 1272.221, "duration": 0.999}, {"text": "You got it right.", "start": 1273.22, "duration": 0.708}, {"text": "I called it binary\nsearch, up here.", "start": 1273.928, "duration": 4.232}, {"text": "And so you can\ntake insertion sort", "start": 1278.16, "duration": 3.46}, {"text": "and you can sort of trivially\nturn it into a theta n log n", "start": 1281.62, "duration": 3.18}, {"text": "algorithm if we\nare talking about n", "start": 1284.8, "duration": 2.4}, {"text": "being the number of compares.", "start": 1287.2, "duration": 2.71}, {"text": "And all you have to do\nto do that is to say,", "start": 1289.91, "duration": 2.515}, {"text": "you know what, I'm\ngoing to replace", "start": 1292.425, "duration": 1.855}, {"text": "this with binary search.", "start": 1294.28, "duration": 3.67}, {"text": "And you can do that-- and\nthat was the key observation--", "start": 1297.95, "duration": 4.77}, {"text": "because A of 0 through i\nminus 1 is already sorted.", "start": 1302.72, "duration": 5.27}, {"text": "And so you can do binary search\non that part of the array.", "start": 1307.99, "duration": 3.919}, {"text": "So let me just write that down.", "start": 1311.909, "duration": 1.291}, {"text": "Do a binary search on A\nof 0 through i minus 1,", "start": 1316.75, "duration": 7.25}, {"text": "which is already sorted.", "start": 1324.0, "duration": 1.095}, {"text": "And essentially, you can think\nof it as theta log i time,", "start": 1330.54, "duration": 6.24}, {"text": "and for each of those steps.", "start": 1336.78, "duration": 1.29}, {"text": "And so then you get your\ntheta n log n theta n log", "start": 1338.07, "duration": 9.181}, {"text": "n in terms of compares.", "start": 1347.251, "duration": 3.159}, {"text": "Does this help the swaps\nfor an array data structure?", "start": 1350.41, "duration": 7.53}, {"text": "No, because binary search\nwill require insertion", "start": 1357.94, "duration": 3.34}, {"text": "into A of 0 though i minus 1.", "start": 1361.28, "duration": 3.39}, {"text": "So here's the problem.", "start": 1364.67, "duration": 1.21}, {"text": "Why don't we have a full-fledged\ntheta n log n algorithm,", "start": 1365.88, "duration": 4.55}, {"text": "regardless of the cost\nof compares or swaps?", "start": 1370.43, "duration": 3.51}, {"text": "We don't quite have that.", "start": 1373.94, "duration": 1.53}, {"text": "We don't quite have that because\nwe need to insert our A of i", "start": 1375.47, "duration": 7.48}, {"text": "into the right position into\nA of 0 through i minus 1.", "start": 1382.95, "duration": 4.9}, {"text": "You do that if you have\nan array structure,", "start": 1387.85, "duration": 1.94}, {"text": "it might get into the middle.", "start": 1389.79, "duration": 1.208}, {"text": "And you have to shift\nthings over to the right.", "start": 1390.998, "duration": 2.339}, {"text": "And when you shift\nthings over to the right,", "start": 1393.337, "duration": 1.833}, {"text": "in the worst case, you may\nbe shifting a lot of things", "start": 1395.17, "duration": 1.92}, {"text": "over to the right.", "start": 1397.09, "duration": 0.89}, {"text": "And that gets back to worst\ncase complexity of theta n.", "start": 1397.98, "duration": 2.65}, {"text": "So a binary search\nin insertion sort", "start": 1403.2, "duration": 3.8}, {"text": "gives you theta n\nlog n for compares.", "start": 1407.0, "duration": 2.197}, {"text": "But it's still theta\nn squared for swaps.", "start": 1409.197, "duration": 1.708}, {"text": "So as you can see,\nthere's many varieties", "start": 1415.0, "duration": 1.805}, {"text": "of sorting algorithms.", "start": 1416.805, "duration": 0.965}, {"text": "We just looked at\na couple of them.", "start": 1417.77, "duration": 2.08}, {"text": "And they were both\ninsertion sort.", "start": 1419.85, "duration": 3.16}, {"text": "The second one\nthat I just put up", "start": 1423.01, "duration": 2.03}, {"text": "is, I guess, technically\ncalled binary insertion sort", "start": 1425.04, "duration": 3.86}, {"text": "because it does binary search.", "start": 1428.9, "duration": 1.81}, {"text": "And the vanilla\ninsertion sort is", "start": 1430.71, "duration": 2.29}, {"text": "the one that you have the code\nfor in the doc dis program,", "start": 1433.0, "duration": 3.676}, {"text": "or at least one of\nthe doc dis files.", "start": 1436.676, "duration": 2.724}, {"text": "So let's move on and talk\nabout a different algorithm.", "start": 1439.4, "duration": 5.22}, {"text": "So what we'd like to\ndo, now-- this class", "start": 1444.62, "duration": 2.21}, {"text": "is about constant improvement.", "start": 1446.83, "duration": 2.29}, {"text": "We're never happy.", "start": 1449.12, "duration": 2.36}, {"text": "We always want to do\na little bit better.", "start": 1451.48, "duration": 2.89}, {"text": "And eventually, once\nwe run out of room", "start": 1454.37, "duration": 2.494}, {"text": "from an asymptotic\nstandpoint, you", "start": 1456.864, "duration": 1.416}, {"text": "take these other classes\nwhere you try and improve", "start": 1458.28, "duration": 2.083}, {"text": "constant factors and\nget 10%, and 5%, and 1%,", "start": 1460.363, "duration": 4.017}, {"text": "and so on, and so forth.", "start": 1464.38, "duration": 1.18}, {"text": "But we'll stick to improving\nasymptotic complexity.", "start": 1465.56, "duration": 5.64}, {"text": "And we're not quite happy\nwith binary insertion sort", "start": 1471.2, "duration": 2.99}, {"text": "because, in the case of numbers,\nour binary insertion sort", "start": 1474.19, "duration": 2.86}, {"text": "has theta n squared complexity,\nif you look at swaps.", "start": 1477.05, "duration": 3.659}, {"text": "So we'd like to go find an\nalgorithm that is theta n log", "start": 1480.709, "duration": 2.333}, {"text": "n.", "start": 1483.042, "duration": 1.768}, {"text": "And I guess, eventually,\nwe'll have to stop.", "start": 1484.81, "duration": 4.79}, {"text": "But Erik will take care of that.", "start": 1489.6, "duration": 1.66}, {"text": "There's a reason to stop.", "start": 1493.9, "duration": 1.07}, {"text": "It's when you can prove that\nyou can't do any better.", "start": 1494.97, "duration": 3.65}, {"text": "And so we'll get to\nthat, eventually.", "start": 1498.62, "duration": 2.59}, {"text": "So merge sort is also something\nthat you've probably seen.", "start": 1501.21, "duration": 3.475}, {"text": "But there probably\nwill be a couple", "start": 1507.277, "duration": 1.458}, {"text": "of subtleties that come out as\nI describe this algorithm that,", "start": 1508.735, "duration": 3.705}, {"text": "hopefully, will be interesting\nto those of you who already", "start": 1512.44, "duration": 2.9}, {"text": "know merge sort.", "start": 1515.34, "duration": 1.47}, {"text": "And for those of you who don't,\nit's a very pretty algorithm.", "start": 1516.81, "duration": 4.22}, {"text": "It's a standard recursion\nalgorithm-- recursive", "start": 1521.03, "duration": 5.9}, {"text": "algorithm-- similar\nto a binary search.", "start": 1526.93, "duration": 3.69}, {"text": "What we do, here, is we have\nan array, A. We split it", "start": 1530.62, "duration": 4.16}, {"text": "into two parts, L and R.\nAnd essentially, we kind of", "start": 1534.78, "duration": 7.315}, {"text": "do no work, really.", "start": 1542.095, "duration": 1.855}, {"text": "In terms of the L and R in\nthe sense that we just call,", "start": 1543.95, "duration": 5.864}, {"text": "we keep splitting,\nsplitting, splitting.", "start": 1549.814, "duration": 1.666}, {"text": "And all the work is\ndone down at the bottom", "start": 1551.48, "duration": 2.54}, {"text": "in this routine called\nmerge, where we are merging", "start": 1554.02, "duration": 3.55}, {"text": "a pair of elements\nat the leaves.", "start": 1557.57, "duration": 2.54}, {"text": "And then, we merge two\npairs and get four elements.", "start": 1560.11, "duration": 4.38}, {"text": "And then we merge four tuples\nof elements, et cetera,", "start": 1564.49, "duration": 4.14}, {"text": "and go all the way up.", "start": 1568.63, "duration": 1.45}, {"text": "So while I'm just saying L\nterms into L prime, out here,", "start": 1570.08, "duration": 8.91}, {"text": "there's no real\nexplicit code that you", "start": 1578.99, "duration": 2.0}, {"text": "can see that turns\nL into L prime.", "start": 1580.99, "duration": 2.88}, {"text": "It happens really later.", "start": 1583.87, "duration": 1.76}, {"text": "There's no real\nsorting code, here.", "start": 1585.63, "duration": 1.56}, {"text": "It happens in the merge routine.", "start": 1587.19, "duration": 1.6}, {"text": "And you'll see\nthat quite clearly", "start": 1588.79, "duration": 1.859}, {"text": "when we run through an example.", "start": 1590.649, "duration": 1.291}, {"text": "So you have L and R turn\ninto L prime and R prime.", "start": 1594.96, "duration": 6.54}, {"text": "And what we end up getting\nis a sorted array, A.", "start": 1601.5, "duration": 10.81}, {"text": "And we have what's called\na merge routine that", "start": 1612.31, "duration": 6.59}, {"text": "takes L prime and R\nprime and merges them", "start": 1618.9, "duration": 2.21}, {"text": "into the sorted array.", "start": 1621.11, "duration": 1.29}, {"text": "So at the top level, what\nyou see is split into two,", "start": 1622.4, "duration": 6.87}, {"text": "and do a merge, and get\nto the sorted array.", "start": 1629.27, "duration": 4.01}, {"text": "The input is of size n.", "start": 1633.28, "duration": 3.4}, {"text": "You have two arrays\nof size n over 2.", "start": 1636.68, "duration": 8.01}, {"text": "These are two sorted\narrays of size n over 2.", "start": 1644.69, "duration": 8.52}, {"text": "And then, finally, you have\na sorted array of size n.", "start": 1653.21, "duration": 6.27}, {"text": "So if you want to follow\nthe recursive of execution", "start": 1662.116, "duration": 2.124}, {"text": "of this in a small\nexample, then you'll", "start": 1664.24, "duration": 5.63}, {"text": "be able to see how this works.", "start": 1669.87, "duration": 3.92}, {"text": "And we'll do a fairly\nstraightforward example", "start": 1673.79, "duration": 2.33}, {"text": "with 8 elements.", "start": 1676.12, "duration": 2.08}, {"text": "So at the top level--\nbefore we get there, merge", "start": 1678.2, "duration": 4.98}, {"text": "is going to assume that\nyou have two sorted arrays,", "start": 1683.18, "duration": 5.46}, {"text": "and merge them together.", "start": 1688.64, "duration": 3.06}, {"text": "That's the invariant in merge\nsort, or for the merge routine.", "start": 1691.7, "duration": 4.26}, {"text": "It assumes the inputs are\nsorted-- L and R. Actually", "start": 1695.96, "duration": 3.61}, {"text": "I should say, L\nprime and R prime.", "start": 1699.57, "duration": 3.23}, {"text": "So let's say you have\n20, 13, 7, and 2.", "start": 1702.8, "duration": 4.824}, {"text": "You have 12, 11, 9, and 1.", "start": 1707.624, "duration": 3.696}, {"text": "And this could be L prime.", "start": 1711.32, "duration": 2.08}, {"text": "And this could be R prime.", "start": 1713.4, "duration": 3.44}, {"text": "What you have is what we\ncall a two finger algorithm.", "start": 1716.84, "duration": 2.81}, {"text": "And so you've got two\nfingers and each of them", "start": 1719.65, "duration": 2.73}, {"text": "point to something.", "start": 1722.38, "duration": 1.782}, {"text": "And in this case, one\nof them is pointing", "start": 1724.162, "duration": 1.708}, {"text": "to L. My left finger\nis pointing to L prime,", "start": 1725.87, "duration": 3.32}, {"text": "or some element L prime.", "start": 1729.19, "duration": 1.61}, {"text": "My right finger is pointing\nto some element in R prime.", "start": 1730.8, "duration": 3.05}, {"text": "And I'm going to\ncompare the two elements", "start": 1733.85, "duration": 2.97}, {"text": "that my fingers are pointing to.", "start": 1736.82, "duration": 1.92}, {"text": "And I'm going to\nchoose, in this case,", "start": 1738.74, "duration": 3.43}, {"text": "the smaller of those elements.", "start": 1742.17, "duration": 1.67}, {"text": "And I'm going to put them\ninto the sorted array.", "start": 1743.84, "duration": 3.95}, {"text": "So start out here.", "start": 1747.79, "duration": 3.18}, {"text": "Look at that and that.", "start": 1750.97, "duration": 1.51}, {"text": "And I compared 2 and 1.", "start": 1752.48, "duration": 1.786}, {"text": "And which is smaller?", "start": 1754.266, "duration": 0.874}, {"text": "1 is smaller.", "start": 1755.14, "duration": 1.17}, {"text": "So I'm going to write 1 down.", "start": 1756.31, "duration": 2.82}, {"text": "This is a two finger\nalgo for merge.", "start": 1759.13, "duration": 4.59}, {"text": "And I put 1 down.", "start": 1763.72, "duration": 1.16}, {"text": "When I put 1 down, I\nhad to cross out 1.", "start": 1764.88, "duration": 2.5}, {"text": "So effectively, what\nhappens is-- let", "start": 1767.38, "duration": 2.015}, {"text": "me just circle that\ninstead of crossing it out.", "start": 1769.395, "duration": 2.065}, {"text": "And my finger moves up to 9.", "start": 1771.46, "duration": 3.99}, {"text": "So now I'm pointing at 2 and 9.", "start": 1775.45, "duration": 2.66}, {"text": "And I repeat this step.", "start": 1778.11, "duration": 1.97}, {"text": "So now, in this\ncase, 2 is smaller.", "start": 1780.08, "duration": 1.79}, {"text": "So I'm going to go\nahead and write 2 down.", "start": 1781.87, "duration": 2.17}, {"text": "And I can cross out 2 and\nmove my finger up to 7.", "start": 1784.04, "duration": 5.38}, {"text": "And so that's it.", "start": 1789.42, "duration": 1.42}, {"text": "I won't bore you with\nthe rest of the steps.", "start": 1790.84, "duration": 3.17}, {"text": "It's essentially walking up.", "start": 1794.01, "duration": 2.104}, {"text": "You have a couple of\npointers and you're", "start": 1796.114, "duration": 1.666}, {"text": "walking up these two arrays.", "start": 1797.78, "duration": 2.14}, {"text": "And you're writing down 1,\n2, 7, 9, 11, 12, 13, 20.", "start": 1799.92, "duration": 7.31}, {"text": "And that's your merge routine.", "start": 1807.23, "duration": 1.5}, {"text": "And all of the work, really,\nis done in the merge routine", "start": 1808.73, "duration": 3.6}, {"text": "because, other than\nthat, the body is simply", "start": 1812.33, "duration": 3.13}, {"text": "a recursive call.", "start": 1815.46, "duration": 1.16}, {"text": "You have to, obviously,\nsplit the array.", "start": 1816.62, "duration": 1.8}, {"text": "But that's fairly\nstraightforward.", "start": 1818.42, "duration": 1.69}, {"text": "If you have an array, A 0\nthrough n-- and depending on", "start": 1820.11, "duration": 4.49}, {"text": "whether n is odd\nor even-- you could", "start": 1824.6, "duration": 3.7}, {"text": "imagine that you set L\nto be A 0 n by 2 minus 1,", "start": 1828.3, "duration": 10.23}, {"text": "and R similarly.", "start": 1838.53, "duration": 2.89}, {"text": "And so you just split it\nhalfway in the middle.", "start": 1841.42, "duration": 2.666}, {"text": "I'll talk about that\na little bit more.", "start": 1844.086, "duration": 1.624}, {"text": "There's a subtlety\nassociated with that", "start": 1845.71, "duration": 1.624}, {"text": "that we'll get to\nin a few minutes.", "start": 1847.334, "duration": 3.866}, {"text": "But to finish up in terms of\nthe computation of merge sort.", "start": 1851.2, "duration": 4.08}, {"text": "This is it.", "start": 1855.28, "duration": 0.83}, {"text": "The merge routine is doing\nmost, if not all, of the work.", "start": 1856.11, "duration": 4.717}, {"text": "And this two finger\nalgorithm is going", "start": 1860.827, "duration": 1.583}, {"text": "to be able to take\ntwo sorted arrays", "start": 1862.41, "duration": 2.22}, {"text": "and put them into a\nsingle sorted array", "start": 1864.63, "duration": 4.92}, {"text": "by interspersing, or\ninterleaving, these elements.", "start": 1869.55, "duration": 3.6}, {"text": "And what's the\ncomplexity of merge", "start": 1873.15, "duration": 1.85}, {"text": "if I have two arrays\nof size n over 2, here?", "start": 1875.0, "duration": 3.71}, {"text": "What do I have?", "start": 1878.71, "duration": 3.1}, {"text": "AUDIENCE: n.", "start": 1881.81, "duration": 0.78}, {"text": "PROFESSOR: n.", "start": 1882.59, "duration": 1.141}, {"text": "We'll give you a cushion, too.", "start": 1883.731, "duration": 1.249}, {"text": "theta n complexity.", "start": 1888.05, "duration": 1.115}, {"text": "So far so good.", "start": 1895.47, "duration": 0.82}, {"text": "I know you know the\nanswer as to what", "start": 1898.83, "duration": 2.81}, {"text": "the complexity of merge sort is.", "start": 1901.64, "duration": 1.91}, {"text": "But I'm guessing\nthat most of you", "start": 1903.55, "duration": 1.63}, {"text": "won't be able to prove it to me\nbecause I'm kind of a hard guy", "start": 1905.18, "duration": 2.72}, {"text": "to prove something to.", "start": 1907.9, "duration": 3.02}, {"text": "And I could always say,\nno, I don't believe you", "start": 1910.92, "duration": 2.12}, {"text": "or I don't understand.", "start": 1913.04, "duration": 0.916}, {"text": "The complexity-- and you've\nsaid this before, in class,", "start": 1917.96, "duration": 2.92}, {"text": "and I think Erik's\nmentioned it--", "start": 1920.88, "duration": 1.7}, {"text": "the overall complexity of this\nalgorithm is theta n log n", "start": 1922.58, "duration": 5.79}, {"text": "And where does that come from?", "start": 1928.37, "duration": 1.44}, {"text": "How do you prove that?", "start": 1929.81, "duration": 1.98}, {"text": "And so what we'll do, now,\nis take a look at merge sort.", "start": 1931.79, "duration": 5.05}, {"text": "And we'll look at\nthe recursion tree.", "start": 1936.84, "duration": 2.23}, {"text": "And we'll try and--\nthere are many ways", "start": 1939.07, "duration": 1.625}, {"text": "of proving that merge\nsort is theta n log n.", "start": 1940.695, "duration": 2.675}, {"text": "The way we're\ngoing to do this is", "start": 1943.37, "duration": 2.49}, {"text": "what's called proof by picture.", "start": 1945.86, "duration": 2.78}, {"text": "And it's not an established\nproof technique,", "start": 1948.64, "duration": 3.65}, {"text": "but it's something\nthat is very helpful", "start": 1952.29, "duration": 2.73}, {"text": "to get an intuition\nbehind the proof", "start": 1955.02, "duration": 3.08}, {"text": "and why the result is true.", "start": 1958.1, "duration": 2.341}, {"text": "And you can always\ntake that and you", "start": 1960.441, "duration": 1.499}, {"text": "can formalize it and\nmake this something", "start": 1961.94, "duration": 5.09}, {"text": "that everyone believes.", "start": 1967.03, "duration": 2.65}, {"text": "And we'll also look at\nsubstitution, possibly", "start": 1969.68, "duration": 3.28}, {"text": "in section tomorrow,\nfor recurrence solving.", "start": 1972.96, "duration": 3.35}, {"text": "So where we're right now is that\nwe have a divide and conquer", "start": 1976.31, "duration": 4.23}, {"text": "algorithm that has a merge\nstep that is theta n.", "start": 1980.54, "duration": 7.17}, {"text": "And so, if I just look at this\nstructure that I have here,", "start": 1987.71, "duration": 4.83}, {"text": "I can write a recurrence\nfor merge sort", "start": 1992.54, "duration": 3.61}, {"text": "that looks like this.", "start": 1996.15, "duration": 1.816}, {"text": "So when I say\ncomplexity, I can say", "start": 1997.966, "duration": 4.754}, {"text": "T of n, which is the\nwork done for n items,", "start": 2002.72, "duration": 3.51}, {"text": "is going to be some\nconstant time in order", "start": 2006.23, "duration": 2.68}, {"text": "to divide the array.", "start": 2008.91, "duration": 3.03}, {"text": "So this could be the\npart corresponding", "start": 2011.94, "duration": 2.26}, {"text": "to dividing the array.", "start": 2014.2, "duration": 2.16}, {"text": "And there's going to be two\nproblems of size n over 2.", "start": 2016.36, "duration": 4.0}, {"text": "And so I have 2 T of n over 2.", "start": 2020.36, "duration": 2.45}, {"text": "And this is the recursive part.", "start": 2022.81, "duration": 1.9}, {"text": "And I'm going to have c times\nn, which is the merge part.", "start": 2028.65, "duration": 5.31}, {"text": "And that's some constant times\nn, which is what we have,", "start": 2033.96, "duration": 4.95}, {"text": "here, with respect to\nthe theta n complexity.", "start": 2038.91, "duration": 2.98}, {"text": "So you have a recurrence like\nthis and I know some of you", "start": 2041.89, "duration": 3.09}, {"text": "have seen recurrences in 6.042.", "start": 2044.98, "duration": 2.17}, {"text": "And you know how to solve this.", "start": 2047.15, "duration": 2.089}, {"text": "What I'd like to do is show you\nthis recursion tree expansion", "start": 2049.239, "duration": 5.23}, {"text": "that, not only tells you how\nto solve this occurrence,", "start": 2054.469, "duration": 3.52}, {"text": "but also gives you a means\nof solving recurrences where,", "start": 2057.989, "duration": 5.113}, {"text": "instead of having c of n, you\nhave something else out here.", "start": 2063.102, "duration": 2.458}, {"text": "You have f of n, which\nis a different function", "start": 2065.56, "duration": 2.23}, {"text": "from the linear function.", "start": 2067.79, "duration": 1.49}, {"text": "And this recursion\ntree is, in my mind,", "start": 2069.28, "duration": 4.47}, {"text": "the simplest way of\narguing the theta n log n", "start": 2073.75, "duration": 4.9}, {"text": "complexity of merge sort.", "start": 2078.65, "duration": 2.45}, {"text": "So what I want to do is\nexpand this recurrence out.", "start": 2081.1, "duration": 3.239}, {"text": "And let's do that over here.", "start": 2084.339, "duration": 1.166}, {"text": "So I have c of n on top.", "start": 2106.83, "duration": 4.12}, {"text": "I'm going to ignore this\nconstant factor because c of n", "start": 2110.95, "duration": 4.9}, {"text": "dominates.", "start": 2115.85, "duration": 0.7}, {"text": "So I'll just start with c of n.", "start": 2116.55, "duration": 1.53}, {"text": "I want to break things\nup, as I do the recursion.", "start": 2118.08, "duration": 5.37}, {"text": "So when I go c of n, at\nthe top level-- that's", "start": 2123.45, "duration": 3.51}, {"text": "the work I have to do at\nthe merge, at the top level.", "start": 2126.96, "duration": 2.79}, {"text": "And then when I go down to two\nsmaller problems, each of them", "start": 2129.75, "duration": 3.36}, {"text": "is size n over 2.", "start": 2133.11, "duration": 1.37}, {"text": "So I do c times n\ndivided by 2 [INAUDIBLE].", "start": 2134.48, "duration": 3.96}, {"text": "So this is just a constant c.", "start": 2138.44, "duration": 3.177}, {"text": "I didn't want to\nwrite thetas up here.", "start": 2141.617, "duration": 1.583}, {"text": "You could.", "start": 2143.2, "duration": 1.24}, {"text": "And I'll say a little bit\nmore about that later.", "start": 2144.44, "duration": 2.32}, {"text": "But think of this cn as\nrepresenting the theta n", "start": 2146.76, "duration": 2.42}, {"text": "complexity.", "start": 2149.18, "duration": 1.08}, {"text": "And c is this constant.", "start": 2150.26, "duration": 2.53}, {"text": "So c times n, here. c\ntimes n over 2, here.", "start": 2152.79, "duration": 5.17}, {"text": "And then when I keep going,\nI have c times n over 4,", "start": 2157.96, "duration": 3.8}, {"text": "c times n over 4, et cetera,\nand so on, and so forth.", "start": 2161.76, "duration": 7.15}, {"text": "And when I come down\nall the way here,", "start": 2168.91, "duration": 1.74}, {"text": "n is eventually going to become\n1-- or essentially a constant--", "start": 2170.65, "duration": 6.02}, {"text": "and I'm going to have\na bunch of c's here.", "start": 2176.67, "duration": 4.12}, {"text": "So here's another question,\nthat I'd like you to answer.", "start": 2180.79, "duration": 6.26}, {"text": "Someone tell me what the number\nof levels in this tree are,", "start": 2187.05, "duration": 4.16}, {"text": "precisely, and the number\nof leaves in this tree are,", "start": 2191.21, "duration": 2.85}, {"text": "precisely.", "start": 2194.06, "duration": 1.51}, {"text": "AUDIENCE: The number of\nlevels is log n plus 1.", "start": 2195.57, "duration": 2.491}, {"text": "PROFESSOR: Log n plus 1.", "start": 2198.061, "duration": 0.999}, {"text": "Log to the base 2 plus 1.", "start": 2199.06, "duration": 2.109}, {"text": "And the number of leaves?", "start": 2201.169, "duration": 1.041}, {"text": "You raised your hand\nback there, first.", "start": 2208.43, "duration": 2.15}, {"text": "Number of leaves.", "start": 2210.58, "duration": 0.85}, {"text": "AUDIENCE: I think n.", "start": 2211.43, "duration": 1.45}, {"text": "PROFESSOR: Yeah, you're right.", "start": 2212.88, "duration": 1.25}, {"text": "You think right.", "start": 2214.13, "duration": 2.08}, {"text": "So 1 plus log n and n leaves.", "start": 2216.21, "duration": 6.31}, {"text": "When n becomes 1, how\nmany of them do you have?", "start": 2222.52, "duration": 3.35}, {"text": "You're down to a single element,\nwhich is, by definition,", "start": 2225.87, "duration": 3.6}, {"text": "sorted.", "start": 2229.47, "duration": 1.11}, {"text": "And you have n leaves.", "start": 2230.58, "duration": 3.15}, {"text": "So now let's add up the work.", "start": 2233.73, "duration": 3.29}, {"text": "I really like this\npicture because it's just", "start": 2237.02, "duration": 3.21}, {"text": "so intuitive in terms\nof getting us the result", "start": 2240.23, "duration": 3.22}, {"text": "that we're looking for.", "start": 2243.45, "duration": 1.64}, {"text": "So you add up the work in each\nof the levels of this tree.", "start": 2245.09, "duration": 4.99}, {"text": "So the top level is cn.", "start": 2250.08, "duration": 2.11}, {"text": "The second level is cn because\nI added 1/2 and 1/2, cn, cn.", "start": 2252.19, "duration": 7.6}, {"text": "Wow.", "start": 2259.79, "duration": 0.96}, {"text": "What symmetry.", "start": 2260.75, "duration": 2.26}, {"text": "So you're doing the same\namount of work modulo", "start": 2263.01, "duration": 7.49}, {"text": "the constant factors,\nhere, with what's", "start": 2270.5, "duration": 3.55}, {"text": "going on with the c1,\nwhich we've ignored,", "start": 2274.05, "duration": 2.23}, {"text": "but roughly the same amount\nof work in each of the levels.", "start": 2276.28, "duration": 3.59}, {"text": "And now, you know how\nmany levels there are.", "start": 2279.87, "duration": 2.7}, {"text": "It's 1 plus log n.", "start": 2282.57, "duration": 2.28}, {"text": "So if you want to write\nan equation for T of n,", "start": 2284.85, "duration": 7.08}, {"text": "it's 1 plus log n times c of\nn, which is theta of n log n.", "start": 2291.93, "duration": 11.1}, {"text": "So I've mixed in\nconstants c and thetas.", "start": 2306.52, "duration": 4.529}, {"text": "For the purposes of\nthis description,", "start": 2311.049, "duration": 1.541}, {"text": "they're interchangeable.", "start": 2312.59, "duration": 1.36}, {"text": "You will see recurrences that\nlook like this, in class.", "start": 2313.95, "duration": 4.145}, {"text": "And things like that.", "start": 2325.21, "duration": 1.65}, {"text": "Don't get confused.", "start": 2326.86, "duration": 1.51}, {"text": "It's just a constant\nmultiplicative factor", "start": 2328.37, "duration": 2.78}, {"text": "in front of the\nfunction that you have.", "start": 2331.15, "duration": 3.36}, {"text": "And it's just a little\neasier, I think,", "start": 2334.51, "duration": 1.72}, {"text": "to write down these\nconstant factors", "start": 2336.23, "duration": 1.91}, {"text": "and realize that the\namount of work done", "start": 2338.14, "duration": 2.37}, {"text": "is the same in\neach of the leaves.", "start": 2340.51, "duration": 2.47}, {"text": "And once you know the\ndimensions of this tree,", "start": 2342.98, "duration": 3.03}, {"text": "in terms of levels and in\nterms of the number of leaves,", "start": 2346.01, "duration": 2.92}, {"text": "you get your result.", "start": 2348.93, "duration": 2.03}, {"text": "So we've looked at\ntwo algorithm, so far.", "start": 2354.56, "duration": 2.865}, {"text": "And insertion sort, if\nyou talk about numbers,", "start": 2366.16, "duration": 3.38}, {"text": "is theta n squared for swaps.", "start": 2369.54, "duration": 2.424}, {"text": "Merge sort is theta n log n.", "start": 2371.964, "duration": 1.166}, {"text": "Here's another\ninteresting question.", "start": 2376.27, "duration": 2.41}, {"text": "What is one advantage of\ninsertion sort over merge sort?", "start": 2378.68, "duration": 6.04}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2390.176, "duration": 1.004}, {"text": "PROFESSOR: What does that mean?", "start": 2391.18, "duration": 1.552}, {"text": "AUDIENCE: You don't have\nto move elements outside", "start": 2392.732, "duration": 2.041}, {"text": "of [INAUDIBLE].", "start": 2394.773, "duration": 2.187}, {"text": "PROFESSOR: That's exactly right.", "start": 2396.96, "duration": 1.46}, {"text": "That's exactly right.", "start": 2398.42, "duration": 2.91}, {"text": "So the two guys who\nanswered the questions", "start": 2401.33, "duration": 1.94}, {"text": "before with the levels, and you.", "start": 2403.27, "duration": 2.57}, {"text": "Come to me after class.", "start": 2405.84, "duration": 1.9}, {"text": "So that's a great answer.", "start": 2407.74, "duration": 1.95}, {"text": "It's in-place\nsorting is something", "start": 2409.69, "duration": 2.49}, {"text": "that has to do with\nauxiliary space.", "start": 2412.18, "duration": 2.64}, {"text": "And so what you see, here--\nand it was a bit hidden, here.", "start": 2414.82, "duration": 4.46}, {"text": "But the fact of the\nmatter is that you", "start": 2419.28, "duration": 2.66}, {"text": "had L prime and R prime.", "start": 2421.94, "duration": 3.59}, {"text": "And L prime and R prime are\ndifferent from L and R, which", "start": 2425.53, "duration": 4.38}, {"text": "were the initial halves of\nthe inputs to the sorting", "start": 2429.91, "duration": 3.53}, {"text": "algorithm.", "start": 2433.44, "duration": 1.55}, {"text": "And what I said here is, we're\ngoing to dump this into A.", "start": 2434.99, "duration": 3.64}, {"text": "That's what this picture shows.", "start": 2438.63, "duration": 1.81}, {"text": "This says sorted\narray, A. And so you", "start": 2440.44, "duration": 2.9}, {"text": "had to make a copy of the\narray-- the two halves L", "start": 2443.34, "duration": 5.38}, {"text": "and R-- in order to\ndo the recursion,", "start": 2448.72, "duration": 3.55}, {"text": "and then to take the\nresults and put them", "start": 2452.27, "duration": 2.22}, {"text": "into the sorted array, A.", "start": 2454.49, "duration": 2.3}, {"text": "So you needed-- in\nmerge sort-- you", "start": 2456.79, "duration": 2.43}, {"text": "needed theta n auxiliary space.", "start": 2459.22, "duration": 4.84}, {"text": "So merge sort, you need\ntheta n extra space.", "start": 2464.06, "duration": 6.31}, {"text": "And the definition\nof in-place sorting", "start": 2470.37, "duration": 7.01}, {"text": "implies that you have theta\n1-- constant-- auxiliary space.", "start": 2477.38, "duration": 4.195}, {"text": "The auxiliary space\nfor insertion sort", "start": 2484.58, "duration": 2.75}, {"text": "is simply that\ntemporary variable", "start": 2487.33, "duration": 3.12}, {"text": "that you need when\nyou swap two elements.", "start": 2490.45, "duration": 2.86}, {"text": "So when you want to swap\na couple of registers,", "start": 2493.31, "duration": 2.21}, {"text": "you gotta store one of the\nvalues in a temporary location,", "start": 2495.52, "duration": 2.55}, {"text": "override the other, et cetera.", "start": 2498.07, "duration": 1.53}, {"text": "And that's the theta 1 auxiliary\nspace for insertion sort.", "start": 2499.6, "duration": 3.59}, {"text": "So there is an advantage of\nthe version of insertion sort", "start": 2503.19, "duration": 4.14}, {"text": "we've talked about,\ntoday, over merge sort.", "start": 2507.33, "duration": 1.81}, {"text": "And if you have a billion\nelements, that's potentially", "start": 2509.14, "duration": 3.687}, {"text": "something you don't\nwant to store in memory.", "start": 2512.827, "duration": 1.833}, {"text": "If you want to do something\nreally fast and do everything", "start": 2514.66, "duration": 2.89}, {"text": "in cache or main\nmemory, and you want", "start": 2517.55, "duration": 2.85}, {"text": "to sort billions are maybe\neven trillions of items,", "start": 2520.4, "duration": 3.21}, {"text": "this becomes an\nimportant consideration.", "start": 2523.61, "duration": 4.13}, {"text": "I will say that you can\nreduce the constant factor", "start": 2527.74, "duration": 5.19}, {"text": "of the theta n.", "start": 2532.93, "duration": 1.6}, {"text": "So in the vanilla\nscheme, you could", "start": 2534.53, "duration": 2.06}, {"text": "imagine that you have to\nhave a copy of the array.", "start": 2536.59, "duration": 2.1}, {"text": "So if you had n\nelements, you essentially", "start": 2538.69, "duration": 2.21}, {"text": "have n extra items of storage.", "start": 2540.9, "duration": 3.59}, {"text": "You can make that n over 2\nwith a simple coding trick", "start": 2544.49, "duration": 3.64}, {"text": "by keeping 1/2 of A.", "start": 2548.13, "duration": 4.58}, {"text": "You can throw away one of\nthe L's or one of the R's.", "start": 2552.71, "duration": 3.09}, {"text": "And you can get it\ndown to n over 2.", "start": 2555.8, "duration": 1.837}, {"text": "And that turns out--\nit's a reasonable thing", "start": 2557.637, "duration": 1.833}, {"text": "to do if you have\na billion elements", "start": 2559.47, "duration": 1.94}, {"text": "and you want to reduce your\nstorage by a constant factor.", "start": 2561.41, "duration": 3.99}, {"text": "So that's one coding trick.", "start": 2565.4, "duration": 1.73}, {"text": "Now it turns out that you\ncan actually go further.", "start": 2567.13, "duration": 2.5}, {"text": "And there's a fairly\nsophisticated algorithm", "start": 2569.63, "duration": 2.5}, {"text": "that's sort of beyond\nthe scope of 6.006", "start": 2572.13, "duration": 2.61}, {"text": "that's an in-place merge sort.", "start": 2574.74, "duration": 1.68}, {"text": "And this in-place\nmerge sort is kind of", "start": 2579.31, "duration": 3.76}, {"text": "impractical in the sense\nthat it doesn't do very well", "start": 2583.07, "duration": 5.52}, {"text": "in terms of the\nconstant factors.", "start": 2588.59, "duration": 1.55}, {"text": "So while it's in-place and\nit's still theta n log n.", "start": 2590.14, "duration": 4.98}, {"text": "The problem is that the running\ntime of an in-place merge sort", "start": 2595.12, "duration": 4.6}, {"text": "is much worse than the\nregular merge sort that", "start": 2599.72, "duration": 3.49}, {"text": "uses theta n auxiliary space.", "start": 2603.21, "duration": 2.3}, {"text": "So people don't really\nuse in-place merge sort.", "start": 2605.51, "duration": 2.59}, {"text": "It's a great paper.", "start": 2608.1, "duration": 1.26}, {"text": "It's a great thing to read.", "start": 2609.36, "duration": 2.44}, {"text": "Its analysis is a bit\nsophisticated for double 0 6.", "start": 2611.8, "duration": 5.28}, {"text": "So we wont go there.", "start": 2617.08, "duration": 1.95}, {"text": "But it does exist.", "start": 2619.03, "duration": 1.3}, {"text": "So you can take merge\nsort, and I just", "start": 2620.33, "duration": 1.673}, {"text": "want to let you know that\nyou can do things in-place.", "start": 2622.003, "duration": 3.227}, {"text": "In terms of numbers, some\nexperiments we ran a few years", "start": 2625.23, "duration": 5.33}, {"text": "ago-- so these may not\nbe completely valid", "start": 2630.56, "duration": 4.09}, {"text": "because I'm going to\nactually give you numbers--", "start": 2634.65, "duration": 2.0}, {"text": "but merge sort in Python, if\nyou write a little curve fit", "start": 2636.65, "duration": 10.73}, {"text": "program to do this, is 2.2n log\nn microseconds for a given n.", "start": 2647.38, "duration": 10.41}, {"text": "So this is the\nmerge sort routine.", "start": 2657.79, "duration": 1.835}, {"text": "And if you look at\ninsertion sort, in Python,", "start": 2662.45, "duration": 9.78}, {"text": "that's something like 0.2\nn square microseconds.", "start": 2672.23, "duration": 7.18}, {"text": "So you see the\nconstant factors here.", "start": 2679.41, "duration": 3.29}, {"text": "If you do insertion sort in C,\nwhich is a compiled language,", "start": 2682.7, "duration": 5.53}, {"text": "then, it's much faster.", "start": 2688.23, "duration": 2.19}, {"text": "It's about 20 times faster.", "start": 2690.42, "duration": 2.515}, {"text": "It's 0.01 n squared\nmicroseconds.", "start": 2695.44, "duration": 3.79}, {"text": "So a little bit of\npractice on the side.", "start": 2699.23, "duration": 1.73}, {"text": "We do ask you to write code.", "start": 2700.96, "duration": 1.754}, {"text": "And this is important.", "start": 2702.714, "duration": 0.916}, {"text": "The reason we're\ninterested in algorithms", "start": 2703.63, "duration": 1.3}, {"text": "is because people\nwant to run them.", "start": 2704.93, "duration": 1.84}, {"text": "And what you can see is that\nyou can actually find an n-- so", "start": 2706.77, "duration": 7.09}, {"text": "regardless of whether\nyou're Python or C,", "start": 2713.86, "duration": 2.44}, {"text": "this tells you that asymptotic\ncomplexity is pretty important", "start": 2716.3, "duration": 3.72}, {"text": "because, once n gets\nbeyond about 4,000,", "start": 2720.02, "duration": 4.12}, {"text": "you're going to see that\nmerge sort in Python", "start": 2724.14, "duration": 3.12}, {"text": "beats insertion sort in C.", "start": 2727.26, "duration": 3.09}, {"text": "So the constant\nfactors get subsumed", "start": 2730.35, "duration": 5.08}, {"text": "beyond certain values of n.", "start": 2735.43, "duration": 1.73}, {"text": "So that's why asymptotic\ncomplexity is important.", "start": 2737.16, "duration": 2.675}, {"text": "You do have a\nfactor of 20, here,", "start": 2739.835, "duration": 1.375}, {"text": "but that doesn't really\nhelp you in terms", "start": 2741.21, "duration": 2.06}, {"text": "of keeping an n square\nalgorithm competitive.", "start": 2743.27, "duration": 4.17}, {"text": "It stays competitive\nfor a little bit longer,", "start": 2747.44, "duration": 1.96}, {"text": "but then falls behind.", "start": 2749.4, "duration": 1.11}, {"text": "That's what I wanted\nto cover for sorting.", "start": 2754.52, "duration": 2.867}, {"text": "So hopefully, you\nhave a sense of what", "start": 2757.387, "duration": 1.583}, {"text": "happens with these two\nsorting algorithms.", "start": 2758.97, "duration": 3.07}, {"text": "We'll look at a very different\nsorting algorithm next time,", "start": 2762.04, "duration": 3.16}, {"text": "using heaps, which is a\ndifferent data structure.", "start": 2765.2, "duration": 3.26}, {"text": "The last thing I want to do in\nthe couple minutes I have left", "start": 2768.46, "duration": 2.87}, {"text": "is give you a little more\nintuition as to recurrence", "start": 2771.33, "duration": 3.48}, {"text": "solving based on this diagram\nthat I wrote up there.", "start": 2774.81, "duration": 3.87}, {"text": "And so we're going to use\nexactly this structure.", "start": 2778.68, "duration": 2.78}, {"text": "And we're going to look at a\ncouple of different recurrences", "start": 2781.46, "duration": 2.79}, {"text": "that I won't really\nmotivate in terms", "start": 2784.25, "duration": 2.11}, {"text": "of having a specific\nalgorithm, but I'll just", "start": 2786.36, "duration": 3.06}, {"text": "write out the recurrence.", "start": 2789.42, "duration": 1.73}, {"text": "And we'll look at the\nrecursion tree for that.", "start": 2791.15, "duration": 5.19}, {"text": "And I'll try and tease out of\nyou the complexity associated", "start": 2796.34, "duration": 5.56}, {"text": "with these recurrences of\nthe overall complexity.", "start": 2801.9, "duration": 3.735}, {"text": "So let's take a look at T\nof n equals 2 T of n over 2", "start": 2809.48, "duration": 8.52}, {"text": "plus c n squared.", "start": 2818.0, "duration": 2.31}, {"text": "Let me just call that c--\nno need for the brackets.", "start": 2822.82, "duration": 5.54}, {"text": "So constant c times n squared.", "start": 2828.36, "duration": 2.61}, {"text": "So if you had a\ncrummy merge routine,", "start": 2830.97, "duration": 2.23}, {"text": "and it was taking n square,\nand you coded it up wrong.", "start": 2833.2, "duration": 4.82}, {"text": "It's not a great motivation\nfor this recurrence,", "start": 2838.02, "duration": 2.03}, {"text": "but it's a way this\nrecurrence could have come up.", "start": 2840.05, "duration": 3.93}, {"text": "So what does this\nrecursive tree look like?", "start": 2843.98, "duration": 3.49}, {"text": "Well it looks kind of\nthe same, obviously.", "start": 2847.47, "duration": 2.11}, {"text": "You have c n square; you\nhave c n square divided by 4;", "start": 2849.58, "duration": 3.63}, {"text": "c n square divided by\n4; c n square divided", "start": 2853.21, "duration": 3.41}, {"text": "by 16, four times.", "start": 2856.62, "duration": 4.0}, {"text": "Looking a little bit\ndifferent from the other one.", "start": 2860.62, "duration": 3.84}, {"text": "The levels and the leaves\nare exactly the same.", "start": 2864.46, "duration": 3.1}, {"text": "Eventually n is going\nto go down to 1.", "start": 2867.56, "duration": 2.16}, {"text": "So you will see c\nall the way here.", "start": 2869.72, "duration": 3.56}, {"text": "And you're going\nto have n leaves.", "start": 2873.28, "duration": 1.455}, {"text": "And you will have, as\nbefore, 1 plus log n levels.", "start": 2877.88, "duration": 5.5}, {"text": "Everything is the same.", "start": 2883.38, "duration": 1.69}, {"text": "And this is why I like this\nrecursive tree formulation so", "start": 2885.07, "duration": 2.52}, {"text": "much because, now,\nall I have to do", "start": 2887.59, "duration": 1.78}, {"text": "is add up the work associated\nwith each of the levels", "start": 2889.37, "duration": 5.34}, {"text": "to get the solution\nto the recurrence.", "start": 2894.71, "duration": 2.39}, {"text": "Now, take a look at\nwhat happens, here.", "start": 2897.1, "duration": 1.67}, {"text": "c n square; c n square divided\nby 2; c n square divided by 4.", "start": 2898.77, "duration": 6.58}, {"text": "And this is n times c.", "start": 2905.35, "duration": 2.54}, {"text": "So what does that add up to?", "start": 2910.89, "duration": 3.426}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2914.316, "duration": 1.523}, {"text": "PROFESSOR: Yeah, exactly.", "start": 2915.839, "duration": 1.041}, {"text": "Exactly right.", "start": 2916.88, "duration": 1.04}, {"text": "So if you look at what\nhappens, here, this dominates.", "start": 2917.92, "duration": 2.51}, {"text": "All of the other things are\nactually less than that.", "start": 2924.34, "duration": 3.18}, {"text": "And you said bounded\nby two c n square", "start": 2927.52, "duration": 1.73}, {"text": "because this part is\nbounded by c n square", "start": 2929.25, "duration": 2.17}, {"text": "and I already have c n\nsquare up at the top.", "start": 2931.42, "duration": 3.07}, {"text": "So this particular algorithm\nthat corresponds to this crummy", "start": 2934.49, "duration": 3.61}, {"text": "merge sort, or wherever\nthis recurrence came from,", "start": 2938.1, "duration": 4.2}, {"text": "is a theta n squared algorithm.", "start": 2942.3, "duration": 4.4}, {"text": "And in this case,\nall of the work done", "start": 2946.7, "duration": 3.82}, {"text": "is at the root-- at the\ntop level of the recursion.", "start": 2950.52, "duration": 4.84}, {"text": "Here, there was a\nroughly equal amount", "start": 2955.36, "duration": 2.29}, {"text": "of work done in each of\nthe different levels.", "start": 2957.65, "duration": 3.98}, {"text": "Here, all of the work\nwas done at the root.", "start": 2961.63, "duration": 4.98}, {"text": "And so to close\nup shop, here, let", "start": 2966.61, "duration": 2.85}, {"text": "me just give you real\nquick a recurrence where", "start": 2969.46, "duration": 4.75}, {"text": "all of the work is done at\nthe leaves, just for closure.", "start": 2974.21, "duration": 6.26}, {"text": "So if I had, magically, a merge\nroutine that actually happened", "start": 2980.47, "duration": 5.3}, {"text": "in constant time, either\nthrough buggy analysis,", "start": 2985.77, "duration": 2.94}, {"text": "or because of it\nwas buggy, then what", "start": 2988.71, "duration": 3.18}, {"text": "does the tree look\nlike for that?", "start": 2991.89, "duration": 3.76}, {"text": "And I can think of\nthis as being theta 1.", "start": 2995.65, "duration": 2.63}, {"text": "Or I can think of this as\nbeing just a constant c.", "start": 2998.28, "duration": 2.876}, {"text": "I'll stick with that.", "start": 3001.156, "duration": 0.874}, {"text": "So I have c, c, c.", "start": 3002.03, "duration": 3.216}, {"text": "Woah, I tried to move that up.", "start": 3009.89, "duration": 1.46}, {"text": "That doesn't work.", "start": 3011.35, "duration": 2.4}, {"text": "So I have n leaves, as before.", "start": 3013.75, "duration": 1.795}, {"text": "And so if I look at\nwhat I have, here, I", "start": 3018.314, "duration": 1.666}, {"text": "have c at the top level.", "start": 3019.98, "duration": 1.86}, {"text": "I have 2c, and so\non and so forth.", "start": 3021.84, "duration": 4.03}, {"text": "4c.", "start": 3025.87, "duration": 1.06}, {"text": "And then I go all\nthe way down to nc.", "start": 3026.93, "duration": 4.01}, {"text": "And so what happens\nhere is this dominates.", "start": 3030.94, "duration": 2.44}, {"text": "And so, in this recurrence, the\nwhole thing runs in theta n.", "start": 3036.01, "duration": 5.59}, {"text": "So the solution to\nthat is theta n.", "start": 3041.6, "duration": 4.7}, {"text": "And what you have here\nis all of the work", "start": 3046.3, "duration": 4.67}, {"text": "being done at the leaves.", "start": 3050.97, "duration": 3.48}, {"text": "We're not going to really cover\nthis theorem that gives you", "start": 3054.45, "duration": 3.99}, {"text": "a mechanical way of figuring\nthis out because we think", "start": 3058.44, "duration": 3.9}, {"text": "the recursive tree is a\nbetter way of looking at.", "start": 3062.34, "duration": 3.44}, {"text": "But you can see that, depending\non what that function is,", "start": 3065.78, "duration": 3.14}, {"text": "in terms of the work being\ndone in the merge routine,", "start": 3068.92, "duration": 3.21}, {"text": "you'd have different\nversions of recurrences.", "start": 3072.13, "duration": 2.36}, {"text": "I'll stick around, and people\nwho answered questions, please", "start": 3074.49, "duration": 2.5}, {"text": "pick up you cushions.", "start": 3076.99, "duration": 1.28}, {"text": "See you next time.", "start": 3078.27, "duration": 1.97}]