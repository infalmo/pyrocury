[{"text": "The following\ncontent is provided", "start": 0.05, "duration": 1.72}, {"text": "under a Creative\nCommons license.", "start": 1.77, "duration": 2.249}, {"text": "Your support will help MIT\nOpenCourseWare continue", "start": 4.019, "duration": 2.841}, {"text": "to offer high quality\neducational resources for free.", "start": 6.86, "duration": 3.86}, {"text": "To make a donation or\nview additional materials", "start": 10.72, "duration": 2.6}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.32, "duration": 3.887}, {"text": "at ocw.mit.edu.", "start": 17.207, "duration": 0.625}, {"text": "PROFESSOR: Hey, everybody.", "start": 22.452, "duration": 1.083}, {"text": "You ready to learn\nsome algorithms?", "start": 23.535, "duration": 3.425}, {"text": "Yeah!", "start": 26.96, "duration": 1.39}, {"text": "Let's do it.", "start": 28.35, "duration": 1.23}, {"text": "I'm Eric Domain.", "start": 29.58, "duration": 0.96}, {"text": "You can call me Eric.", "start": 30.54, "duration": 1.41}, {"text": "And the last class, we\nsort of jumped into things.", "start": 31.95, "duration": 3.07}, {"text": "We studied peak\nfinding and looked", "start": 35.02, "duration": 1.59}, {"text": "at a bunch of algorithms\nfor peak finding", "start": 36.61, "duration": 1.33}, {"text": "on your problem set.", "start": 37.94, "duration": 0.94}, {"text": "You've already\nseen a bunch more.", "start": 38.88, "duration": 3.134}, {"text": "And in this class, we're going\nto do some more algorithms.", "start": 42.014, "duration": 2.416}, {"text": "Don't worry.", "start": 44.43, "duration": 0.3}, {"text": "That will be at the end.", "start": 44.73, "duration": 0.94}, {"text": "We're going to talk about\nanother problem, document", "start": 45.67, "duration": 1.88}, {"text": "distance, which will be a\nrunning example for a bunch", "start": 47.55, "duration": 2.4}, {"text": "of topics that we\ncover in this class.", "start": 49.95, "duration": 2.41}, {"text": "But before we go there, I wanted\nto take a step back and talk", "start": 52.36, "duration": 3.28}, {"text": "about, what actually\nis an algorithm?", "start": 55.64, "duration": 2.76}, {"text": "What is an algorithm\nallowed to do?", "start": 58.4, "duration": 2.36}, {"text": "And also deep philosophical\nquestions like, what is time?", "start": 60.76, "duration": 3.942}, {"text": "What is the running\ntime of an algorithm?", "start": 64.702, "duration": 1.708}, {"text": "How do we measure it?", "start": 66.41, "duration": 1.65}, {"text": "And what are the rules the game?", "start": 68.06, "duration": 1.97}, {"text": "For fun, I thought I\nwould first mention", "start": 70.03, "duration": 3.09}, {"text": "where the word comes\nfrom, the word algorithm.", "start": 73.12, "duration": 4.4}, {"text": "It comes from this guy,\na little hard to spell.", "start": 77.52, "duration": 4.87}, {"text": "Al-Khwarizmi, who is sort\nof the father of algebra.", "start": 87.18, "duration": 4.03}, {"text": "He wrote this book called \"The\nCompendious Book on Calculation", "start": 91.21, "duration": 4.03}, {"text": "by Completion and\nBalancing\" back in the day.", "start": 95.24, "duration": 3.5}, {"text": "And it was in\nparticular about how", "start": 98.74, "duration": 1.68}, {"text": "to solve linear and\nquadratic equations.", "start": 100.42, "duration": 3.774}, {"text": "So the beginning of algebra.", "start": 104.194, "duration": 1.166}, {"text": "I don't think he invented\nthose techniques.", "start": 105.36, "duration": 1.791}, {"text": "But he was sort of\nthe textbook writer", "start": 107.151, "duration": 1.629}, {"text": "who wrote sort of how\npeople solved them.", "start": 108.78, "duration": 2.046}, {"text": "And you can think\nof how to solve", "start": 110.826, "duration": 1.374}, {"text": "those equations as\nearly algorithms.", "start": 112.2, "duration": 2.35}, {"text": "First, you take this number.", "start": 114.55, "duration": 1.53}, {"text": "You multiply by this.", "start": 116.08, "duration": 0.89}, {"text": "You add it or you reduce\nto squares, whatever.", "start": 116.97, "duration": 4.69}, {"text": "So that's where the word\nalgebra comes from and also", "start": 121.66, "duration": 3.44}, {"text": "where the word\nalgorithm comes from.", "start": 125.1, "duration": 1.59}, {"text": "There aren't very many\nwords with these roots.", "start": 126.69, "duration": 3.025}, {"text": "So there you go.", "start": 129.715, "duration": 0.865}, {"text": "Some fun history.", "start": 130.58, "duration": 0.755}, {"text": "What's an algorithm?", "start": 135.32, "duration": 2.23}, {"text": "I'll start with sort of\nsome informal definitions", "start": 137.55, "duration": 2.32}, {"text": "and then the point\nof this lecture.", "start": 139.87, "duration": 2.2}, {"text": "And the idea of a\nmodel of computation", "start": 142.07, "duration": 4.15}, {"text": "is to formally specify\nwhat an algorithm is.", "start": 146.22, "duration": 2.464}, {"text": "I don't want to get super\ntechnical and formal here,", "start": 148.684, "duration": 2.166}, {"text": "but I want to give\nyou some grounding", "start": 150.85, "duration": 2.05}, {"text": "so when we write Python code,\nwhen we write pseudocode,", "start": 152.9, "duration": 2.43}, {"text": "we have some idea what\nthings actually cost.", "start": 155.33, "duration": 2.724}, {"text": "This is a new lecture.", "start": 158.054, "duration": 0.916}, {"text": "We've never done\nthis before in 006.", "start": 158.97, "duration": 1.5}, {"text": "But I think it's important.", "start": 160.47, "duration": 2.33}, {"text": "So at a high level,\nyou can think", "start": 162.8, "duration": 3.07}, {"text": "of an algorithm is just\na-- I'm sure you've", "start": 165.87, "duration": 3.73}, {"text": "seen the definition before.", "start": 169.6, "duration": 1.27}, {"text": "It's a way to define computation\nor computational procedure", "start": 174.55, "duration": 3.239}, {"text": "for solving some problem.", "start": 177.789, "duration": 1.041}, {"text": "So whereas computer\ncode, I mean,", "start": 185.03, "duration": 1.621}, {"text": "it could just be running\nin the background", "start": 186.651, "duration": 1.749}, {"text": "all the time doing whatever.", "start": 188.4, "duration": 1.166}, {"text": "An algorithm we think\nof as having some input", "start": 189.566, "duration": 2.434}, {"text": "and generating some output.", "start": 192.0, "duration": 1.8}, {"text": "Usually, it's to\nsolve some problem.", "start": 193.8, "duration": 1.97}, {"text": "You want to know is this\nnumber prime, whatever.", "start": 200.04, "duration": 2.0}, {"text": "Question?", "start": 202.04, "duration": 0.5}, {"text": "AUDIENCE: Can you turn up\nthe volume for your mic?", "start": 202.54, "duration": 3.58}, {"text": "PROFESSOR: This microphone does\nnot feed into the AV system.", "start": 206.12, "duration": 2.83}, {"text": "So I shall just talk louder, OK?", "start": 208.95, "duration": 2.116}, {"text": "And quiet the set, please.", "start": 213.79, "duration": 3.01}, {"text": "OK, so that's an algorithm.", "start": 216.8, "duration": 1.35}, {"text": "You take some input.", "start": 218.15, "duration": 1.74}, {"text": "You run it through.", "start": 219.89, "duration": 1.43}, {"text": "You compute some output.", "start": 221.32, "duration": 1.69}, {"text": "Of course, computer\ncode can do this too.", "start": 223.01, "duration": 2.2}, {"text": "An algorithm is basically\nthe mathematical analog", "start": 225.21, "duration": 2.93}, {"text": "of a computer program.", "start": 228.14, "duration": 1.24}, {"text": "So if you want to reason about\nwhat computer programs do,", "start": 229.38, "duration": 3.24}, {"text": "you translate it into\nthe world algorithms.", "start": 232.62, "duration": 2.629}, {"text": "And vice versa, you want to\nsolve some problem-- first,", "start": 235.249, "duration": 2.291}, {"text": "you usually develop an\nalgorithm using mathematics,", "start": 237.54, "duration": 3.17}, {"text": "using this class.", "start": 240.71, "duration": 1.109}, {"text": "And then you convert\nit into computer code.", "start": 241.819, "duration": 1.791}, {"text": "And this class is about\nthat transition from one", "start": 243.61, "duration": 2.15}, {"text": "to the other.", "start": 245.76, "duration": 1.35}, {"text": "You can draw a picture\nof sort of analogs.", "start": 247.11, "duration": 3.155}, {"text": "So an algorithm is a\nmathematical analog", "start": 253.66, "duration": 3.109}, {"text": "of a computer program.", "start": 256.769, "duration": 3.52}, {"text": "A computer program is built on\ntop of a programming language.", "start": 260.289, "duration": 3.965}, {"text": "And it's written in a\nprogramming language.", "start": 264.254, "duration": 1.791}, {"text": "The mathematical analog\nof a programming language,", "start": 273.74, "duration": 3.02}, {"text": "what we write algorithms\nin, usually we", "start": 276.76, "duration": 2.87}, {"text": "write them in pseudocode,\nwhich is basically", "start": 279.63, "duration": 5.26}, {"text": "another fancy word for\nstructured English,", "start": 284.89, "duration": 4.76}, {"text": "good English, whatever\nyou want to say.", "start": 289.65, "duration": 2.3}, {"text": "Of course, you could use\nanother natural language.", "start": 291.95, "duration": 2.25}, {"text": "But the idea is, you need to\nexpress that algorithm in a way", "start": 294.2, "duration": 3.94}, {"text": "that people can understand\nand reason about formally.", "start": 298.14, "duration": 2.47}, {"text": "So that's the structured part.", "start": 300.61, "duration": 1.74}, {"text": "Pseudocode means lots\nof different things.", "start": 302.35, "duration": 3.43}, {"text": "It's just sort of an abstract\nhow you would write down", "start": 305.78, "duration": 2.26}, {"text": "formal specification\nwithout necessarily being", "start": 308.04, "duration": 2.59}, {"text": "able to actually run\nit on a computer.", "start": 310.63, "duration": 3.109}, {"text": "Though there's a particular\npseudocode in your textbook", "start": 313.739, "duration": 2.291}, {"text": "which you probably\ncould run on a computer.", "start": 316.03, "duration": 2.02}, {"text": "A lot of it, anyway.", "start": 318.05, "duration": 1.376}, {"text": "But you don't have\nto use that version.", "start": 319.426, "duration": 1.624}, {"text": "It just makes sense to humans\nwho do the mathematics.", "start": 321.05, "duration": 4.9}, {"text": "OK, and then ultimately, this\nprogram runs on a computer.", "start": 325.95, "duration": 4.47}, {"text": "You all have computers,\nprobably in your pockets.", "start": 330.42, "duration": 3.92}, {"text": "There's an analog of a computer\nin the mathematical world.", "start": 334.34, "duration": 4.79}, {"text": "And that is the\nmodel of computation.", "start": 339.13, "duration": 3.1}, {"text": "And that's sort of the focus of\nthe first part of this lecture.", "start": 342.23, "duration": 4.33}, {"text": "Model of computation says what\nyour computer is allowed to do,", "start": 346.56, "duration": 4.29}, {"text": "what it can do in\nconstant time, basically?", "start": 350.85, "duration": 2.92}, {"text": "And that's what I want\nto talk about here.", "start": 353.77, "duration": 3.69}, {"text": "So the model of computation\nspecifies basically", "start": 357.46, "duration": 15.62}, {"text": "what operations you\ncan do in an algorithm", "start": 373.08, "duration": 15.21}, {"text": "and how much they cost.", "start": 388.29, "duration": 1.89}, {"text": "This is the what is time.", "start": 390.18, "duration": 1.25}, {"text": "So for each\noperation, we're going", "start": 398.274, "duration": 1.416}, {"text": "to specify how\nmuch time it costs.", "start": 399.69, "duration": 1.86}, {"text": "Then the algorithm does\na bunch of operations.", "start": 401.55, "duration": 2.13}, {"text": "They're combined together\nwith control flow,", "start": 403.68, "duration": 1.833}, {"text": "for loops, if statements,\nstuff like that which we're not", "start": 405.513, "duration": 2.547}, {"text": "going to worry about too much.", "start": 408.06, "duration": 2.22}, {"text": "But obviously, we'll\nuse them a lot.", "start": 410.28, "duration": 2.16}, {"text": "And what we count is how much\ndo each of the operations cost.", "start": 412.44, "duration": 2.58}, {"text": "You add them up.", "start": 415.02, "duration": 0.7}, {"text": "That is the total cost\nof your algorithm.", "start": 415.72, "duration": 2.374}, {"text": "So in particular, we\ncare mostly in this class", "start": 418.094, "duration": 1.916}, {"text": "about running time.", "start": 420.01, "duration": 1.95}, {"text": "Each operation has a time cost.", "start": 421.96, "duration": 1.94}, {"text": "You add those up.", "start": 423.9, "duration": 1.06}, {"text": "That's running time\nof the algorithm.", "start": 424.96, "duration": 2.44}, {"text": "OK, so let's-- I'm going to\ncover two models of computation", "start": 427.4, "duration": 7.574}, {"text": "which you can just think of\nas different ways of thinking.", "start": 434.974, "duration": 2.416}, {"text": "You've probably seen\nthem in some sense", "start": 437.39, "duration": 1.99}, {"text": "as-- what you call them?", "start": 439.38, "duration": 3.27}, {"text": "Styles of programming.", "start": 442.65, "duration": 2.68}, {"text": "Object oriented style of\nprogramming, more assembly", "start": 445.33, "duration": 3.12}, {"text": "style of programming.", "start": 448.45, "duration": 1.08}, {"text": "There's lots of different\nstyles of programming languages", "start": 449.53, "duration": 2.546}, {"text": "which I'm not going\nto talk about here.", "start": 452.076, "duration": 1.624}, {"text": "But you've see analogs if\nyou've seen those before.", "start": 453.7, "duration": 2.21}, {"text": "And these models\nreally give you a way", "start": 458.55, "duration": 3.03}, {"text": "of structuring your\nthinking about how", "start": 461.58, "duration": 3.36}, {"text": "you write an algorithm.", "start": 464.94, "duration": 1.83}, {"text": "So they are the random access\nmachine and the pointer", "start": 466.77, "duration": 2.25}, {"text": "machine.", "start": 469.02, "duration": 1.99}, {"text": "So we'll start with random\naccess machine, also known", "start": 471.01, "duration": 13.54}, {"text": "as the RAM.", "start": 484.55, "duration": 2.98}, {"text": "Can someone tell me what\nelse RAM stands for?", "start": 487.53, "duration": 2.929}, {"text": "AUDIENCE: Random Access Memory?", "start": 490.459, "duration": 1.291}, {"text": "PROFESSOR: Random Access Memory.", "start": 491.75, "duration": 1.47}, {"text": "So this is both confusing\nbut also convenience.", "start": 493.22, "duration": 2.64}, {"text": "Because RAM simultaneously\nstands for two things", "start": 495.86, "duration": 3.01}, {"text": "and they mean almost the\nsame thing, but not quite.", "start": 498.87, "duration": 2.265}, {"text": "So I guess that's more\nconfusing than useful.", "start": 501.135, "duration": 1.875}, {"text": "But there you go.", "start": 503.01, "duration": 1.55}, {"text": "So we have random access memory.", "start": 504.56, "duration": 6.684}, {"text": "Oh, look at that.", "start": 511.244, "duration": 1.136}, {"text": "Fits perfectly.", "start": 512.38, "duration": 3.169}, {"text": "And so we're thinking,\nthis is a real--", "start": 515.549, "duration": 1.791}, {"text": "this is-- random access memory\nis over here in real computer", "start": 517.34, "duration": 3.79}, {"text": "land.", "start": 521.13, "duration": 0.5}, {"text": "That's like, D-RAM\nSD-RAM, whatever--", "start": 521.63, "duration": 2.179}, {"text": "the things you buy and stick\ninto your motherboard, your GP,", "start": 523.809, "duration": 4.501}, {"text": "or whatever.", "start": 528.31, "duration": 0.88}, {"text": "And over here, the mathematical\nanalog of-- so here's,", "start": 529.19, "duration": 3.886}, {"text": "it's a RAM.", "start": 533.076, "duration": 0.499}, {"text": "Here, it's also a RAM.", "start": 533.575, "duration": 1.495}, {"text": "Here, it's a random\naccess machine.", "start": 535.07, "duration": 2.48}, {"text": "Here, it's a random\naccess memory.", "start": 537.55, "duration": 3.01}, {"text": "It's technical detail.", "start": 540.56, "duration": 1.89}, {"text": "But the idea is, if you look\nat RAM that's in your computer,", "start": 542.45, "duration": 7.23}, {"text": "it's basically a\ngiant array, right?", "start": 549.68, "duration": 2.63}, {"text": "You can go from zero\nto, I don't know.", "start": 552.31, "duration": 3.78}, {"text": "A typical chip these days is\nlike four gigs in one thing.", "start": 556.09, "duration": 3.99}, {"text": "So you can go from\nzero to four gigs.", "start": 560.08, "duration": 1.81}, {"text": "You can access anything in the\nmiddle there in constant time.", "start": 561.89, "duration": 3.77}, {"text": "To access something, you\nneed to know where it is.", "start": 565.66, "duration": 2.83}, {"text": "That's random access memory.", "start": 568.49, "duration": 1.78}, {"text": "So that's an array.", "start": 570.27, "duration": 1.05}, {"text": "So I'll just draw a big picture.", "start": 574.49, "duration": 1.6}, {"text": "Here's an array.", "start": 576.09, "duration": 1.4}, {"text": "Now, RAM is usually\norganized by words.", "start": 577.49, "duration": 4.35}, {"text": "So these are a\nmachine word, which", "start": 581.84, "duration": 4.05}, {"text": "we're going to\nput in this model.", "start": 585.89, "duration": 1.62}, {"text": "And then there's address zero,\naddress one, address two.", "start": 587.51, "duration": 4.0}, {"text": "This is the fifth word.", "start": 591.51, "duration": 1.64}, {"text": "And just keeps going.", "start": 593.15, "duration": 0.92}, {"text": "You can think of\nthis as infinite.", "start": 594.07, "duration": 1.416}, {"text": "Or the amount that\nyou use, that's", "start": 595.486, "duration": 2.084}, {"text": "the space of your algorithm, if\nyou care about storage space.", "start": 597.57, "duration": 4.09}, {"text": "So that's basically it.", "start": 601.66, "duration": 1.95}, {"text": "OK, now how do we-- this is\nthe memory side of things.", "start": 603.61, "duration": 2.39}, {"text": "How do we actually\ncompute with it?", "start": 606.0, "duration": 2.15}, {"text": "It's very simple.", "start": 608.15, "duration": 1.09}, {"text": "We just say, in constant time,\nan algorithm can basically", "start": 609.24, "duration": 9.25}, {"text": "read in or load a constant\nnumber of words from memory,", "start": 618.49, "duration": 6.67}, {"text": "do a constant number of\ncomputations on them,", "start": 625.16, "duration": 7.86}, {"text": "and then write them out.", "start": 633.02, "duration": 1.93}, {"text": "It's usually called store.", "start": 634.95, "duration": 1.2}, {"text": "OK, it needs to know\nwhere these words are.", "start": 643.539, "duration": 1.791}, {"text": "It accesses them by address.", "start": 645.33, "duration": 6.96}, {"text": "And so I guess I\nshould write here", "start": 652.29, "duration": 2.1}, {"text": "you have a constant number of\nregisters just hanging around.", "start": 654.39, "duration": 7.52}, {"text": "So you load some\nwords into registers.", "start": 661.91, "duration": 2.13}, {"text": "You can do some computations\non those registers.", "start": 664.04, "duration": 2.065}, {"text": "And then you can\nwrite them back,", "start": 666.105, "duration": 1.375}, {"text": "storing them in\nlocations that are", "start": 667.48, "duration": 1.64}, {"text": "specified by your registers.", "start": 669.12, "duration": 1.73}, {"text": "So you've ever done\nassembly programming,", "start": 670.85, "duration": 1.84}, {"text": "this is what assembly\nprogramming is like.", "start": 672.69, "duration": 2.82}, {"text": "And it can be rather annoying to\nwrite algorithms in this model.", "start": 675.51, "duration": 4.99}, {"text": "But in some sense,\nit is reality.", "start": 680.5, "duration": 1.64}, {"text": "This is how we think\nabout computers.", "start": 682.14, "duration": 2.18}, {"text": "If you ignore\nthings like caches,", "start": 684.32, "duration": 1.46}, {"text": "this is an accurate\nmodel of computation", "start": 685.78, "duration": 2.49}, {"text": "that loading,\ncomputing, and storing", "start": 688.27, "duration": 2.062}, {"text": "all take roughly the\nsame amount of time.", "start": 690.332, "duration": 1.708}, {"text": "They all take constant time.", "start": 692.04, "duration": 1.68}, {"text": "You can manipulate a\nwhole word at a time.", "start": 693.72, "duration": 2.26}, {"text": "Now, what exactly is a word?", "start": 695.98, "duration": 2.7}, {"text": "You know, computers these days,\nit's like 32 bits or 64 bits.", "start": 698.68, "duration": 4.15}, {"text": "But we like to be a\nlittle bit more abstract.", "start": 702.83, "duration": 2.88}, {"text": "A word is w bits.", "start": 705.71, "duration": 5.51}, {"text": "It's slightly annoying.", "start": 711.22, "duration": 1.31}, {"text": "And most of this class, we won't\nreally worry about what w is.", "start": 712.53, "duration": 2.81}, {"text": "We'll assume that\nwe're given as input", "start": 715.34, "duration": 1.94}, {"text": "a bunch of things\nwhich are words.", "start": 717.28, "duration": 1.69}, {"text": "So for example, peak finding.", "start": 718.97, "duration": 1.75}, {"text": "We're given a matrix of numbers.", "start": 720.72, "duration": 2.33}, {"text": "We didn't really say whether\nthey're integers or floats", "start": 723.05, "duration": 2.33}, {"text": "or what.", "start": 725.38, "duration": 1.027}, {"text": "We don't worry about that.", "start": 726.407, "duration": 1.083}, {"text": "We just think of\nthem as words and we", "start": 727.49, "duration": 1.32}, {"text": "assume that we can\nmanipulate those words.", "start": 728.81, "duration": 1.75}, {"text": "In particular, given two\nnumbers, we can compare them.", "start": 730.56, "duration": 2.28}, {"text": "Which is bigger?", "start": 732.84, "duration": 0.98}, {"text": "And so we can determine,\nis this cell in the matrix", "start": 733.82, "duration": 3.85}, {"text": "a peak by comparing it with\nits neighbors in constant time.", "start": 737.67, "duration": 3.28}, {"text": "We didn't say why it was\nconstant time to do that.", "start": 740.95, "duration": 2.529}, {"text": "But now you kind of know.", "start": 743.479, "duration": 1.041}, {"text": "If those things are\nall words and you", "start": 744.52, "duration": 1.64}, {"text": "can manipulate a constant number\nof words in constant time,", "start": 746.16, "duration": 2.458}, {"text": "you can tell whether a number\nis a peak in constant time.", "start": 748.618, "duration": 3.062}, {"text": "Some things like w should be at\nleast log the size of memory.", "start": 751.68, "duration": 6.25}, {"text": "Because my word should\nbe able to specify", "start": 761.16, "duration": 2.41}, {"text": "an index into this array.", "start": 763.57, "duration": 3.35}, {"text": "And we might use that someday.", "start": 766.92, "duration": 1.311}, {"text": "But basically, don't\nworry about it.", "start": 768.231, "duration": 1.499}, {"text": "Words are words.", "start": 769.73, "duration": 0.98}, {"text": "Words come in as inputs.", "start": 770.71, "duration": 1.37}, {"text": "You can manipulate\nthem and you don't", "start": 772.08, "duration": 1.64}, {"text": "have to worry about\nit for the most part.", "start": 773.72, "duration": 4.52}, {"text": "In unit four of\nthis class, we're", "start": 778.24, "duration": 1.77}, {"text": "going to talk about, what if we\nhave really giant integers that", "start": 780.01, "duration": 2.91}, {"text": "don't fit in a word?", "start": 782.92, "duration": 1.067}, {"text": "How do we manipulate them?", "start": 783.987, "duration": 1.083}, {"text": "How do we add them,\nmultiply them?", "start": 785.07, "duration": 1.76}, {"text": "So that's another topic.", "start": 786.83, "duration": 1.66}, {"text": "But most of this\nclass, we'll just", "start": 788.49, "duration": 2.13}, {"text": "assume everything we're\ngiven is one word.", "start": 790.62, "duration": 2.41}, {"text": "And it's easy to compute on.", "start": 793.03, "duration": 3.86}, {"text": "So this is a realistic\nmodel, more or less.", "start": 796.89, "duration": 2.53}, {"text": "And it's a powerful one.", "start": 799.42, "duration": 1.84}, {"text": "But a lot of the\ntime, a lot of code", "start": 801.26, "duration": 3.97}, {"text": "just doesn't use\narrays-- doesn't need it.", "start": 805.23, "duration": 1.96}, {"text": "Sometimes we need arrays,\nsometimes we don't.", "start": 807.19, "duration": 3.35}, {"text": "Sometimes you feel like a\nnut, sometimes you don't.", "start": 810.54, "duration": 3.38}, {"text": "So it's useful to think about\nsomewhat more abstract models", "start": 813.92, "duration": 4.185}, {"text": "that are not quite as\npowerful but offer a simpler", "start": 818.105, "duration": 4.015}, {"text": "way of thinking about things.", "start": 822.12, "duration": 2.24}, {"text": "For example, in\nthis model there's", "start": 824.36, "duration": 1.47}, {"text": "no dynamic memory allocation.", "start": 825.83, "duration": 2.054}, {"text": "You probably know you could\nimplement dynamic memory", "start": 827.884, "duration": 2.166}, {"text": "allocation because\nreal computers do it.", "start": 830.05, "duration": 2.54}, {"text": "But it's nice to\nthink about a model", "start": 832.59, "duration": 1.93}, {"text": "where that's taken\ncare of for you.", "start": 834.52, "duration": 2.1}, {"text": "It's kind of like a higher\nlevel programming abstraction.", "start": 836.62, "duration": 3.39}, {"text": "So the one is useful in this\nclass is the pointer machine.", "start": 840.01, "duration": 3.57}, {"text": "This basically corresponds to\nobject oriented programming", "start": 843.58, "duration": 2.61}, {"text": "in a simple, very\nsimple version.", "start": 846.19, "duration": 3.83}, {"text": "So we have dynamically\nallocated objects.", "start": 850.02, "duration": 2.64}, {"text": "And an object has a\nconstant number of fields.", "start": 861.41, "duration": 8.96}, {"text": "And a field is going to\nbe either a word-- so you", "start": 874.65, "duration": 9.39}, {"text": "can think of this\nas, for example,", "start": 884.04, "duration": 2.35}, {"text": "storing an integer, one\nof the input objects", "start": 886.39, "duration": 3.08}, {"text": "or something you computed on it\nor a counter, all these sorts", "start": 889.47, "duration": 3.13}, {"text": "of things-- or a pointer.", "start": 892.6, "duration": 4.97}, {"text": "And that's where pointer\nmachine gets its name.", "start": 897.57, "duration": 4.8}, {"text": "A pointer is something that\npoints to another object", "start": 902.37, "duration": 6.94}, {"text": "or has a special value\nnull, also known as nil,", "start": 909.31, "duration": 5.16}, {"text": "also known as none in Python.", "start": 914.47, "duration": 1.4}, {"text": "OK, how many people have\nheard about pointers before?", "start": 920.43, "duration": 3.43}, {"text": "Who hasn't?", "start": 923.86, "duration": 1.637}, {"text": "Willing to admit it?", "start": 925.497, "duration": 0.833}, {"text": "OK, only a few.", "start": 926.33, "duration": 0.9}, {"text": "That's good.", "start": 927.23, "duration": 0.54}, {"text": "You should have seen pointers.", "start": 927.77, "duration": 1.25}, {"text": "You may have heard\nthem called references.", "start": 929.02, "duration": 2.06}, {"text": "Modern languages these days\ndon't call them pointers", "start": 931.08, "duration": 2.62}, {"text": "because pointers are scary.", "start": 933.7, "duration": 1.99}, {"text": "But there's a very subtle\ndifference between them.", "start": 935.69, "duration": 2.7}, {"text": "And this model actually\nreally is references.", "start": 938.39, "duration": 2.604}, {"text": "But for whatever reason, it's\ncalled a pointer machine.", "start": 940.994, "duration": 2.291}, {"text": "It doesn't matter.", "start": 943.285, "duration": 2.065}, {"text": "The point is, you've\nseem linked lists I hope.", "start": 945.35, "duration": 4.13}, {"text": "And linked lists have a\nbunch of fields in each node.", "start": 949.48, "duration": 4.76}, {"text": "Maybe you've got a pointer\nto the previous element,", "start": 954.24, "duration": 2.25}, {"text": "a pointer to the next\nelement, and some value.", "start": 956.49, "duration": 4.33}, {"text": "So here's a very\nsimple linked list.", "start": 960.82, "duration": 3.73}, {"text": "This is what you'd call a\ndoubly linked list because it", "start": 964.55, "duration": 2.5}, {"text": "has previous and next pointers.", "start": 967.05, "duration": 3.0}, {"text": "So the next pointer\npoints to this node.", "start": 970.05, "duration": 2.34}, {"text": "The previous pointer\npoints to this node.", "start": 972.39, "duration": 2.72}, {"text": "Next pointer points to null.", "start": 975.11, "duration": 1.965}, {"text": "The previous pointer\npoints to null, let's say.", "start": 977.075, "duration": 2.865}, {"text": "So that's a two node\ndoubly linked list.", "start": 979.94, "duration": 1.991}, {"text": "You presume we have a pointer\nto the head of the list,", "start": 981.931, "duration": 2.249}, {"text": "maybe a pointer to the\ntail of list, whatever.", "start": 984.18, "duration": 2.72}, {"text": "So this is a structure\nin the pointer machine.", "start": 986.9, "duration": 2.495}, {"text": "It's a data structure.", "start": 989.395, "duration": 1.985}, {"text": "In Python, you might\ncall this a named tuple,", "start": 991.38, "duration": 2.41}, {"text": "or it's just an object\nwith three attributes,", "start": 993.79, "duration": 4.55}, {"text": "I guess, they're\ncalled in Python.", "start": 998.34, "duration": 1.75}, {"text": "So here we have the value.", "start": 1000.09, "duration": 3.25}, {"text": "That's a word like an integer.", "start": 1003.34, "duration": 2.11}, {"text": "And then some things\ncan be pointers", "start": 1005.45, "duration": 1.71}, {"text": "that point to other nodes.", "start": 1007.16, "duration": 1.26}, {"text": "And you can create a new node.", "start": 1008.42, "duration": 1.31}, {"text": "You can destroy a node.", "start": 1009.73, "duration": 0.99}, {"text": "That's the dynamic\nmemory allocation.", "start": 1010.72, "duration": 3.59}, {"text": "In this model, yeah,\npointers are pointers.", "start": 1014.31, "duration": 2.61}, {"text": "You can't touch them.", "start": 1016.92, "duration": 1.3}, {"text": "Now, you can implement this\nmodel in a random access", "start": 1018.22, "duration": 2.94}, {"text": "machine.", "start": 1021.16, "duration": 0.74}, {"text": "A pointer becomes an index\ninto this giant table.", "start": 1021.9, "duration": 4.169}, {"text": "And that's more like\nthe pointers in C", "start": 1026.069, "duration": 2.0}, {"text": "if you've ever\nwritten C programs.", "start": 1028.069, "duration": 1.693}, {"text": "Because then you\ncan take a pointer", "start": 1029.762, "duration": 1.458}, {"text": "and you can add one to it and\ngo to the next thing after that.", "start": 1031.22, "duration": 2.649}, {"text": "In this model, you can\njust follow a pointer.", "start": 1033.869, "duration": 1.875}, {"text": "That's all you can do.", "start": 1035.744, "duration": 1.313}, {"text": "OK, following a pointer\ncosts constant time.", "start": 1037.057, "duration": 1.833}, {"text": "Changing one of these\nfields costs constant time.", "start": 1038.89, "duration": 2.439}, {"text": "All the usual things you might\nimagine doing to these objects", "start": 1041.329, "duration": 3.601}, {"text": "take constant time.", "start": 1044.93, "duration": 1.679}, {"text": "So it's actually a weaker\nmodel than this one.", "start": 1046.609, "duration": 3.146}, {"text": "Because you could\nimplement a pointer machine", "start": 1049.755, "duration": 1.875}, {"text": "with a random access machine.", "start": 1051.63, "duration": 2.111}, {"text": "But it offers a different\nway of thinking.", "start": 1053.741, "duration": 1.749}, {"text": "A lot of data structures\nare built this way.", "start": 1055.49, "duration": 1.833}, {"text": "Cool.", "start": 1059.705, "duration": 0.5}, {"text": "So that's the theory side.", "start": 1062.77, "duration": 2.36}, {"text": "What I'd like to talk about\nnext is actually in Python,", "start": 1065.13, "duration": 4.38}, {"text": "what's a reasonable\nmodel of what's going on?", "start": 1069.51, "duration": 4.01}, {"text": "So these are old models.", "start": 1073.52, "duration": 1.64}, {"text": "This goes back to the '80s.", "start": 1075.16, "duration": 1.81}, {"text": "This one probably '80s or '70s.", "start": 1076.97, "duration": 2.342}, {"text": "So they've been\naround a long time.", "start": 1079.312, "duration": 1.458}, {"text": "People have used them forever.", "start": 1080.77, "duration": 1.35}, {"text": "Python is obviously much\nmore recent, at least", "start": 1082.12, "duration": 2.752}, {"text": "modern versions of Python.", "start": 1084.872, "duration": 1.083}, {"text": "And it's the model of\ncomputation in some sense", "start": 1091.45, "duration": 3.34}, {"text": "that we use in this class.", "start": 1094.79, "duration": 1.41}, {"text": "Because we're implementing\neverything in Python.", "start": 1096.2, "duration": 2.0}, {"text": "And Python offers both a random\naccess machine perspective", "start": 1098.2, "duration": 3.41}, {"text": "because it has arrays, and\nit offers a pointer machine", "start": 1101.61, "duration": 2.82}, {"text": "perspective because\nit has references,", "start": 1104.43, "duration": 2.35}, {"text": "because it has pointers.", "start": 1106.78, "duration": 1.82}, {"text": "So you can do either one.", "start": 1108.6, "duration": 2.55}, {"text": "But it also has a\nlot of operations.", "start": 1111.15, "duration": 1.74}, {"text": "It doesn't just have load\nand store and follow pointer.", "start": 1112.89, "duration": 5.29}, {"text": "It's got things\nlike sort and append", "start": 1118.18, "duration": 4.85}, {"text": "and concatenation of two\nlists and lots of things.", "start": 1123.03, "duration": 3.56}, {"text": "And each of those has a\ncost associated with them.", "start": 1126.59, "duration": 2.35}, {"text": "So whereas the random access\nmachine and pointer machine,", "start": 1128.94, "duration": 2.05}, {"text": "they're theoretical models.", "start": 1130.99, "duration": 1.125}, {"text": "They're designed\nto be super simple.", "start": 1132.115, "duration": 1.595}, {"text": "So it's clear that everything\nyou do takes constant time.", "start": 1133.71, "duration": 4.52}, {"text": "In Python, some of the\noperations you can do", "start": 1138.23, "duration": 2.77}, {"text": "take a lot of time.", "start": 1141.0, "duration": 2.15}, {"text": "Some of the operations in Python\ntake exponential time to do.", "start": 1143.15, "duration": 2.584}, {"text": "And you've got to know when\nyou're writing your algorithms", "start": 1145.734, "duration": 2.416}, {"text": "down either thinking in a Python\nmodel or your implementing", "start": 1148.15, "duration": 3.11}, {"text": "your algorithms\nin actual Python,", "start": 1151.26, "duration": 2.69}, {"text": "which operations are\nfast and which are slow.", "start": 1153.95, "duration": 2.31}, {"text": "And that's what I'd like to\nspend the next few minutes on.", "start": 1156.26, "duration": 3.444}, {"text": "There's a lot of operations.", "start": 1159.704, "duration": 1.166}, {"text": "I'm not going to\ncover all of them.", "start": 1160.87, "duration": 2.75}, {"text": "But we'll cover\nmore in recitation.", "start": 1163.62, "duration": 3.66}, {"text": "And there's a whole\nbunch in my notes.", "start": 1167.28, "duration": 1.85}, {"text": "I won't get to all of them.", "start": 1169.13, "duration": 1.93}, {"text": "So in Python, you can do\nrandom access style things.", "start": 1171.06, "duration": 5.08}, {"text": "In Python, arrays\nare called lists,", "start": 1176.14, "duration": 2.4}, {"text": "which is super confusing.", "start": 1178.54, "duration": 1.69}, {"text": "But there you go.", "start": 1180.23, "duration": 2.01}, {"text": "A list in Python is an\narray in real world.", "start": 1182.24, "duration": 5.87}, {"text": "It's a super cool\narray, of course?", "start": 1188.11, "duration": 3.175}, {"text": "And you can think\nof it as a list.", "start": 1191.285, "duration": 1.465}, {"text": "But in terms implementation,\nit's implemented as an array.", "start": 1192.75, "duration": 2.71}, {"text": "Question?", "start": 1195.46, "duration": 0.5}, {"text": "AUDIENCE: I thought\nthat [INAUDIBLE].", "start": 1195.96, "duration": 2.7}, {"text": "PROFESSOR: You thought Python\nlinks lists were linked lists.", "start": 1198.66, "duration": 2.5}, {"text": "That's why it's so confusing.", "start": 1201.16, "duration": 1.208}, {"text": "In fact, they are not.", "start": 1202.368, "duration": 1.912}, {"text": "In, say, scheme, back in the\ndays when we taught scheme,", "start": 1204.28, "duration": 3.35}, {"text": "lists are linked lists.", "start": 1207.63, "duration": 2.41}, {"text": "And it's very different.", "start": 1210.04, "duration": 1.54}, {"text": "So when you do-- I'll\ngive an operation here.", "start": 1211.58, "duration": 2.95}, {"text": "You have a list L, and you\ndo something like this.", "start": 1214.53, "duration": 2.8}, {"text": "L is a list object.", "start": 1221.18, "duration": 2.21}, {"text": "This takes constant time.", "start": 1223.39, "duration": 2.257}, {"text": "In a linked list, it\nwould take linear time.", "start": 1225.647, "duration": 1.833}, {"text": "Because we've got a scan to\nposition I, scan to position J,", "start": 1227.48, "duration": 3.29}, {"text": "add 5, and store.", "start": 1230.77, "duration": 2.23}, {"text": "But conveniently in Python,\nthis takes constant time.", "start": 1233.0, "duration": 5.03}, {"text": "And that's important to know.", "start": 1238.03, "duration": 1.832}, {"text": "I know that the terminology\nis super confusing.", "start": 1239.862, "duration": 1.958}, {"text": "But blame the benevolent\ndictator for life.", "start": 1241.82, "duration": 7.32}, {"text": "On the other hand, you can do\nstyle two, pointer machine,", "start": 1249.14, "duration": 6.44}, {"text": "using object oriented\nprogramming, obviously.", "start": 1255.58, "duration": 2.25}, {"text": "I'll just mention\nthat I'm not really", "start": 1261.12, "duration": 4.09}, {"text": "worrying about methods here.", "start": 1265.21, "duration": 2.32}, {"text": "Because methods are just sort of\na way of thinking about things,", "start": 1267.53, "duration": 4.11}, {"text": "not super important\nfrom a cost standpoint.", "start": 1271.64, "duration": 3.23}, {"text": "If your object has a constant\nnumber of attributes--", "start": 1274.87, "duration": 2.28}, {"text": "it can't have like\na million attributes", "start": 1277.15, "duration": 2.15}, {"text": "or can't have n\nexecutes-- then it", "start": 1279.3, "duration": 1.95}, {"text": "fits into this\npointer machine model.", "start": 1281.25, "duration": 1.64}, {"text": "So if you have an\nobject that only", "start": 1282.89, "duration": 1.56}, {"text": "has like three things or\n10 things or whatever,", "start": 1284.45, "duration": 2.629}, {"text": "that's a pointer machine.", "start": 1287.079, "duration": 1.041}, {"text": "You can think of\nmanipulating that object", "start": 1288.12, "duration": 1.708}, {"text": "as taking constant time.", "start": 1289.828, "duration": 1.522}, {"text": "If you are screwing around\nthe object's dictionary", "start": 1291.35, "duration": 2.605}, {"text": "and doing lots of\ncrazy things, then you", "start": 1293.955, "duration": 1.775}, {"text": "have to be careful about\nwhether this remains true.", "start": 1295.73, "duration": 2.26}, {"text": "But as long as you only\nhave a reasonable number", "start": 1297.99, "duration": 2.47}, {"text": "of attributes, this\nis all fair game.", "start": 1300.46, "duration": 2.77}, {"text": "And so if you do something like,\nif you're implementing a linked", "start": 1303.23, "duration": 3.32}, {"text": "list, Python I\nchecked still does not", "start": 1306.55, "duration": 1.635}, {"text": "have built-in linked lists.", "start": 1308.185, "duration": 1.125}, {"text": "They're pretty easy\nto build, though.", "start": 1309.31, "duration": 2.12}, {"text": "You have a pointer.", "start": 1311.43, "duration": 0.99}, {"text": "And you just say\nx equals x.next.", "start": 1312.42, "duration": 2.17}, {"text": "That takes constant time\nbecause accessing this field", "start": 1314.59, "duration": 4.11}, {"text": "in an object of constant\nsize takes constant time.", "start": 1318.7, "duration": 3.619}, {"text": "And we don't care what\nthese constants are.", "start": 1322.319, "duration": 1.791}, {"text": "That's the beauty of algorithms.", "start": 1324.11, "duration": 1.333}, {"text": "Because we only care\nabout scalability with n.", "start": 1325.443, "duration": 2.007}, {"text": "There's no n here.", "start": 1327.45, "duration": 1.7}, {"text": "This takes constant time.", "start": 1329.15, "duration": 1.05}, {"text": "This takes constant time.", "start": 1330.2, "duration": 2.71}, {"text": "No matter how big\nyour linked list", "start": 1332.91, "duration": 1.62}, {"text": "is or no matter how\nmany objects you have,", "start": 1334.53, "duration": 2.61}, {"text": "these are constant time.", "start": 1337.14, "duration": 2.16}, {"text": "OK, let's do some\nharder ones, though.", "start": 1339.3, "duration": 2.46}, {"text": "In general, the\nidea is, if you take", "start": 1341.76, "duration": 2.72}, {"text": "an operation like L.append--\nso you have a list.", "start": 1344.48, "duration": 4.68}, {"text": "And you want to append\nsome item to the list.", "start": 1349.16, "duration": 2.3}, {"text": "It's an array, though.", "start": 1351.46, "duration": 2.12}, {"text": "So think about it.", "start": 1353.58, "duration": 2.21}, {"text": "The way to figure out\nhow much does this cost", "start": 1355.79, "duration": 3.05}, {"text": "is to think about\nhow it's implemented", "start": 1358.84, "duration": 1.76}, {"text": "in terms of these\nbasic operations.", "start": 1360.6, "duration": 2.15}, {"text": "So these are your sort of\nthe core concept time things.", "start": 1362.75, "duration": 4.03}, {"text": "Most everything can be reduced\nto thinking about this.", "start": 1366.78, "duration": 3.54}, {"text": "But sometimes,\nit's less obvious.", "start": 1370.32, "duration": 3.0}, {"text": "L.apend is a little\ntricky to think about.", "start": 1373.32, "duration": 2.197}, {"text": "Because basically, you\nhave an array of some size.", "start": 1375.517, "duration": 2.083}, {"text": "And now you want to make\nan array one larger.", "start": 1377.6, "duration": 2.65}, {"text": "And the obvious way to do that\nis to allocate a new array", "start": 1380.25, "duration": 2.375}, {"text": "and copy all the elements.", "start": 1382.625, "duration": 1.083}, {"text": "That would take linear time.", "start": 1383.708, "duration": 1.552}, {"text": "Python doesn't do that.", "start": 1385.26, "duration": 1.92}, {"text": "What does it do?", "start": 1387.18, "duration": 2.73}, {"text": "Stay tuned for lecture eight.", "start": 1389.91, "duration": 1.77}, {"text": "It does something\ncalled table doubling.", "start": 1394.3, "duration": 2.84}, {"text": "It's a very simple idea.", "start": 1397.14, "duration": 1.0}, {"text": "You can almost get\nguess it from the title.", "start": 1398.14, "duration": 2.42}, {"text": "And if you go to lecture--\nis it eight or nine?", "start": 1400.56, "duration": 3.386}, {"text": "Nine, sorry.", "start": 1403.946, "duration": 2.234}, {"text": "You'll see how\nthis can basically", "start": 1406.18, "duration": 1.87}, {"text": "be done in constant time.", "start": 1408.05, "duration": 2.77}, {"text": "There's a slight catch,\nbut basically, think of it", "start": 1410.82, "duration": 3.04}, {"text": "as a constant time operation.", "start": 1413.86, "duration": 2.42}, {"text": "Once we have that,\nand so this is", "start": 1416.28, "duration": 1.974}, {"text": "why you should take\nthis class so you'll", "start": 1418.254, "duration": 1.666}, {"text": "understand how Python works.", "start": 1419.92, "duration": 2.0}, {"text": "This is using an algorithmic\nconcept that was invented,", "start": 1421.92, "duration": 2.69}, {"text": "I don't know, decades\nago, but is a simple thing", "start": 1424.61, "duration": 2.57}, {"text": "that we need to do to solve\nlots of other problems.", "start": 1427.18, "duration": 2.589}, {"text": "So it's cool.", "start": 1429.769, "duration": 0.541}, {"text": "There's a lot of features in\nPython that use algorithms.", "start": 1430.31, "duration": 3.49}, {"text": "And that's kind of\nwhy I'm telling you.", "start": 1433.8, "duration": 2.7}, {"text": "All right, so let's\ndo another one.", "start": 1436.5, "duration": 1.62}, {"text": "A little easier.", "start": 1438.12, "duration": 1.09}, {"text": "What if I want to\nconcatenate two lists?", "start": 1439.21, "duration": 1.82}, {"text": "You should know in Python this\nis a non-destructive operation.", "start": 1441.03, "duration": 3.05}, {"text": "You basically take a copy of\nL1 and L2 and concatenate them.", "start": 1444.08, "duration": 3.36}, {"text": "Of course, they're arrays.", "start": 1447.44, "duration": 1.86}, {"text": "The way to think about\nthis is to re-implement it", "start": 1449.3, "duration": 2.14}, {"text": "as Python code.", "start": 1451.44, "duration": 0.84}, {"text": "This is the same\nthing as saying, well,", "start": 1452.28, "duration": 2.35}, {"text": "L is initially empty.", "start": 1454.63, "duration": 1.81}, {"text": "And then for every item\nx and L1, L.append(x).", "start": 1456.44, "duration": 4.81}, {"text": "And a lot of the times in\ndocumentation for Python,", "start": 1464.88, "duration": 2.42}, {"text": "you see this sort of here's\nwhat it means, especially", "start": 1467.3, "duration": 3.52}, {"text": "in the fancier features.", "start": 1470.82, "duration": 2.7}, {"text": "They give sort of an equivalent\nsimple Python, if you will.", "start": 1473.52, "duration": 5.359}, {"text": "This doesn't use\nany fancy operations", "start": 1478.879, "duration": 1.541}, {"text": "that we haven't seen already.", "start": 1480.42, "duration": 1.5}, {"text": "So now we know this\ntakes constant time.", "start": 1481.92, "duration": 3.13}, {"text": "The append, this append,\ntakes constant time.", "start": 1485.05, "duration": 2.79}, {"text": "And so the amount of\ntime here is basically", "start": 1487.84, "duration": 2.18}, {"text": "order the length of L1.", "start": 1490.02, "duration": 3.21}, {"text": "And the time here is\norder the length of L2.", "start": 1493.23, "duration": 3.44}, {"text": "And so in total,\nit's order-- I'm", "start": 1496.67, "duration": 2.47}, {"text": "going to be careful and\nsay 1 plus length of L1", "start": 1499.14, "duration": 3.33}, {"text": "plus length of L2.", "start": 1502.47, "duration": 3.69}, {"text": "The 1 plus is just in\ncase these are both 0.", "start": 1506.16, "duration": 1.9}, {"text": "It still takes constant time\nto build an initial list.", "start": 1508.06, "duration": 3.9}, {"text": "OK, so there are a\nbunch of operations", "start": 1511.96, "duration": 2.06}, {"text": "that are written in these notes.", "start": 1514.02, "duration": 1.63}, {"text": "I'm not going to go\nthrough all of them", "start": 1515.65, "duration": 2.18}, {"text": "because they're tedious.", "start": 1517.83, "duration": 1.3}, {"text": "But a lot of you, could just\nexpand out code like this.", "start": 1519.13, "duration": 3.45}, {"text": "And it's very easy to analyze.", "start": 1522.58, "duration": 1.25}, {"text": "Whereas you just\nlook at plus, you", "start": 1523.83, "duration": 1.416}, {"text": "think, oh, plus\nis constant time.", "start": 1525.246, "duration": 1.424}, {"text": "And plus is constant\ntime if this is a word", "start": 1526.67, "duration": 1.989}, {"text": "and this is a word.", "start": 1528.659, "duration": 0.791}, {"text": "But these are entire\ndata structures.", "start": 1529.45, "duration": 2.31}, {"text": "And so it's not constant time.", "start": 1531.76, "duration": 2.72}, {"text": "All right.", "start": 1534.48, "duration": 1.514}, {"text": "There are more subtle\nfun ones to think about.", "start": 1535.994, "duration": 1.916}, {"text": "Like, if I want to know is x in\nthe list, how does that happen?", "start": 1537.91, "duration": 5.63}, {"text": "Any guesses?", "start": 1543.54, "duration": 2.33}, {"text": "There's an operator\nin Python called", "start": 1545.87, "duration": 1.79}, {"text": "in-- x in L. How long\ndo you think this takes?", "start": 1547.66, "duration": 4.01}, {"text": "Altogether?", "start": 1555.07, "duration": 1.7}, {"text": "Linear, yeah.", "start": 1556.77, "duration": 2.24}, {"text": "Linear time.", "start": 1559.01, "duration": 0.75}, {"text": "In the worst case,\nyou're going to have", "start": 1559.76, "duration": 1.026}, {"text": "to scan through the whole list.", "start": 1560.786, "duration": 1.304}, {"text": "Lists aren't necessarily sorted.", "start": 1562.09, "duration": 1.41}, {"text": "We don't know\nanything about them.", "start": 1563.5, "duration": 1.53}, {"text": "So you've got to just\nscan through and test", "start": 1565.03, "duration": 1.51}, {"text": "for every item.", "start": 1566.54, "duration": 0.75}, {"text": "Is x equal to that item?", "start": 1567.29, "duration": 1.95}, {"text": "And it's even worse if\nequal equals costs a lot.", "start": 1569.24, "duration": 2.772}, {"text": "So if x is some really\ncomplicated thing,", "start": 1572.012, "duration": 1.708}, {"text": "you have to take\nthat into account.", "start": 1573.72, "duration": 3.15}, {"text": "OK, blah, blah, blah.", "start": 1576.87, "duration": 1.53}, {"text": "OK, another fun one.", "start": 1578.4, "duration": 0.85}, {"text": "This is like a pop quiz.", "start": 1579.25, "duration": 2.43}, {"text": "How long's it take to\ncompute the length of a list?", "start": 1581.68, "duration": 3.98}, {"text": "Constant.", "start": 1585.66, "duration": 1.14}, {"text": "Yeah, luckily, if you\ndidn't know anything,", "start": 1586.8, "duration": 2.397}, {"text": "you'd have to scan through\nthe list and count the items.", "start": 1589.197, "duration": 2.333}, {"text": "But in Python, lists\nare implemented", "start": 1591.53, "duration": 2.4}, {"text": "with a counter built in.", "start": 1593.93, "duration": 1.17}, {"text": "It always stores the\nlist at the beginning--", "start": 1595.1, "duration": 2.17}, {"text": "stores the length of the\nlist at the beginning.", "start": 1597.27, "duration": 1.35}, {"text": "So you just look it up.", "start": 1598.62, "duration": 1.17}, {"text": "This is instantaneous.", "start": 1599.79, "duration": 2.51}, {"text": "It's important, though.", "start": 1602.3, "duration": 1.39}, {"text": "That can matter.", "start": 1603.69, "duration": 2.58}, {"text": "All right.", "start": 1606.27, "duration": 1.65}, {"text": "Let's do some more.", "start": 1607.92, "duration": 0.97}, {"text": "What if I want to sort a list?", "start": 1618.9, "duration": 1.47}, {"text": "How long does that take?", "start": 1620.37, "duration": 1.0}, {"text": "N log n where n is the\nlength of the list.", "start": 1626.58, "duration": 7.22}, {"text": "Technically times the time\nto compare two items, which", "start": 1633.8, "duration": 6.65}, {"text": "usually we're just\nsorting words.", "start": 1640.45, "duration": 1.68}, {"text": "And so this is constant time.", "start": 1642.13, "duration": 3.72}, {"text": "If you look at Python\nsorting algorithm,", "start": 1645.85, "duration": 1.68}, {"text": "it uses a comparison sort.", "start": 1647.53, "duration": 1.71}, {"text": "This is the topic of lectures\nthree and four and seven.", "start": 1649.24, "duration": 6.02}, {"text": "But in particular,\nthe very next lecture,", "start": 1655.26, "duration": 2.24}, {"text": "we will see how this is\ndone in n log n time.", "start": 1657.5, "duration": 4.17}, {"text": "And that is using algorithms.", "start": 1661.67, "duration": 4.02}, {"text": "All right, let's\ngo to dictionaries.", "start": 1665.69, "duration": 6.52}, {"text": "Python called dicts.", "start": 1672.21, "duration": 3.03}, {"text": "And these let you do things.", "start": 1675.24, "duration": 2.36}, {"text": "They're a generalization\nof lists in some sense.", "start": 1677.6, "duration": 2.0}, {"text": "Instead of putting just an\nindex here, an integer between 0", "start": 1679.6, "duration": 3.53}, {"text": "and the length minus 1, you\ncan put an arbitrary key", "start": 1683.13, "duration": 2.89}, {"text": "and store a value, for example.", "start": 1686.02, "duration": 2.23}, {"text": "How long does this take?", "start": 1688.25, "duration": 1.69}, {"text": "I'm not going to ask you\nbecause, it's not obvious.", "start": 1689.94, "duration": 2.855}, {"text": "In fact, this is one of the\nmost important data structures", "start": 1692.795, "duration": 4.065}, {"text": "in all of computer science.", "start": 1696.86, "duration": 1.72}, {"text": "It's called a hash table.", "start": 1698.58, "duration": 1.83}, {"text": "And it is the topic of\nlectures eight through 10.", "start": 1700.41, "duration": 4.86}, {"text": "So stay tuned for how to\ndo this in constant time,", "start": 1705.27, "duration": 3.08}, {"text": "how to be able to\nstore an arbitrary key,", "start": 1708.35, "duration": 1.9}, {"text": "get it back out\nin constant time.", "start": 1710.25, "duration": 1.87}, {"text": "This is assuming the\nkey is a single word.", "start": 1712.12, "duration": 2.73}, {"text": "Yeah.", "start": 1714.85, "duration": 0.77}, {"text": "AUDIENCE: Does it first check to\nsee whether the key is already", "start": 1715.62, "duration": 2.625}, {"text": "in the dictionary?", "start": 1718.245, "duration": 1.455}, {"text": "PROFESSOR: Yeah, it will\nclobber any existing key.", "start": 1719.7, "duration": 2.89}, {"text": "There's also, you\nknow, you can test", "start": 1722.59, "duration": 2.142}, {"text": "whether a key is\nin the dictionary.", "start": 1724.732, "duration": 1.458}, {"text": "That also takes constant time.", "start": 1726.19, "duration": 1.736}, {"text": "You can delete something\nfrom the dictionary.", "start": 1727.926, "duration": 1.874}, {"text": "All the usual-- dealing with\na single key in dictionaries,", "start": 1729.8, "duration": 3.91}, {"text": "obviously dictionary.update,\nthat involves a lot of keys.", "start": 1733.71, "duration": 2.8}, {"text": "That doesn't take some time.", "start": 1736.51, "duration": 1.56}, {"text": "How long does it take?", "start": 1738.07, "duration": 0.989}, {"text": "Well, you write out a\nfor loop and count them.", "start": 1739.059, "duration": 1.916}, {"text": "AUDIENCE: But how can you\nsee whether [INAUDIBLE]", "start": 1740.975, "duration": 1.82}, {"text": "dictionary in constant time?", "start": 1742.795, "duration": 1.365}, {"text": "PROFESSOR: How do you do\nthis in constant time?", "start": 1744.16, "duration": 1.958}, {"text": "Come to lecture\neight through 10.", "start": 1746.118, "duration": 2.102}, {"text": "I should say a\nslight catch, which", "start": 1748.22, "duration": 2.2}, {"text": "is this is constant time\nwith high probability.", "start": 1750.42, "duration": 3.06}, {"text": "It's a randomized algorithm.", "start": 1753.48, "duration": 2.354}, {"text": "It doesn't always\ntake constant time.", "start": 1755.834, "duration": 1.541}, {"text": "It's always correct.", "start": 1757.375, "duration": 1.195}, {"text": "But sometimes, very rarely,\nit takes a little more", "start": 1758.57, "duration": 2.81}, {"text": "than constant time.", "start": 1761.38, "duration": 1.38}, {"text": "And I'm going to\nabbreviate this WHP.", "start": 1762.76, "duration": 3.41}, {"text": "And we'll see more what\nthat means mostly, actually,", "start": 1766.17, "duration": 3.24}, {"text": "in 6046.", "start": 1769.41, "duration": 0.98}, {"text": "But we'll see a fair amount\nin 6006 on how this works", "start": 1770.39, "duration": 3.044}, {"text": "and how it's possible.", "start": 1773.434, "duration": 0.916}, {"text": "It's a big area of research.", "start": 1774.35, "duration": 1.33}, {"text": "A lot of people work on hashing.", "start": 1775.68, "duration": 1.75}, {"text": "It's very cool and\nit's super useful.", "start": 1777.43, "duration": 1.69}, {"text": "If you write any code these\ndays, you use a dictionary.", "start": 1779.12, "duration": 2.6}, {"text": "It's the way to solve problems.", "start": 1781.72, "duration": 3.75}, {"text": "I'm basically using\nPython is a platform", "start": 1785.47, "duration": 2.52}, {"text": "to advertise the rest of the\nclass you may have noticed.", "start": 1787.99, "duration": 2.85}, {"text": "Not every topic we cover in\nthis class is already in Python,", "start": 1790.84, "duration": 2.76}, {"text": "but a lot of them are.", "start": 1793.6, "duration": 1.61}, {"text": "So we've got table doubling.", "start": 1795.21, "duration": 3.0}, {"text": "We've got dictionaries.", "start": 1798.21, "duration": 4.86}, {"text": "We've got sorting.", "start": 1803.07, "duration": 1.39}, {"text": "Another one is longs, which\nare long integers in Python", "start": 1804.46, "duration": 4.84}, {"text": "through version two.", "start": 1809.3, "duration": 2.69}, {"text": "And this is the\ntopic of lecture 11.", "start": 1811.99, "duration": 5.86}, {"text": "And so for fun, if I have\ntwo integers x and y,", "start": 1817.85, "duration": 3.51}, {"text": "and let's say one of them\nis this many words long", "start": 1821.36, "duration": 3.25}, {"text": "and the other one is\nthis many words long,", "start": 1824.61, "duration": 1.75}, {"text": "how long do you think\nit takes to add them?", "start": 1826.36, "duration": 1.791}, {"text": "Guesses?", "start": 1833.29, "duration": 0.5}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 1837.59, "duration": 2.43}, {"text": "PROFESSOR: Plus?", "start": 1840.02, "duration": 0.88}, {"text": "Times?", "start": 1840.9, "duration": 0.68}, {"text": "Plus is the answer.", "start": 1841.58, "duration": 2.247}, {"text": "You can do it in that much time.", "start": 1843.827, "duration": 1.333}, {"text": "If you think about the\ngrade school algorithm", "start": 1847.936, "duration": 1.874}, {"text": "for adding really big\nmulti-digit numbers,", "start": 1849.81, "duration": 3.22}, {"text": "it'll only take that much time.", "start": 1853.03, "duration": 1.47}, {"text": "Multiplication is a\nlittle bit harder, though.", "start": 1854.5, "duration": 2.27}, {"text": "If you look at the\ngrade school algorithm,", "start": 1856.77, "duration": 1.75}, {"text": "it's going to be x times y--\nit's quadratic time not so", "start": 1858.52, "duration": 2.79}, {"text": "good.", "start": 1861.31, "duration": 1.35}, {"text": "The algorithm that's\nimplemented in Python", "start": 1862.66, "duration": 2.94}, {"text": "is x plus y to the\nlog base 2 of 3.", "start": 1865.6, "duration": 6.27}, {"text": "By the way, I always write\nLG to mean log base 2.", "start": 1871.87, "duration": 5.01}, {"text": "Because it only has two\nletters, so OK, this is 2.", "start": 1876.88, "duration": 3.55}, {"text": "Log base 2 of 3 is about 1.6.", "start": 1880.43, "duration": 4.28}, {"text": "So while the straightforward\nalgorithm is basically", "start": 1884.71, "duration": 2.53}, {"text": "x plus y squared, this one\nis x plus y to the 1.6 power,", "start": 1887.24, "duration": 4.17}, {"text": "a little better than quadratic.", "start": 1891.41, "duration": 1.5}, {"text": "And the Python developers\nfound that was faster", "start": 1892.91, "duration": 4.77}, {"text": "than grade school\nmultiplication.", "start": 1897.68, "duration": 1.67}, {"text": "And so that's what\nthey implemented.", "start": 1899.35, "duration": 1.14}, {"text": "And that is something we\nwill cover in lecture 11,", "start": 1900.49, "duration": 2.083}, {"text": "how to do that.", "start": 1902.573, "duration": 0.667}, {"text": "It's pretty cool.", "start": 1903.24, "duration": 1.27}, {"text": "There are faster\nalgorithms, but this", "start": 1904.51, "duration": 1.78}, {"text": "is one that works\nquite practically.", "start": 1906.29, "duration": 4.14}, {"text": "One more.", "start": 1910.43, "duration": 1.65}, {"text": "Heap queue, this is in the\nPython standard library", "start": 1912.08, "duration": 3.372}, {"text": "and implements something\ncalled the heap, which", "start": 1915.452, "duration": 1.958}, {"text": "will be in lecture four.", "start": 1917.41, "duration": 2.13}, {"text": "So, coming soon to a\nclassroom near you.", "start": 1919.54, "duration": 3.24}, {"text": "All right, enough advertisement.", "start": 1922.78, "duration": 1.98}, {"text": "That gives you some idea of\nthe model of computation.", "start": 1924.76, "duration": 2.44}, {"text": "There's a whole bunch more in\nthese notes which are online.", "start": 1927.2, "duration": 4.13}, {"text": "Go check them out.", "start": 1931.33, "duration": 1.6}, {"text": "And some of them, we'll\ncover in recitation tomorrow.", "start": 1932.93, "duration": 4.424}, {"text": "I'd like to-- now that we are\nsort of comfortable for what", "start": 1937.354, "duration": 2.416}, {"text": "costs what in Python, I\nwant to do a real example.", "start": 1939.77, "duration": 3.58}, {"text": "So last time, we\ndid peak finding.", "start": 1943.35, "duration": 1.802}, {"text": "We're going to have\nanother example which", "start": 1945.152, "duration": 1.708}, {"text": "is called document distance.", "start": 1946.86, "duration": 4.54}, {"text": "So let's do that.", "start": 1951.4, "duration": 0.78}, {"text": "Any questions before we go on?", "start": 1955.39, "duration": 1.38}, {"text": "All right.", "start": 1960.235, "duration": 0.99}, {"text": "So document distance problem\nis, I give you two documents.", "start": 1990.96, "duration": 4.88}, {"text": "I'll call them D1 D2.", "start": 1995.84, "duration": 3.21}, {"text": "And I want to compute the\ndistance between them.", "start": 1999.05, "duration": 3.13}, {"text": "And the first question\nis, what does that mean?", "start": 2002.18, "duration": 2.97}, {"text": "What is this distance function?", "start": 2005.15, "duration": 2.02}, {"text": "Let me first tell\nyou some motivations", "start": 2007.17, "duration": 2.38}, {"text": "for computing document distance.", "start": 2009.55, "duration": 2.46}, {"text": "Let's say you're\nGoogle and you're", "start": 2012.01, "duration": 3.57}, {"text": "cataloging the entire web.", "start": 2015.58, "duration": 1.55}, {"text": "You'd like to know when two web\npages are basically identical.", "start": 2017.13, "duration": 3.93}, {"text": "Because then you store less\nand because you present it", "start": 2021.06, "duration": 2.931}, {"text": "differently to the user.", "start": 2023.991, "duration": 0.999}, {"text": "You say, well,\nthere's this page.", "start": 2024.99, "duration": 1.78}, {"text": "And there's lots\nof extra copies.", "start": 2026.77, "duration": 1.55}, {"text": "But you just need--\nhere's the canonical one.", "start": 2028.32, "duration": 3.15}, {"text": "Or you're Wikipedia.", "start": 2031.47, "duration": 1.344}, {"text": "And I don't know if you've\never looked at Wikipedia.", "start": 2032.814, "duration": 2.166}, {"text": "There's a list of all\nmirrors of Wikipedia.", "start": 2034.98, "duration": 1.791}, {"text": "There's like millions of them.", "start": 2036.771, "duration": 1.829}, {"text": "And they find them by hand.", "start": 2038.6, "duration": 3.02}, {"text": "But you could do that\nusing document distance.", "start": 2041.62, "duration": 2.54}, {"text": "Say, are these\nbasically identical", "start": 2044.16, "duration": 1.52}, {"text": "other than like some\nstuff at the-- junk", "start": 2045.68, "duration": 1.83}, {"text": "at the beginning or the end?", "start": 2047.51, "duration": 2.606}, {"text": "Or if you're teaching this\nclass and you want to detect,", "start": 2050.116, "duration": 2.333}, {"text": "are two problem sets cheating?", "start": 2052.449, "duration": 2.05}, {"text": "Are they identical?", "start": 2054.499, "duration": 0.791}, {"text": "We do this a lot.", "start": 2055.29, "duration": 0.94}, {"text": "I'm not going to tell you\nwhat distance function we use.", "start": 2056.23, "duration": 2.401}, {"text": "Because that would\ndefeat the point.", "start": 2058.631, "duration": 1.499}, {"text": "It's not the one\nwe cover in class.", "start": 2060.13, "duration": 1.79}, {"text": "But we use automated tests\nfor whether you're cheating.", "start": 2061.92, "duration": 3.85}, {"text": "I've got some more.", "start": 2065.77, "duration": 3.48}, {"text": "Web search.", "start": 2069.25, "duration": 1.32}, {"text": "Let's say you're Google again.", "start": 2070.57, "duration": 1.31}, {"text": "And you want to\nimplement searching.", "start": 2071.88, "duration": 3.259}, {"text": "Like, I give you three words.", "start": 2075.139, "duration": 2.25}, {"text": "I'm searching for\nintroduction to algorithms.", "start": 2077.389, "duration": 3.1}, {"text": "You can think of\nintroduction to algorithms", "start": 2080.489, "duration": 1.791}, {"text": "as a very short document.", "start": 2082.28, "duration": 1.7}, {"text": "And you want to test\nwhether that document is", "start": 2083.98, "duration": 2.0}, {"text": "similar to all the other\ndocuments on the web.", "start": 2085.98, "duration": 2.436}, {"text": "And the one that's most\nsimilar, the one that", "start": 2088.416, "duration": 1.874}, {"text": "has the small\ndistance, that's maybe", "start": 2090.29, "duration": 1.53}, {"text": "what you want to put at the top.", "start": 2091.82, "duration": 1.149}, {"text": "That's obviously not\nwhat Google does.", "start": 2092.969, "duration": 1.583}, {"text": "But it's part of what it does.", "start": 2094.552, "duration": 2.417}, {"text": "So that's why you might care.", "start": 2096.969, "duration": 1.781}, {"text": "It's partly also\njust a toy problem.", "start": 2098.75, "duration": 1.53}, {"text": "It lets us illustrate\na lot of the techniques", "start": 2100.28, "duration": 3.44}, {"text": "that we develop in this class.", "start": 2103.72, "duration": 4.07}, {"text": "All right, I'm going\nto think of a document", "start": 2107.79, "duration": 4.49}, {"text": "as a sequence of words.", "start": 2112.28, "duration": 1.455}, {"text": "Just to be a little\nbit more formal,", "start": 2116.79, "duration": 2.62}, {"text": "what do I mean by document?", "start": 2119.41, "duration": 2.2}, {"text": "And a word is just\ngoing to be a string", "start": 2121.61, "duration": 4.54}, {"text": "of alphanumeric\ncharacters-- A through Z", "start": 2126.15, "duration": 3.874}, {"text": "and zero through nine.", "start": 2130.024, "duration": 0.916}, {"text": "OK, so if I have a\ndocument which you also", "start": 2135.18, "duration": 1.8}, {"text": "think of as a string\nand you basically", "start": 2136.98, "duration": 2.22}, {"text": "delete all the white space and\npunctuation all the other junk", "start": 2139.2, "duration": 2.84}, {"text": "that's in there.", "start": 2142.04, "duration": 1.06}, {"text": "This Everything in between\nthose, those are the words.", "start": 2143.1, "duration": 3.72}, {"text": "That's a simple definition\nof decomposing documents", "start": 2146.82, "duration": 2.81}, {"text": "into words.", "start": 2149.63, "duration": 1.86}, {"text": "And now we can think\nof about what--", "start": 2151.49, "duration": 1.75}, {"text": "I want to know whether\nD1 and D2 are similar.", "start": 2153.24, "duration": 2.1}, {"text": "And I've thought\nabout my document", "start": 2155.34, "duration": 1.66}, {"text": "as a collection of words.", "start": 2157.0, "duration": 1.3}, {"text": "Maybe they're similar if they\nshare a lot of words in common.", "start": 2158.3, "duration": 4.24}, {"text": "So that's the idea.", "start": 2162.54, "duration": 3.12}, {"text": "Look at shared words\nand use that to define", "start": 2165.66, "duration": 5.89}, {"text": "document distance.", "start": 2171.55, "duration": 0.75}, {"text": "This is obviously only one\nway to define distance.", "start": 2172.3, "duration": 2.314}, {"text": "It'll be the way we\ndo it in this class.", "start": 2174.614, "duration": 1.666}, {"text": "But there are lots of\nother possibilities.", "start": 2176.28, "duration": 4.45}, {"text": "So I'm going to\nthink of a document.", "start": 2180.73, "duration": 7.08}, {"text": "It's a sequence of words.", "start": 2187.81, "duration": 1.05}, {"text": "But I could also think\nof it as a vector.", "start": 2188.86, "duration": 3.295}, {"text": "So if I have a document D and\nI have a word W, this D of W", "start": 2195.09, "duration": 6.24}, {"text": "is going to be the\nnumber of times", "start": 2201.33, "duration": 2.6}, {"text": "that word occurs\nin the document.", "start": 2203.93, "duration": 3.23}, {"text": "So, number of recurrences\nW in the document D.", "start": 2207.16, "duration": 5.1}, {"text": "So it's a number.", "start": 2212.26, "duration": 0.88}, {"text": "It's an integer.", "start": 2213.14, "duration": 1.34}, {"text": "Non-negative integer.", "start": 2214.48, "duration": 2.03}, {"text": "Could be 0.", "start": 2216.51, "duration": 1.089}, {"text": "Could be one.", "start": 2217.599, "duration": 0.541}, {"text": "Could be a million.", "start": 2218.14, "duration": 2.3}, {"text": "I think of this\nas a giant vector.", "start": 2220.44, "duration": 2.77}, {"text": "A vector is indexed\nby all words.", "start": 2223.21, "duration": 4.59}, {"text": "And for each of them,\nthere's some frequency.", "start": 2227.8, "duration": 2.31}, {"text": "Of lot of them are zero.", "start": 2230.11, "duration": 1.42}, {"text": "And then some of them have some\npositive number occurrences.", "start": 2231.53, "duration": 4.576}, {"text": "You could think\nof every document", "start": 2236.106, "duration": 1.374}, {"text": "is as being one of these\nplots in this common axis.", "start": 2237.48, "duration": 4.874}, {"text": "There's infinitely\nmany words down here.", "start": 2242.354, "duration": 1.666}, {"text": "So it's kind of a big axis.", "start": 2244.02, "duration": 1.2}, {"text": "But it's one way to\ndraw the picture.", "start": 2245.22, "duration": 2.38}, {"text": "OK, so for example, take two\nvery important documents.", "start": 2247.6, "duration": 8.82}, {"text": "Everybody likes cats and dogs.", "start": 2256.42, "duration": 1.85}, {"text": "So these are two word documents.", "start": 2258.27, "duration": 3.24}, {"text": "And so we can draw them.", "start": 2261.51, "duration": 1.38}, {"text": "Because there's only three\ndifferent words here,", "start": 2262.89, "duration": 1.999}, {"text": "we can draw them in\nthree dimensional space.", "start": 2264.889, "duration": 2.555}, {"text": "Beyond that, it's a\nlittle hard to draw.", "start": 2267.444, "duration": 1.666}, {"text": "So we have, let's say,\nwhich one's the-- let's say", "start": 2269.11, "duration": 3.9}, {"text": "this one's the-- makes\nit easier to draw.", "start": 2273.01, "duration": 3.54}, {"text": "So there's going to be\njust zero here and one.", "start": 2276.55, "duration": 3.8}, {"text": "For each of the axes, let's say\nthis is dog and this is cat.", "start": 2280.35, "duration": 5.96}, {"text": "OK, so the cat has won the--\nit has one cat and no dog.", "start": 2286.31, "duration": 4.2}, {"text": "So it's here.", "start": 2290.51, "duration": 1.66}, {"text": "It's a vector\npointing out there.", "start": 2292.17, "duration": 3.31}, {"text": "The dog you've got\nbasically pointing there.", "start": 2295.48, "duration": 5.512}, {"text": "OK, so these are two vectors.", "start": 2300.992, "duration": 1.208}, {"text": "So how do I measure how\ndifferent two vectors are?", "start": 2305.15, "duration": 2.49}, {"text": "Any suggestions from\nvector calculus?", "start": 2307.64, "duration": 2.595}, {"text": "AUDIENCE: Inner product?", "start": 2313.864, "duration": 1.695}, {"text": "PROFESSOR: Inner product?", "start": 2315.559, "duration": 1.041}, {"text": "Yeah, that's good suggestion.", "start": 2316.6, "duration": 2.18}, {"text": "Any others.", "start": 2318.78, "duration": 2.77}, {"text": "OK, we'll go with inner product.", "start": 2321.55, "duration": 1.46}, {"text": "I like inner product,\nalso known as dot product.", "start": 2323.01, "duration": 5.579}, {"text": "Just define that quickly.", "start": 2328.589, "duration": 1.041}, {"text": "So we could-- I'm going\nto call this D prime", "start": 2336.78, "duration": 2.01}, {"text": "because it's not what\nwe're going to end up with.", "start": 2338.79, "duration": 3.57}, {"text": "We could think of this as\nthe dot product of D1 and D2,", "start": 2342.36, "duration": 3.8}, {"text": "also known as the sum over all\nwords of D1 of W times D2 of W.", "start": 2346.16, "duration": 11.22}, {"text": "So for example, you take the\ndot product of these two guys.", "start": 2357.38, "duration": 2.63}, {"text": "Those match.", "start": 2360.01, "duration": 1.53}, {"text": "So you get one point there,\ncat and dog multiplied by zero.", "start": 2361.54, "duration": 6.4}, {"text": "So you don't get much there.", "start": 2367.94, "duration": 2.66}, {"text": "So this is some\nmeasure of distance.", "start": 2370.6, "duration": 2.81}, {"text": "But it's a measure of,\nactually, of commonality.", "start": 2373.41, "duration": 4.81}, {"text": "So it would be sort of\ninverse distance, sorry.", "start": 2378.22, "duration": 2.94}, {"text": "If you have a high\ndot product, you", "start": 2381.16, "duration": 2.049}, {"text": "have a lot of things in common.", "start": 2383.209, "duration": 1.291}, {"text": "Because a lot of these\nthings didn't be--", "start": 2384.5, "duration": 1.71}, {"text": "wasn't zero times something.", "start": 2386.21, "duration": 1.63}, {"text": "It's actually a positive number\ntimes some positive number.", "start": 2387.84, "duration": 2.62}, {"text": "If you have a lot of shared\nwords, than that looks good.", "start": 2390.46, "duration": 2.737}, {"text": "The trouble of this is if\nI have a long document--", "start": 2393.197, "duration": 2.083}, {"text": "say, a million words--\nand it's 99% in common", "start": 2395.28, "duration": 3.93}, {"text": "with another document\nthat's a million words long,", "start": 2399.21, "duration": 3.55}, {"text": "it's still-- it\nlooks super similar.", "start": 2402.76, "duration": 3.55}, {"text": "Actually, I need to do\nit the other way around.", "start": 2406.31, "duration": 2.66}, {"text": "Let's say it's a million words\nlong and half of the words", "start": 2408.97, "duration": 3.297}, {"text": "are in common.", "start": 2412.267, "duration": 0.583}, {"text": "So not that many,\nbut a fair number.", "start": 2412.85, "duration": 2.34}, {"text": "Then I have a score\nof like 500,000.", "start": 2415.19, "duration": 3.289}, {"text": "And then I have two documents\nwhich are, say, 100 words long.", "start": 2418.479, "duration": 2.541}, {"text": "And they're identical.", "start": 2421.02, "duration": 1.52}, {"text": "Their score is maybe only 100.", "start": 2422.54, "duration": 3.13}, {"text": "So even though\nthey're identical,", "start": 2425.67, "duration": 1.64}, {"text": "it's not quite scale invariant.", "start": 2427.31, "duration": 1.86}, {"text": "So it's not quite\na perfect measure.", "start": 2429.17, "duration": 2.46}, {"text": "Any suggestions for\nhow to fix this?", "start": 2431.63, "duration": 1.611}, {"text": "This, I think, is\na little trickier.", "start": 2433.241, "duration": 1.499}, {"text": "Yeah?", "start": 2434.74, "duration": 0.982}, {"text": "AUDIENCE: Divide by the\nlength of the vectors?", "start": 2435.722, "duration": 1.917}, {"text": "PROFESSOR: Divide by the\nlength of the vectors.", "start": 2437.639, "duration": 1.957}, {"text": "I think that's worth a pillow.", "start": 2439.596, "duration": 1.374}, {"text": "Haven't done any pillows yet.", "start": 2440.97, "duration": 2.31}, {"text": "Sorry about that.", "start": 2443.28, "duration": 1.49}, {"text": "So, divide by the\nlength of vector.", "start": 2444.77, "duration": 2.78}, {"text": "That's good.", "start": 2447.55, "duration": 1.897}, {"text": "I'm going to call\nthis D double prime.", "start": 2449.447, "duration": 1.583}, {"text": "Still not quite\nthe right answer.", "start": 2451.03, "duration": 3.16}, {"text": "Or not-- no, it's pretty good.", "start": 2454.19, "duration": 2.05}, {"text": "It's pretty good.", "start": 2456.24, "duration": 1.82}, {"text": "So here, the length\nof the vectors", "start": 2458.06, "duration": 1.9}, {"text": "is the number of\nwords that occur", "start": 2459.96, "duration": 2.07}, {"text": "in them This is pretty cool.", "start": 2462.03, "duration": 4.58}, {"text": "But does anyone\nrecognize this formula?", "start": 2466.61, "duration": 4.0}, {"text": "Angle, yeah.", "start": 2470.61, "duration": 1.59}, {"text": "It's a lot like the angle\nbetween the two vectors.", "start": 2472.2, "duration": 2.45}, {"text": "It's just off by an arc cos.", "start": 2474.65, "duration": 4.02}, {"text": "This is the cosine of the\nangle between the two vectors.", "start": 2478.67, "duration": 2.559}, {"text": "And I'm a geometer.", "start": 2481.229, "duration": 0.791}, {"text": "I like geometry.", "start": 2482.02, "duration": 1.0}, {"text": "So if you take arc\ncos of that thing,", "start": 2483.02, "duration": 2.09}, {"text": "that's a well established\ndistance metric.", "start": 2485.11, "duration": 2.41}, {"text": "This goes back to '75,\nif you can believe it,", "start": 2487.52, "duration": 4.69}, {"text": "back when people-- early\ndays of document, information", "start": 2492.21, "duration": 2.64}, {"text": "retrieval, way before\nthe web, people", "start": 2494.85, "duration": 2.735}, {"text": "were still working\non this stuff.", "start": 2497.585, "duration": 3.085}, {"text": "So it's a natural measure of the\nangle between the two vectors.", "start": 2500.67, "duration": 3.32}, {"text": "If it's 0, they're\nbasically identical.", "start": 2503.99, "duration": 2.7}, {"text": "If it's 90 degrees, they're\nreally, really different.", "start": 2506.69, "duration": 2.98}, {"text": "And so that gives you a nice way\nto compute document distance.", "start": 2509.67, "duration": 3.36}, {"text": "The question is, how do we\nactually compute that measure?", "start": 2513.03, "duration": 2.64}, {"text": "Now that we've come up with\nsomething that's reasonable,", "start": 2515.67, "duration": 2.35}, {"text": "how do I actually\nfind this value?", "start": 2518.02, "duration": 2.44}, {"text": "I need to compute these\nvectors-- the number", "start": 2520.46, "duration": 3.47}, {"text": "of recurrences of each\nword in the document.", "start": 2523.93, "duration": 2.57}, {"text": "And I need you compute\nthe dot product.", "start": 2526.5, "duration": 2.317}, {"text": "And then I need to divide.", "start": 2528.817, "duration": 1.083}, {"text": "That's really easy.", "start": 2529.9, "duration": 0.791}, {"text": "So, dot product--\nand I also need", "start": 2530.691, "duration": 2.569}, {"text": "to decompose a document\nto a list of words.", "start": 2533.26, "duration": 2.35}, {"text": "So there are three\nthings I need to do.", "start": 2535.61, "duration": 1.882}, {"text": "Let me write them down.", "start": 2537.492, "duration": 0.958}, {"text": "So a sort of algorithm.", "start": 2550.417, "duration": 0.958}, {"text": "There's one, split a\ndocument into words.", "start": 2556.58, "duration": 6.165}, {"text": "Second is compute\nword frequencies,", "start": 2566.13, "duration": 4.91}, {"text": "how many times\neach word appears.", "start": 2571.04, "duration": 3.04}, {"text": "This is the document vectors .", "start": 2574.08, "duration": 1.78}, {"text": "And then the third step is\nto compute the dot product.", "start": 2578.38, "duration": 3.64}, {"text": "Let me tell you a little\nbit about how each of those", "start": 2587.124, "duration": 2.166}, {"text": "is done.", "start": 2589.29, "duration": 1.4}, {"text": "Some of these will be covered\nmore in future lectures.", "start": 2590.69, "duration": 4.17}, {"text": "I want to give you an overview.", "start": 2594.86, "duration": 2.12}, {"text": "There's a lot of ways to\ndo each of these steps.", "start": 2596.98, "duration": 2.82}, {"text": "If you look at the--\nnext to the lecture", "start": 2599.8, "duration": 2.1}, {"text": "notes for this lecture two,\nthere's a bunch of code", "start": 2601.9, "duration": 3.41}, {"text": "and a bunch of data\nexamples of documents--", "start": 2605.31, "duration": 3.33}, {"text": "big corpuses of text.", "start": 2608.64, "duration": 1.89}, {"text": "And you can run,\nI think, there are", "start": 2610.53, "duration": 1.54}, {"text": "eight different\nalgorithms for it.", "start": 2612.07, "duration": 2.69}, {"text": "And let me give you--\nactually, why don't I", "start": 2614.76, "duration": 2.25}, {"text": "cut to the chase a\nlittle bit and tell you", "start": 2617.01, "duration": 2.05}, {"text": "about the run times of these\ndifferent implementations", "start": 2619.06, "duration": 3.37}, {"text": "of this same algorithms.", "start": 2622.43, "duration": 1.001}, {"text": "There are lots of sort of\nversions of this algorithm.", "start": 2623.431, "duration": 2.207}, {"text": "We implement it a whole bunch.", "start": 2625.638, "duration": 1.272}, {"text": "Every semester I teach this, I\nchange them a little bit more,", "start": 2626.91, "duration": 2.94}, {"text": "add a few more variants.", "start": 2629.85, "duration": 2.12}, {"text": "So version one, on\na particular pair", "start": 2631.97, "duration": 3.29}, {"text": "of documents which is like a\nmegabyte-- not very much text--", "start": 2635.26, "duration": 5.44}, {"text": "it takes 228.1\nseconds-- super slow.", "start": 2640.7, "duration": 4.76}, {"text": "Pathetic.", "start": 2645.46, "duration": 1.33}, {"text": "Then we do a little bit\nof algorithmic tweaking.", "start": 2646.79, "duration": 2.62}, {"text": "We get down to 164 seconds.", "start": 2649.41, "duration": 2.37}, {"text": "Then we get to 123 seconds.", "start": 2651.78, "duration": 2.96}, {"text": "Then we get down to 71 seconds.", "start": 2654.74, "duration": 2.6}, {"text": "Then we get down\nto 18.3 seconds.", "start": 2657.34, "duration": 4.12}, {"text": "And then we get to 11.5 seconds.", "start": 2661.46, "duration": 3.67}, {"text": "Then we get to 1.8 seconds.", "start": 2665.13, "duration": 3.14}, {"text": "Then we get to 0.2 seconds.", "start": 2668.27, "duration": 3.49}, {"text": "So factor of 1,000.", "start": 2671.76, "duration": 1.87}, {"text": "This is just in Python.", "start": 2673.63, "duration": 2.9}, {"text": "2/10 of a second to\nprocess a megabytes.", "start": 2676.53, "duration": 2.2}, {"text": "It's all right.", "start": 2678.73, "duration": 0.68}, {"text": "It's getting reasonable.", "start": 2679.41, "duration": 1.34}, {"text": "This is not so reasonable.", "start": 2680.75, "duration": 1.219}, {"text": "Some of these improvements\nare algorithmic.", "start": 2681.969, "duration": 1.791}, {"text": "Some of them are\njust better coding.", "start": 2683.76, "duration": 2.54}, {"text": "So there's improving\nthe constant factors.", "start": 2686.3, "duration": 2.98}, {"text": "But if you look at\nlarger and larger texts,", "start": 2689.28, "duration": 3.43}, {"text": "this will become\neven more dramatic.", "start": 2692.71, "duration": 1.5}, {"text": "Because a lot of these\nwere improvements", "start": 2694.21, "duration": 2.01}, {"text": "from quadratic time algorithms\nto linear and log n algorithms.", "start": 2696.22, "duration": 3.57}, {"text": "And so for a megabyte, yeah,\nit's a reasonable improvement.", "start": 2699.79, "duration": 2.642}, {"text": "But if you look at a gigabyte,\nit'll be a huge improvement.", "start": 2702.432, "duration": 2.458}, {"text": "There will be no comparison.", "start": 2704.89, "duration": 1.209}, {"text": "In fact, there will\nbe no comparison.", "start": 2706.099, "duration": 1.541}, {"text": "Because this one\nwill never finish.", "start": 2707.64, "duration": 1.458}, {"text": "So the reason I ran\nsuch a small example", "start": 2709.098, "duration": 2.232}, {"text": "so I could have patience\nto wait for this one.", "start": 2711.33, "duration": 2.21}, {"text": "But this one you could run\non the bigger examples.", "start": 2713.54, "duration": 3.51}, {"text": "All right, so where do\nI want to go from here?", "start": 2717.05, "duration": 5.44}, {"text": "Five minutes.", "start": 2722.49, "duration": 1.89}, {"text": "I want to tell you about\nsome of those improvements", "start": 2724.38, "duration": 2.18}, {"text": "and some of the algorithms here.", "start": 2726.56, "duration": 2.82}, {"text": "Let's start with\nthis very simple one.", "start": 2729.38, "duration": 2.39}, {"text": "How would you split a\ndocument into words in Python?", "start": 2731.77, "duration": 4.555}, {"text": "Yeah?", "start": 2736.325, "duration": 0.5}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 2736.825, "duration": 1.455}, {"text": "Iterate through the document,\n[INAUDIBLE] the dictionary?", "start": 2738.28, "duration": 2.655}, {"text": "PROFESSOR: Iterate\nthrough the-- that's", "start": 2740.935, "duration": 1.625}, {"text": "actually how we do number two.", "start": 2742.56, "duration": 1.93}, {"text": "OK, we can talk about that one.", "start": 2744.49, "duration": 2.41}, {"text": "Iterate through the\nwords in the document", "start": 2746.9, "duration": 5.32}, {"text": "and put it in a dictionary.", "start": 2752.22, "duration": 1.47}, {"text": "Let's say, count of\nword plus equals 1.", "start": 2753.69, "duration": 6.29}, {"text": "This would work if count\nis something called a count", "start": 2759.98, "duration": 2.34}, {"text": "dictionary if you're\nsuper Pythonista.", "start": 2762.32, "duration": 3.12}, {"text": "Otherwise, you have to check,\nis the word in the dictionary?", "start": 2765.44, "duration": 2.5}, {"text": "If not, set it to one.", "start": 2767.94, "duration": 1.67}, {"text": "If it is there, add one to it.", "start": 2769.61, "duration": 2.849}, {"text": "But I think you know\nwhat this means.", "start": 2772.459, "duration": 1.541}, {"text": "This will count the\nnumber of words--", "start": 2774.0, "duration": 1.859}, {"text": "this will count the frequency\nof each word in the dictionary.", "start": 2775.859, "duration": 2.541}, {"text": "And becomes dictionaries\nrun in constant time", "start": 2778.4, "duration": 2.62}, {"text": "with high probability--\nwith high probability--", "start": 2781.02, "duration": 5.0}, {"text": "this will take order--\nwell, cheating a little bit.", "start": 2786.02, "duration": 5.15}, {"text": "Because words can\nbe really long.", "start": 2791.17, "duration": 1.46}, {"text": "And so to reduce a word\ndown to a machine word", "start": 2792.63, "duration": 2.85}, {"text": "could take order the\nlength of the word time.", "start": 2795.48, "duration": 3.33}, {"text": "To a little more\nprecise, this is", "start": 2798.81, "duration": 1.4}, {"text": "going to be the\nsum of the lengths", "start": 2800.21, "duration": 1.416}, {"text": "of the words in the\ndocument, which is also", "start": 2801.626, "duration": 4.174}, {"text": "known as a length of\nthe document, basically.", "start": 2805.8, "duration": 2.664}, {"text": "So this is good.", "start": 2808.464, "duration": 0.666}, {"text": "This is linear time\nwith high probability.", "start": 2809.13, "duration": 2.435}, {"text": "OK, that's a good algorithm.", "start": 2814.5, "duration": 1.27}, {"text": "That is introduced\nin algorithm four.", "start": 2815.77, "duration": 6.62}, {"text": "So we got a significant boost.", "start": 2822.39, "duration": 2.237}, {"text": "There are other ways to do this.", "start": 2824.627, "duration": 1.333}, {"text": "For example, you\ncould sort the words", "start": 2825.96, "duration": 3.23}, {"text": "and then run through\nthe sorted list", "start": 2829.19, "duration": 1.74}, {"text": "and count, how many do you\nget in a row for each one?", "start": 2830.93, "duration": 2.5}, {"text": "If it's sorted, you\ncan count-- I mean,", "start": 2833.43, "duration": 2.495}, {"text": "all the identical words are\nput right next to each other.", "start": 2835.925, "duration": 2.375}, {"text": "So it's easy to count them.", "start": 2838.3, "duration": 1.5}, {"text": "And that'll run almost as fast.", "start": 2839.8, "duration": 1.51}, {"text": "That was one of\nthese algorithms.", "start": 2841.31, "duration": 1.38}, {"text": "OK, so that's a couple\ndifferent ways to do that.", "start": 2846.47, "duration": 2.88}, {"text": "Let's go back to\nthis first step.", "start": 2849.35, "duration": 1.39}, {"text": "How would you split a document\ninto words in the first place?", "start": 2850.74, "duration": 3.045}, {"text": "Yeah?", "start": 2853.785, "duration": 0.499}, {"text": "AUDIENCE: Search circulated\nspaces and then [INAUDIBLE].", "start": 2854.284, "duration": 2.333}, {"text": "PROFESSOR: Run through\nthough the string.", "start": 2856.617, "duration": 2.533}, {"text": "And every time you see anything\nthat's not alphanumeric,", "start": 2859.15, "duration": 2.72}, {"text": "start a new word.", "start": 2861.87, "duration": 1.38}, {"text": "OK, that would run\nin linear time.", "start": 2863.25, "duration": 2.13}, {"text": "That's a good answer.", "start": 2865.38, "duration": 2.0}, {"text": "So it's not hard.", "start": 2867.38, "duration": 1.21}, {"text": "If you're a fancy Pythonista,\nyou might do it like this.", "start": 2868.59, "duration": 5.62}, {"text": "Remember my Reg Exes.", "start": 2881.43, "duration": 1.055}, {"text": "This will find all the\nwords in a document.", "start": 2885.04, "duration": 2.05}, {"text": "Trouble is, in general,\nre takes exponential time.", "start": 2887.09, "duration": 3.57}, {"text": "So if you think about\nalgorithms, be very careful.", "start": 2890.66, "duration": 3.6}, {"text": "Unless you know how\nre is implemented,", "start": 2894.26, "duration": 1.75}, {"text": "this probably will\nrun in linear time.", "start": 2896.01, "duration": 3.79}, {"text": "But it's not obvious at all.", "start": 2899.8, "duration": 2.2}, {"text": "Do anything fancy with\nregular expressions.", "start": 2902.0, "duration": 2.21}, {"text": "If you don't know what this\nmeans, don't worry about it.", "start": 2904.21, "duration": 2.333}, {"text": "Don't use it.", "start": 2906.543, "duration": 0.557}, {"text": "If you know about it, be\nvery careful in this class", "start": 2907.1, "duration": 1.89}, {"text": "when you use re.", "start": 2908.99, "duration": 0.666}, {"text": "Because it's not\nalways linear time.", "start": 2909.656, "duration": 2.008}, {"text": "But there is an easy\nalgorithm for this,", "start": 2911.664, "duration": 1.666}, {"text": "which is just scan through\nand look for alpha numerics.", "start": 2913.33, "duration": 4.745}, {"text": "String them together.", "start": 2918.075, "duration": 0.875}, {"text": "It's good.", "start": 2918.95, "duration": 0.499}, {"text": "There's a few other\nalgorithms here in the notes.", "start": 2919.449, "duration": 2.081}, {"text": "You should check them out.", "start": 2921.53, "duration": 1.14}, {"text": "And for fun, look at this code\nand see how small differences", "start": 2922.67, "duration": 4.26}, {"text": "make dramatic difference\nin performance.", "start": 2926.93, "duration": 2.26}, {"text": "Next class will\nbe about sorting.", "start": 2929.19, "duration": 2.43}]