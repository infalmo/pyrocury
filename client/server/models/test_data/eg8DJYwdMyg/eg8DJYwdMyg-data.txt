{
    "metadata": {
        "id": "eg8DJYwdMyg",
        "avgHeat": 0.32,
        "runtime": 2985.44,
        "dale-challReadabilityScore": 7.846509689722772,
        "lexicalDiversity": 0.48799246586093237,
        "posComposition": {
            "DT": 0.107,
            "JJ": 0.06,
            "NN": 0.124,
            "VBZ": 0.044,
            "VBN": 0.014,
            "IN": 0.105,
            "NNP": 0.03,
            "PRP$": 0.007,
            "MD": 0.017,
            "VB": 0.051,
            "VBP": 0.054,
            "TO": 0.026,
            "NNS": 0.043,
            "CC": 0.038,
            "PRP": 0.097,
            "EX": 0.003,
            "CD": 0.02,
            "RB": 0.07,
            "VBG": 0.026,
            "RP": 0.002,
            "JJR": 0.005,
            "VBD": 0.019,
            "WRB": 0.007,
            "WDT": 0.005,
            "RBR": 0.003,
            ":": 0.005,
            "JJS": 0.007,
            "POS": 0.003,
            "WP": 0.007,
            "PDT": 0.0,
            "RBS": 0.0,
            "FW": 0.0
        },
        "syllableRate": 3.019,
        "topicScores": [
            [
                "K",
                0.06734753691078703
            ],
            [
                "K near",
                0.08021012386063964
            ],
            [
                "example",
                0.1543624788109918
            ],
            [
                "neighbor",
                0.15743327038308685
            ],
            [
                "KNN",
                0.15756180890984686
            ],
            [
                "K near neighbor",
                0.16958161751411846
            ],
            [
                "regression",
                0.1727172016512069
            ],
            [
                "number",
                0.17536605203727346
            ],
            [
                "label",
                0.17731474539453787
            ],
            [
                "training",
                0.1787975127074916
            ],
            [
                "model",
                0.18168149874610987
            ],
            [
                "Creative Commons",
                0.182511599027155
            ],
            [
                "different",
                0.18439446588595565
            ],
            [
                "thing",
                0.18689709958305864
            ],
            [
                "set",
                0.18904227242181407
            ],
            [
                "class",
                0.19018505681203265
            ],
            [
                "feature",
                0.1933582252774611
            ],
            [
                "test",
                0.19430896111405896
            ],
            [
                "datum",
                0.1946183436280704
            ],
            [
                "weight",
                0.19483737196631082
            ],
            [
                "method",
                0.19974116360677321
            ],
            [
                "time",
                0.2005257703224909
            ],
            [
                "build",
                0.20399342222491162
            ],
            [
                "Python",
                0.20478599867348912
            ],
            [
                "list",
                0.20519068434092363
            ],
            [
                "logistic",
                0.2085113430834724
            ],
            [
                "MIT",
                0.2122067536586224
            ],
            [
                "probability",
                0.21603850311178818
            ],
            [
                "PROFESSOR",
                0.21937046384918993
            ],
            [
                "positive",
                0.22239647921143377
            ]
        ],
        "topicsList": [
            "K",
            "K near",
            "example",
            "neighbor",
            "KNN",
            "K near neighbor",
            "regression",
            "number",
            "label",
            "training",
            "model",
            "Creative Commons",
            "different",
            "thing",
            "set",
            "class",
            "feature",
            "test",
            "datum",
            "weight",
            "method",
            "time",
            "build",
            "Python",
            "list",
            "logistic",
            "MIT",
            "probability",
            "PROFESSOR",
            "positive"
        ]
    },
    "chunks": {
        "eg8DJYwdMyg-0": {
            "id": "eg8DJYwdMyg-0",
            "heat": 0.1,
            "start": 0.0,
            "text": " The following content is provided under a Creative Commons license. Your support will help MIT OpenCourseWare continue to offer high quality educational resources for free. To make a donation, or to view additional materials from hundreds of MIT courses, visit MIT OpenCourseWare at ocw.mit.edu. PROFESSOR: Hello, everybody. Before we start the material, a couple of announcements. As usual, there's some reading assignments, and you might be surprised to see something from Chapter 5 suddenly popping up. But this is my relentless attempt to introduce more Python. We'll see one new concept later today, list comprehension. Today we're going to look at classification. And you remember last, on Monday, we looked at unsupervised learning. Today we're looking at supervised learning. It can usually be divided into two categories. Regression, where you try and predict some real number associated with the feature vector, and this is something we've already done really, back when we looked at curve fitting, linear regression in particular. It was exactly building a model that, given some features, would predict a point.",
            "metrics": {
                "relativeDCReadability": 1.1549791184068188,
                "lexicalDiversity": 0.6089385474860335,
                "posComposition": {
                    "DT": 0.073,
                    "JJ": 0.078,
                    "NN": 0.151,
                    "VBZ": 0.022,
                    "VBN": 0.039,
                    "IN": 0.095,
                    "NNP": 0.067,
                    "PRP$": 0.011,
                    "MD": 0.028,
                    "VB": 0.073,
                    "VBP": 0.039,
                    "TO": 0.034,
                    "NNS": 0.045,
                    "CC": 0.034,
                    "PRP": 0.067,
                    "EX": 0.006,
                    "CD": 0.017,
                    "RB": 0.039,
                    "VBG": 0.039,
                    "RP": 0.006,
                    "JJR": 0.006,
                    "VBD": 0.017,
                    "WRB": 0.011,
                    "WDT": 0.006
                },
                "syllableRate": 2.675,
                "topicScores": [
                    [
                        "Creative Commons",
                        0.2150133283179607
                    ],
                    [
                        "MIT",
                        0.2658672921485661
                    ],
                    [
                        "Creative Commons license",
                        0.2812480317707871
                    ],
                    [
                        "today",
                        0.4160739491600338
                    ],
                    [
                        "MIT OpenCourseWare",
                        0.4935911668003538
                    ],
                    [
                        "PROFESSOR",
                        0.5052919449619979
                    ],
                    [
                        "learning",
                        0.5207003659352198
                    ],
                    [
                        "material",
                        0.5445660866355655
                    ],
                    [
                        "regression",
                        0.5578270494362106
                    ],
                    [
                        "feature",
                        0.5623515541126852
                    ],
                    [
                        "Python",
                        0.6180340737377582
                    ],
                    [
                        "chapter",
                        0.6519731304182101
                    ],
                    [
                        "Monday",
                        0.6531863483059237
                    ],
                    [
                        "following",
                        0.7757619573225291
                    ],
                    [
                        "content",
                        0.7922790161184061
                    ],
                    [
                        "free",
                        0.8083329209971833
                    ],
                    [
                        "ocw.mit.edu",
                        0.8367474944284244
                    ],
                    [
                        "support",
                        0.8388822831982703
                    ],
                    [
                        "MIT course",
                        0.8490102263211546
                    ],
                    [
                        "high",
                        0.8516391548603387
                    ],
                    [
                        "quality",
                        0.8516391548603387
                    ],
                    [
                        "educational",
                        0.8516391548603387
                    ],
                    [
                        "resource",
                        0.8516391548603387
                    ],
                    [
                        "donation",
                        0.8635325256343732
                    ],
                    [
                        "announcement",
                        0.8698660409056727
                    ],
                    [
                        "comprehension",
                        0.8707280915131443
                    ],
                    [
                        "additional",
                        0.8746293436821582
                    ],
                    [
                        "hundred",
                        0.8746293436821582
                    ],
                    [
                        "classification",
                        0.8859519890942672
                    ],
                    [
                        "usual",
                        0.8866371920934305
                    ]
                ],
                "topTopicSimilarity": 0.2,
                "sharedTopicScores": [
                    [
                        "Creative Commons",
                        0.2150133283179607
                    ],
                    [
                        "MIT",
                        0.2658672921485661
                    ],
                    [
                        "PROFESSOR",
                        0.5052919449619979
                    ],
                    [
                        "regression",
                        0.5578270494362106
                    ],
                    [
                        "feature",
                        0.5623515541126852
                    ],
                    [
                        "Python",
                        0.6180340737377582
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-90": {
            "id": "eg8DJYwdMyg-90",
            "heat": 0.229,
            "start": 90.0,
            "text": " In this case, it was pretty simple. It was given x predict y. You can imagine generalizing that to multi dimensions. Today I'm going to talk about classification, which is very common, in many ways more common than regression for-- in the machine learning world. And here the goal is to predict a discrete value, often called a label, associated with some feature vector. So this is the sort of thing where you try and, for example, predict whether a person will have an adverse reaction to a drug. You're not looking for a real number, you're looking for will they get sick, will they not get sick. Maybe you're trying to predict the grade in a course A, B, C, D, and other grades we won't mention. Again, those are labels, so it doesn't have to be a binary label but it's a finite number of labels. So here's an example to start with. We won't linger on it too long. This is basically something you saw in an earlier lecture, where we had a bunch of animals and a bunch of properties, and a label identifying whether or not they were a reptile. So we start by building a distance matrix.",
            "metrics": {
                "relativeDCReadability": 0.9983402099624549,
                "lexicalDiversity": 0.460093896713615,
                "posComposition": {
                    "IN": 0.122,
                    "DT": 0.122,
                    "NN": 0.146,
                    "PRP": 0.089,
                    "VBD": 0.028,
                    "RB": 0.066,
                    "JJ": 0.052,
                    "VBN": 0.014,
                    "NNP": 0.038,
                    "VBP": 0.038,
                    "MD": 0.028,
                    "VB": 0.066,
                    "VBG": 0.033,
                    "TO": 0.033,
                    "NNS": 0.033,
                    "WDT": 0.005,
                    "VBZ": 0.033,
                    "RBR": 0.005,
                    ":": 0.005,
                    "CC": 0.033,
                    "WRB": 0.009,
                    "JJR": 0.005
                },
                "syllableRate": 2.492,
                "topicScores": [
                    [
                        "label",
                        0.33046813616657306
                    ],
                    [
                        "sick",
                        0.5414368061195387
                    ],
                    [
                        "common",
                        0.5468603464991306
                    ],
                    [
                        "number",
                        0.5485781661827647
                    ],
                    [
                        "example",
                        0.5512182078375217
                    ],
                    [
                        "bunch",
                        0.5611988093600574
                    ],
                    [
                        "grade",
                        0.5666851912317425
                    ],
                    [
                        "C",
                        0.6293270873174391
                    ],
                    [
                        "D",
                        0.6293270873174391
                    ],
                    [
                        "simple",
                        0.7410154943782389
                    ],
                    [
                        "case",
                        0.7758899832917384
                    ],
                    [
                        "y.",
                        0.8395738892516763
                    ],
                    [
                        "dimension",
                        0.8395738892516763
                    ],
                    [
                        "today",
                        0.855074187848254
                    ],
                    [
                        "world",
                        0.855074187848254
                    ],
                    [
                        "vector",
                        0.8650984027189562
                    ],
                    [
                        "drug",
                        0.872206624050369
                    ],
                    [
                        "classification",
                        0.8771362824782066
                    ],
                    [
                        "discrete",
                        0.8858382446770638
                    ],
                    [
                        "value",
                        0.8858382446770638
                    ],
                    [
                        "feature",
                        0.8858382446770638
                    ],
                    [
                        "way",
                        0.886400537556826
                    ],
                    [
                        "regression",
                        0.886400537556826
                    ],
                    [
                        "for--",
                        0.886400537556826
                    ],
                    [
                        "machine",
                        0.886400537556826
                    ],
                    [
                        "reptile",
                        0.8943591715539032
                    ],
                    [
                        "goal",
                        0.8945252499171495
                    ],
                    [
                        "matrix",
                        0.8959672467950267
                    ],
                    [
                        "real",
                        0.8966148643468106
                    ],
                    [
                        "course",
                        0.9002459275991829
                    ]
                ],
                "topTopicSimilarity": 0.16666666666666666,
                "sharedTopicScores": [
                    [
                        "label",
                        0.33046813616657306
                    ],
                    [
                        "number",
                        0.5485781661827647
                    ],
                    [
                        "example",
                        0.5512182078375217
                    ],
                    [
                        "feature",
                        0.8858382446770638
                    ],
                    [
                        "regression",
                        0.886400537556826
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-180": {
            "id": "eg8DJYwdMyg-180",
            "heat": 0.334,
            "start": 180.0,
            "text": " How far apart they are, an in fact, in this case, I'm not using the representation you just saw. I'm going to use the binary representation, As Professor Grimson showed you, and for the reasons he showed you. If you're interested, I didn't produce this table by hand, I wrote some Python code to produce it, not only to compute the distances, but more delicately to produce the actual table. And you'll probably find it instructive at some point to at least remember that that code is there, in case you need to ever produce a table for some paper. In general, you probably noticed I spent relatively little time going over the actual vast amounts of codes we've been posting. That doesn't mean you shouldn't look at it. In part, a lot of it's there because I'm hoping at some point in the future it will be handy for you to have a model on how to do something. All right. So we have all these distances. And we can tell how far apart one animal is from another. Now how do we use those to classify animals? And the simplest approach to classification, and it's actually one that's used a fair amount in practice is called nearest neighbor.",
            "metrics": {
                "relativeDCReadability": 0.937019172413404,
                "lexicalDiversity": 0.45495495495495497,
                "posComposition": {
                    "WRB": 0.018,
                    "RB": 0.099,
                    "PRP": 0.122,
                    "VBP": 0.041,
                    "DT": 0.113,
                    "IN": 0.113,
                    "NN": 0.117,
                    "VBG": 0.023,
                    "VBD": 0.032,
                    "TO": 0.045,
                    "VB": 0.072,
                    "JJ": 0.045,
                    "NNP": 0.014,
                    "CC": 0.027,
                    "NNS": 0.027,
                    "RBR": 0.005,
                    "MD": 0.018,
                    "JJS": 0.014,
                    "VBZ": 0.032,
                    "VBN": 0.014,
                    "CD": 0.009,
                    "WDT": 0.005
                },
                "syllableRate": 2.6,
                "topicScores": [
                    [
                        "Professor Grimson",
                        0.3947651894692267
                    ],
                    [
                        "table",
                        0.4260722811636434
                    ],
                    [
                        "code",
                        0.43410449431325465
                    ],
                    [
                        "representation",
                        0.4932461563015445
                    ],
                    [
                        "case",
                        0.5099558974543215
                    ],
                    [
                        "actual",
                        0.5374372088620496
                    ],
                    [
                        "point",
                        0.5429955105050274
                    ],
                    [
                        "distance",
                        0.5451760800963071
                    ],
                    [
                        "animal",
                        0.5621882477746468
                    ],
                    [
                        "Python",
                        0.5880617078743162
                    ],
                    [
                        "fact",
                        0.7810981483526589
                    ],
                    [
                        "binary",
                        0.8430203531235849
                    ],
                    [
                        "paper",
                        0.8532377426615398
                    ],
                    [
                        "reason",
                        0.8568057812463656
                    ],
                    [
                        "interested",
                        0.8671377618037809
                    ],
                    [
                        "hand",
                        0.8671377618037809
                    ],
                    [
                        "general",
                        0.8770520104802075
                    ],
                    [
                        "neighbor",
                        0.8911169445320449
                    ],
                    [
                        "instructive",
                        0.8912840594248432
                    ],
                    [
                        "little",
                        0.8990992573415921
                    ],
                    [
                        "time",
                        0.8990992573415921
                    ],
                    [
                        "vast",
                        0.8990992573415921
                    ],
                    [
                        "lot",
                        0.899381295181065
                    ],
                    [
                        "future",
                        0.908753010930441
                    ],
                    [
                        "model",
                        0.908753010930441
                    ],
                    [
                        "classification",
                        0.9119569849089323
                    ],
                    [
                        "near",
                        0.9119569849089323
                    ],
                    [
                        "simple",
                        0.9202612376492673
                    ],
                    [
                        "approach",
                        0.9202612376492673
                    ],
                    [
                        "fair",
                        0.9202612376492673
                    ]
                ],
                "topTopicSimilarity": 0.13333333333333333,
                "sharedTopicScores": [
                    [
                        "Python",
                        0.5880617078743162
                    ],
                    [
                        "neighbor",
                        0.8911169445320449
                    ],
                    [
                        "time",
                        0.8990992573415921
                    ],
                    [
                        "model",
                        0.908753010930441
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-270": {
            "id": "eg8DJYwdMyg-270",
            "heat": 0.332,
            "start": 270.0,
            "text": " So the learning part is trivial. We don't actually learn anything other than we just remember. So we remember the training data. And when we want to predict the label of a new example, we find the nearest example in the training data, and just choose the label associated with that example. So here I've just drawing a cloud of red dots and black dots. I have a fuschia colored X. And if I want to classify X as black or red, I'd say well its nearest neighbor is red. So we'll call X red. Doesn't get much simpler than that. All right. Let's try and do it now for our animals. I've blocked out this lower right hand corner, because I want to classify these three animals that are in gray. So my training data, very small, are these animals. And these are my test set here. So let's first try and classify the zebra. We look at the zebra's nearest neighbor. Well it's either a guppy or a dart frog. Well, let's just choose one. Let's choose the guppy. And if we look at the guppy, it's not a reptile, so we say the zebra is not a reptile. So got one right.",
            "metrics": {
                "relativeDCReadability": 0.8687358334184252,
                "lexicalDiversity": 0.5137614678899083,
                "posComposition": {
                    "IN": 0.087,
                    "DT": 0.11,
                    "JJ": 0.069,
                    "NN": 0.147,
                    "VBZ": 0.023,
                    "PRP": 0.083,
                    "VBP": 0.069,
                    "RB": 0.073,
                    "VB": 0.06,
                    "NNS": 0.037,
                    "CC": 0.05,
                    "WRB": 0.005,
                    "TO": 0.014,
                    "JJS": 0.014,
                    "VBN": 0.018,
                    "VBG": 0.005,
                    "NNP": 0.05,
                    "MD": 0.009,
                    "PRP$": 0.018,
                    "JJR": 0.009,
                    "POS": 0.023,
                    "RP": 0.005,
                    "CD": 0.014,
                    "WDT": 0.005,
                    "VBD": 0.005
                },
                "syllableRate": 2.383,
                "topicScores": [
                    [
                        "red",
                        0.37618091024206907
                    ],
                    [
                        "training",
                        0.41644253107621976
                    ],
                    [
                        "datum",
                        0.41644253107621976
                    ],
                    [
                        "example",
                        0.4355929549857677
                    ],
                    [
                        "animal",
                        0.4383985546235852
                    ],
                    [
                        "right",
                        0.4421892550854579
                    ],
                    [
                        "near",
                        0.44342736677171796
                    ],
                    [
                        "zebra",
                        0.444060888576713
                    ],
                    [
                        "guppy",
                        0.4464663089606602
                    ],
                    [
                        "label",
                        0.5559889499437386
                    ],
                    [
                        "dot",
                        0.5592458333908334
                    ],
                    [
                        "black",
                        0.5606785816534645
                    ],
                    [
                        "neighbor",
                        0.561777962031613
                    ],
                    [
                        "reptile",
                        0.5644246157487834
                    ],
                    [
                        "X.",
                        0.6015241091813289
                    ],
                    [
                        "trivial",
                        0.7864861942912376
                    ],
                    [
                        "new",
                        0.8997409774895888
                    ],
                    [
                        "cloud",
                        0.9134196616976358
                    ],
                    [
                        "gray",
                        0.9144767399425731
                    ],
                    [
                        "fuschia",
                        0.9182224301078035
                    ],
                    [
                        "frog",
                        0.9204358346595082
                    ],
                    [
                        "small",
                        0.9222847225967393
                    ],
                    [
                        "hand",
                        0.9266495538862447
                    ],
                    [
                        "corner",
                        0.9266495538862447
                    ],
                    [
                        "simple",
                        0.9269252735427541
                    ],
                    [
                        "low",
                        0.9318060150276377
                    ],
                    [
                        "dart",
                        0.9318237041401192
                    ],
                    [
                        "test",
                        0.9340740202953826
                    ],
                    [
                        "training datum",
                        1.1323733684082906
                    ],
                    [
                        "X red",
                        1.29101471166358
                    ]
                ],
                "topTopicSimilarity": 0.2,
                "sharedTopicScores": [
                    [
                        "training",
                        0.41644253107621976
                    ],
                    [
                        "datum",
                        0.41644253107621976
                    ],
                    [
                        "example",
                        0.4355929549857677
                    ],
                    [
                        "label",
                        0.5559889499437386
                    ],
                    [
                        "neighbor",
                        0.561777962031613
                    ],
                    [
                        "test",
                        0.9340740202953826
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-360": {
            "id": "eg8DJYwdMyg-360",
            "heat": 0.338,
            "start": 360.0,
            "text": " Look at the python, choose its nearest neighbor, say it's a cobra. The label associated with cobra is reptile, so we win again on the python. Alligator, it's nearest neighbor is clearly a chicken. And so we classify the alligator as not a reptile. Oh, dear. Clearly the wrong answer. All right. What might have gone wrong? Well, the problem with K nearest neighbors, we can illustrate it by looking at this example. So one of the things people do with classifiers these days is handwriting recognition. So I just copied from a website a bunch of numbers, then I wrote the number 40 in my own inimitable handwriting. So if we go and we look for, say, the nearest neighbor of four-- or sorry, of whatever that digit is. It is, I believe, this one. And sure enough that's the row of fours. We're OK on this. Now if we want to classify my zero,",
            "metrics": {
                "relativeDCReadability": 0.9484621177744533,
                "lexicalDiversity": 0.484472049689441,
                "posComposition": {
                    "NN": 0.155,
                    "IN": 0.124,
                    "DT": 0.13,
                    "VB": 0.025,
                    "PRP$": 0.019,
                    "JJS": 0.019,
                    "VBP": 0.068,
                    "PRP": 0.087,
                    "VBZ": 0.05,
                    "VBN": 0.012,
                    "RB": 0.081,
                    "NNP": 0.037,
                    "JJ": 0.037,
                    "CC": 0.025,
                    "VBD": 0.019,
                    "WP": 0.006,
                    "MD": 0.012,
                    "NNS": 0.037,
                    "VBG": 0.012,
                    "CD": 0.025,
                    ":": 0.006,
                    "WDT": 0.006,
                    "TO": 0.006
                },
                "syllableRate": 1.892,
                "topicScores": [
                    [
                        "near",
                        0.37223632102209064
                    ],
                    [
                        "neighbor",
                        0.37699228398683154
                    ],
                    [
                        "python",
                        0.490047139146907
                    ],
                    [
                        "cobra",
                        0.5126534230500314
                    ],
                    [
                        "reptile",
                        0.5362766942022114
                    ],
                    [
                        "wrong",
                        0.5589015691959778
                    ],
                    [
                        "handwriting",
                        0.5658626814360104
                    ],
                    [
                        "number",
                        0.5810757022333195
                    ],
                    [
                        "K",
                        0.6801971619182704
                    ],
                    [
                        "ok",
                        0.7069865377046262
                    ],
                    [
                        "Alligator",
                        0.8457655363383043
                    ],
                    [
                        "chicken",
                        0.8609278075332133
                    ],
                    [
                        "label",
                        0.8641809420504747
                    ],
                    [
                        "dear",
                        0.8704569310934027
                    ],
                    [
                        "answer",
                        0.8897870837227666
                    ],
                    [
                        "example",
                        0.9011904033745411
                    ],
                    [
                        "recognition",
                        0.903683235702185
                    ],
                    [
                        "four",
                        0.910613960144388
                    ],
                    [
                        "problem",
                        0.919307356315735
                    ],
                    [
                        "inimitable",
                        0.9231414705487827
                    ],
                    [
                        "sorry",
                        0.9246555487058408
                    ],
                    [
                        "digit",
                        0.9246555487058408
                    ],
                    [
                        "thing",
                        0.9285000953435374
                    ],
                    [
                        "people",
                        0.9285000953435374
                    ],
                    [
                        "classifier",
                        0.9285000953435374
                    ],
                    [
                        "day",
                        0.9285000953435374
                    ],
                    [
                        "website",
                        0.9301114529021224
                    ],
                    [
                        "bunch",
                        0.9301114529021224
                    ],
                    [
                        "row",
                        0.9337759227315114
                    ],
                    [
                        "near neighbor",
                        1.338519526712303
                    ]
                ],
                "topTopicSimilarity": 0.2,
                "sharedTopicScores": [
                    [
                        "neighbor",
                        0.37699228398683154
                    ],
                    [
                        "number",
                        0.5810757022333195
                    ],
                    [
                        "K",
                        0.6801971619182704
                    ],
                    [
                        "label",
                        0.8641809420504747
                    ],
                    [
                        "example",
                        0.9011904033745411
                    ],
                    [
                        "thing",
                        0.9285000953435374
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-450": {
            "id": "eg8DJYwdMyg-450",
            "heat": 0.39,
            "start": 450.0,
            "text": " the actual nearest neighbor, in terms of the bitmaps if you will, turns out to be this guy. A very poorly written nine. I didn't make up this nine, it was it was already there. And the problem we see here when we use nearest neighbor is if something is noisy, if you have one noisy piece of data, in this case, it's rather ugly looking version of nine, you can get the wrong answer because you match it. And indeed, in this case, you would get the wrong answer. What is usually done to avoid that is something called K nearest neighbors. And the basic idea here is that we don't just take the nearest neighbors, we take some number of nearest neighbors, usually an odd number, and we just let them vote. So now if we want to classify this fuchsia X, and we said K equal to three, we say well these are it's three nearest neighbors. One is red, two are black, so we're going to call X black is our better guess. And maybe that actually is a better guess, because it looks like this red point here is really an outlier, and we don't want to let the outliers dominate our classification.",
            "metrics": {
                "relativeDCReadability": 0.8658317126626726,
                "lexicalDiversity": 0.4953271028037383,
                "posComposition": {
                    "DT": 0.103,
                    "JJ": 0.061,
                    "JJS": 0.023,
                    "NN": 0.098,
                    "IN": 0.075,
                    "NNS": 0.037,
                    "PRP": 0.107,
                    "MD": 0.014,
                    "VB": 0.061,
                    "RP": 0.009,
                    "TO": 0.028,
                    "RB": 0.107,
                    "VBN": 0.014,
                    "CD": 0.037,
                    "VBD": 0.019,
                    "CC": 0.033,
                    "VBP": 0.061,
                    "WRB": 0.005,
                    "VBZ": 0.056,
                    "VBG": 0.009,
                    "WP": 0.005,
                    "NNP": 0.019,
                    "PRP$": 0.009,
                    "JJR": 0.009
                },
                "syllableRate": 2.375,
                "topicScores": [
                    [
                        "near",
                        0.28498253951288016
                    ],
                    [
                        "neighbor",
                        0.2886790680534018
                    ],
                    [
                        "K",
                        0.3975334818815488
                    ],
                    [
                        "X",
                        0.3998040325648737
                    ],
                    [
                        "wrong",
                        0.5115249323199753
                    ],
                    [
                        "case",
                        0.5166703852272416
                    ],
                    [
                        "answer",
                        0.5166703852272416
                    ],
                    [
                        "guess",
                        0.5403385996440231
                    ],
                    [
                        "noisy",
                        0.5516122313603274
                    ],
                    [
                        "red",
                        0.5585279957519556
                    ],
                    [
                        "number",
                        0.5641526640821303
                    ],
                    [
                        "black",
                        0.5683888711494779
                    ],
                    [
                        "outlier",
                        0.5699661547201881
                    ],
                    [
                        "near neighbor",
                        0.6568325743490213
                    ],
                    [
                        "guy",
                        0.7473769362109809
                    ],
                    [
                        "actual",
                        0.7801626901534366
                    ],
                    [
                        "term",
                        0.7801626901534366
                    ],
                    [
                        "bitmap",
                        0.794412960258033
                    ],
                    [
                        "datum",
                        0.8797777988280923
                    ],
                    [
                        "problem",
                        0.8884937426703683
                    ],
                    [
                        "piece",
                        0.8884937426703683
                    ],
                    [
                        "ugly",
                        0.8884937426703683
                    ],
                    [
                        "version",
                        0.8884937426703683
                    ],
                    [
                        "classification",
                        0.8913202098327399
                    ],
                    [
                        "odd",
                        0.8988858757312712
                    ],
                    [
                        "fuchsia",
                        0.9024458554725119
                    ],
                    [
                        "basic",
                        0.9063639508466433
                    ],
                    [
                        "idea",
                        0.9063639508466433
                    ],
                    [
                        "equal",
                        0.9096870986928796
                    ],
                    [
                        "point",
                        0.9146171793166873
                    ]
                ],
                "topTopicSimilarity": 0.13333333333333333,
                "sharedTopicScores": [
                    [
                        "neighbor",
                        0.2886790680534018
                    ],
                    [
                        "K",
                        0.3975334818815488
                    ],
                    [
                        "number",
                        0.5641526640821303
                    ],
                    [
                        "datum",
                        0.8797777988280923
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-540": {
            "id": "eg8DJYwdMyg-540",
            "heat": 0.273,
            "start": 540.0,
            "text": " And this is why people almost always use K nearest neighbors rather than just nearest neighbor. Now if we look at this, and we use K nearest neighbors, those are the three nearest to the first numeral, and they are all fours. And if we look at the K nearest neighbors for the second numeral, we still have this nine but now we have two zeros. And so we vote and we decide it's a zero. Is it infallible? No. But it's typically much more reliable than just nearest neighbors, hence used much more often. And that was our problem, by the way, with the alligator. The nearest neighbor was the chicken, but if we went back and looked at it-- maybe we should go do that. And we take the alligator's three nearest neighbors, it would be the chicken, a cobra, and the rattlesnake-- or the boa, we don't care, and we would end up correctly classifying it now as a reptile. Yes? AUDIENCE: Is there like a limit to how many [INAUDIBLE]? PROFESSOR: The question is is there a limit to how many nearest neighbors you'd want? Absolutely. Most obviously, there's no point in setting K equal to-- whoops.",
            "metrics": {
                "relativeDCReadability": 0.9784361207724078,
                "lexicalDiversity": 0.4714285714285714,
                "posComposition": {
                    "CC": 0.071,
                    "DT": 0.129,
                    "VBZ": 0.038,
                    "WRB": 0.014,
                    "NNS": 0.048,
                    "RB": 0.11,
                    "VBP": 0.057,
                    "NNP": 0.038,
                    "JJS": 0.048,
                    "IN": 0.067,
                    "PRP": 0.095,
                    "CD": 0.019,
                    "TO": 0.019,
                    "JJ": 0.048,
                    "NN": 0.071,
                    "RBR": 0.01,
                    "VBD": 0.024,
                    "PRP$": 0.005,
                    ":": 0.014,
                    "MD": 0.019,
                    "VB": 0.029,
                    "POS": 0.005,
                    "RP": 0.005,
                    "VBG": 0.01,
                    "EX": 0.01
                },
                "syllableRate": 2.408,
                "topicScores": [
                    [
                        "near",
                        0.25603399399115867
                    ],
                    [
                        "K",
                        0.2663350370521915
                    ],
                    [
                        "neighbor",
                        0.27466821929352553
                    ],
                    [
                        "zero",
                        0.5393467767456658
                    ],
                    [
                        "numeral",
                        0.5443339604593407
                    ],
                    [
                        "K near",
                        0.5547962178805375
                    ],
                    [
                        "chicken",
                        0.5612161057108112
                    ],
                    [
                        "limit",
                        0.5677070216356737
                    ],
                    [
                        "alligator",
                        0.5687041726907826
                    ],
                    [
                        "PROFESSOR",
                        0.6158996353367643
                    ],
                    [
                        "audience",
                        0.649513989519964
                    ],
                    [
                        "four",
                        0.8704327184409564
                    ],
                    [
                        "people",
                        0.8844045400884217
                    ],
                    [
                        "near neighbor",
                        0.9003607228701933
                    ],
                    [
                        "infallible",
                        0.9019670200522245
                    ],
                    [
                        "second",
                        0.9044041295267763
                    ],
                    [
                        "reptile",
                        0.9142503488171458
                    ],
                    [
                        "whoop",
                        0.9210908545944007
                    ],
                    [
                        "cobra",
                        0.9227983029550109
                    ],
                    [
                        "question",
                        0.9234711315672568
                    ],
                    [
                        "problem",
                        0.9271059248951217
                    ],
                    [
                        "way",
                        0.9271059248951217
                    ],
                    [
                        "boa",
                        0.9301583101639046
                    ],
                    [
                        "reliable",
                        0.9319687656430568
                    ],
                    [
                        "it--",
                        0.935243649945134
                    ],
                    [
                        "to--",
                        0.9358188769886031
                    ],
                    [
                        "rattlesnake--",
                        0.9365357107352907
                    ],
                    [
                        "point",
                        0.9417117887034288
                    ],
                    [
                        "equal",
                        0.9417117887034288
                    ],
                    [
                        "K equal",
                        1.3944338731796793
                    ]
                ],
                "topTopicSimilarity": 0.13333333333333333,
                "sharedTopicScores": [
                    [
                        "K",
                        0.2663350370521915
                    ],
                    [
                        "neighbor",
                        0.27466821929352553
                    ],
                    [
                        "K near",
                        0.5547962178805375
                    ],
                    [
                        "PROFESSOR",
                        0.6158996353367643
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-630": {
            "id": "eg8DJYwdMyg-630",
            "heat": 0.144,
            "start": 630.0,
            "text": " Ooh, on the rebound-- to the size of the training set. So one of the problems with K nearest neighbors is efficiency. If you're trying to define K nearest neighbors and K is bigger, it takes longer. So we worry about how big K should be. And if we make it too big-- and this is a crucial thing-- we end up getting dominated by the size of the class. So let's look at this picture we had before. It happens to be more red dots than black dots. If I make K 10 or 15, I'm going to classify a lot of things as red, just because red is so much more prevalent than black. And so when you have an imbalance, which you usually do, you have to be very careful about K. Does that make sense? AUDIENCE: [INAUDIBLE] choose K? PROFESSOR: So how do you choose K? Remember back on Monday when we talked about choosing K for K means clustering? We typically do a very similar kind of thing. We take our training data and we split it into two parts. So we have training and testing, but now we just take the training, and we split that",
            "metrics": {
                "relativeDCReadability": 0.9574514463573528,
                "lexicalDiversity": 0.46153846153846156,
                "posComposition": {
                    "NN": 0.087,
                    "IN": 0.125,
                    "DT": 0.062,
                    ":": 0.014,
                    "TO": 0.024,
                    "VBN": 0.01,
                    "NNP": 0.087,
                    "CD": 0.019,
                    "NNS": 0.038,
                    "JJS": 0.01,
                    "VBZ": 0.034,
                    "PRP": 0.106,
                    "VBP": 0.077,
                    "VBG": 0.034,
                    "VB": 0.038,
                    "CC": 0.043,
                    "JJR": 0.01,
                    "RBR": 0.01,
                    "WRB": 0.019,
                    "JJ": 0.058,
                    "MD": 0.005,
                    "RB": 0.058,
                    "RP": 0.005,
                    "POS": 0.005,
                    "VBD": 0.01,
                    "WDT": 0.01,
                    "PRP$": 0.005
                },
                "syllableRate": 2.267,
                "topicScores": [
                    [
                        "K",
                        0.2244904967833912
                    ],
                    [
                        "Ooh",
                        0.3767158016605644
                    ],
                    [
                        "training",
                        0.38570815175858036
                    ],
                    [
                        "red",
                        0.45974183918991435
                    ],
                    [
                        "size",
                        0.5290409410354655
                    ],
                    [
                        "neighbor",
                        0.5295586446598517
                    ],
                    [
                        "near",
                        0.5295586446598518
                    ],
                    [
                        "black",
                        0.5525317313072441
                    ],
                    [
                        "big",
                        0.5553045516870312
                    ],
                    [
                        "thing",
                        0.5655813061309548
                    ],
                    [
                        "dot",
                        0.5718885346967869
                    ],
                    [
                        "audience",
                        0.5823840254480667
                    ],
                    [
                        "PROFESSOR",
                        0.5922372953992006
                    ],
                    [
                        "INAUDIBLE",
                        0.6369564395650386
                    ],
                    [
                        "Monday",
                        0.7186740335543638
                    ],
                    [
                        "set",
                        0.752693850296292
                    ],
                    [
                        "rebound--",
                        0.8177747777711394
                    ],
                    [
                        "efficiency",
                        0.8208076704528163
                    ],
                    [
                        "problem",
                        0.871035004781635
                    ],
                    [
                        "class",
                        0.8789356933617378
                    ],
                    [
                        "sense",
                        0.8940371033094889
                    ],
                    [
                        "part",
                        0.905290479824707
                    ],
                    [
                        "crucial",
                        0.9145657197294821
                    ],
                    [
                        "imbalance",
                        0.9168060305037482
                    ],
                    [
                        "picture",
                        0.9183123769239954
                    ],
                    [
                        "lot",
                        0.9236253453859514
                    ],
                    [
                        "prevalent",
                        0.9236253453859514
                    ],
                    [
                        "careful",
                        0.9255989029872402
                    ],
                    [
                        "testing",
                        0.9266527177810797
                    ],
                    [
                        "similar",
                        0.9329465307889596
                    ]
                ],
                "topTopicSimilarity": 0.23333333333333334,
                "sharedTopicScores": [
                    [
                        "K",
                        0.2244904967833912
                    ],
                    [
                        "training",
                        0.38570815175858036
                    ],
                    [
                        "neighbor",
                        0.5295586446598517
                    ],
                    [
                        "thing",
                        0.5655813061309548
                    ],
                    [
                        "PROFESSOR",
                        0.5922372953992006
                    ],
                    [
                        "set",
                        0.752693850296292
                    ],
                    [
                        "class",
                        0.8789356933617378
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-720": {
            "id": "eg8DJYwdMyg-720",
            "heat": 0.232,
            "start": 720.0,
            "text": " into training and testing multiple times. And we experiment with different K's, and we see which K's gives us the best result on the training data. And then that becomes our K. And that's a very common method. It's called cross-validation, and it's-- for almost all of machine learning, the algorithms have parameters in this case, it's just one parameter, K. And the way we typically choose the parameter values is by searching through the space using this cross-validation in the training data. Does that makes sense to everybody? Great question. And there was someone else had a question, but maybe it was the same. Do you still have a question? AUDIENCE: Well, just that you were using like K nearest and you get, like if my K is three and I get three different clusters for the K [INAUDIBLE] PROFESSOR: Three different clusters? AUDIENCE: [INAUDIBLE] PROFESSOR: Well, right. So if K is 3, and I had red, black, and purple and I get one of each, then what do I do? And then I'm kind of stuck. So you need to typically choose K in such a way that when you vote you get a winner. Nice. So if there's two, any odd number will do. If it's three, well then you need another number so that there's some-- so there's always a majority. Right? You want to make sure that there is a winner.",
            "metrics": {
                "relativeDCReadability": 0.9601797982319367,
                "lexicalDiversity": 0.4939759036144578,
                "posComposition": {
                    "IN": 0.1,
                    "NN": 0.116,
                    "CC": 0.06,
                    "VBG": 0.02,
                    "JJ": 0.044,
                    "NNS": 0.024,
                    "PRP": 0.088,
                    "VBP": 0.06,
                    "NNP": 0.096,
                    "POS": 0.008,
                    "WDT": 0.008,
                    "VBZ": 0.06,
                    "DT": 0.096,
                    "JJS": 0.008,
                    "RB": 0.076,
                    "PRP$": 0.008,
                    "VBN": 0.008,
                    ":": 0.008,
                    "CD": 0.028,
                    "TO": 0.012,
                    "EX": 0.02,
                    "VBD": 0.02,
                    "WP": 0.004,
                    "VB": 0.016,
                    "WRB": 0.004,
                    "MD": 0.004
                },
                "syllableRate": 2.842,
                "topicScores": [
                    [
                        "K",
                        0.22926214515759802
                    ],
                    [
                        "audience",
                        0.33121923414023435
                    ],
                    [
                        "INAUDIBLE",
                        0.3600403190097068
                    ],
                    [
                        "PROFESSOR",
                        0.3910346022474419
                    ],
                    [
                        "training",
                        0.41969633105525506
                    ],
                    [
                        "question",
                        0.4264893069584638
                    ],
                    [
                        "different",
                        0.4439196102700209
                    ],
                    [
                        "parameter",
                        0.4531329735427929
                    ],
                    [
                        "datum",
                        0.5053601865036694
                    ],
                    [
                        "right",
                        0.5389183723381236
                    ],
                    [
                        "validation",
                        0.547538437778665
                    ],
                    [
                        "winner",
                        0.5520379754404465
                    ],
                    [
                        "cross",
                        0.5537646205497907
                    ],
                    [
                        "cluster",
                        0.56088059912438
                    ],
                    [
                        "way",
                        0.5826199096692175
                    ],
                    [
                        "number",
                        0.5871612338224381
                    ],
                    [
                        "time",
                        0.7821967736501907
                    ],
                    [
                        "multiple",
                        0.815963474336049
                    ],
                    [
                        "method",
                        0.8894916142094104
                    ],
                    [
                        "nice",
                        0.8909835814645848
                    ],
                    [
                        "great",
                        0.8961825023806662
                    ],
                    [
                        "good",
                        0.8994043229218548
                    ],
                    [
                        "result",
                        0.8994043229218548
                    ],
                    [
                        "common",
                        0.9085684565775709
                    ],
                    [
                        "it's--",
                        0.9136148799708571
                    ],
                    [
                        "machine",
                        0.9136148799708571
                    ],
                    [
                        "learning",
                        0.9136148799708571
                    ],
                    [
                        "algorithm",
                        0.9136148799708571
                    ],
                    [
                        "case",
                        0.9136148799708571
                    ],
                    [
                        "stuck",
                        0.9202515882623917
                    ]
                ],
                "topTopicSimilarity": 0.26666666666666666,
                "sharedTopicScores": [
                    [
                        "K",
                        0.22926214515759802
                    ],
                    [
                        "PROFESSOR",
                        0.3910346022474419
                    ],
                    [
                        "training",
                        0.41969633105525506
                    ],
                    [
                        "different",
                        0.4439196102700209
                    ],
                    [
                        "datum",
                        0.5053601865036694
                    ],
                    [
                        "number",
                        0.5871612338224381
                    ],
                    [
                        "time",
                        0.7821967736501907
                    ],
                    [
                        "method",
                        0.8894916142094104
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-810": {
            "id": "eg8DJYwdMyg-810",
            "heat": 0.396,
            "start": 810.0,
            "text": " Also a good question. Let's see if I get this to you directly. I'm much better at throwing overhand, I guess. Wow. Finally got applause for something. All right, advantages and disadvantages KNN? The learning is really fast, right? I just remember everything. No math is required. Didn't have to show you any theory. Was obviously an idea. It's easy to explain the method to somebody, and the results. Why did I label it black? Because that's who it was closest to. The disadvantages is it's memory intensive. If I've got a million examples, I have to store them all. And the predictions can take a long time. If I have an example and I want to find its K nearest neighbors, I'm doing a lot of comparisons. Right? If I have a million tank training points I have to compare my example to all a million. So I have no real pre-processing overhead. But each time I need to do a classification, it takes a long time. Now there are better algorithms and brute force that give you approximate K nearest neighbors. But on the whole, it's still not fast. And we're not getting any information about what process",
            "metrics": {
                "relativeDCReadability": 1.008261552213186,
                "lexicalDiversity": 0.4857142857142857,
                "posComposition": {
                    "RB": 0.067,
                    "DT": 0.11,
                    "JJ": 0.062,
                    "NN": 0.124,
                    "NNP": 0.048,
                    "POS": 0.005,
                    "VB": 0.052,
                    "IN": 0.048,
                    "PRP": 0.119,
                    "VBP": 0.076,
                    "TO": 0.048,
                    "JJR": 0.01,
                    "VBG": 0.014,
                    "VBD": 0.019,
                    "NNS": 0.048,
                    "CC": 0.038,
                    "VBZ": 0.038,
                    "VBN": 0.01,
                    "WRB": 0.005,
                    "WP": 0.01,
                    "CD": 0.014,
                    "MD": 0.005,
                    "PRP$": 0.01,
                    "JJS": 0.01,
                    "PDT": 0.005,
                    "EX": 0.005,
                    "WDT": 0.005
                },
                "syllableRate": 2.542,
                "topicScores": [
                    [
                        "right",
                        0.41197604396437515
                    ],
                    [
                        "K",
                        0.4138239532510541
                    ],
                    [
                        "time",
                        0.4332171130931644
                    ],
                    [
                        "example",
                        0.4435833750401641
                    ],
                    [
                        "long",
                        0.5405123694502476
                    ],
                    [
                        "neighbor",
                        0.5471376791963656
                    ],
                    [
                        "near",
                        0.5498673951756666
                    ],
                    [
                        "disadvantage",
                        0.5565509370106393
                    ],
                    [
                        "fast",
                        0.5581446635904446
                    ],
                    [
                        "well",
                        0.5619836001989572
                    ],
                    [
                        "KNN",
                        0.5943752941685013
                    ],
                    [
                        "question",
                        0.7580502975816108
                    ],
                    [
                        "good",
                        0.7873094521666325
                    ],
                    [
                        "K near",
                        0.8419163654624083
                    ],
                    [
                        "overhand",
                        0.871309932813232
                    ],
                    [
                        "theory",
                        0.8967521051200289
                    ],
                    [
                        "idea",
                        0.899001122987227
                    ],
                    [
                        "applause",
                        0.8997336723849934
                    ],
                    [
                        "result",
                        0.9009397243983127
                    ],
                    [
                        "black",
                        0.902633034796199
                    ],
                    [
                        "learning",
                        0.9026546131950234
                    ],
                    [
                        "overhead",
                        0.9037907756923024
                    ],
                    [
                        "intensive",
                        0.9054623034176825
                    ],
                    [
                        "comparison",
                        0.9087360627148808
                    ],
                    [
                        "math",
                        0.908884919653913
                    ],
                    [
                        "process",
                        0.9138428736334552
                    ],
                    [
                        "close",
                        0.9176417074933626
                    ],
                    [
                        "processing",
                        0.9178958528023541
                    ],
                    [
                        "memory",
                        0.918804250936699
                    ],
                    [
                        "easy",
                        0.9207743208851384
                    ]
                ],
                "topTopicSimilarity": 0.2,
                "sharedTopicScores": [
                    [
                        "K",
                        0.4138239532510541
                    ],
                    [
                        "time",
                        0.4332171130931644
                    ],
                    [
                        "example",
                        0.4435833750401641
                    ],
                    [
                        "neighbor",
                        0.5471376791963656
                    ],
                    [
                        "KNN",
                        0.5943752941685013
                    ],
                    [
                        "K near",
                        0.8419163654624083
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-900": {
            "id": "eg8DJYwdMyg-900",
            "heat": 0.495,
            "start": 900.0,
            "text": " might have generated the data. We don't have a model of the data in the way we say when we did our linear regression for curve fitting, we had a model for the data that sort of described the pattern. We don't get that out of k nearest neighbors. I'm going to show you a different approach where we do get that. And I'm going to do it on a more interesting example than reptiles. I apologize to those of you who are reptologists. So you probably all heard of the Titanic. There was a movie about it, I'm told. It was one of the great sea disasters of all time, a so-called unsinkable ship-- they had advertised it as unsinkable-- hit an iceberg and went down. Of the 1,300 passengers, 812 died. The crew did way worse. So at least it looks as if the curve was actually pretty heroic. They had a higher death rate. So we're going to use machine learning to see if we can predict which passengers survived. There's an online database I'm using. It doesn't have all 1,200 passengers, but it has information about 1,046 of them. Some of them they couldn't get the information. Says what cabin class they were in first, second, or third, how old they were, and their gender.",
            "metrics": {
                "relativeDCReadability": 0.9079176873811454,
                "lexicalDiversity": 0.4458874458874459,
                "posComposition": {
                    "MD": 0.013,
                    "VB": 0.048,
                    "VBN": 0.013,
                    "DT": 0.113,
                    "NN": 0.134,
                    "PRP": 0.13,
                    "VBP": 0.048,
                    "RB": 0.035,
                    "IN": 0.117,
                    "NNS": 0.039,
                    "WRB": 0.013,
                    "VBD": 0.065,
                    "PRP$": 0.009,
                    "JJ": 0.056,
                    "WDT": 0.009,
                    "JJS": 0.009,
                    "VBG": 0.017,
                    "TO": 0.022,
                    "CC": 0.022,
                    "RBR": 0.004,
                    "WP": 0.009,
                    "NNP": 0.009,
                    "EX": 0.009,
                    "CD": 0.022,
                    ":": 0.009,
                    "VBZ": 0.026,
                    "JJR": 0.004
                },
                "syllableRate": 2.608,
                "topicScores": [
                    [
                        "datum",
                        0.3963886052055873
                    ],
                    [
                        "passenger",
                        0.4386127850408183
                    ],
                    [
                        "model",
                        0.5100694601090807
                    ],
                    [
                        "way",
                        0.552023140471757
                    ],
                    [
                        "curve",
                        0.5533216919921042
                    ],
                    [
                        "information",
                        0.5612627858177303
                    ],
                    [
                        "titanic",
                        0.6140172455985001
                    ],
                    [
                        "pattern",
                        0.8399142137558387
                    ],
                    [
                        "neighbor",
                        0.855387294123995
                    ],
                    [
                        "fitting",
                        0.8628935236999059
                    ],
                    [
                        "reptile",
                        0.8724882360509498
                    ],
                    [
                        "linear",
                        0.872656373523776
                    ],
                    [
                        "regression",
                        0.872656373523776
                    ],
                    [
                        "reptologist",
                        0.8778336808521655
                    ],
                    [
                        "k",
                        0.8853965740489717
                    ],
                    [
                        "bad",
                        0.8927814150595877
                    ],
                    [
                        "different",
                        0.8935844702308688
                    ],
                    [
                        "approach",
                        0.8935844702308688
                    ],
                    [
                        "heroic",
                        0.894597866317133
                    ],
                    [
                        "rate",
                        0.896202729810909
                    ],
                    [
                        "interesting",
                        0.8993663105899354
                    ],
                    [
                        "example",
                        0.8993663105899354
                    ],
                    [
                        "gender",
                        0.9021229006598757
                    ],
                    [
                        "time",
                        0.90511123218363
                    ],
                    [
                        "unsinkable",
                        0.90511123218363
                    ],
                    [
                        "crew",
                        0.9089942213423049
                    ],
                    [
                        "movie",
                        0.9098788885461451
                    ],
                    [
                        "second",
                        0.910036296650467
                    ],
                    [
                        "death",
                        0.9119492134091325
                    ],
                    [
                        "great",
                        0.9121738843157458
                    ]
                ],
                "topTopicSimilarity": 0.23333333333333334,
                "sharedTopicScores": [
                    [
                        "datum",
                        0.3963886052055873
                    ],
                    [
                        "model",
                        0.5100694601090807
                    ],
                    [
                        "neighbor",
                        0.855387294123995
                    ],
                    [
                        "regression",
                        0.872656373523776
                    ],
                    [
                        "different",
                        0.8935844702308688
                    ],
                    [
                        "example",
                        0.8993663105899354
                    ],
                    [
                        "time",
                        0.90511123218363
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-990": {
            "id": "eg8DJYwdMyg-990",
            "heat": 0.471,
            "start": 990.0,
            "text": " Also has their name and their home address and things, which I'm not using. We want to use these features to see if we can predict which passengers were going to survive the disaster. Well, the first question is something that Professor Grimson alluded to is, is it OK, just to look at accuracy? How are we going to evaluate our machine learning? And it's not. If we just predict died for everybody, well then we'll be 62% accurate for the passengers and 76% accurate for the crew members. Usually machine learning, if you're 76% you say that's not bad. Well, here I can get that just by predicting died. So whenever you have a class imbalance that much more of one than the other, accuracy isn't a particularly meaningful measure. I discovered this early on in my work and medical area. There are a lot of diseases that rarely occur, they occur in say 0.1% of the population. And I can build a great model for predicting it by just saying, no, you don't have it, which will be 0.999% accurate, but totally useless.",
            "metrics": {
                "relativeDCReadability": 1.0139349545509693,
                "lexicalDiversity": 0.4583333333333333,
                "posComposition": {
                    "RB": 0.104,
                    "VBZ": 0.036,
                    "PRP$": 0.021,
                    "NN": 0.115,
                    "CC": 0.036,
                    "NNS": 0.031,
                    "WDT": 0.031,
                    "PRP": 0.094,
                    "VBP": 0.062,
                    "VBG": 0.036,
                    "TO": 0.031,
                    "VB": 0.057,
                    "DT": 0.078,
                    "IN": 0.089,
                    "MD": 0.026,
                    "VBD": 0.021,
                    "NNP": 0.026,
                    "JJ": 0.057,
                    "VBN": 0.005,
                    "CD": 0.031,
                    "JJR": 0.005,
                    "EX": 0.005
                },
                "syllableRate": 2.308,
                "topicScores": [
                    [
                        "accurate",
                        0.43165573498947424
                    ],
                    [
                        "machine",
                        0.5356490977904332
                    ],
                    [
                        "learning",
                        0.5395754860745957
                    ],
                    [
                        "accuracy",
                        0.5516814244747421
                    ],
                    [
                        "passenger",
                        0.5611599058785599
                    ],
                    [
                        "ok",
                        0.6033349981905453
                    ],
                    [
                        "Professor",
                        0.618677036044296
                    ],
                    [
                        "Grimson",
                        0.618677036044296
                    ],
                    [
                        "Professor Grimson",
                        0.620118698619
                    ],
                    [
                        "disaster",
                        0.8431877349881828
                    ],
                    [
                        "thing",
                        0.8484758043712896
                    ],
                    [
                        "home",
                        0.8618606561122123
                    ],
                    [
                        "address",
                        0.8618606561122123
                    ],
                    [
                        "member",
                        0.8804421784232426
                    ],
                    [
                        "feature",
                        0.8834836130451221
                    ],
                    [
                        "bad",
                        0.8845681271529472
                    ],
                    [
                        "measure",
                        0.8907046781559255
                    ],
                    [
                        "area",
                        0.8930697176781698
                    ],
                    [
                        "population",
                        0.8951088848205732
                    ],
                    [
                        "question",
                        0.89527059290706
                    ],
                    [
                        "useless",
                        0.8968904590675009
                    ],
                    [
                        "crew",
                        0.9031031889011278
                    ],
                    [
                        "meaningful",
                        0.9116157993560359
                    ],
                    [
                        "medical",
                        0.9135722504845518
                    ],
                    [
                        "class",
                        0.9199494080634858
                    ],
                    [
                        "imbalance",
                        0.9199494080634858
                    ],
                    [
                        "work",
                        0.9217372253856144
                    ],
                    [
                        "lot",
                        0.9232766674326116
                    ],
                    [
                        "disease",
                        0.9232766674326116
                    ],
                    [
                        "great",
                        0.9246201022800233
                    ]
                ],
                "topTopicSimilarity": 0.1,
                "sharedTopicScores": [
                    [
                        "thing",
                        0.8484758043712896
                    ],
                    [
                        "feature",
                        0.8834836130451221
                    ],
                    [
                        "class",
                        0.9199494080634858
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-1080": {
            "id": "eg8DJYwdMyg-1080",
            "heat": 0.488,
            "start": 1080.0,
            "text": " Unfortunately, you do see people doing that sort of thing in the literature. You saw these in an earlier lecture, just to remind you, we're going to be looking at other metrics. Sensitivity, think of that as how good is it at identifying the positive cases. In this case, positive is going to be dead. How specific is it, and the positive predictive value. If we say somebody died, what's the probability is that they really did? And then there's the negative predictive value. If we say they didn't die, what's the probability they didn't die? So these are four very common metrics. There is something called an F score that combines them, but I'm not going to be showing you that today. I will mention that in the literature, people often use the word recall to mean sensitivity or sensitivity I mean recall, and specificity and precision are used pretty much interchangeably. So you might see various combinations of these words. Typically, people talk about recall n precision or sensitivity and specificity. Does that makes sense, why we want to look at the measures other than accuracy? We will look at accuracy, too, and how they all tell us",
            "metrics": {
                "relativeDCReadability": 0.9950920788358728,
                "lexicalDiversity": 0.47342995169082125,
                "posComposition": {
                    "RB": 0.063,
                    "PRP": 0.101,
                    "VBP": 0.058,
                    "VB": 0.058,
                    "NNS": 0.043,
                    "VBG": 0.034,
                    "IN": 0.106,
                    "NN": 0.14,
                    "DT": 0.082,
                    "VBD": 0.024,
                    "JJR": 0.005,
                    "TO": 0.029,
                    "JJ": 0.072,
                    "NNP": 0.019,
                    "WRB": 0.014,
                    "VBZ": 0.048,
                    "CC": 0.043,
                    "WP": 0.01,
                    "EX": 0.01,
                    "CD": 0.005,
                    "VBN": 0.01,
                    "WDT": 0.01,
                    "MD": 0.014
                },
                "syllableRate": 2.7,
                "topicScores": [
                    [
                        "sensitivity",
                        0.3866133377542335
                    ],
                    [
                        "positive",
                        0.4331933038523167
                    ],
                    [
                        "people",
                        0.44874093797993925
                    ],
                    [
                        "recall",
                        0.45779828060026295
                    ],
                    [
                        "value",
                        0.5218167708356327
                    ],
                    [
                        "metric",
                        0.5326492095805361
                    ],
                    [
                        "literature",
                        0.5345515886657749
                    ],
                    [
                        "predictive",
                        0.5383319193391057
                    ],
                    [
                        "case",
                        0.5437579408027252
                    ],
                    [
                        "specificity",
                        0.5559051796155444
                    ],
                    [
                        "probability",
                        0.5570363047128295
                    ],
                    [
                        "accuracy",
                        0.5672280966022897
                    ],
                    [
                        "word",
                        0.5690673153589456
                    ],
                    [
                        "precision",
                        0.5775955039835392
                    ],
                    [
                        "F",
                        0.6859287874722967
                    ],
                    [
                        "sort",
                        0.8695291231239027
                    ],
                    [
                        "thing",
                        0.8695291231239027
                    ],
                    [
                        "dead",
                        0.8793985813575368
                    ],
                    [
                        "early",
                        0.880190100463197
                    ],
                    [
                        "lecture",
                        0.880190100463197
                    ],
                    [
                        "good",
                        0.9012967923732015
                    ],
                    [
                        "today",
                        0.9023715888874742
                    ],
                    [
                        "common",
                        0.9175905093222034
                    ],
                    [
                        "negative",
                        0.920275096209744
                    ],
                    [
                        "sense",
                        0.924690373306783
                    ],
                    [
                        "score",
                        0.9263657734051355
                    ],
                    [
                        "combination",
                        0.9290912699412535
                    ],
                    [
                        "measure",
                        0.931210312402009
                    ],
                    [
                        "predictive value",
                        1.512736884373904
                    ],
                    [
                        "F score",
                        1.7428893807359893
                    ]
                ],
                "topTopicSimilarity": 0.1,
                "sharedTopicScores": [
                    [
                        "positive",
                        0.4331933038523167
                    ],
                    [
                        "probability",
                        0.5570363047128295
                    ],
                    [
                        "thing",
                        0.8695291231239027
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-1170": {
            "id": "eg8DJYwdMyg-1170",
            "heat": 0.35,
            "start": 1170.0,
            "text": " kind of different things, and how you might choose a different balance. For example, if I'm running a screening test, say for breast cancer, a mammogram, and trying to find the people who should get on for a more extensive examination, what do I want to emphasize here? Which of these is likely to be the most important? Or what would you care about most? Well, maybe I want sensitivity. Since I'm going to send this person on for future tests, I really don't want to miss somebody who has cancer, and so I might think sensitivity is more important than specificity in that particular case. On the other hand, if I'm deciding who is so sick I should do open heart surgery on them, maybe I want to be pretty specific. Because the risk of the surgery itself are very high. I don't want to do it on people who don't need it. So we end up having to choose a balance between these things, depending upon our application. The other thing I want to talk about before actually building",
            "metrics": {
                "relativeDCReadability": 0.9082311432989448,
                "lexicalDiversity": 0.44385026737967914,
                "posComposition": {
                    "NN": 0.123,
                    "IN": 0.123,
                    "JJ": 0.075,
                    "NNS": 0.027,
                    "CC": 0.021,
                    "WRB": 0.005,
                    "PRP": 0.096,
                    "MD": 0.027,
                    "VB": 0.102,
                    "DT": 0.08,
                    "VBP": 0.07,
                    "VBG": 0.037,
                    "TO": 0.048,
                    "WP": 0.032,
                    "RBR": 0.011,
                    "RB": 0.07,
                    "NNP": 0.011,
                    "VBZ": 0.021,
                    "RBS": 0.005,
                    "JJS": 0.005,
                    "RP": 0.005,
                    "PRP$": 0.005
                },
                "syllableRate": 2.258,
                "topicScores": [
                    [
                        "thing",
                        0.447066349875831
                    ],
                    [
                        "different",
                        0.486835113310177
                    ],
                    [
                        "balance",
                        0.5434737483672272
                    ],
                    [
                        "test",
                        0.5492513603449719
                    ],
                    [
                        "cancer",
                        0.5492513603449719
                    ],
                    [
                        "important",
                        0.5515828425892462
                    ],
                    [
                        "sensitivity",
                        0.5553162105129568
                    ],
                    [
                        "people",
                        0.5582566855162014
                    ],
                    [
                        "surgery",
                        0.5706699686863382
                    ],
                    [
                        "example",
                        0.8530555153757533
                    ],
                    [
                        "mammogram",
                        0.8530555153757533
                    ],
                    [
                        "screening",
                        0.8676133101632885
                    ],
                    [
                        "breast",
                        0.8676133101632885
                    ],
                    [
                        "extensive",
                        0.8676133101632885
                    ],
                    [
                        "examination",
                        0.8676133101632885
                    ],
                    [
                        "case",
                        0.8748102653241568
                    ],
                    [
                        "specific",
                        0.8791038839346705
                    ],
                    [
                        "high",
                        0.8825908688505666
                    ],
                    [
                        "application",
                        0.887956942434368
                    ],
                    [
                        "likely",
                        0.8922796506195475
                    ],
                    [
                        "future",
                        0.8997547772892022
                    ],
                    [
                        "particular",
                        0.8997547772892022
                    ],
                    [
                        "hand",
                        0.9032874565719191
                    ],
                    [
                        "person",
                        0.9096048511499497
                    ],
                    [
                        "specificity",
                        0.9096048511499497
                    ],
                    [
                        "sick",
                        0.9128240421230324
                    ],
                    [
                        "heart",
                        0.9128240421230324
                    ],
                    [
                        "risk",
                        0.9154320032219967
                    ],
                    [
                        "different balance",
                        1.982033172611867
                    ],
                    [
                        "different thing",
                        2.2250424239555295
                    ]
                ],
                "topTopicSimilarity": 0.13333333333333333,
                "sharedTopicScores": [
                    [
                        "thing",
                        0.447066349875831
                    ],
                    [
                        "different",
                        0.486835113310177
                    ],
                    [
                        "test",
                        0.5492513603449719
                    ],
                    [
                        "example",
                        0.8530555153757533
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-1260": {
            "id": "eg8DJYwdMyg-1260",
            "heat": 0.135,
            "start": 1260.0,
            "text": " a classifier is how we test our classifier, because this is very important. I'm going to talk about two different methods, leave one out class of testing and repeated random subsampling. For leave one out, it's typically used when you have a small number of examples, so you want as much training data as possible as you build your model. So you take all of your n examples, remove one of them, train on n minus 1, test on the 1. Then you put that 1 back and remove another 1. Train on n minus 1, test on 1. And you do this for each element of the data, and then you average your results. Repeated random subsampling is done when you have a larger set of data, and there you might say split your data 80/20. Take 80% of the data to train on, test it on 20. So this is very similar to what I talked about earlier, and answered the question about how to choose K. I haven't seen the future examples,",
            "metrics": {
                "relativeDCReadability": 1.0570432367990923,
                "lexicalDiversity": 0.4943820224719101,
                "posComposition": {
                    "DT": 0.079,
                    "NN": 0.101,
                    "VBZ": 0.028,
                    "WRB": 0.022,
                    "PRP": 0.09,
                    "VBP": 0.073,
                    "PRP$": 0.028,
                    "IN": 0.146,
                    "RB": 0.051,
                    "JJ": 0.056,
                    "VBG": 0.017,
                    "TO": 0.022,
                    "VB": 0.045,
                    "CD": 0.073,
                    "NNS": 0.056,
                    "CC": 0.039,
                    "VBN": 0.017,
                    "VBD": 0.017,
                    "JJR": 0.011,
                    "EX": 0.006,
                    "MD": 0.006,
                    "NNP": 0.011,
                    "WP": 0.006
                },
                "syllableRate": 2.017,
                "topicScores": [
                    [
                        "datum",
                        0.3678397603179846
                    ],
                    [
                        "train",
                        0.40966130256243316
                    ],
                    [
                        "example",
                        0.4330385872391945
                    ],
                    [
                        "classifier",
                        0.49122023949916893
                    ],
                    [
                        "random",
                        0.5245070948281741
                    ],
                    [
                        "subsampling",
                        0.5274479740252757
                    ],
                    [
                        "K.",
                        0.6852426934658283
                    ],
                    [
                        "important",
                        0.7443059191420763
                    ],
                    [
                        "model",
                        0.8418793174739592
                    ],
                    [
                        "different",
                        0.8472035140703491
                    ],
                    [
                        "method",
                        0.8472035140703491
                    ],
                    [
                        "testing",
                        0.8606822995053968
                    ],
                    [
                        "result",
                        0.8794001465392283
                    ],
                    [
                        "small",
                        0.8824645506909402
                    ],
                    [
                        "number",
                        0.8824645506909402
                    ],
                    [
                        "training",
                        0.8824645506909402
                    ],
                    [
                        "possible",
                        0.8824645506909402
                    ],
                    [
                        "data",
                        0.905691114975146
                    ],
                    [
                        "future",
                        0.9108179466937723
                    ],
                    [
                        "element",
                        0.9113687000742915
                    ],
                    [
                        "large",
                        0.9145309783683664
                    ],
                    [
                        "set",
                        0.9145309783683664
                    ],
                    [
                        "similar",
                        0.9192201175759191
                    ],
                    [
                        "question",
                        0.9192201175759191
                    ],
                    [
                        "random subsampling",
                        1.4375206353468544
                    ],
                    [
                        "different method",
                        2.5430059984469944
                    ],
                    [
                        "training datum",
                        3.060266429872072
                    ],
                    [
                        "small number",
                        3.519644973671763
                    ],
                    [
                        "future example",
                        3.735714764950534
                    ],
                    [
                        "large set",
                        5.111233384496924
                    ]
                ],
                "topTopicSimilarity": 0.26666666666666666,
                "sharedTopicScores": [
                    [
                        "datum",
                        0.3678397603179846
                    ],
                    [
                        "example",
                        0.4330385872391945
                    ],
                    [
                        "model",
                        0.8418793174739592
                    ],
                    [
                        "different",
                        0.8472035140703491
                    ],
                    [
                        "method",
                        0.8472035140703491
                    ],
                    [
                        "number",
                        0.8824645506909402
                    ],
                    [
                        "training",
                        0.8824645506909402
                    ],
                    [
                        "set",
                        0.9145309783683664
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-1350": {
            "id": "eg8DJYwdMyg-1350",
            "heat": 0.118,
            "start": 1350.0,
            "text": " but in order to believe in my model and say my parameter settings, I do this repeated random subsampling or leave one out, either one. There's the code for leave one out. Absolutely nothing interesting about it, so I'm not going to waste your time looking at it. Repeated random subsampling is a little more interesting. What I've done here is I first sample-- this one is just to splitted 80/20. It's not doing anything repeated, and I start by sampling 20% of the indices, not the samples. And I want to do that at random. I don't want to say get consecutive ones. So we do that, and then once I've got the indices, I just go through and assign each example, to either test or training, and then return the two sets. But if I just sort of sampled one, then I'd have to do a more complicated thing to subtract it from the other. This is just efficiency. And then here's the--",
            "metrics": {
                "relativeDCReadability": 0.940647921453571,
                "lexicalDiversity": 0.4342857142857143,
                "posComposition": {
                    "CC": 0.069,
                    "IN": 0.08,
                    "NN": 0.097,
                    "TO": 0.046,
                    "VB": 0.074,
                    "PRP$": 0.017,
                    "NNS": 0.034,
                    "PRP": 0.091,
                    "VBP": 0.057,
                    "DT": 0.091,
                    "VBD": 0.023,
                    "JJ": 0.04,
                    "CD": 0.046,
                    "EX": 0.006,
                    "VBZ": 0.04,
                    "RP": 0.006,
                    "RB": 0.109,
                    "VBG": 0.029,
                    "RBR": 0.011,
                    "WP": 0.006,
                    "VBN": 0.011,
                    ":": 0.011,
                    "MD": 0.006
                },
                "syllableRate": 1.983,
                "topicScores": [
                    [
                        "random",
                        0.42448983320428385
                    ],
                    [
                        "sample",
                        0.4508758018480021
                    ],
                    [
                        "subsampling",
                        0.5317750512130643
                    ],
                    [
                        "interesting",
                        0.5507472447284898
                    ],
                    [
                        "index",
                        0.5588447219342522
                    ],
                    [
                        "parameter",
                        0.8031940010783459
                    ],
                    [
                        "order",
                        0.8216588590486595
                    ],
                    [
                        "model",
                        0.8216588590486595
                    ],
                    [
                        "code",
                        0.873958827919249
                    ],
                    [
                        "set",
                        0.8938445256871146
                    ],
                    [
                        "time",
                        0.8939211398089756
                    ],
                    [
                        "efficiency",
                        0.8987552627826468
                    ],
                    [
                        "consecutive",
                        0.9140770774545064
                    ],
                    [
                        "example",
                        0.9166509754716207
                    ],
                    [
                        "training",
                        0.9166509754716207
                    ],
                    [
                        "test",
                        0.9254589034852461
                    ],
                    [
                        "complicated",
                        0.9273888058683654
                    ],
                    [
                        "thing",
                        0.9273888058683654
                    ],
                    [
                        "random subsampling",
                        1.5871939735262235
                    ],
                    [
                        "consecutive one",
                        4.142619826382649
                    ],
                    [
                        "complicated thing",
                        6.145408934260715
                    ]
                ],
                "topTopicSimilarity": 0.3333333333333333,
                "sharedTopicScores": [
                    [
                        "model",
                        0.8216588590486595
                    ],
                    [
                        "set",
                        0.8938445256871146
                    ],
                    [
                        "time",
                        0.8939211398089756
                    ],
                    [
                        "example",
                        0.9166509754716207
                    ],
                    [
                        "training",
                        0.9166509754716207
                    ],
                    [
                        "test",
                        0.9254589034852461
                    ],
                    [
                        "thing",
                        0.9273888058683654
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-1440": {
            "id": "eg8DJYwdMyg-1440",
            "heat": 0.207,
            "start": 1440.0,
            "text": " sorry about the yellow there-- the random splits. Obviously, I was searching for results when I did my screen capture. I'm just going to for range and number of splits, I'm going to split it 80/20. It takes a parameter method, and that's interesting, and we'll see the ramifications of that later. That's going to be the machine learning method. We're going to compare KNN to another method called logistic regression. I didn't want to have to do this code twice, so I made the method itself a parameter. We'll see that introduces a slight complication, but we'll get to it when we get to it. So I split it, I apply whatever that method is the training the test set, I get the results, true positive false positive, true negative false negatives. And then I call this thing get stats, but I'm dividing it by the number of splits, so that will give me the average number of true positives, the average number of false positives, etc. And then I'm just going to return the average. Get stats actually just prints a bunch of statistics for us. Any questions about the two methods, leave one out versus repeated random sampling?",
            "metrics": {
                "relativeDCReadability": 1.1195593687200713,
                "lexicalDiversity": 0.5258215962441315,
                "posComposition": {
                    "NN": 0.122,
                    "IN": 0.07,
                    "DT": 0.122,
                    "RB": 0.052,
                    ":": 0.005,
                    "JJ": 0.08,
                    "NNS": 0.061,
                    "PRP": 0.122,
                    "VBD": 0.023,
                    "VBG": 0.042,
                    "WRB": 0.009,
                    "PRP$": 0.005,
                    "VBP": 0.056,
                    "TO": 0.047,
                    "CC": 0.033,
                    "VB": 0.056,
                    "CD": 0.014,
                    "VBZ": 0.033,
                    "MD": 0.019,
                    "NNP": 0.014,
                    "VBN": 0.005,
                    "WDT": 0.005,
                    "FW": 0.005
                },
                "syllableRate": 2.575,
                "topicScores": [
                    [
                        "method",
                        0.32066198335260365
                    ],
                    [
                        "split",
                        0.3327529919232239
                    ],
                    [
                        "number",
                        0.3709424222154081
                    ],
                    [
                        "positive",
                        0.3784822495016049
                    ],
                    [
                        "average",
                        0.42402262911046035
                    ],
                    [
                        "false",
                        0.4379018815891539
                    ],
                    [
                        "true",
                        0.4391160155010599
                    ],
                    [
                        "parameter",
                        0.5425916101704716
                    ],
                    [
                        "stat",
                        0.5595064110483201
                    ],
                    [
                        "random",
                        0.5614082626212287
                    ],
                    [
                        "result",
                        0.562363466466783
                    ],
                    [
                        "negative",
                        0.5677908811269935
                    ],
                    [
                        "KNN",
                        0.6576974714500518
                    ],
                    [
                        "sorry",
                        0.8285893668473117
                    ],
                    [
                        "capture",
                        0.8545413183697176
                    ],
                    [
                        "yellow",
                        0.8680657782917442
                    ],
                    [
                        "there--",
                        0.8680657782917442
                    ],
                    [
                        "screen",
                        0.8788296652210381
                    ],
                    [
                        "regression",
                        0.8894520875685928
                    ],
                    [
                        "interesting",
                        0.8988608048652641
                    ],
                    [
                        "range",
                        0.9001488342345381
                    ],
                    [
                        "learning",
                        0.9043866422721681
                    ],
                    [
                        "sampling",
                        0.9062607295763624
                    ],
                    [
                        "ramification",
                        0.907392988213224
                    ],
                    [
                        "logistic",
                        0.9085350517025229
                    ],
                    [
                        "code",
                        0.9117886461638391
                    ],
                    [
                        "machine",
                        0.912498041520384
                    ],
                    [
                        "slight",
                        0.9144246783918554
                    ],
                    [
                        "complication",
                        0.9144246783918554
                    ],
                    [
                        "test",
                        0.9166145214414895
                    ]
                ],
                "topTopicSimilarity": 0.23333333333333334,
                "sharedTopicScores": [
                    [
                        "method",
                        0.32066198335260365
                    ],
                    [
                        "number",
                        0.3709424222154081
                    ],
                    [
                        "positive",
                        0.3784822495016049
                    ],
                    [
                        "KNN",
                        0.6576974714500518
                    ],
                    [
                        "regression",
                        0.8894520875685928
                    ],
                    [
                        "logistic",
                        0.9085350517025229
                    ],
                    [
                        "test",
                        0.9166145214414895
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-1530": {
            "id": "eg8DJYwdMyg-1530",
            "heat": 0.212,
            "start": 1530.0,
            "text": " Let's try it for KNN on the Titanic. So I'm not going to show you the code for K nearest classify. It's in the code we uploaded. It takes four arguments the training set, the test set, the label that we're trying to classify. Are we looking for the people who died? Or the people who didn't die? Are we looking for reptiles or not reptiles? Or if case there were six labels, which one are we trying to detect? And K as in how many nearest neighbors? And then it returns the true positives, the false positives, the true negatives, and the false negatives. Then you'll recall we'd already looked at lambda in a different context. The issue here is K nearest classify takes four arguments, yet if we go back here, for example, to random splits, what we're seeing is I'm calling the method with only two arguments. Because after all, if I'm not doing K nearest neighbors, maybe I don't need to pass in K. I'm sure I don't.",
            "metrics": {
                "relativeDCReadability": 1.049768768886475,
                "lexicalDiversity": 0.5081081081081081,
                "posComposition": {
                    "VB": 0.059,
                    "POS": 0.005,
                    "PRP": 0.108,
                    "IN": 0.103,
                    "NNP": 0.054,
                    "DT": 0.086,
                    "VBP": 0.054,
                    "RB": 0.081,
                    "VBG": 0.043,
                    "TO": 0.027,
                    "NN": 0.07,
                    "JJS": 0.022,
                    "VBZ": 0.043,
                    "VBD": 0.032,
                    "CD": 0.027,
                    "NNS": 0.07,
                    "WP": 0.016,
                    "CC": 0.032,
                    "EX": 0.005,
                    "WDT": 0.005,
                    "WRB": 0.005,
                    "JJ": 0.038,
                    "MD": 0.011
                },
                "syllableRate": 2.075,
                "topicScores": [
                    [
                        "K",
                        0.2783424467614739
                    ],
                    [
                        "near",
                        0.3668570158047465
                    ],
                    [
                        "titanic",
                        0.3896357060970699
                    ],
                    [
                        "classify",
                        0.4200931190177726
                    ],
                    [
                        "KNN",
                        0.4367151838230132
                    ],
                    [
                        "argument",
                        0.4375669402760195
                    ],
                    [
                        "set",
                        0.5284855444661897
                    ],
                    [
                        "code",
                        0.5314233798140355
                    ],
                    [
                        "people",
                        0.5466157538994333
                    ],
                    [
                        "positive",
                        0.5514195702752379
                    ],
                    [
                        "neighbor",
                        0.5515320444943155
                    ],
                    [
                        "label",
                        0.5546168549648376
                    ],
                    [
                        "true",
                        0.5567943460280778
                    ],
                    [
                        "false",
                        0.5567943460280778
                    ],
                    [
                        "negative",
                        0.5578065825635105
                    ],
                    [
                        "reptile",
                        0.5651355330544723
                    ],
                    [
                        "K near",
                        0.6123987470219685
                    ],
                    [
                        "test",
                        0.87605307280543
                    ],
                    [
                        "training",
                        0.8873253898504898
                    ],
                    [
                        "context",
                        0.8967569014298016
                    ],
                    [
                        "example",
                        0.9086739454728182
                    ],
                    [
                        "random",
                        0.9086739454728182
                    ],
                    [
                        "different",
                        0.9156106255877019
                    ],
                    [
                        "case",
                        0.9168782058033017
                    ],
                    [
                        "issue",
                        0.9172597611336285
                    ],
                    [
                        "split",
                        0.9172597611336285
                    ],
                    [
                        "lambda",
                        0.9232067373923232
                    ],
                    [
                        "method",
                        0.9247196346706935
                    ],
                    [
                        "sure",
                        0.9272049078676479
                    ],
                    [
                        "near classify",
                        1.588182813134882
                    ]
                ],
                "topTopicSimilarity": 0.4,
                "sharedTopicScores": [
                    [
                        "K",
                        0.2783424467614739
                    ],
                    [
                        "KNN",
                        0.4367151838230132
                    ],
                    [
                        "set",
                        0.5284855444661897
                    ],
                    [
                        "positive",
                        0.5514195702752379
                    ],
                    [
                        "neighbor",
                        0.5515320444943155
                    ],
                    [
                        "label",
                        0.5546168549648376
                    ],
                    [
                        "K near",
                        0.6123987470219685
                    ],
                    [
                        "test",
                        0.87605307280543
                    ],
                    [
                        "training",
                        0.8873253898504898
                    ],
                    [
                        "example",
                        0.9086739454728182
                    ],
                    [
                        "different",
                        0.9156106255877019
                    ],
                    [
                        "method",
                        0.9247196346706935
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-1620": {
            "id": "eg8DJYwdMyg-1620",
            "heat": 0.168,
            "start": 1620.0,
            "text": " Different methods will take different numbers of parameters, and yet I want to use the same function here method. So the trick I use to get around that-- and this is a very common programming trick-- in math. It's called currying, after the mathematician Curry, not the Indian dish. I'm creating a function a new function called KNN. This will be a function of two arguments, the training set and the test set, and it will be K nearest classifier with training set and test set as variables, and two constants, survived-- so I'm going to predict who survived-- and 3, the K. I've been able to turn a function of four arguments, K nearest classify, into a function of two arguments KNN by using lambda abstraction. This is something that people do fairly frequently, because it lets you build much more general programs when you don't have to worry about the number of arguments. So it's a good trick to keeping your bag of tricks. Again, it's a trick we've used before. Then I've just chosen 10 for the number of splits, and we'll try it, and we'll try it for both methods of testing.",
            "metrics": {
                "relativeDCReadability": 1.0631393077542133,
                "lexicalDiversity": 0.5260663507109005,
                "posComposition": {
                    "NNP": 0.028,
                    "NNS": 0.066,
                    "MD": 0.024,
                    "VB": 0.057,
                    "JJ": 0.047,
                    "IN": 0.1,
                    "CC": 0.043,
                    "RB": 0.052,
                    "PRP": 0.085,
                    "VBP": 0.047,
                    "TO": 0.028,
                    "DT": 0.104,
                    "NN": 0.133,
                    "VBZ": 0.033,
                    "RP": 0.005,
                    ":": 0.019,
                    "VBN": 0.033,
                    "VBG": 0.024,
                    "CD": 0.028,
                    "JJS": 0.009,
                    "VBD": 0.009,
                    "WP": 0.005,
                    "WDT": 0.005,
                    "RBR": 0.005,
                    "WRB": 0.005,
                    "PRP$": 0.005
                },
                "syllableRate": 2.442,
                "topicScores": [
                    [
                        "function",
                        0.30442875917640944
                    ],
                    [
                        "different",
                        0.3372901539670905
                    ],
                    [
                        "argument",
                        0.35768045289274986
                    ],
                    [
                        "set",
                        0.3675042015825202
                    ],
                    [
                        "KNN",
                        0.37404070760840247
                    ],
                    [
                        "trick",
                        0.37777463670665934
                    ],
                    [
                        "number",
                        0.4215247194954707
                    ],
                    [
                        "method",
                        0.42620928097911454
                    ],
                    [
                        "test",
                        0.5389207061161
                    ],
                    [
                        "training",
                        0.5401095896180439
                    ],
                    [
                        "near",
                        0.5424229396823596
                    ],
                    [
                        "survived--",
                        0.5582380017515411
                    ],
                    [
                        "Curry",
                        0.5652152872126535
                    ],
                    [
                        "indian",
                        0.5652152872126535
                    ],
                    [
                        "K.",
                        0.6143399929129636
                    ],
                    [
                        "K near",
                        0.6844928330649095
                    ],
                    [
                        "parameter",
                        0.7703943560641302
                    ],
                    [
                        "math",
                        0.801689217074293
                    ],
                    [
                        "different number",
                        0.8204580295179621
                    ],
                    [
                        "dish",
                        0.8308826533160543
                    ],
                    [
                        "different method",
                        0.8372098118421479
                    ],
                    [
                        "that--",
                        0.8483764256854605
                    ],
                    [
                        "common",
                        0.8483764256854605
                    ],
                    [
                        "programming",
                        0.8483764256854605
                    ],
                    [
                        "abstraction",
                        0.8575553689021379
                    ],
                    [
                        "currying",
                        0.8598864295540926
                    ],
                    [
                        "mathematician",
                        0.8598864295540926
                    ],
                    [
                        "testing",
                        0.8786171961039797
                    ],
                    [
                        "variable",
                        0.8826309217987747
                    ],
                    [
                        "constant",
                        0.8826309217987747
                    ]
                ],
                "topTopicSimilarity": 0.26666666666666666,
                "sharedTopicScores": [
                    [
                        "different",
                        0.3372901539670905
                    ],
                    [
                        "set",
                        0.3675042015825202
                    ],
                    [
                        "KNN",
                        0.37404070760840247
                    ],
                    [
                        "number",
                        0.4215247194954707
                    ],
                    [
                        "method",
                        0.42620928097911454
                    ],
                    [
                        "test",
                        0.5389207061161
                    ],
                    [
                        "training",
                        0.5401095896180439
                    ],
                    [
                        "K near",
                        0.6844928330649095
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-1710": {
            "id": "eg8DJYwdMyg-1710",
            "heat": 0.139,
            "start": 1710.0,
            "text": " Any questions before I run this code? So here it is. We'll run it. Well, I should learn how to spell finished, shouldn't I? But that's OK. Here we have the results, and they're-- well, what can we say about them? They're not much different to start with, so it doesn't appear that our testing methodology had much of a difference on how well the KNN worked, and that's actually kind of comforting. The accurate-- none of the evaluation criteria are radically different, so that's kind of good. We hoped that was true. The other thing to notice is that we're actually doing considerably better than just always predicting, say, didn't survive. We're doing better than a random prediction. Let's go back now to the Power Point.",
            "metrics": {
                "relativeDCReadability": 0.8724882081588378,
                "lexicalDiversity": 0.475177304964539,
                "posComposition": {
                    "DT": 0.099,
                    "NNS": 0.028,
                    "IN": 0.092,
                    "PRP": 0.106,
                    "VBP": 0.05,
                    "NN": 0.078,
                    "RB": 0.135,
                    "VBZ": 0.043,
                    "MD": 0.028,
                    "VB": 0.064,
                    "NNP": 0.035,
                    "WRB": 0.014,
                    "TO": 0.028,
                    "CC": 0.021,
                    "JJR": 0.014,
                    ":": 0.014,
                    "WP": 0.007,
                    "JJ": 0.05,
                    "PRP$": 0.007,
                    "VBG": 0.035,
                    "VBD": 0.035,
                    "RBR": 0.007,
                    "POS": 0.007
                },
                "syllableRate": 1.65,
                "topicScores": [
                    [
                        "different",
                        0.5719431272330433
                    ],
                    [
                        "ok",
                        0.5987663034459938
                    ],
                    [
                        "Point",
                        0.6590296379963624
                    ],
                    [
                        "KNN",
                        0.6650113703525974
                    ],
                    [
                        "Power",
                        0.6970112690071176
                    ],
                    [
                        "code",
                        0.7439472613085972
                    ],
                    [
                        "question",
                        0.794585123683656
                    ],
                    [
                        "Power Point",
                        0.8496291603444391
                    ],
                    [
                        "good",
                        0.8833633591174299
                    ],
                    [
                        "true",
                        0.886743316444289
                    ],
                    [
                        "they're--",
                        0.8893541533665739
                    ],
                    [
                        "prediction",
                        0.8919428418813776
                    ],
                    [
                        "result",
                        0.9022207416171857
                    ],
                    [
                        "accurate--",
                        0.9097736927127884
                    ],
                    [
                        "random",
                        0.9165939260990259
                    ],
                    [
                        "testing",
                        0.9168392746223422
                    ],
                    [
                        "methodology",
                        0.9168392746223422
                    ],
                    [
                        "evaluation",
                        0.9198235392770441
                    ],
                    [
                        "criterion",
                        0.9198235392770441
                    ],
                    [
                        "thing",
                        0.9242463617076316
                    ],
                    [
                        "random prediction",
                        4.480935400014025
                    ],
                    [
                        "testing methodology",
                        5.273299642205862
                    ],
                    [
                        "evaluation criterion",
                        5.496684950557391
                    ]
                ],
                "topTopicSimilarity": 0.13043478260869565,
                "sharedTopicScores": [
                    [
                        "different",
                        0.5719431272330433
                    ],
                    [
                        "KNN",
                        0.6650113703525974
                    ],
                    [
                        "thing",
                        0.9242463617076316
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-1800": {
            "id": "eg8DJYwdMyg-1800",
            "heat": 0.261,
            "start": 1800.0,
            "text": " Here are the results. We don't need to study them anymore. Better than 62% accuracy, but not much difference between the experiments. So that's one method. Now let's look at a different method, and this is probably the most common method used in machine learning. It's called logistic regression. It's, in some ways, if you look at it, similar to a linear regression, but different in some important ways. Linear regression, you will I'm sure recall, is designed to predict a real number. Now what we want here is a probability, so the probability of some event. We know that the dependent variable can only take on a finite set of values, so we want to predict survived or didn't survive. It's no good to say we predict this person half survived, you know survived, but is brain dead or something. I don't know. That's not what we're trying to do. The problem with just using regular linear regression",
            "metrics": {
                "relativeDCReadability": 0.990874787999099,
                "lexicalDiversity": 0.5,
                "posComposition": {
                    "RB": 0.076,
                    "VBP": 0.076,
                    "DT": 0.112,
                    "NNS": 0.029,
                    "PRP": 0.094,
                    "VB": 0.053,
                    "TO": 0.035,
                    "NNP": 0.006,
                    "IN": 0.094,
                    "CD": 0.012,
                    "NN": 0.135,
                    "CC": 0.035,
                    "JJ": 0.094,
                    "VBZ": 0.053,
                    "POS": 0.006,
                    "RBS": 0.006,
                    "VBN": 0.029,
                    "VBG": 0.018,
                    "MD": 0.012,
                    "WP": 0.012,
                    "VBD": 0.012
                },
                "syllableRate": 2.083,
                "topicScores": [
                    [
                        "regression",
                        0.3766711032923901
                    ],
                    [
                        "method",
                        0.44595956670139925
                    ],
                    [
                        "way",
                        0.5582669386054541
                    ],
                    [
                        "linear",
                        0.5603617910874354
                    ],
                    [
                        "different",
                        0.5631320005224414
                    ],
                    [
                        "probability",
                        0.5792090666458473
                    ],
                    [
                        "result",
                        0.8284706806593153
                    ],
                    [
                        "experiment",
                        0.8687261801452747
                    ],
                    [
                        "accuracy",
                        0.8819463299729541
                    ],
                    [
                        "learning",
                        0.8844628088597448
                    ],
                    [
                        "number",
                        0.8963528416028977
                    ],
                    [
                        "event",
                        0.8989540347542719
                    ],
                    [
                        "machine",
                        0.9064427272904999
                    ],
                    [
                        "logistic",
                        0.9105107558136536
                    ],
                    [
                        "similar",
                        0.9137007461438819
                    ],
                    [
                        "important",
                        0.9137007461438819
                    ],
                    [
                        "common",
                        0.9152187346131948
                    ],
                    [
                        "sure",
                        0.9162848850409732
                    ],
                    [
                        "recall",
                        0.9162848850409732
                    ],
                    [
                        "real",
                        0.9162848850409732
                    ],
                    [
                        "value",
                        0.9202501537152036
                    ],
                    [
                        "half",
                        0.9218163655886119
                    ],
                    [
                        "problem",
                        0.9254646774904801
                    ],
                    [
                        "dependent",
                        0.927834090461485
                    ],
                    [
                        "variable",
                        0.927834090461485
                    ],
                    [
                        "finite",
                        0.927834090461485
                    ],
                    [
                        "set",
                        0.927834090461485
                    ],
                    [
                        "good",
                        0.9292628096884371
                    ],
                    [
                        "person",
                        0.9292628096884371
                    ],
                    [
                        "brain",
                        0.9292628096884371
                    ]
                ],
                "topTopicSimilarity": 0.23333333333333334,
                "sharedTopicScores": [
                    [
                        "regression",
                        0.3766711032923901
                    ],
                    [
                        "method",
                        0.44595956670139925
                    ],
                    [
                        "different",
                        0.5631320005224414
                    ],
                    [
                        "probability",
                        0.5792090666458473
                    ],
                    [
                        "number",
                        0.8963528416028977
                    ],
                    [
                        "logistic",
                        0.9105107558136536
                    ],
                    [
                        "set",
                        0.927834090461485
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-1890": {
            "id": "eg8DJYwdMyg-1890",
            "heat": 0.275,
            "start": 1890.0,
            "text": " is a lot of time you get nonsense predictions. Now you can claim, OK 0.5 is there, and it means has a half probability of dying, not that half died. But in fact, if you look at what goes on, you could get more than one or less than 0 out of linear regression, and that's nonsense when we're talking about probabilities. So we need a different method, and that's logistic regression. What logistic regression does is it finds what are called the weights for each feature. You may recall I complained when Professor [? Grimson ?] used the word weights to mean something somewhat different. We take each feature, for example the gender, the cabin class, the age, and compute for that weight that we're going to use in making predictions. So think of the weights as corresponding to the coefficients we get when we do a linear regression. So we have now a coefficient associated with each variable. We're going to take those coefficients, add them up, multiply them by something, and make a prediction. A positive weight implies--",
            "metrics": {
                "relativeDCReadability": 1.0802707272483036,
                "lexicalDiversity": 0.4864864864864865,
                "posComposition": {
                    "VBZ": 0.054,
                    "DT": 0.108,
                    "NN": 0.146,
                    "IN": 0.124,
                    "PRP": 0.097,
                    "VBP": 0.07,
                    "JJ": 0.059,
                    "NNS": 0.049,
                    "RB": 0.032,
                    "MD": 0.016,
                    "VB": 0.043,
                    "CD": 0.016,
                    "CC": 0.038,
                    "VBG": 0.027,
                    "VBD": 0.016,
                    "WP": 0.016,
                    "JJR": 0.011,
                    "WRB": 0.016,
                    "VBN": 0.011,
                    "NNP": 0.016,
                    "TO": 0.022,
                    "RP": 0.005,
                    ":": 0.005
                },
                "syllableRate": 2.233,
                "topicScores": [
                    [
                        "weight",
                        0.3449166330493233
                    ],
                    [
                        "regression",
                        0.3599321569222473
                    ],
                    [
                        "prediction",
                        0.3938025317361424
                    ],
                    [
                        "coefficient",
                        0.44850206554296623
                    ],
                    [
                        "nonsense",
                        0.5211080708254896
                    ],
                    [
                        "probability",
                        0.5237653312266708
                    ],
                    [
                        "logistic",
                        0.5327634280583388
                    ],
                    [
                        "half",
                        0.5336743436534772
                    ],
                    [
                        "feature",
                        0.5347853701943255
                    ],
                    [
                        "linear",
                        0.5361513827587263
                    ],
                    [
                        "different",
                        0.5405512505146141
                    ],
                    [
                        "Grimson",
                        0.5426143666240184
                    ],
                    [
                        "Professor",
                        0.6011900360723584
                    ],
                    [
                        "lot",
                        0.8014150405155945
                    ],
                    [
                        "time",
                        0.8014150405155945
                    ],
                    [
                        "fact",
                        0.8694816140653457
                    ],
                    [
                        "method",
                        0.8824966682901557
                    ],
                    [
                        "variable",
                        0.8870980881679743
                    ],
                    [
                        "cabin",
                        0.8911684772632027
                    ],
                    [
                        "age",
                        0.8911684772632027
                    ],
                    [
                        "implies--",
                        0.8922833048041853
                    ],
                    [
                        "example",
                        0.9012211279671692
                    ],
                    [
                        "gender",
                        0.9012211279671692
                    ],
                    [
                        "class",
                        0.9012211279671692
                    ],
                    [
                        "word",
                        0.9058956876470158
                    ],
                    [
                        "positive",
                        0.9118736911537434
                    ],
                    [
                        "logistic regression",
                        1.5129341243143548
                    ],
                    [
                        "linear regression",
                        1.546132206021956
                    ],
                    [
                        "nonsense prediction",
                        1.861328304030971
                    ],
                    [
                        "half probability",
                        2.357780267766038
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "weight",
                        0.3449166330493233
                    ],
                    [
                        "regression",
                        0.3599321569222473
                    ],
                    [
                        "probability",
                        0.5237653312266708
                    ],
                    [
                        "logistic",
                        0.5327634280583388
                    ],
                    [
                        "feature",
                        0.5347853701943255
                    ],
                    [
                        "different",
                        0.5405512505146141
                    ],
                    [
                        "time",
                        0.8014150405155945
                    ],
                    [
                        "method",
                        0.8824966682901557
                    ],
                    [
                        "example",
                        0.9012211279671692
                    ],
                    [
                        "class",
                        0.9012211279671692
                    ],
                    [
                        "positive",
                        0.9118736911537434
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-1980": {
            "id": "eg8DJYwdMyg-1980",
            "heat": 0.243,
            "start": 1980.0,
            "text": " and I'll come back to this later-- it almost implies that the variable is positively correlated with the outcome. So we would, for example, say the have scales is positively correlated with being a reptile. A negative weight implies that the variable is negatively correlated with the outcome, so number of legs might have a negative weight. The more legs an animal has, the less likely it is to be a reptile. It's not absolute, it's just a correlation. The absolute magnitude is related to the strength of the correlation, so if it's being positive it means it's a really strong indicator. If it's big negative, it's a really strong negative indicator. And then we use an optimization process to compute these weights from the training data. It's a little bit complex. It's key is the way it uses the log function, hence the name logistic, but I'm not going to make you look at it. But I will show you how to use it. You start by importing something called sklearn.linear_model.",
            "metrics": {
                "relativeDCReadability": 1.066400317436903,
                "lexicalDiversity": 0.4918032786885246,
                "posComposition": {
                    "CC": 0.022,
                    "PRP": 0.12,
                    "MD": 0.022,
                    "VB": 0.049,
                    "RB": 0.071,
                    "TO": 0.033,
                    "DT": 0.137,
                    ":": 0.005,
                    "VBZ": 0.104,
                    "IN": 0.082,
                    "NN": 0.153,
                    "VBN": 0.027,
                    "VBP": 0.022,
                    "JJ": 0.087,
                    "NNS": 0.022,
                    "VBG": 0.022,
                    "NNP": 0.005,
                    "JJR": 0.005,
                    "RBR": 0.005,
                    "WRB": 0.005
                },
                "syllableRate": 2.308,
                "topicScores": [
                    [
                        "negative",
                        0.35139025399968166
                    ],
                    [
                        "weight",
                        0.4077776620693897
                    ],
                    [
                        "reptile",
                        0.4423609302233426
                    ],
                    [
                        "outcome",
                        0.4517469621674292
                    ],
                    [
                        "variable",
                        0.46688758397282426
                    ],
                    [
                        "indicator",
                        0.4938877797279161
                    ],
                    [
                        "strong",
                        0.5099495382820077
                    ],
                    [
                        "correlation",
                        0.5242133975676995
                    ],
                    [
                        "leg",
                        0.5277437625821457
                    ],
                    [
                        "absolute",
                        0.5305082968510708
                    ],
                    [
                        "later--",
                        0.7701335274906316
                    ],
                    [
                        "example",
                        0.8090486187876322
                    ],
                    [
                        "scale",
                        0.8345001893924147
                    ],
                    [
                        "number",
                        0.8491248835587011
                    ],
                    [
                        "animal",
                        0.863852015652411
                    ],
                    [
                        "datum",
                        0.8699015960865965
                    ],
                    [
                        "likely",
                        0.8735566158357413
                    ],
                    [
                        "complex",
                        0.873615842902301
                    ],
                    [
                        "positive",
                        0.8753753804998089
                    ],
                    [
                        "sklearn.linear_model",
                        0.8816023795230046
                    ],
                    [
                        "big",
                        0.8851609238448305
                    ],
                    [
                        "magnitude",
                        0.8887883183343704
                    ],
                    [
                        "strength",
                        0.8887883183343704
                    ],
                    [
                        "training",
                        0.889144531873296
                    ],
                    [
                        "bit",
                        0.8923773699936708
                    ],
                    [
                        "log",
                        0.895066654157825
                    ],
                    [
                        "function",
                        0.895066654157825
                    ],
                    [
                        "logistic",
                        0.895066654157825
                    ],
                    [
                        "optimization",
                        0.8972607019985249
                    ],
                    [
                        "process",
                        0.8972607019985249
                    ]
                ],
                "topTopicSimilarity": 0.23333333333333334,
                "sharedTopicScores": [
                    [
                        "weight",
                        0.4077776620693897
                    ],
                    [
                        "example",
                        0.8090486187876322
                    ],
                    [
                        "number",
                        0.8491248835587011
                    ],
                    [
                        "datum",
                        0.8699015960865965
                    ],
                    [
                        "positive",
                        0.8753753804998089
                    ],
                    [
                        "training",
                        0.889144531873296
                    ],
                    [
                        "logistic",
                        0.895066654157825
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-2070": {
            "id": "eg8DJYwdMyg-2070",
            "heat": 0.534,
            "start": 2070.0,
            "text": " Sklearn is a Python library, and in that is a class called logistic regression. It's the name of a class, and here are three methods of that class. Fit, which takes a sequence of feature vectors and a sequence of labels and returns an object of type logistic regression. So this is the place where the optimization is done. Now all the examples I'm going to show you, these two sequences will be-- well all right. So think of this as the sequence of feature vectors, one per passenger, and the labels associated with those. So this and this have to be the same length. That produces an object of this type, and then I can ask for the coefficients, which will return the weight of each variable, each feature. And then I can make a prediction, given a feature vector returned the probabilities of different labels. Let's look at it as an example.",
            "metrics": {
                "relativeDCReadability": 1.0573585064325455,
                "lexicalDiversity": 0.43670886075949367,
                "posComposition": {
                    "NNP": 0.038,
                    "VBZ": 0.044,
                    "DT": 0.203,
                    "NN": 0.184,
                    "CC": 0.051,
                    "IN": 0.114,
                    "VBN": 0.025,
                    "JJ": 0.032,
                    "PRP": 0.038,
                    "RB": 0.032,
                    "VBP": 0.019,
                    "CD": 0.019,
                    "NNS": 0.07,
                    "WDT": 0.019,
                    "WRB": 0.006,
                    "PDT": 0.006,
                    "VBG": 0.006,
                    "TO": 0.013,
                    "VB": 0.038,
                    "MD": 0.025,
                    ":": 0.006,
                    "VBD": 0.006,
                    "POS": 0.006
                },
                "syllableRate": 1.85,
                "topicScores": [
                    [
                        "feature",
                        0.3710822325349928
                    ],
                    [
                        "sequence",
                        0.38474529238763305
                    ],
                    [
                        "Sklearn",
                        0.40449224427290165
                    ],
                    [
                        "class",
                        0.41026699617971163
                    ],
                    [
                        "vector",
                        0.441674293552498
                    ],
                    [
                        "Python",
                        0.44651016141983657
                    ],
                    [
                        "label",
                        0.44989283529259416
                    ],
                    [
                        "regression",
                        0.4722595448321592
                    ],
                    [
                        "logistic",
                        0.5179942309283894
                    ],
                    [
                        "object",
                        0.5597779232165406
                    ],
                    [
                        "type",
                        0.5629920934519621
                    ],
                    [
                        "Python library",
                        0.565387035574324
                    ],
                    [
                        "example",
                        0.5715400453560368
                    ],
                    [
                        "Fit",
                        0.832070669581239
                    ],
                    [
                        "method",
                        0.8787587623933084
                    ],
                    [
                        "length",
                        0.8884438489355717
                    ],
                    [
                        "place",
                        0.9085155943793537
                    ],
                    [
                        "optimization",
                        0.9085155943793537
                    ],
                    [
                        "passenger",
                        0.9098833826437662
                    ],
                    [
                        "coefficient",
                        0.9168989519134232
                    ],
                    [
                        "variable",
                        0.9168989519134232
                    ],
                    [
                        "prediction",
                        0.9193957722525754
                    ],
                    [
                        "different",
                        0.9193957722525754
                    ],
                    [
                        "weight",
                        0.9262195151417912
                    ],
                    [
                        "probability",
                        0.9284581441386188
                    ],
                    [
                        "logistic regression",
                        1.0058540509345817
                    ],
                    [
                        "feature vector",
                        1.5930690738578586
                    ],
                    [
                        "type logistic",
                        2.739675377992698
                    ],
                    [
                        "different label",
                        4.78901835099578
                    ],
                    [
                        "type logistic regression",
                        6.713892473645094
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "feature",
                        0.3710822325349928
                    ],
                    [
                        "class",
                        0.41026699617971163
                    ],
                    [
                        "Python",
                        0.44651016141983657
                    ],
                    [
                        "label",
                        0.44989283529259416
                    ],
                    [
                        "regression",
                        0.4722595448321592
                    ],
                    [
                        "logistic",
                        0.5179942309283894
                    ],
                    [
                        "example",
                        0.5715400453560368
                    ],
                    [
                        "method",
                        0.8787587623933084
                    ],
                    [
                        "different",
                        0.9193957722525754
                    ],
                    [
                        "weight",
                        0.9262195151417912
                    ],
                    [
                        "probability",
                        0.9284581441386188
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-2160": {
            "id": "eg8DJYwdMyg-2160",
            "heat": 0.658,
            "start": 2160.0,
            "text": " So first let's build the model. To build the model, we'll take the examples, the training data, and I just said whether we're going to print something. You'll notice from this slide I've elighted the printed stuff. We'll come back in a later slide and look at what's in there. But for now I want to focus on actually building the model. I need to create two vectors, two lists in this case, the feature vectors and the labels. For e in examples, featurevectors.a ppend(e.getfeatures e.getfeatures e.getlabel. Couldn't be much simpler than that. Then, just because it wouldn't fit on a line on my slide, I've created this identifier called logistic regression, which is sklearn.linearmo del.logisticregression. So this is the thing I imported, and this is a class, and now I'll get a model by first creating an instance of the class, logistic regression. Here I'm getting an instance, and then I'll call dot fit with that instance, passing it feature vecs and labels. I now have built a logistic regression model, which is simply a set of weights for each of the variables. This makes sense?",
            "metrics": {
                "relativeDCReadability": 1.1041962568944261,
                "lexicalDiversity": 0.5223880597014925,
                "posComposition": {
                    "RB": 0.08,
                    "JJ": 0.055,
                    "NN": 0.159,
                    "POS": 0.005,
                    "VB": 0.055,
                    "DT": 0.139,
                    "TO": 0.02,
                    "PRP": 0.08,
                    "MD": 0.035,
                    "NNS": 0.06,
                    "CC": 0.04,
                    "VBD": 0.01,
                    "IN": 0.104,
                    "VBP": 0.04,
                    "VBG": 0.025,
                    "VBN": 0.02,
                    "WP": 0.005,
                    "VBZ": 0.035,
                    "EX": 0.005,
                    "CD": 0.01,
                    "JJR": 0.005,
                    "PRP$": 0.005,
                    "WDT": 0.01
                },
                "syllableRate": 2.408,
                "topicScores": [
                    [
                        "model",
                        0.32201190549207065
                    ],
                    [
                        "regression",
                        0.4228307104636905
                    ],
                    [
                        "logistic",
                        0.4310933801231578
                    ],
                    [
                        "slide",
                        0.4354906405865175
                    ],
                    [
                        "instance",
                        0.44750053886562896
                    ],
                    [
                        "label",
                        0.5225248412727205
                    ],
                    [
                        "example",
                        0.546163743138438
                    ],
                    [
                        "feature",
                        0.5576415315609314
                    ],
                    [
                        "vector",
                        0.5665679160799937
                    ],
                    [
                        "class",
                        0.5706021842912459
                    ],
                    [
                        "fit",
                        0.5717364470760867
                    ],
                    [
                        "training",
                        0.8385382485403451
                    ],
                    [
                        "stuff",
                        0.8499574794749367
                    ],
                    [
                        "datum",
                        0.8519500905332823
                    ],
                    [
                        "del.logisticregression",
                        0.8930013564703686
                    ],
                    [
                        "later",
                        0.8968287038601706
                    ],
                    [
                        "variable",
                        0.8999032329299638
                    ],
                    [
                        "list",
                        0.9011919548321718
                    ],
                    [
                        "case",
                        0.9011919548321718
                    ],
                    [
                        "sense",
                        0.9016123259895381
                    ],
                    [
                        "featurevectors.a",
                        0.9054644844631203
                    ],
                    [
                        "ppend(e.getfeature",
                        0.9054644844631203
                    ],
                    [
                        "sklearn.linearmo",
                        0.9115325788700801
                    ],
                    [
                        "simple",
                        0.9165866070401048
                    ],
                    [
                        "identifier",
                        0.9190919838617596
                    ],
                    [
                        "thing",
                        0.9211726879543133
                    ],
                    [
                        "dot",
                        0.922935473668407
                    ],
                    [
                        "set",
                        0.9244532777740924
                    ],
                    [
                        "weight",
                        0.9244532777740924
                    ],
                    [
                        "logistic regression",
                        1.345822716517631
                    ]
                ],
                "topTopicSimilarity": 0.43333333333333335,
                "sharedTopicScores": [
                    [
                        "model",
                        0.32201190549207065
                    ],
                    [
                        "regression",
                        0.4228307104636905
                    ],
                    [
                        "logistic",
                        0.4310933801231578
                    ],
                    [
                        "label",
                        0.5225248412727205
                    ],
                    [
                        "example",
                        0.546163743138438
                    ],
                    [
                        "feature",
                        0.5576415315609314
                    ],
                    [
                        "class",
                        0.5706021842912459
                    ],
                    [
                        "training",
                        0.8385382485403451
                    ],
                    [
                        "datum",
                        0.8519500905332823
                    ],
                    [
                        "list",
                        0.9011919548321718
                    ],
                    [
                        "thing",
                        0.9211726879543133
                    ],
                    [
                        "set",
                        0.9244532777740924
                    ],
                    [
                        "weight",
                        0.9244532777740924
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-2250": {
            "id": "eg8DJYwdMyg-2250",
            "heat": 0.389,
            "start": 2250.0,
            "text": " Now we're going to apply the model, and I think this is the last piece of Python I'm going to introduce this semester, in case you're tired of learning about Python. And this is at least list comprehension. This is how I'm going to build my set of test feature vectors. So before we go and look at the code, let's look at how list comprehension works. In its simplest form, says some expression for some identifier in some list, L. It creates a new list by evaluating this expression Len (L) times with the ID in the expression replaced by each element of the list L. So let's look at a simple example. Here I'm saying L equals x times x for x in range 10. What's that going to do? It's going to, essentially, create a list. Think of it as a list, or at least a sequence of values, a range type actually in Python 3-- of values 0 to 9. It will then create a list of length 10, where the first element is going to be 0 times 0. The second element 1 times 1, etc. OK? So it's a simple way for me to create",
            "metrics": {
                "relativeDCReadability": 1.0974712303872514,
                "lexicalDiversity": 0.5377358490566038,
                "posComposition": {
                    "RB": 0.028,
                    "PRP": 0.061,
                    "VBP": 0.042,
                    "VBG": 0.042,
                    "TO": 0.038,
                    "VB": 0.038,
                    "DT": 0.123,
                    "NN": 0.17,
                    "CC": 0.019,
                    "VBZ": 0.047,
                    "JJ": 0.042,
                    "IN": 0.137,
                    "NNP": 0.061,
                    "VBN": 0.009,
                    "JJS": 0.014,
                    "WRB": 0.014,
                    "PRP$": 0.009,
                    "NNS": 0.038,
                    "POS": 0.009,
                    "CD": 0.042,
                    "WP": 0.005,
                    ":": 0.005,
                    "MD": 0.005
                },
                "syllableRate": 2.375,
                "topicScores": [
                    [
                        "list",
                        0.27905538771434735
                    ],
                    [
                        "Python",
                        0.3026628469489104
                    ],
                    [
                        "L.",
                        0.38629735347466226
                    ],
                    [
                        "time",
                        0.38867648864869087
                    ],
                    [
                        "simple",
                        0.44420912194172646
                    ],
                    [
                        "x",
                        0.4508353355881579
                    ],
                    [
                        "expression",
                        0.45200799991230484
                    ],
                    [
                        "element",
                        0.4521753940428049
                    ],
                    [
                        "comprehension",
                        0.5183177412780833
                    ],
                    [
                        "range",
                        0.5638179819299064
                    ],
                    [
                        "value",
                        0.5643527869475864
                    ],
                    [
                        "ok",
                        0.5967908617560012
                    ],
                    [
                        "Len",
                        0.6250161370366405
                    ],
                    [
                        "ID",
                        0.639939226559545
                    ],
                    [
                        "model",
                        0.7950881765605889
                    ],
                    [
                        "semester",
                        0.7950881765605889
                    ],
                    [
                        "case",
                        0.795088176560589
                    ],
                    [
                        "piece",
                        0.8121448780869992
                    ],
                    [
                        "tired",
                        0.8121448780869992
                    ],
                    [
                        "vector",
                        0.8486581045655461
                    ],
                    [
                        "feature",
                        0.8764984237957116
                    ],
                    [
                        "example",
                        0.879707748342829
                    ],
                    [
                        "set",
                        0.8877354288215806
                    ],
                    [
                        "test",
                        0.8877354288215806
                    ],
                    [
                        "code",
                        0.8889031782587723
                    ],
                    [
                        "form",
                        0.8968697250859561
                    ],
                    [
                        "identifier",
                        0.9064510385420099
                    ],
                    [
                        "new",
                        0.9064510385420099
                    ],
                    [
                        "length",
                        0.9168294596000253
                    ],
                    [
                        "second",
                        0.9184568979536841
                    ]
                ],
                "topTopicSimilarity": 0.26666666666666666,
                "sharedTopicScores": [
                    [
                        "list",
                        0.27905538771434735
                    ],
                    [
                        "Python",
                        0.3026628469489104
                    ],
                    [
                        "time",
                        0.38867648864869087
                    ],
                    [
                        "model",
                        0.7950881765605889
                    ],
                    [
                        "feature",
                        0.8764984237957116
                    ],
                    [
                        "example",
                        0.879707748342829
                    ],
                    [
                        "set",
                        0.8877354288215806
                    ],
                    [
                        "test",
                        0.8877354288215806
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-2340": {
            "id": "eg8DJYwdMyg-2340",
            "heat": 0.202,
            "start": 2340.0,
            "text": " a list that looks like that. I can be fancier and say for x times L equals x times x for x in range 10, and I add and if. If x mod 2 is equal to 0. Now instead of returning all-- building a list using each value in range 10, it will use only those values that satisfy that test. We can go look at what happens when we run that code. You can see the first list is 1 times 1, 2 times 2, et cetera, and the second list is much shorter, because I'm only squaring even numbers. Well, you can see that list comprehension gives us a convenient compact way to do certain kinds of things. Like lambda expressions, they're easy to misuse. I hate reading code where I have list comprehensions that go over multiple lines on my screen, for example. So I use it quite a lot for small things like this. If it's very large, I find another way to do it.",
            "metrics": {
                "relativeDCReadability": 0.9991311835932966,
                "lexicalDiversity": 0.5574712643678161,
                "posComposition": {
                    "DT": 0.075,
                    "NN": 0.109,
                    "WDT": 0.017,
                    "VBZ": 0.04,
                    "IN": 0.121,
                    "PRP": 0.098,
                    "MD": 0.029,
                    "VB": 0.057,
                    "JJR": 0.011,
                    "CC": 0.023,
                    "JJ": 0.08,
                    "NNS": 0.08,
                    "VBP": 0.069,
                    "CD": 0.046,
                    "NNP": 0.011,
                    "FW": 0.006,
                    "TO": 0.023,
                    "RB": 0.046,
                    "VBG": 0.029,
                    ":": 0.006,
                    "WP": 0.006,
                    "WRB": 0.011,
                    "PRP$": 0.006
                },
                "syllableRate": 1.85,
                "topicScores": [
                    [
                        "list",
                        0.3211990697880951
                    ],
                    [
                        "x",
                        0.33601080233414454
                    ],
                    [
                        "time",
                        0.3850413632252133
                    ],
                    [
                        "range",
                        0.5123088719123977
                    ],
                    [
                        "equal",
                        0.5506649731493843
                    ],
                    [
                        "L",
                        0.5567445214871061
                    ],
                    [
                        "way",
                        0.5631669258996236
                    ],
                    [
                        "code",
                        0.5646381665775039
                    ],
                    [
                        "thing",
                        0.5679506511737882
                    ],
                    [
                        "comprehension",
                        0.5696170920605131
                    ],
                    [
                        "value",
                        0.5716383985170944
                    ],
                    [
                        "test",
                        0.8617331918893776
                    ],
                    [
                        "fancy",
                        0.8702484353668287
                    ],
                    [
                        "example",
                        0.8753532351020827
                    ],
                    [
                        "number",
                        0.8781905722866387
                    ],
                    [
                        "misuse",
                        0.8873680053989622
                    ],
                    [
                        "mod",
                        0.890724920117196
                    ],
                    [
                        "et",
                        0.89219797503163
                    ],
                    [
                        "cetera",
                        0.89219797503163
                    ],
                    [
                        "lambda",
                        0.9004396999017126
                    ],
                    [
                        "all--",
                        0.9018607303776685
                    ],
                    [
                        "short",
                        0.9039989137726094
                    ],
                    [
                        "expression",
                        0.9114279943695239
                    ],
                    [
                        "second",
                        0.9140184403556484
                    ],
                    [
                        "screen",
                        0.9140737883515041
                    ],
                    [
                        "convenient",
                        0.9177869406025312
                    ],
                    [
                        "compact",
                        0.9177869406025312
                    ],
                    [
                        "certain",
                        0.9177869406025312
                    ],
                    [
                        "kind",
                        0.9177869406025312
                    ],
                    [
                        "large",
                        0.918134431092637
                    ]
                ],
                "topTopicSimilarity": 0.2,
                "sharedTopicScores": [
                    [
                        "list",
                        0.3211990697880951
                    ],
                    [
                        "time",
                        0.3850413632252133
                    ],
                    [
                        "thing",
                        0.5679506511737882
                    ],
                    [
                        "test",
                        0.8617331918893776
                    ],
                    [
                        "example",
                        0.8753532351020827
                    ],
                    [
                        "number",
                        0.8781905722866387
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-2430": {
            "id": "eg8DJYwdMyg-2430",
            "heat": 0.284,
            "start": 2430.0,
            "text": " Now we can move forward. In applying the model, I first build my testing feature of x, my e.getfeatures for e in test set, so that will give me the features associated with each element in the test set. I could obviously have written a for loop to do the same thing, but this was just a little cooler. Then we get model.predict for each of these. Model.predict_proba is nice in that I don't have to predict it for one example at a time. I can pass it as set of examples, and what I get back is a list of predictions, so that's just convenient. And then setting these to 0, and for I in range len of probs, here a probability of 0.5. What's that's saying is what I get out of logistic regression",
            "metrics": {
                "relativeDCReadability": 1.041746649875169,
                "lexicalDiversity": 0.40714285714285714,
                "posComposition": {
                    "RB": 0.086,
                    "PRP": 0.086,
                    "MD": 0.029,
                    "VB": 0.057,
                    "IN": 0.164,
                    "VBG": 0.029,
                    "DT": 0.121,
                    "NN": 0.143,
                    "PRP$": 0.014,
                    "NNP": 0.014,
                    "NNS": 0.029,
                    "VBN": 0.021,
                    "TO": 0.021,
                    "JJ": 0.036,
                    "CC": 0.029,
                    "VBD": 0.007,
                    "VBP": 0.029,
                    "VBZ": 0.043,
                    "CD": 0.021,
                    "WP": 0.021
                },
                "syllableRate": 1.575,
                "topicScores": [
                    [
                        "set",
                        0.38993514994185824
                    ],
                    [
                        "test",
                        0.5069575249966645
                    ],
                    [
                        "feature",
                        0.559068634616006
                    ],
                    [
                        "example",
                        0.5699923534319129
                    ],
                    [
                        "cooler",
                        0.8319349477586193
                    ],
                    [
                        "model",
                        0.8504965862125453
                    ],
                    [
                        "e.getfeature",
                        0.8504965862125453
                    ],
                    [
                        "Model.predict_proba",
                        0.8584699683689052
                    ],
                    [
                        "time",
                        0.8584699683689052
                    ],
                    [
                        "convenient",
                        0.8658733037369338
                    ],
                    [
                        "testing",
                        0.8683807647718322
                    ],
                    [
                        "element",
                        0.8683807647718322
                    ],
                    [
                        "thing",
                        0.8736375584773491
                    ],
                    [
                        "little",
                        0.8736375584773491
                    ],
                    [
                        "regression",
                        0.8758475550969729
                    ],
                    [
                        "loop",
                        0.8891144366260108
                    ],
                    [
                        "prediction",
                        0.9001652392537011
                    ],
                    [
                        "model.predict",
                        0.9003960128878206
                    ],
                    [
                        "nice",
                        0.9076240744799877
                    ],
                    [
                        "logistic",
                        0.9078607523619885
                    ],
                    [
                        "list",
                        0.912717614282126
                    ],
                    [
                        "range",
                        0.9165379225036666
                    ],
                    [
                        "len",
                        0.9165379225036666
                    ],
                    [
                        "probability",
                        0.9165379225036666
                    ],
                    [
                        "little cooler",
                        2.6604509553056728
                    ],
                    [
                        "test set",
                        2.669695890182711
                    ],
                    [
                        "testing feature",
                        3.337917633082215
                    ],
                    [
                        "logistic regression",
                        3.8815639905441586
                    ],
                    [
                        "range len",
                        5.251631808254359
                    ]
                ],
                "topTopicSimilarity": 0.3793103448275862,
                "sharedTopicScores": [
                    [
                        "set",
                        0.38993514994185824
                    ],
                    [
                        "test",
                        0.5069575249966645
                    ],
                    [
                        "feature",
                        0.559068634616006
                    ],
                    [
                        "example",
                        0.5699923534319129
                    ],
                    [
                        "model",
                        0.8504965862125453
                    ],
                    [
                        "time",
                        0.8584699683689052
                    ],
                    [
                        "thing",
                        0.8736375584773491
                    ],
                    [
                        "regression",
                        0.8758475550969729
                    ],
                    [
                        "logistic",
                        0.9078607523619885
                    ],
                    [
                        "list",
                        0.912717614282126
                    ],
                    [
                        "probability",
                        0.9165379225036666
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-2520": {
            "id": "eg8DJYwdMyg-2520",
            "heat": 0.253,
            "start": 2520.0,
            "text": " is a probability of something having a label. I then have to build a classifier, give a threshold. And here what I've said, if the probability of it being true is over a 0.5, call it true. So if the probability of survival is over 0.5, call it survived. If it's below, call it not survived. We'll later see that, again, setting that probability is itself an interesting thing, but the default in most systems is half, for obvious reasons. I get my probabilities for each feature vector, and then for I in ranged lens of probabilities, I'm just testing whether the predicted label is the same as the actual label, and updating true positives, false positives, true negatives, and false negatives accordingly. So far, so good? All right, let's put it all together. I'm defining something called LR, for logistic regression. It takes the training data, the test data, the probability, it builds a model, and then it gets the results by calling apply model with the label survived and whatever this prob was. Again, we'll do it for both leave one out",
            "metrics": {
                "relativeDCReadability": 1.1156661919441124,
                "lexicalDiversity": 0.4816753926701571,
                "posComposition": {
                    "VBZ": 0.063,
                    "DT": 0.126,
                    "NN": 0.141,
                    "IN": 0.115,
                    "VBG": 0.037,
                    "PRP": 0.099,
                    "RB": 0.073,
                    "VBP": 0.031,
                    "TO": 0.005,
                    "VB": 0.031,
                    "CC": 0.037,
                    "WP": 0.005,
                    "VBD": 0.031,
                    "JJ": 0.079,
                    "CD": 0.016,
                    "MD": 0.01,
                    "JJS": 0.005,
                    "NNS": 0.052,
                    "PRP$": 0.005,
                    "NNP": 0.016,
                    "POS": 0.005,
                    "VBN": 0.01,
                    "WDT": 0.005
                },
                "syllableRate": 2.417,
                "topicScores": [
                    [
                        "probability",
                        0.27668501185932354
                    ],
                    [
                        "label",
                        0.3601345842772054
                    ],
                    [
                        "true",
                        0.3644381262498859
                    ],
                    [
                        "datum",
                        0.553322613957397
                    ],
                    [
                        "test",
                        0.5545889450289527
                    ],
                    [
                        "positive",
                        0.5569947565880453
                    ],
                    [
                        "false",
                        0.5569947565880453
                    ],
                    [
                        "negative",
                        0.5569947565880453
                    ],
                    [
                        "model",
                        0.5706741231033464
                    ],
                    [
                        "LR",
                        0.6542643222647279
                    ],
                    [
                        "threshold",
                        0.8561316692054781
                    ],
                    [
                        "classifier",
                        0.8734420651383542
                    ],
                    [
                        "good",
                        0.8901807391138719
                    ],
                    [
                        "reason",
                        0.8907095626650081
                    ],
                    [
                        "obvious",
                        0.8978435307626467
                    ],
                    [
                        "survival",
                        0.9007120042867212
                    ],
                    [
                        "regression",
                        0.9023729201786169
                    ],
                    [
                        "interesting",
                        0.9043244524731457
                    ],
                    [
                        "thing",
                        0.9043244524731457
                    ],
                    [
                        "half",
                        0.9043244524731457
                    ],
                    [
                        "feature",
                        0.9077126121767164
                    ],
                    [
                        "vector",
                        0.9077126121767164
                    ],
                    [
                        "actual",
                        0.9077126121767164
                    ],
                    [
                        "logistic",
                        0.9088234915480327
                    ],
                    [
                        "default",
                        0.9102268637132009
                    ],
                    [
                        "system",
                        0.9102268637132009
                    ],
                    [
                        "ranged",
                        0.9134260116216593
                    ],
                    [
                        "len",
                        0.9134260116216593
                    ],
                    [
                        "training",
                        0.9163397973801906
                    ],
                    [
                        "result",
                        0.9215652493693799
                    ]
                ],
                "topTopicSimilarity": 0.36666666666666664,
                "sharedTopicScores": [
                    [
                        "probability",
                        0.27668501185932354
                    ],
                    [
                        "label",
                        0.3601345842772054
                    ],
                    [
                        "datum",
                        0.553322613957397
                    ],
                    [
                        "test",
                        0.5545889450289527
                    ],
                    [
                        "positive",
                        0.5569947565880453
                    ],
                    [
                        "model",
                        0.5706741231033464
                    ],
                    [
                        "regression",
                        0.9023729201786169
                    ],
                    [
                        "thing",
                        0.9043244524731457
                    ],
                    [
                        "feature",
                        0.9077126121767164
                    ],
                    [
                        "logistic",
                        0.9088234915480327
                    ],
                    [
                        "training",
                        0.9163397973801906
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-2610": {
            "id": "eg8DJYwdMyg-2610",
            "heat": 0.221,
            "start": 2610.0,
            "text": " and random splits, and again for 10 random splits. You'll notice it actually runs-- maybe you won't notice, but it does run faster than KNN. One of the nice things about logistic regression is building the model takes a while, but once you've got the model, applying it to a large number of variables-- feature vectors is fast. It's independent of the number of training examples, because we've got our weights. So solving the optimization problem, getting the weights, depends upon the number of training examples. Once we've got the weights, it's just evaluating a polynomial. It's very fast, so that's a nice advantage. If we look at those-- and we should probably compare them to our earlier KNN results, so KNN on the left, logistic regression",
            "metrics": {
                "relativeDCReadability": 1.1183921450633747,
                "lexicalDiversity": 0.5467625899280576,
                "posComposition": {
                    "CC": 0.036,
                    "VB": 0.036,
                    "NNS": 0.079,
                    "RB": 0.086,
                    "IN": 0.101,
                    "CD": 0.014,
                    "JJ": 0.065,
                    "PRP": 0.101,
                    "MD": 0.022,
                    "VBZ": 0.072,
                    ":": 0.022,
                    "JJR": 0.014,
                    "NNP": 0.022,
                    "DT": 0.108,
                    "NN": 0.094,
                    "VBG": 0.043,
                    "VBP": 0.029,
                    "VBN": 0.022,
                    "TO": 0.014,
                    "PRP$": 0.014,
                    "VBD": 0.007
                },
                "syllableRate": 1.742,
                "topicScores": [
                    [
                        "KNN",
                        0.3290476647339219
                    ],
                    [
                        "weight",
                        0.4124394635345725
                    ],
                    [
                        "number",
                        0.4239086709475286
                    ],
                    [
                        "fast",
                        0.4317070987424807
                    ],
                    [
                        "split",
                        0.4322798094480547
                    ],
                    [
                        "random",
                        0.47057805838786093
                    ],
                    [
                        "training",
                        0.5091406755355525
                    ],
                    [
                        "example",
                        0.5206158910749606
                    ],
                    [
                        "regression",
                        0.5381285443844751
                    ],
                    [
                        "logistic",
                        0.5462248670001577
                    ],
                    [
                        "model",
                        0.553265622074377
                    ],
                    [
                        "nice",
                        0.5618798948501891
                    ],
                    [
                        "random split",
                        0.6593576998806772
                    ],
                    [
                        "polynomial",
                        0.873754324617209
                    ],
                    [
                        "advantage",
                        0.8780791114173095
                    ],
                    [
                        "runs--",
                        0.8816759591119092
                    ],
                    [
                        "thing",
                        0.8936237861231704
                    ],
                    [
                        "large",
                        0.8936237861231704
                    ],
                    [
                        "variables--",
                        0.8936237861231704
                    ],
                    [
                        "feature",
                        0.8936237861231704
                    ],
                    [
                        "vector",
                        0.8936237861231704
                    ],
                    [
                        "optimization",
                        0.895920719145464
                    ],
                    [
                        "problem",
                        0.895920719145464
                    ],
                    [
                        "independent",
                        0.9012894172132561
                    ],
                    [
                        "result",
                        0.9067559190405594
                    ],
                    [
                        "left",
                        0.9067559190405594
                    ],
                    [
                        "those--",
                        0.9165142738082624
                    ],
                    [
                        "early",
                        0.9165142738082624
                    ],
                    [
                        "training example",
                        1.2573790117220531
                    ],
                    [
                        "KNN result",
                        1.4797395071191717
                    ]
                ],
                "topTopicSimilarity": 0.3333333333333333,
                "sharedTopicScores": [
                    [
                        "KNN",
                        0.3290476647339219
                    ],
                    [
                        "weight",
                        0.4124394635345725
                    ],
                    [
                        "number",
                        0.4239086709475286
                    ],
                    [
                        "training",
                        0.5091406755355525
                    ],
                    [
                        "example",
                        0.5206158910749606
                    ],
                    [
                        "regression",
                        0.5381285443844751
                    ],
                    [
                        "logistic",
                        0.5462248670001577
                    ],
                    [
                        "model",
                        0.553265622074377
                    ],
                    [
                        "thing",
                        0.8936237861231704
                    ],
                    [
                        "feature",
                        0.8936237861231704
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-2700": {
            "id": "eg8DJYwdMyg-2700",
            "heat": 0.221,
            "start": 2700.0,
            "text": " on the right. And I guess if I look at it, it looks like logistic regression did a little bit better. That's not guaranteed, but it often does outperform because it's more subtle in what it does, in being able to assign different weights to different variables. It's a little bit better. That's probably a good thing, but there's another reason that's really important that people prefer logistic regression, is it provides insights about the variables. We can look at the feature weights. This code does that, so remember we looked at build model and I left out the printing? Well here I'm leaving out everything except the printing. Same function, but leaving out everything except the printing. We can do model underbar classes, so model.classes underbar gives you the classes. In this case, the classes are survived, didn't survive. I forget what I called it. We'll see. So I can see what the classes it's using are, and then for I in range len model dot cof underbar,",
            "metrics": {
                "relativeDCReadability": 1.001871888247084,
                "lexicalDiversity": 0.5027932960893855,
                "posComposition": {
                    "IN": 0.095,
                    "DT": 0.095,
                    "NN": 0.128,
                    "CC": 0.034,
                    "PRP": 0.123,
                    "VBP": 0.039,
                    "VBZ": 0.089,
                    "JJ": 0.073,
                    "VBD": 0.028,
                    "RBR": 0.011,
                    "RB": 0.056,
                    "VBN": 0.011,
                    "VB": 0.05,
                    "JJR": 0.006,
                    "WP": 0.017,
                    "VBG": 0.022,
                    "TO": 0.011,
                    "NNS": 0.05,
                    "EX": 0.006,
                    "WDT": 0.006,
                    "MD": 0.022,
                    "RP": 0.017,
                    "NNP": 0.011
                },
                "syllableRate": 2.15,
                "topicScores": [
                    [
                        "class",
                        0.38386253455955516
                    ],
                    [
                        "printing",
                        0.3888211377886598
                    ],
                    [
                        "underbar",
                        0.45878697074686225
                    ],
                    [
                        "model",
                        0.46268826543826574
                    ],
                    [
                        "bit",
                        0.5023626689256586
                    ],
                    [
                        "variable",
                        0.5246886132048628
                    ],
                    [
                        "little",
                        0.5281914433505317
                    ],
                    [
                        "logistic",
                        0.5476225450298717
                    ],
                    [
                        "regression",
                        0.5487415270391771
                    ],
                    [
                        "different",
                        0.5526250582396887
                    ],
                    [
                        "weight",
                        0.5585504999579894
                    ],
                    [
                        "right",
                        0.7688598829337393
                    ],
                    [
                        "subtle",
                        0.8975538190722963
                    ],
                    [
                        "good",
                        0.9054458934896246
                    ],
                    [
                        "thing",
                        0.9054458934896246
                    ],
                    [
                        "feature",
                        0.9106477128401652
                    ],
                    [
                        "function",
                        0.9107050186598844
                    ],
                    [
                        "code",
                        0.9145501376930454
                    ],
                    [
                        "reason",
                        0.9147897186663783
                    ],
                    [
                        "important",
                        0.9147897186663783
                    ],
                    [
                        "people",
                        0.9147897186663783
                    ],
                    [
                        "insight",
                        0.9147897186663783
                    ],
                    [
                        "build",
                        0.9230707219933134
                    ],
                    [
                        "case",
                        0.9238866664046704
                    ],
                    [
                        "cof",
                        0.9278522034717026
                    ],
                    [
                        "range",
                        0.9351404482168151
                    ],
                    [
                        "len",
                        0.9351404482168151
                    ],
                    [
                        "dot",
                        0.9351404482168151
                    ],
                    [
                        "little bit",
                        1.2613189437120056
                    ],
                    [
                        "logistic regression",
                        1.943201141020138
                    ]
                ],
                "topTopicSimilarity": 0.3,
                "sharedTopicScores": [
                    [
                        "class",
                        0.38386253455955516
                    ],
                    [
                        "model",
                        0.46268826543826574
                    ],
                    [
                        "logistic",
                        0.5476225450298717
                    ],
                    [
                        "regression",
                        0.5487415270391771
                    ],
                    [
                        "different",
                        0.5526250582396887
                    ],
                    [
                        "weight",
                        0.5585504999579894
                    ],
                    [
                        "thing",
                        0.9054458934896246
                    ],
                    [
                        "feature",
                        0.9106477128401652
                    ],
                    [
                        "build",
                        0.9230707219933134
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-2790": {
            "id": "eg8DJYwdMyg-2790",
            "heat": 0.144,
            "start": 2790.0,
            "text": " these are giving the weights of each variable. The coefficients, I can print what they are. So let's run that and see what we get. We get a syntax error because I turned a comment into a line of code. Our model classes are died and survived, and for label survived-- what I've done, by the way, in the representation is I represented the cabin class as a binary variable. It's either 0 or 1, because it doesn't make sense to treat them as if they were really numbers because we don't know, for example, the difference between first and second is the same as the difference between second and third. If we treated the class, we just said cabin class and used an integer, implicitly the learning algorithm is going to assume that the difference between 1 and 2 is the same as between 2 and 3. If you, for example, look at the prices of these cabins, you'll see that that's not true. The difference in an airplane between economy plus and economy is way smaller than between economy plus him first. Same thing on the Titanic.",
            "metrics": {
                "relativeDCReadability": 0.9768807182133027,
                "lexicalDiversity": 0.4517766497461929,
                "posComposition": {
                    "DT": 0.132,
                    "VBP": 0.036,
                    "VBG": 0.01,
                    "NNS": 0.03,
                    "IN": 0.157,
                    "JJ": 0.056,
                    "PRP": 0.086,
                    "MD": 0.01,
                    "VB": 0.041,
                    "WP": 0.015,
                    "NNP": 0.015,
                    "NN": 0.157,
                    "POS": 0.005,
                    "CC": 0.066,
                    "VBD": 0.03,
                    "PRP$": 0.005,
                    "VBN": 0.02,
                    ":": 0.005,
                    "VBZ": 0.041,
                    "CD": 0.03,
                    "RB": 0.036,
                    "TO": 0.01,
                    "JJR": 0.005
                },
                "syllableRate": 2.342,
                "topicScores": [
                    [
                        "difference",
                        0.35231263102984267
                    ],
                    [
                        "class",
                        0.37490145657167334
                    ],
                    [
                        "cabin",
                        0.42908824600562173
                    ],
                    [
                        "economy",
                        0.44347690173709275
                    ],
                    [
                        "variable",
                        0.4810912101044159
                    ],
                    [
                        "example",
                        0.5140316671837369
                    ],
                    [
                        "way",
                        0.5494192963937906
                    ],
                    [
                        "second",
                        0.5608276251410671
                    ],
                    [
                        "Titanic",
                        0.6280341443339933
                    ],
                    [
                        "weight",
                        0.7783088105644751
                    ],
                    [
                        "coefficient",
                        0.8122151957750967
                    ],
                    [
                        "code",
                        0.8417423546927175
                    ],
                    [
                        "true",
                        0.8705266245155227
                    ],
                    [
                        "model",
                        0.8771056089940684
                    ],
                    [
                        "binary",
                        0.8771056089940684
                    ],
                    [
                        "syntax",
                        0.8786332864270241
                    ],
                    [
                        "error",
                        0.8786332864270241
                    ],
                    [
                        "comment",
                        0.8786332864270241
                    ],
                    [
                        "line",
                        0.8786332864270241
                    ],
                    [
                        "label",
                        0.8872428515485639
                    ],
                    [
                        "survived--",
                        0.8872428515485639
                    ],
                    [
                        "representation",
                        0.8872428515485639
                    ],
                    [
                        "integer",
                        0.8886029066494248
                    ],
                    [
                        "sense",
                        0.8933281174168407
                    ],
                    [
                        "number",
                        0.8933281174168407
                    ],
                    [
                        "learning",
                        0.8979021613578763
                    ],
                    [
                        "algorithm",
                        0.8979021613578763
                    ],
                    [
                        "thing",
                        0.8982458700933099
                    ],
                    [
                        "price",
                        0.9014929797783178
                    ],
                    [
                        "airplane",
                        0.9044044218201319
                    ]
                ],
                "topTopicSimilarity": 0.23333333333333334,
                "sharedTopicScores": [
                    [
                        "class",
                        0.37490145657167334
                    ],
                    [
                        "example",
                        0.5140316671837369
                    ],
                    [
                        "weight",
                        0.7783088105644751
                    ],
                    [
                        "model",
                        0.8771056089940684
                    ],
                    [
                        "label",
                        0.8872428515485639
                    ],
                    [
                        "number",
                        0.8933281174168407
                    ],
                    [
                        "thing",
                        0.8982458700933099
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-2880": {
            "id": "eg8DJYwdMyg-2880",
            "heat": 0.172,
            "start": 2880.0,
            "text": " But what we see here is that for the label survived, pretty good sized positive weight for being in first class cabin. Moderate for being in the second, and if you're in the third class well, tough luck. So what we see here is that rich people did better than the poor people. Shocking. If We look at age, we'll see it's negatively correlated. What does this mean? It's not a huge weight, but it basically says that if you're older, the bigger your age, the less likely you are to have survived the disaster. And finally, it says it's really bad to be a male, that the men-- being a male was very negatively correlated with surviving. We see a nice thing here is we get these labels, which we can make sense of. One more slide and then I'm done. These values are slightly different, because different randomization, different example, but the main point I want to say is you have to be a little bit wary of reading too much into these weights. Because not in this example, but other examples-- well, also in these features are often correlated,",
            "metrics": {
                "relativeDCReadability": 0.867497049780481,
                "lexicalDiversity": 0.472636815920398,
                "posComposition": {
                    "CC": 0.035,
                    "WP": 0.015,
                    "PRP": 0.09,
                    "VBP": 0.065,
                    "RB": 0.1,
                    "VBZ": 0.05,
                    "IN": 0.114,
                    "DT": 0.1,
                    "NN": 0.1,
                    "VBD": 0.015,
                    "JJ": 0.1,
                    "VBN": 0.03,
                    "VBG": 0.03,
                    "NNP": 0.005,
                    "NNS": 0.04,
                    "JJR": 0.02,
                    "MD": 0.01,
                    "VB": 0.035,
                    "PRP$": 0.005,
                    "RBR": 0.005,
                    "TO": 0.02,
                    ":": 0.01,
                    "WDT": 0.005,
                    "CD": 0.005
                },
                "syllableRate": 2.292,
                "topicScores": [
                    [
                        "weight",
                        0.42020334313393753
                    ],
                    [
                        "different",
                        0.43400588143090396
                    ],
                    [
                        "class",
                        0.47483757578220864
                    ],
                    [
                        "people",
                        0.5251057201924307
                    ],
                    [
                        "label",
                        0.5308689907782452
                    ],
                    [
                        "example",
                        0.533353575099894
                    ],
                    [
                        "age",
                        0.5360044067884966
                    ],
                    [
                        "male",
                        0.5424393942134426
                    ],
                    [
                        "cabin",
                        0.7315171661643889
                    ],
                    [
                        "good",
                        0.764292053796837
                    ],
                    [
                        "sized",
                        0.7786817046807694
                    ],
                    [
                        "positive",
                        0.7786817046807694
                    ],
                    [
                        "luck",
                        0.7888639684967841
                    ],
                    [
                        "moderate",
                        0.8039443184065579
                    ],
                    [
                        "shocking",
                        0.8073433922172069
                    ],
                    [
                        "tough",
                        0.8175796705434966
                    ],
                    [
                        "second",
                        0.8299332200172023
                    ],
                    [
                        "poor",
                        0.8557171382247662
                    ],
                    [
                        "rich",
                        0.8655075662548802
                    ],
                    [
                        "disaster",
                        0.8722081425577815
                    ],
                    [
                        "huge",
                        0.8903819052140709
                    ],
                    [
                        "old",
                        0.8903819052140709
                    ],
                    [
                        "big",
                        0.890381905214071
                    ],
                    [
                        "sense",
                        0.8973083294075387
                    ],
                    [
                        "likely",
                        0.8981002312582134
                    ],
                    [
                        "bad",
                        0.9016848462457293
                    ],
                    [
                        "men--",
                        0.9016848462457293
                    ],
                    [
                        "value",
                        0.902076385716849
                    ],
                    [
                        "randomization",
                        0.902076385716849
                    ],
                    [
                        "nice",
                        0.904591217702108
                    ]
                ],
                "topTopicSimilarity": 0.2,
                "sharedTopicScores": [
                    [
                        "weight",
                        0.42020334313393753
                    ],
                    [
                        "different",
                        0.43400588143090396
                    ],
                    [
                        "class",
                        0.47483757578220864
                    ],
                    [
                        "label",
                        0.5308689907782452
                    ],
                    [
                        "example",
                        0.533353575099894
                    ],
                    [
                        "positive",
                        0.7786817046807694
                    ]
                ]
            }
        },
        "eg8DJYwdMyg-2970": {
            "id": "eg8DJYwdMyg-2970",
            "heat": 0.32,
            "start": 2970.0,
            "text": " and if they're correlated, you run-- actually it's 3:56. I'm going to explain the problem with this on Monday when I have time to do it properly. So I'll see you then.",
            "metrics": {
                "relativeDCReadability": 0.9081989251858612,
                "lexicalDiversity": 0.43243243243243246,
                "posComposition": {
                    "CC": 0.027,
                    "IN": 0.081,
                    "PRP": 0.216,
                    "VBP": 0.108,
                    "VBN": 0.027,
                    ":": 0.027,
                    "RB": 0.108,
                    "VBZ": 0.027,
                    "CD": 0.027,
                    "VBG": 0.027,
                    "TO": 0.054,
                    "VB": 0.081,
                    "DT": 0.054,
                    "NN": 0.054,
                    "NNP": 0.027,
                    "WRB": 0.027,
                    "MD": 0.027
                },
                "syllableRate": 0.4,
                "topicScores": [
                    [
                        "Monday",
                        0.7403885269161052
                    ],
                    [
                        "problem",
                        0.9290513460957702
                    ],
                    [
                        "time",
                        0.9290513460957702
                    ]
                ],
                "topTopicSimilarity": 0.3333333333333333,
                "sharedTopicScores": [
                    [
                        "time",
                        0.9290513460957702
                    ]
                ]
            }
        }
    }
}