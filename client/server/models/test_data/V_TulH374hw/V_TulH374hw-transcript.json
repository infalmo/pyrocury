[{"text": "The following content is\nprovided under a Creative", "start": 0.79, "duration": 2.34}, {"text": "Commons license.", "start": 3.13, "duration": 1.42}, {"text": "Your support will help\nMIT OpenCourseWare", "start": 4.55, "duration": 2.21}, {"text": "continue to offer high quality\neducational resources for free.", "start": 6.76, "duration": 4.09}, {"text": "To make a donation or to\nview additional materials", "start": 10.85, "duration": 2.54}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.39, "duration": 3.93}, {"text": "at ocw.mit.edu.", "start": 17.32, "duration": 0.95}, {"text": "PROFESSOR: Welcome back.", "start": 29.39, "duration": 2.43}, {"text": "Over the last\ncouple of lectures,", "start": 31.82, "duration": 2.01}, {"text": "we've been looking at\noptimization models.", "start": 33.83, "duration": 2.53}, {"text": "And the idea was how do I find\na way to optimize an objective", "start": 36.36, "duration": 4.07}, {"text": "function-- it could be\nminimize it or maximize it--", "start": 40.43, "duration": 2.49}, {"text": "relative to a set\nof constraints?", "start": 42.92, "duration": 2.36}, {"text": "And we saw, or\nProfessor Guttag showed", "start": 45.28, "duration": 1.84}, {"text": "you, one of the ways\nthat naturally falls out", "start": 47.12, "duration": 2.58}, {"text": "is by looking at\ntrees, decision trees,", "start": 49.7, "duration": 2.43}, {"text": "where you pass your way through\na tree trying to figure out", "start": 52.13, "duration": 2.67}, {"text": "how to optimize that model.", "start": 54.8, "duration": 2.53}, {"text": "So today, we're going to\ngeneralize those trees", "start": 57.33, "duration": 3.41}, {"text": "into another whole broad\nclass of models called graph", "start": 60.74, "duration": 2.97}, {"text": "theoretic or graph models.", "start": 63.71, "duration": 1.51}, {"text": "And we're going to use\nthose to again look", "start": 65.22, "duration": 2.15}, {"text": "at how do we can do optimization\non those kinds of models.", "start": 67.37, "duration": 4.68}, {"text": "Just to remind you,\nthere is a great piece", "start": 72.05, "duration": 2.61}, {"text": "of information in the text.", "start": 74.66, "duration": 2.05}, {"text": "There's the reading for today.", "start": 76.71, "duration": 1.7}, {"text": "And these will, of\ncourse, be in the slides", "start": 78.41, "duration": 1.791}, {"text": "that you can download.", "start": 80.201, "duration": 1.159}, {"text": "So let's take a second\njust to reset again", "start": 81.36, "duration": 3.86}, {"text": "what are we trying to do?", "start": 85.22, "duration": 2.49}, {"text": "Generally, we're trying to\nbuild computational models.", "start": 87.71, "duration": 3.87}, {"text": "So what does that mean?", "start": 91.58, "duration": 1.68}, {"text": "The same way we could do\na physical experiment,", "start": 93.26, "duration": 2.49}, {"text": "or a social experiment,\nor model, if you like,", "start": 95.75, "duration": 2.61}, {"text": "a physical system\nand a social system,", "start": 98.36, "duration": 2.25}, {"text": "to both try and gather\ndata and analyze it", "start": 100.61, "duration": 2.28}, {"text": "or to do predictions.", "start": 102.89, "duration": 1.5}, {"text": "We want to do the same\nthing computationally.", "start": 104.39, "duration": 2.46}, {"text": "We'd like to be able\nto build models in code", "start": 106.85, "duration": 3.63}, {"text": "that we can then run to\npredict effects, which we then", "start": 110.48, "duration": 2.46}, {"text": "might test with an actual\nphysical experiment.", "start": 112.94, "duration": 3.92}, {"text": "And we've seen, for example,\nhow you could take just", "start": 116.86, "duration": 3.76}, {"text": "the informal problem of choosing\nwhat to eat and turning it", "start": 120.62, "duration": 3.48}, {"text": "into an optimization\nproblem-- in this case,", "start": 124.1, "duration": 2.14}, {"text": "it was a version of something\nwe called a knapsack problem--", "start": 126.24, "duration": 3.049}, {"text": "and how you could then use\nthat to find code to solve it.", "start": 129.289, "duration": 3.992}, {"text": "And you've already seen two\ndifferent general methods.", "start": 133.281, "duration": 2.249}, {"text": "You've seen greedy algorithms\nthat just try and do", "start": 135.53, "duration": 2.083}, {"text": "the best thing at each stage.", "start": 137.613, "duration": 1.547}, {"text": "And you saw dynamic programming\nas an elegant solution", "start": 139.16, "duration": 2.7}, {"text": "to finding better\nways to optimize this.", "start": 141.86, "duration": 3.43}, {"text": "We're going to now look at\nbroadening the class of models", "start": 145.29, "duration": 3.03}, {"text": "to talk about graphs.", "start": 148.32, "duration": 2.07}, {"text": "So, obvious question\nis, what's a graph?", "start": 150.39, "duration": 3.94}, {"text": "And a graph has two\nelements, two components.", "start": 154.33, "duration": 3.58}, {"text": "It has a set of nodes,\nsometimes called vertices.", "start": 157.91, "duration": 4.49}, {"text": "Those nodes probably are\ngoing to have some information", "start": 162.4, "duration": 2.52}, {"text": "associated with them.", "start": 164.92, "duration": 0.92}, {"text": "It could be as simple\nas it's a name.", "start": 165.84, "duration": 1.87}, {"text": "It could be more complicated.", "start": 167.71, "duration": 1.32}, {"text": "A node might represent\na student record--", "start": 169.03, "duration": 2.1}, {"text": "the grades.", "start": 171.13, "duration": 0.96}, {"text": "And a graph might talk\nabout putting together", "start": 172.09, "duration": 2.01}, {"text": "all of the grades for a class.", "start": 174.1, "duration": 2.68}, {"text": "Associated with that,\nwe can't just-- well,", "start": 176.78, "duration": 2.06}, {"text": "I should say, we\ncould just have nodes,", "start": 178.84, "duration": 1.2}, {"text": "but that's kind of boring.", "start": 180.04, "duration": 1.083}, {"text": "We want to know what\nare the connections", "start": 181.123, "duration": 1.677}, {"text": "between the elements\nin my system?", "start": 182.8, "duration": 2.92}, {"text": "And so the second thing\nwe're going to have", "start": 185.72, "duration": 2.12}, {"text": "is what we call edges,\nsometimes called arcs.", "start": 187.84, "duration": 3.15}, {"text": "And an edge will\nconnect a pair of nodes.", "start": 190.99, "duration": 3.599}, {"text": "We're going to see two\ndifferent ways in which we", "start": 194.589, "duration": 2.041}, {"text": "could build graphs using edges.", "start": 196.63, "duration": 3.81}, {"text": "The first one, the\nsimple one, is an edge", "start": 200.44, "duration": 2.367}, {"text": "is going to be undirected.", "start": 202.807, "duration": 1.083}, {"text": "And actually, I should\nshow this to you.", "start": 203.89, "duration": 1.666}, {"text": "So there is the\nidea of just nodes.", "start": 205.556, "duration": 2.084}, {"text": "Those nodes, as I said,\nmight have information", "start": 207.64, "duration": 2.61}, {"text": "in them, just labels or names.", "start": 210.25, "duration": 1.32}, {"text": "They might have other\ninformation in them.", "start": 211.57, "duration": 2.25}, {"text": "When I want to connect\nthem up, the connections", "start": 213.82, "duration": 3.18}, {"text": "could be undirected.", "start": 217.0, "duration": 1.999}, {"text": "If you want to think of it\nthis way, it goes both ways.", "start": 218.999, "duration": 2.291}, {"text": "An edge connects\ntwo nodes together,", "start": 221.29, "duration": 1.8}, {"text": "and that allows\nsharing of information", "start": 223.09, "duration": 1.95}, {"text": "between both of them.", "start": 225.04, "duration": 1.907}, {"text": "In some cases, we're going\nto see that we actually", "start": 226.947, "duration": 2.083}, {"text": "want to use what we call a\ndirected graph, sometimes", "start": 229.03, "duration": 2.58}, {"text": "called a digraph, in\nwhich case the edge has", "start": 231.61, "duration": 4.23}, {"text": "a direction from a\nsource to a destination,", "start": 235.84, "duration": 2.97}, {"text": "or sometimes from a\nparent to a child.", "start": 238.81, "duration": 3.15}, {"text": "And in this case,\nthe information", "start": 241.96, "duration": 1.56}, {"text": "can only flow from the\nsource to the child.", "start": 243.52, "duration": 4.152}, {"text": "Now in the case\nI've drawn here, it", "start": 247.672, "duration": 1.458}, {"text": "looks like there's only\never a single directed edge", "start": 249.13, "duration": 3.33}, {"text": "between nodes.", "start": 252.46, "duration": 0.66}, {"text": "I could, in fact, have\nthem going both directions,", "start": 253.12, "duration": 2.4}, {"text": "from source to destination and\na separate directed edge coming", "start": 255.52, "duration": 3.254}, {"text": "from the destination\nback to the source.", "start": 258.774, "duration": 1.666}, {"text": "And we'll see some\nexamples of that.", "start": 260.44, "duration": 2.32}, {"text": "But I'm going to have edges.", "start": 262.76, "duration": 2.37}, {"text": "Final thing is, those edges\ncould just be connections.", "start": 265.13, "duration": 3.329}, {"text": "But in some cases, we're\ngoing to put information", "start": 268.459, "duration": 2.041}, {"text": "on the edges, for\nexample, weights.", "start": 270.5, "duration": 4.76}, {"text": "The weight might\ntell me how much", "start": 275.26, "duration": 2.61}, {"text": "effort is it going to take\nme to go from a source", "start": 277.87, "duration": 2.34}, {"text": "to a destination.", "start": 280.21, "duration": 1.194}, {"text": "And one of the\nthings you're going", "start": 281.404, "duration": 1.416}, {"text": "to see as I want to\nthink about how do I", "start": 282.82, "duration": 1.92}, {"text": "pass through this graph,\nfinding a path from one", "start": 284.74, "duration": 2.79}, {"text": "place to another, for example,\nminimizing the cost associated", "start": 287.53, "duration": 3.75}, {"text": "with passing through the edges?", "start": 291.28, "duration": 2.13}, {"text": "Or how do I simply find\na connection between two", "start": 293.41, "duration": 2.4}, {"text": "nodes in this graph?", "start": 295.81, "duration": 2.8}, {"text": "So graphs, composed\nof vertices or nodes,", "start": 298.61, "duration": 3.83}, {"text": "they're composed\nof edges or arcs.", "start": 302.44, "duration": 2.79}, {"text": "So why might we want them?", "start": 305.23, "duration": 2.88}, {"text": "Well, we're going to see--", "start": 308.11, "duration": 1.26}, {"text": "and you can probably\nalready guess--", "start": 309.37, "duration": 1.499}, {"text": "there are lots of really useful\nrelationships between entities.", "start": 310.869, "duration": 4.471}, {"text": "I might want to take\na European vacation.", "start": 315.34, "duration": 2.88}, {"text": "After November 8,\nI might really want", "start": 318.22, "duration": 1.65}, {"text": "to take a European vacation.", "start": 319.87, "duration": 2.13}, {"text": "So I'd like to know, what are\nthe possible ways by rail I", "start": 322.0, "duration": 2.49}, {"text": "can get from Paris to London?", "start": 324.49, "duration": 2.686}, {"text": "Well, I could pull out the\nschedule and look at it.", "start": 327.176, "duration": 2.124}, {"text": "But you could imagine, I hope,\nthinking about this as a graph.", "start": 329.3, "duration": 3.11}, {"text": "The nodes would be cities.", "start": 332.41, "duration": 2.5}, {"text": "The links would be rail\nlinks between them.", "start": 334.91, "duration": 2.14}, {"text": "And then, one of the\nthings I might like to know", "start": 337.05, "duration": 2.0}, {"text": "is, first of all, can I\nget from Paris to London?", "start": 339.05, "duration": 2.041}, {"text": "And then secondly,\nwhat's the fastest", "start": 341.091, "duration": 1.679}, {"text": "way to do it or the\ncheapest way to do it?", "start": 342.77, "duration": 2.13}, {"text": "So I'd like to explore that.", "start": 344.9, "duration": 2.61}, {"text": "Second example, as you can see\non the list, drug discovery,", "start": 347.51, "duration": 4.45}, {"text": "modeling of complex\nmolecule in terms", "start": 351.96, "duration": 2.19}, {"text": "of the relationships between\nthe pieces inside of it and then", "start": 354.15, "duration": 2.58}, {"text": "asking questions like,\nwhat kind of energy", "start": 356.73, "duration": 3.12}, {"text": "would it take to\nconvert this molecule", "start": 359.85, "duration": 2.94}, {"text": "into a different molecule?", "start": 362.79, "duration": 1.44}, {"text": "And how might I think about\nthat as a graph problem?", "start": 364.23, "duration": 3.67}, {"text": "Third and obvious one, ancestral\nrelationships, family trees.", "start": 367.9, "duration": 5.74}, {"text": "In most families,\nalmost all families,", "start": 373.64, "duration": 1.8}, {"text": "they really are\ntrees not graphs.", "start": 375.44, "duration": 1.957}, {"text": "Hopefully you don't\ncome from a family", "start": 377.397, "duration": 1.583}, {"text": "that has strange loops in them.", "start": 378.98, "duration": 1.65}, {"text": "But family trees are--", "start": 380.63, "duration": 2.994}, {"text": "I know, I'm in\ntrouble here today.", "start": 383.624, "duration": 1.416}, {"text": "Aren't I?", "start": 385.04, "duration": 0.499}, {"text": "Family trees-- stay with me--", "start": 385.539, "duration": 2.051}, {"text": "are a great demonstration of\nrelationships because there", "start": 387.59, "duration": 3.12}, {"text": "its directional edges.", "start": 390.71, "duration": 1.29}, {"text": "Right?", "start": 392.0, "duration": 0.69}, {"text": "Parents have children.", "start": 392.69, "duration": 1.65}, {"text": "Those children have children.", "start": 394.34, "duration": 1.77}, {"text": "And like I say, it\ncomes in a natural way", "start": 396.11, "duration": 2.13}, {"text": "of thinking about traversing\nthings in that tree.", "start": 398.24, "duration": 3.87}, {"text": "And in fact, trees are a\nspecial case of a graph.", "start": 402.11, "duration": 3.96}, {"text": "You've already seen decision\ntrees in the last lecture.", "start": 406.07, "duration": 3.07}, {"text": "But basically, a special kind\nof directed graph is a tree.", "start": 409.14, "duration": 3.49}, {"text": "And the property of\nthe tree is, as it", "start": 412.63, "duration": 2.35}, {"text": "says there, any pair\nof nodes are connected,", "start": 414.98, "duration": 3.39}, {"text": "if they are connected,\nby only a single path.", "start": 418.37, "duration": 3.15}, {"text": "There are no loops.", "start": 421.52, "duration": 0.9}, {"text": "There are no ways\nto go from one node,", "start": 422.42, "duration": 1.83}, {"text": "find a set of things that\nbrings you back to that node.", "start": 424.25, "duration": 2.34}, {"text": "You can only have a single\npath to those points.", "start": 426.59, "duration": 4.657}, {"text": "And Professor Guttag\nused this, for example,", "start": 431.247, "duration": 1.833}, {"text": "to talk about solving\nthe knapsack problem.", "start": 433.08, "duration": 2.05}, {"text": "A decision trees is\na really nice way", "start": 435.13, "duration": 1.64}, {"text": "of finding that solution.", "start": 436.77, "duration": 2.34}, {"text": "Now, I drew it this way.", "start": 439.11, "duration": 2.49}, {"text": "In computer science, we\nmostly use Australian trees.", "start": 441.6, "duration": 4.35}, {"text": "They're upside down.", "start": 445.95, "duration": 1.86}, {"text": "The roots are at the top.", "start": 447.81, "duration": 1.244}, {"text": "The leaves are at the\nbottom, because we", "start": 449.054, "duration": 1.666}, {"text": "want to think about starting\nat the beginning of the tree,", "start": 450.72, "duration": 2.25}, {"text": "which is typically\nsomething we call the root", "start": 452.97, "duration": 1.875}, {"text": "and traversing it.", "start": 454.845, "duration": 1.065}, {"text": "But however you\nuse it, trees are", "start": 455.91, "duration": 1.53}, {"text": "going to be a useful\nway of actually", "start": 457.44, "duration": 2.01}, {"text": "thinking about representing\nparticular kinds of graphs.", "start": 459.45, "duration": 4.78}, {"text": "OK.", "start": 464.23, "duration": 0.6}, {"text": "So, when I talk in a second\nabout how to build graphs,", "start": 464.83, "duration": 3.627}, {"text": "well let's spend just\na second about saying,", "start": 468.457, "duration": 1.833}, {"text": "so why are they useful?", "start": 470.29, "duration": 2.36}, {"text": "And if you think\nabout it, the world", "start": 472.65, "duration": 2.08}, {"text": "is full of lots of networks that\nare based on relationships that", "start": 474.73, "duration": 4.26}, {"text": "could be captured by a graph.", "start": 478.99, "duration": 2.66}, {"text": "We use them all the time.", "start": 481.65, "duration": 2.25}, {"text": "Some of you are using\nthem right now--", "start": 483.9, "duration": 2.39}, {"text": "computer networks.", "start": 486.29, "duration": 0.75}, {"text": "You want to send an email\nmessage from your machine", "start": 487.04, "duration": 3.66}, {"text": "to your friend at Stanford.", "start": 490.7, "duration": 1.979}, {"text": "That's going to get routed\nthrough a set of links", "start": 492.679, "duration": 2.041}, {"text": "to get there.", "start": 494.72, "duration": 0.61}, {"text": "So the network set up by a\nseries of routers that pass it", "start": 495.33, "duration": 3.48}, {"text": "along, sending something\nrequires an algorithm", "start": 498.81, "duration": 2.72}, {"text": "that figures out the best way\nto actually move that around.", "start": 501.53, "duration": 3.469}, {"text": "There's a great\nlocal company started", "start": 504.999, "duration": 1.541}, {"text": "by an MIT professor\ncalled Akamai", "start": 506.54, "duration": 2.23}, {"text": "that thinks about how do\nyou move web content around", "start": 508.77, "duration": 2.54}, {"text": "on the web?", "start": 511.31, "duration": 0.5}, {"text": "Again, it's a nice\ncomputer network problem.", "start": 511.81, "duration": 4.239}, {"text": "I've already talked about this.", "start": 516.049, "duration": 1.291}, {"text": "We're going to do\nsome other examples.", "start": 517.34, "duration": 1.583}, {"text": "Transportation networks--\nhere, if you think about it,", "start": 518.923, "duration": 3.057}, {"text": "obvious thing is make\nthe nodes cities.", "start": 521.98, "duration": 3.06}, {"text": "Make the edges\nroads between them.", "start": 525.04, "duration": 1.69}, {"text": "And now questions are,\ncan I get to San Jose,", "start": 526.73, "duration": 3.05}, {"text": "if you like old songs?", "start": 529.78, "duration": 1.029}, {"text": "And what's the best\nway to get to San Jose,", "start": 530.809, "duration": 1.791}, {"text": "even if you don't\nlike old songs?", "start": 532.6, "duration": 2.86}, {"text": "A network problem--\nhow do I analyze it?", "start": 535.46, "duration": 3.81}, {"text": "Financial networks--\nmoving money around--", "start": 539.27, "duration": 3.06}, {"text": "easily modeled by a graph.", "start": 542.33, "duration": 3.62}, {"text": "Traditional networks--\nsewer, water, electrical,", "start": 545.95, "duration": 3.03}, {"text": "anything that distributes\ncontent, if you like,", "start": 548.98, "duration": 3.412}, {"text": "and the different kind of\ncontent in this way around.", "start": 552.392, "duration": 2.208}, {"text": "You want to model that\nin terms of how you think", "start": 554.6, "duration": 2.1}, {"text": "about flows in those networks.", "start": 556.7, "duration": 1.89}, {"text": "How do I maximize distribution\nof water in an appropriate way,", "start": 558.59, "duration": 3.22}, {"text": "given I've got certain\ncapacities on different pipes,", "start": 561.81, "duration": 2.81}, {"text": "which would mean those\nedges in the graph", "start": 564.62, "duration": 2.07}, {"text": "would have different weights?", "start": 566.69, "duration": 1.86}, {"text": "And you get the idea--", "start": 568.55, "duration": 1.23}, {"text": "political networks, criminal\nnetworks, social networks.", "start": 569.78, "duration": 4.26}, {"text": "One of the things we're\ngoing to see with graphs", "start": 574.04, "duration": 3.0}, {"text": "is that they can capture\ninteresting relationships.", "start": 577.04, "duration": 3.4}, {"text": "So here's an example.", "start": 580.44, "duration": 0.92}, {"text": "It's from that little web\nsite you can see there.", "start": 581.36, "duration": 2.041}, {"text": "You're welcome to go look at it.", "start": 583.401, "duration": 1.819}, {"text": "And this is a graph\nanalyzing The Wizard of Oz.", "start": 585.22, "duration": 3.18}, {"text": "And what's been done\nhere is the size", "start": 588.4, "duration": 2.41}, {"text": "of the node reflects the number\nof scenes in which a character", "start": 590.81, "duration": 3.93}, {"text": "shares dialog.", "start": 594.74, "duration": 1.94}, {"text": "So you can see, obviously\nDorothy is the biggest node", "start": 596.68, "duration": 2.55}, {"text": "there.", "start": 599.23, "duration": 1.8}, {"text": "The edges represent\nshared dialog,", "start": 601.03, "duration": 1.98}, {"text": "so you can see who talks\nto whom in this graph.", "start": 603.01, "duration": 3.08}, {"text": "And then, this group\nhas done another thing,", "start": 606.09, "duration": 1.926}, {"text": "which I'm going to mention.", "start": 608.016, "duration": 1.124}, {"text": "We're not going to solve\ntoday, which is you can also", "start": 609.14, "duration": 2.208}, {"text": "do analysis on the graphs.", "start": 611.348, "duration": 1.152}, {"text": "And in fact, the color\nhere has done something", "start": 612.5, "duration": 3.42}, {"text": "called a min-flow\nor max-cut problem,", "start": 615.92, "duration": 2.23}, {"text": "which is it's tried to identify\nwhich clusters in the graph", "start": 618.15, "duration": 3.89}, {"text": "tend to have a lot\nof interactions", "start": 622.04, "duration": 1.53}, {"text": "within that cluster but not\nvery many with other clusters.", "start": 623.57, "duration": 3.14}, {"text": "And you can kind of see.", "start": 626.71, "duration": 1.0}, {"text": "There's some nice things here,\nright, if you can read it.", "start": 627.71, "duration": 2.374}, {"text": "This is all the\npeople in Kansas.", "start": 630.084, "duration": 2.126}, {"text": "This is Glenda and the\nMunchkins in that part of Oz.", "start": 632.21, "duration": 2.86}, {"text": "There's another little cluster\nover here that I can't read", "start": 635.07, "duration": 3.19}, {"text": "and a little cluster over there.", "start": 638.26, "duration": 1.73}, {"text": "And then the big\ncluster down here.", "start": 639.99, "duration": 2.08}, {"text": "But you can analyze the graph\nto pull out pieces on it.", "start": 642.07, "duration": 3.78}, {"text": "You can also notice, by the way,\nthe book is probably misnamed.", "start": 645.85, "duration": 4.2}, {"text": "It's called The Wizard of Oz.", "start": 650.05, "duration": 1.23}, {"text": "But notice, there's\nthe wizard, who", "start": 651.28, "duration": 2.13}, {"text": "actually doesn't have\na lot of interaction", "start": 653.41, "duration": 2.04}, {"text": "with the other\npeople in this story.", "start": 655.45, "duration": 2.35}, {"text": "It's OK, literary choice.", "start": 657.8, "duration": 2.12}, {"text": "But the graph is\nrepresenting interactions.", "start": 659.92, "duration": 2.474}, {"text": "And I could imagine\nsearching that graph", "start": 662.394, "duration": 1.666}, {"text": "to try and figure\nout things about what", "start": 664.06, "duration": 1.624}, {"text": "goes on in The Wizard of Oz.", "start": 665.684, "duration": 3.376}, {"text": "OK.", "start": 669.06, "duration": 0.67}, {"text": "So why are they useful?", "start": 669.73, "duration": 0.96}, {"text": "We're going to see that not only\ndo graphs capture relationships", "start": 670.69, "duration": 4.26}, {"text": "in these connected\nnetworks, but they're", "start": 674.95, "duration": 2.426}, {"text": "going to support inference.", "start": 677.376, "duration": 1.124}, {"text": "They're going to be able\nto reason about them.", "start": 678.5, "duration": 2.36}, {"text": "And I want to set that up.", "start": 680.86, "duration": 1.09}, {"text": "And then we'll actually look\nat how might we build a graph.", "start": 681.95, "duration": 2.458}, {"text": "And so here are\nsome ways in which", "start": 684.408, "duration": 2.302}, {"text": "I might want to do inference.", "start": 686.71, "duration": 2.2}, {"text": "Given a graph, I\nmight say, is there", "start": 688.91, "duration": 1.8}, {"text": "a sequence of edges, of\nlinks, between two elements?", "start": 690.71, "duration": 3.69}, {"text": "Is there a way to\nget from A to B?", "start": 694.4, "duration": 2.07}, {"text": "What are the sequence of edges\nI would use to get there?", "start": 696.47, "duration": 5.2}, {"text": "A more interesting\nquestion is, can I", "start": 701.67, "duration": 1.86}, {"text": "find the least expensive\npath, also known", "start": 703.53, "duration": 3.03}, {"text": "as the shortest path?", "start": 706.56, "duration": 1.776}, {"text": "If I want to get\nfrom Paris to London,", "start": 708.336, "duration": 1.784}, {"text": "I might like to do it in\nthe least amount of time.", "start": 710.12, "duration": 2.083}, {"text": "What are the set of choices\nI want to make to get there?", "start": 712.203, "duration": 4.377}, {"text": "A third graph problem used a lot\nis called the graph partition", "start": 716.58, "duration": 3.9}, {"text": "problem.", "start": 720.48, "duration": 1.59}, {"text": "Everything I've shown so\nfar-- actually not quite.", "start": 722.07, "duration": 2.13}, {"text": "The first example\ndidn't have it.", "start": 724.2, "duration": 1.14}, {"text": "You might think of all the\nnodes having some connection", "start": 725.34, "duration": 2.37}, {"text": "to every other node.", "start": 727.71, "duration": 0.84}, {"text": "But that may not be true.", "start": 728.55, "duration": 1.98}, {"text": "There may actually\nbe graphs where", "start": 730.53, "duration": 1.5}, {"text": "I've got a set of connected\nelements and another component", "start": 732.03, "duration": 4.02}, {"text": "with no connections\nbetween them.", "start": 736.05, "duration": 2.24}, {"text": "Can I find those?", "start": 738.29, "duration": 0.75}, {"text": "That's called the graph\npartition problem.", "start": 739.04, "duration": 1.75}, {"text": "How do I separate the graph\nout into connected sets", "start": 740.79, "duration": 2.87}, {"text": "of elements?", "start": 743.66, "duration": 1.99}, {"text": "And then the one\nthat we just showed", "start": 745.65, "duration": 1.5}, {"text": "called the min-cut\nmax-flow problem, is", "start": 747.15, "duration": 2.59}, {"text": "is there an efficient\nway to separate out", "start": 749.74, "duration": 2.25}, {"text": "the highly connected elements,\nthe things that interact", "start": 751.99, "duration": 2.67}, {"text": "a lot, and separate out how many\nof those kinds of subgraphs,", "start": 754.66, "duration": 4.11}, {"text": "if you like, are there\ninside of my graph?", "start": 758.77, "duration": 3.804}, {"text": "All right, let me show you\na motivation for graphs.", "start": 762.574, "duration": 3.816}, {"text": "And then we'll build them.", "start": 766.39, "duration": 2.14}, {"text": "I use graph theory everyday.", "start": 768.53, "duration": 2.79}, {"text": "I'm a math nut.", "start": 771.32, "duration": 0.812}, {"text": "It's OK, but I use\ngraph theory everyday.", "start": 772.132, "duration": 1.708}, {"text": "You may as well, if you commute.", "start": 773.84, "duration": 1.89}, {"text": "Because I use it\nto figure out how", "start": 775.73, "duration": 1.5}, {"text": "to get from my home in Lexington\ndown here to Cambridge.", "start": 777.23, "duration": 3.41}, {"text": "And I use a nice\nlittle system called", "start": 780.64, "duration": 2.32}, {"text": "Waze It's a great way\nof doing this, which", "start": 782.96, "duration": 1.89}, {"text": "does graph theory inside of it.", "start": 784.85, "duration": 1.99}, {"text": "So how do I get to my office?", "start": 786.84, "duration": 2.45}, {"text": "Well, I'm going to model\nthe road system using", "start": 789.29, "duration": 3.53}, {"text": "a directed graph, a digraph.", "start": 792.82, "duration": 2.17}, {"text": "Directed graph because\nstreets can be one way.", "start": 794.99, "duration": 2.89}, {"text": "And so I may only have a\nsingle direction there.", "start": 797.88, "duration": 3.11}, {"text": "And the idea is, I'm\ngoing to simply let", "start": 800.99, "duration": 2.21}, {"text": "my nodes or my\nvertices be points", "start": 803.2, "duration": 2.43}, {"text": "where I have intersections.", "start": 805.63, "duration": 1.5}, {"text": "They're places where I can\nmake a choice or places where", "start": 807.13, "duration": 2.333}, {"text": "I have terminals, things\nI'm going to end up in.", "start": 809.463, "duration": 2.497}, {"text": "The edges would just be the\nconnections between points,", "start": 811.96, "duration": 3.03}, {"text": "the roads on which I can drive.", "start": 814.99, "duration": 2.71}, {"text": "Some Boston drivers have a\ndifferent kind of digraph", "start": 817.7, "duration": 2.22}, {"text": "in which they don't care whether\nthat road is drivable or not.", "start": 819.92, "duration": 2.659}, {"text": "They just go on it.", "start": 822.579, "duration": 0.791}, {"text": "You may have seen some of these.", "start": 823.37, "duration": 1.333}, {"text": "But I want to keep my graphs as\nreal roads that I can drive on.", "start": 824.703, "duration": 3.587}, {"text": "And I'm not going to go\nagainst the \"One Way\" sign.", "start": 828.29, "duration": 2.98}, {"text": "Each edge will have a weight.", "start": 831.27, "duration": 2.46}, {"text": "Here I actually\nhave some choices.", "start": 833.73, "duration": 2.68}, {"text": "All right, the obvious one, the\none that Waze probably uses,", "start": 836.41, "duration": 3.71}, {"text": "is something like what's the\nexpected time between a source", "start": 840.12, "duration": 3.69}, {"text": "and a destination node?", "start": 843.81, "duration": 1.436}, {"text": "How long do I expect it to\ntake me to get from this point", "start": 845.246, "duration": 2.374}, {"text": "to that?", "start": 847.62, "duration": 0.612}, {"text": "And then, as you\ncan see, I'm going", "start": 848.232, "duration": 1.458}, {"text": "to try and find overall what's\nthe best way to get around it.", "start": 849.69, "duration": 3.47}, {"text": "You could pick just distance.", "start": 853.16, "duration": 2.9}, {"text": "What's the distance\nbetween the two?", "start": 856.06, "duration": 1.837}, {"text": "And while there there's\na relationship here,", "start": 857.897, "duration": 1.833}, {"text": "it's not direct because it\nwill depend on traffic on it.", "start": 859.73, "duration": 3.2}, {"text": "Or you could take something\neven funkier like what's", "start": 862.93, "duration": 2.28}, {"text": "the average speed of\ntravel between the source", "start": 865.21, "duration": 3.42}, {"text": "and destination node?", "start": 868.63, "duration": 2.67}, {"text": "And once I've got\nthe graph, then I'm", "start": 871.3, "duration": 2.48}, {"text": "going to solve an\noptimization problem.", "start": 873.78, "duration": 2.82}, {"text": "What's the shortest weight\nbetween my house and my office", "start": 876.6, "duration": 2.55}, {"text": "that gets me into work?", "start": 879.15, "duration": 2.865}, {"text": "You can make a choice here.", "start": 882.015, "duration": 1.125}, {"text": "As I said, a commercial system\nlike Waze uses this one.", "start": 883.14, "duration": 4.23}, {"text": "My wife and I actually\nhave arguments", "start": 887.37, "duration": 1.59}, {"text": "about commuting\nbecause she's a firm", "start": 888.96, "duration": 1.5}, {"text": "believer in the second one,\njust shortest distance.", "start": 890.46, "duration": 4.29}, {"text": "I actually like the third\none because I get anxious", "start": 894.75, "duration": 3.87}, {"text": "when I'm driving.", "start": 898.62, "duration": 1.31}, {"text": "And so as long as I feel like\nI'm making progress, I like it.", "start": 899.93, "duration": 3.16}, {"text": "So even though I may be\nserpentining all the way", "start": 903.09, "duration": 2.725}, {"text": "through the back roads of\nCambridge, if I'm driving fast,", "start": 905.815, "duration": 2.375}, {"text": "I feel like I'm getting there.", "start": 908.19, "duration": 1.25}, {"text": "So I like optimizing this\nbottom one down there.", "start": 909.44, "duration": 2.59}, {"text": "And if you see me on the road,\nyou'll know why I say that,", "start": 912.03, "duration": 2.55}, {"text": "and then get out of the way.", "start": 914.58, "duration": 1.41}, {"text": "Thinking about navigation\nthrough systems", "start": 919.2, "duration": 1.89}, {"text": "actually gives us a\nlittle bit of history", "start": 921.09, "duration": 1.708}, {"text": "because, in fact, the very first\nreported use of graph theory", "start": 922.798, "duration": 3.542}, {"text": "was exactly this problem.", "start": 926.34, "duration": 2.22}, {"text": "Early 1700s, it's called\nthe Bridges of Koenigsberg.", "start": 928.56, "duration": 3.09}, {"text": "Koenigsberg is a\ncity that has a set", "start": 931.65, "duration": 2.104}, {"text": "of islands and rivers in it.", "start": 933.754, "duration": 1.166}, {"text": "There are seven bridges that\nconnect up those islands.", "start": 934.92, "duration": 2.83}, {"text": "And the question that\nwas posed is, is it", "start": 937.75, "duration": 2.33}, {"text": "possible to take a walk that\ntraverses each of the seven", "start": 940.08, "duration": 4.26}, {"text": "bridges exactly once?", "start": 944.34, "duration": 2.34}, {"text": "So could you take a walk\nwhere you go over each bridge", "start": 946.68, "duration": 2.25}, {"text": "exactly once?", "start": 948.93, "duration": 1.92}, {"text": "I'm showing you\nthis because it lets", "start": 950.85, "duration": 1.59}, {"text": "us think about how to in fact\ncapture things in a model.", "start": 952.44, "duration": 4.2}, {"text": "This problem was solved by\na great Swiss mathematician,", "start": 956.64, "duration": 3.92}, {"text": "Leonhard Euler.", "start": 960.56, "duration": 1.71}, {"text": "And here's what he said.", "start": 962.27, "duration": 1.77}, {"text": "Make each island a node.", "start": 964.04, "duration": 2.34}, {"text": "Each bridge is just\nan undirected edge.", "start": 966.38, "duration": 3.24}, {"text": "And notice in doing\nthat, he's abstracted", "start": 969.62, "duration": 2.97}, {"text": "away irrelevant details.", "start": 972.59, "duration": 3.15}, {"text": "You don't care what the\nsize of the island is.", "start": 975.74, "duration": 2.65}, {"text": "You don't care how\nlong the bridges are.", "start": 978.39, "duration": 1.67}, {"text": "You simply want to think about\nwhat are the connections here?", "start": 980.06, "duration": 3.917}, {"text": "And then you can ask a question.", "start": 983.977, "duration": 1.333}, {"text": "In this graph, is it\npossible to find a way", "start": 985.31, "duration": 2.28}, {"text": "to walk through it so that\nyou go through each edge", "start": 987.59, "duration": 3.15}, {"text": "exactly once?", "start": 990.74, "duration": 2.58}, {"text": "And as Euler showed,\nthe answer is no.", "start": 993.32, "duration": 2.68}, {"text": "And if you're curious, go\nlook it up on Wikipedia.", "start": 996.0, "duration": 2.11}, {"text": "There's a nice, elegant\nsolution to why that's the case.", "start": 998.11, "duration": 2.434}, {"text": "But here's what\nwe're going to do.", "start": 1000.544, "duration": 1.416}, {"text": "We're going to use\nthose graphs to think", "start": 1001.96, "duration": 1.74}, {"text": "about these kinds of problems.", "start": 1003.7, "duration": 2.694}, {"text": "And in fact, the example\nI'm going to show you", "start": 1006.394, "duration": 1.916}, {"text": "are going to be\nshortest path problems.", "start": 1008.31, "duration": 1.624}, {"text": "So with that, let's turn to\nactually building a graph", "start": 1009.934, "duration": 4.876}, {"text": "and then thinking about\nhow we're going to use it.", "start": 1014.81, "duration": 2.86}, {"text": "So we're going to start\nby constructing graphs.", "start": 1017.67, "duration": 2.414}, {"text": "And then what we're\ngoing to do is", "start": 1020.084, "duration": 1.416}, {"text": "show how we can build\nsearch algorithms", "start": 1021.5, "duration": 3.42}, {"text": "on top of those graphs.", "start": 1024.92, "duration": 1.169}, {"text": "And I hope that that flicker\nis going to go away here soon.", "start": 1026.089, "duration": 2.73}, {"text": "Here we go.", "start": 1028.819, "duration": 1.111}, {"text": "So to build a graph--", "start": 1029.93, "duration": 2.201}, {"text": "actually, I shouldn't have\nput this slide up so fast.", "start": 1032.131, "duration": 2.208}, {"text": "I've got lots of choices here.", "start": 1034.339, "duration": 1.411}, {"text": "If I'm thinking about maps,\none way to build a graph", "start": 1035.75, "duration": 2.4}, {"text": "would really to just be\nbuild something with latitude", "start": 1038.15, "duration": 2.82}, {"text": "and longitude on it.", "start": 1040.97, "duration": 2.099}, {"text": "But as we've already seen, we'd\nlike to extract things away", "start": 1043.069, "duration": 2.971}, {"text": "from the graphs.", "start": 1046.04, "duration": 1.38}, {"text": "And so a natural\nchoice is to say,", "start": 1047.42, "duration": 2.02}, {"text": "let's represent the nodes in\nthe graph just as objects.", "start": 1049.44, "duration": 3.68}, {"text": "I'm going to use\nclasses for these.", "start": 1053.12, "duration": 2.23}, {"text": "So here's my\ndefinition of a node.", "start": 1055.35, "duration": 2.09}, {"text": "It's pretty straightforward.", "start": 1057.44, "duration": 1.87}, {"text": "I'm going to assume that\nthe only information for now", "start": 1059.31, "duration": 2.63}, {"text": "I store in a node is just a\nname, which I'm going to assume", "start": 1061.94, "duration": 2.73}, {"text": "is a string.", "start": 1064.67, "duration": 1.39}, {"text": "So I've got a class\ndefinition for node.", "start": 1066.06, "duration": 1.94}, {"text": "It inherits from the\nbase Python object class.", "start": 1068.0, "duration": 3.75}, {"text": "I need ways to create\ninstances of nodes,", "start": 1071.75, "duration": 2.29}, {"text": "so I've got an init function.", "start": 1074.04, "duration": 1.7}, {"text": "And I'm simply going to\nstore inside each instance,", "start": 1075.74, "duration": 3.21}, {"text": "in other words, inside of\nself, under the variable name,", "start": 1078.95, "duration": 3.06}, {"text": "whatever I passed in as\nthe name of that node.", "start": 1082.01, "duration": 4.0}, {"text": "Of course, if I've got ways\nto create things with a name,", "start": 1086.01, "duration": 2.52}, {"text": "I need to get them back out.", "start": 1088.53, "duration": 1.179}, {"text": "So I've got a way of\nselecting it back out.", "start": 1089.709, "duration": 1.791}, {"text": "If I ask an instance of\na node, what's your name?", "start": 1091.5, "duration": 2.94}, {"text": "By calling getName it\nwill return that value.", "start": 1094.44, "duration": 2.675}, {"text": "And to print things\nout, I'm just", "start": 1097.115, "duration": 1.375}, {"text": "going to print out the name.", "start": 1098.49, "duration": 1.166}, {"text": "This is pretty straightforward.", "start": 1099.656, "duration": 1.92}, {"text": "And this, of course, lets\nme now create as many nodes", "start": 1101.576, "duration": 2.704}, {"text": "as I would like.", "start": 1104.28, "duration": 2.95}, {"text": "Edges?", "start": 1107.23, "duration": 1.33}, {"text": "Well, an edge\nconnects up two nodes.", "start": 1108.56, "duration": 2.6}, {"text": "So again, I can do a fairly\nstraightforward construction", "start": 1111.16, "duration": 3.51}, {"text": "of a class.", "start": 1114.67, "duration": 1.43}, {"text": "Again, it's going to inherit\nfrom the base Python object.", "start": 1116.1, "duration": 3.42}, {"text": "To create an\ninstance of an edge,", "start": 1119.52, "duration": 2.19}, {"text": "I'm going to make an assumption,\nan important one which", "start": 1121.71, "duration": 2.31}, {"text": "we're going to come back to.", "start": 1124.02, "duration": 1.166}, {"text": "And the assumption is that the\narguments passed in, source", "start": 1125.186, "duration": 3.034}, {"text": "and destination, are nodes--", "start": 1128.22, "duration": 2.61}, {"text": "not names-- the\nnodes themselves,", "start": 1130.83, "duration": 2.52}, {"text": "the actual instances\nof the object class.", "start": 1133.35, "duration": 3.03}, {"text": "And what will I do?", "start": 1136.38, "duration": 0.83}, {"text": "Inside of the edge, I'm going\nto set internal variables.", "start": 1137.21, "duration": 3.84}, {"text": "For each instance of the\nedge, source and destination", "start": 1141.05, "duration": 3.02}, {"text": "are going to point\nto those nodes,", "start": 1144.07, "duration": 2.2}, {"text": "to those objects that I\ncreated out of the node class.", "start": 1146.27, "duration": 4.091}, {"text": "Next two things are\nstraightforward.", "start": 1150.361, "duration": 1.499}, {"text": "I can get those things back out.", "start": 1151.86, "duration": 2.42}, {"text": "And then the final\npiece is, if when", "start": 1154.28, "duration": 1.83}, {"text": "I want to print out\nwhat an edge looks like,", "start": 1156.11, "duration": 2.82}, {"text": "I'm going to ask\nthat it print out", "start": 1158.93, "duration": 2.31}, {"text": "the name of the source,\nand then an arrow,", "start": 1161.24, "duration": 2.76}, {"text": "and then the name\nof the destination.", "start": 1164.0, "duration": 1.9}, {"text": "So notice what I do there.", "start": 1165.9, "duration": 1.82}, {"text": "Given an instance of an\nedge, I can print it.", "start": 1167.72, "duration": 3.85}, {"text": "And it will get the source or\nthe node associated with source", "start": 1171.57, "duration": 4.83}, {"text": "inside this instance, get\nfor that the getName method,", "start": 1176.4, "duration": 5.112}, {"text": "and then call it.", "start": 1181.512, "duration": 0.708}, {"text": "Notice the open-close paren\nthere to actually call it.", "start": 1182.22, "duration": 2.821}, {"text": "What does that do?", "start": 1185.041, "duration": 0.749}, {"text": "It says, inside the\nedge I've got something", "start": 1185.79, "duration": 2.234}, {"text": "that points to a node.", "start": 1188.024, "duration": 0.916}, {"text": "I get that node.", "start": 1188.94, "duration": 0.75}, {"text": "I take the method\nassociated with it.", "start": 1189.69, "duration": 1.96}, {"text": "And I call it.", "start": 1191.65, "duration": 0.71}, {"text": "That returns the string.", "start": 1192.36, "duration": 2.22}, {"text": "And then I glue that\ntogether with the arrow.", "start": 1194.58, "duration": 1.98}, {"text": "I do the same thing\non the destination.", "start": 1196.56, "duration": 1.74}, {"text": "And I just print it out.", "start": 1198.3, "duration": 2.94}, {"text": "Pretty straightforward,\nhopefully.", "start": 1201.24, "duration": 3.53}, {"text": "OK, now I have to make a\ndecision about the graph.", "start": 1204.77, "duration": 2.097}, {"text": "I'm going to start with\ndigraphs, directed graphs.", "start": 1206.867, "duration": 2.083}, {"text": "And I need to think about how\nI might represent the graph.", "start": 1208.95, "duration": 2.969}, {"text": "I can create nodes.", "start": 1211.919, "duration": 0.791}, {"text": "I can create edges, but I've\ngot to bring them all together.", "start": 1212.71, "duration": 3.37}, {"text": "So I'll remind you, a\ndigraph is a directed graph.", "start": 1216.08, "duration": 2.35}, {"text": "The edges pass in\nonly one direction.", "start": 1218.43, "duration": 3.23}, {"text": "And here's one\nway I could do it.", "start": 1221.66, "duration": 3.67}, {"text": "Given all the sources\nand all the destinations,", "start": 1225.33, "duration": 2.55}, {"text": "I could just create a big matrix\ncalled an adjacency matrix.", "start": 1227.88, "duration": 4.54}, {"text": "The rows would be\nall the sources.", "start": 1232.42, "duration": 2.96}, {"text": "The columns would be\nall the destinations.", "start": 1235.38, "duration": 2.73}, {"text": "And then in a particular\nspot in the matrix,", "start": 1238.11, "duration": 2.07}, {"text": "if there is an edge between\na source and a destination,", "start": 1240.18, "duration": 3.57}, {"text": "I'd just put a one.", "start": 1243.75, "duration": 1.56}, {"text": "Otherwise I'd put a zero.", "start": 1245.31, "duration": 3.07}, {"text": "Note, by the way, because\nit's a directed graph,", "start": 1248.38, "duration": 3.59}, {"text": "it's not symmetric.", "start": 1251.97, "duration": 1.71}, {"text": "There might be a one between S\nand D, but not between D and S,", "start": 1253.68, "duration": 3.57}, {"text": "unless there are\nedges both ways.", "start": 1257.25, "duration": 2.7}, {"text": "This would be a\nperfectly reasonable way", "start": 1259.95, "duration": 2.1}, {"text": "to represent a graph, but\nnot the most convenient one.", "start": 1262.05, "duration": 5.09}, {"text": "I'd have to go into the\nmatrix to look things up.", "start": 1267.14, "duration": 2.13}, {"text": "It may also not be\na very efficient way", "start": 1269.27, "duration": 2.16}, {"text": "of representing things.", "start": 1271.43, "duration": 1.351}, {"text": "For example, if there are\nvery few edges in the graph,", "start": 1272.781, "duration": 2.249}, {"text": "I could have a huge\nmatrix with mostly zeros.", "start": 1275.03, "duration": 3.63}, {"text": "And that's not the most\neffective way to do it.", "start": 1278.66, "duration": 3.04}, {"text": "So I'm going to use\nan alternative called", "start": 1281.7, "duration": 2.63}, {"text": "an adjacency list.", "start": 1284.33, "duration": 1.88}, {"text": "And the idea here is, for\nevery node in the graph.", "start": 1286.21, "duration": 4.27}, {"text": "I'm going to associate with\nit a list of destinations.", "start": 1290.48, "duration": 2.91}, {"text": "That is, for a node,\nwhat are the places", "start": 1293.39, "duration": 2.52}, {"text": "I can reach with a single edge?", "start": 1295.91, "duration": 3.93}, {"text": "OK, so let's see what that\ndoes if we want to build it.", "start": 1299.84, "duration": 3.27}, {"text": "And yes, there's a\nlot of code here,", "start": 1303.11, "duration": 1.5}, {"text": "but it's pretty easy\nto look through I hope.", "start": 1304.61, "duration": 3.02}, {"text": "Here's the choice\nI'm going to make.", "start": 1307.63, "duration": 3.694}, {"text": "Again, what's a graph?", "start": 1311.324, "duration": 0.916}, {"text": "It's a set of nodes.", "start": 1312.24, "duration": 0.94}, {"text": "It's a set of edges.", "start": 1313.18, "duration": 1.52}, {"text": "I'm going to have a way of\nputting nodes into the graph.", "start": 1314.7, "duration": 2.98}, {"text": "And I'm going to choose to, when\nI put a node into the graph,", "start": 1317.68, "duration": 3.29}, {"text": "to store it as a\nkey in a dictionary.", "start": 1320.97, "duration": 3.436}, {"text": "OK?", "start": 1324.406, "duration": 2.294}, {"text": "When I initialize\nthe graph, I'm just", "start": 1326.7, "duration": 2.1}, {"text": "going to set this\ninternal variable, edges,", "start": 1328.8, "duration": 2.91}, {"text": "to be an empty dictionary.", "start": 1331.71, "duration": 2.57}, {"text": "And the second\npart of it is, when", "start": 1334.28, "duration": 1.68}, {"text": "I add an edge to the\ngraph between two", "start": 1335.96, "duration": 2.88}, {"text": "nodes from a source\nto a destination,", "start": 1338.84, "duration": 3.18}, {"text": "I'm going to take that point\nin the dictionary associated", "start": 1342.02, "duration": 3.234}, {"text": "with the source.", "start": 1345.254, "duration": 0.666}, {"text": "It's a key.", "start": 1345.92, "duration": 1.385}, {"text": "And associated\nwith it, I'm going", "start": 1347.305, "duration": 1.375}, {"text": "to just have a list of\nthe nodes I can reach", "start": 1348.68, "duration": 3.15}, {"text": "from edges from that source.", "start": 1351.83, "duration": 2.634}, {"text": "So notice what happens here.", "start": 1354.464, "duration": 1.166}, {"text": "If I want to add\na node, remember,", "start": 1355.63, "duration": 2.22}, {"text": "it's a node not an edge--", "start": 1357.85, "duration": 1.85}, {"text": "I'll first check to make\nsure that it's not already", "start": 1359.7, "duration": 3.61}, {"text": "in the dictionary.", "start": 1363.31, "duration": 1.53}, {"text": "That little loop is\nbasic, or that if is", "start": 1364.84, "duration": 1.86}, {"text": "saying, if it's in this set\nof keys, it will return true.", "start": 1366.7, "duration": 3.147}, {"text": "And I'm going to complain.", "start": 1369.847, "duration": 1.083}, {"text": "I'm trying to copy a\nnode or duplicate a node.", "start": 1370.93, "duration": 3.034}, {"text": "Otherwise, notice what I do.", "start": 1373.964, "duration": 1.166}, {"text": "When I put a node\ninto the dictionary,", "start": 1375.13, "duration": 1.62}, {"text": "I go into that\ndictionary, edges.", "start": 1376.75, "duration": 3.0}, {"text": "I create an entry with\nthe key that is the node.", "start": 1379.75, "duration": 4.3}, {"text": "And the value I put in there\nis initially an empty list.", "start": 1384.05, "duration": 3.89}, {"text": "I'm going to say one\nmore piece carefully.", "start": 1387.94, "duration": 1.75}, {"text": "It's a node not a name.", "start": 1389.69, "duration": 2.88}, {"text": "And that's OK in Python.", "start": 1392.57, "duration": 1.17}, {"text": "It is literally the\nkey is the node itself.", "start": 1393.74, "duration": 2.54}, {"text": "It's an object, which\nis what I'd like.", "start": 1396.28, "duration": 2.545}, {"text": "All right, what if I\nwant to add an edge?", "start": 1398.825, "duration": 2.245}, {"text": "Well, an edge is going\nto go from a source", "start": 1401.07, "duration": 2.52}, {"text": "to a destination node.", "start": 1403.59, "duration": 2.21}, {"text": "So, I'm going to get out from\nthe edge the source piece.", "start": 1405.8, "duration": 4.904}, {"text": "I'm going to get\nout from the edge", "start": 1410.704, "duration": 1.416}, {"text": "the destination piece by\ncalling those methods.", "start": 1412.12, "duration": 2.19}, {"text": "Again, notice the open-close\nparen, which takes the method", "start": 1414.31, "duration": 3.03}, {"text": "and actually calls it.", "start": 1417.34, "duration": 1.2}, {"text": "Because remember, an edge\nwas an object itself.", "start": 1418.54, "duration": 3.18}, {"text": "Given those, I'll check\nto make sure that they", "start": 1421.72, "duration": 3.15}, {"text": "are both in the dictionary.", "start": 1424.87, "duration": 2.16}, {"text": "That is, I've already\nadded them to the graph.", "start": 1427.03, "duration": 2.064}, {"text": "I can't make a\nconnection between things", "start": 1429.094, "duration": 1.666}, {"text": "that aren't in the graph.", "start": 1430.76, "duration": 1.989}, {"text": "And then notice the\nnice little thing I do.", "start": 1432.749, "duration": 1.791}, {"text": "Presuming I have both of\nthem in the dictionary,", "start": 1434.54, "duration": 3.49}, {"text": "I take the dictionary, I index\ninto it with the source node.", "start": 1438.03, "duration": 4.44}, {"text": "That gives me a key\ninto the dictionary.", "start": 1442.47, "duration": 1.77}, {"text": "I pull out the entry at\nthat point, which is a list,", "start": 1444.24, "duration": 3.42}, {"text": "because I created them up here.", "start": 1447.66, "duration": 1.86}, {"text": "And I add the destination node\nwith append into the list,", "start": 1449.52, "duration": 4.41}, {"text": "stick it back in.", "start": 1453.93, "duration": 2.73}, {"text": "So this now captures what\nI said I wanted to do.", "start": 1456.66, "duration": 3.32}, {"text": "The nodes are represented\nas keys in the dictionary.", "start": 1459.98, "duration": 3.68}, {"text": "And the edges are\nrepresented by destinations", "start": 1463.66, "duration": 2.74}, {"text": "as values in the list\nassociated with the key.", "start": 1466.4, "duration": 3.222}, {"text": "So you can see, if I\nwant to see is there", "start": 1469.622, "duration": 1.708}, {"text": "an edge between a source\nand a destination,", "start": 1471.33, "duration": 3.495}, {"text": "I would look at our\nsource in the dictionary,", "start": 1474.825, "duration": 1.875}, {"text": "and then check in\nthe list to see", "start": 1476.7, "duration": 1.08}, {"text": "if the destination is there.", "start": 1477.78, "duration": 1.166}, {"text": "OK, the rest of\nthis then follows", "start": 1481.59, "duration": 2.009}, {"text": "pretty straightforwardly.", "start": 1483.599, "duration": 1.041}, {"text": "If I want to get all the\nchildren of a particular node,", "start": 1484.64, "duration": 3.45}, {"text": "I just go into the\ndictionary, edges,", "start": 1488.09, "duration": 1.931}, {"text": "and look up the value\nassociated with that node.", "start": 1490.021, "duration": 1.999}, {"text": "It gives me back the list.", "start": 1492.02, "duration": 1.47}, {"text": "I've got all the\nthings I can reach", "start": 1493.49, "duration": 1.89}, {"text": "from that particular node.", "start": 1495.38, "duration": 2.51}, {"text": "If I want to know if a\nnode is in the graph,", "start": 1497.89, "duration": 2.68}, {"text": "I just search over the\nkeys of the dictionary.", "start": 1500.57, "duration": 4.5}, {"text": "They'll either\nreturn true or false.", "start": 1505.07, "duration": 2.382}, {"text": "If I want to get a\nnode by its name, which", "start": 1507.452, "duration": 2.26}, {"text": "is going to be probably more\nconvenient than trying to keep", "start": 1509.712, "duration": 2.458}, {"text": "track of all the\nnodes, well I could", "start": 1512.17, "duration": 1.86}, {"text": "pass in a name as a string.", "start": 1514.03, "duration": 1.369}, {"text": "And what will I do?", "start": 1515.399, "duration": 0.791}, {"text": "I'll just search over all\nthe keys in the dictionary,", "start": 1516.19, "duration": 3.15}, {"text": "using the getName method\nassociated with it--", "start": 1519.34, "duration": 2.85}, {"text": "there's the call-- then\nchecking to see if it's", "start": 1522.19, "duration": 2.25}, {"text": "the thing I'm looking for.", "start": 1524.44, "duration": 2.11}, {"text": "And if it is, I'll return M.\nI'll return the node itself.", "start": 1526.55, "duration": 5.44}, {"text": "What about this thing here?", "start": 1531.99, "duration": 2.445}, {"text": "It might bother\nyou a little bit.", "start": 1534.435, "duration": 1.422}, {"text": "Wait a minute.", "start": 1535.857, "duration": 0.583}, {"text": "That raise, isn't it always\ngoing to throw an error?", "start": 1536.44, "duration": 3.36}, {"text": "No, because I'm going to\ngo through this loop first.", "start": 1539.8, "duration": 2.71}, {"text": "And if I actually find\na node, that return", "start": 1542.51, "duration": 2.18}, {"text": "is going to pop me out of\nthe call and return the node.", "start": 1544.69, "duration": 3.48}, {"text": "So I'll only ever get\nto this if in fact I", "start": 1548.17, "duration": 2.52}, {"text": "couldn't find anything here.", "start": 1550.69, "duration": 1.75}, {"text": "And so it's an appropriate\nway to simply raise the error", "start": 1552.44, "duration": 2.39}, {"text": "to say, if I get to this\npoint, couldn't find", "start": 1554.83, "duration": 2.28}, {"text": "it, raise an error to\nsay the node's not there.", "start": 1557.11, "duration": 4.13}, {"text": "The last piece looks\na little funky,", "start": 1561.24, "duration": 1.5}, {"text": "Although you may have seen this.", "start": 1562.74, "duration": 1.333}, {"text": "I like to print out\ninformation about a graph.", "start": 1564.073, "duration": 2.827}, {"text": "And I made a choice, which\nis, I'm going to print out", "start": 1566.9, "duration": 3.1}, {"text": "all of the links in the graph.", "start": 1570.0, "duration": 3.18}, {"text": "So I'm going to set up a string\ninitially here that's empty.", "start": 1573.18, "duration": 3.3}, {"text": "And then I'm going to loop over\nevery key in the dictionary,", "start": 1576.48, "duration": 3.96}, {"text": "every node in the graph.", "start": 1580.44, "duration": 1.785}, {"text": "And for each one, I'm going to\nlook at all the destinations.", "start": 1582.225, "duration": 2.815}, {"text": "So notice, I take\nthe dictionary,", "start": 1585.04, "duration": 2.0}, {"text": "I look up the things\nat that point.", "start": 1587.04, "duration": 1.56}, {"text": "That's a list.", "start": 1588.6, "duration": 0.63}, {"text": "I loop over that.", "start": 1589.23, "duration": 1.34}, {"text": "And I'm just going\nto add in to result,", "start": 1590.57, "duration": 2.33}, {"text": "the name of the source,\nan arrow, and the name", "start": 1592.9, "duration": 2.81}, {"text": "of the destination followed\nby a carriage return.", "start": 1595.71, "duration": 3.589}, {"text": "I'll show you an\nexample in a second.", "start": 1599.299, "duration": 1.541}, {"text": "But I'm simply walking down the\ngraph, saying for each source,", "start": 1600.84, "duration": 3.16}, {"text": "what can it reach?", "start": 1604.0, "duration": 0.9}, {"text": "I'll print them all out.", "start": 1604.9, "duration": 1.47}, {"text": "And then I'll return everything\nbut the last element.", "start": 1606.37, "duration": 2.681}, {"text": "I'm going to throw away\nthe last carriage return", "start": 1609.051, "duration": 1.999}, {"text": "because I don't really need it.", "start": 1611.05, "duration": 2.12}, {"text": "So let me show you\nan example here,", "start": 1613.17, "duration": 1.76}, {"text": "trusting that my Python has\ncome up the way I wanted it to.", "start": 1614.93, "duration": 2.97}, {"text": "So I'm going to load that in,\nignore that for the moment.", "start": 1620.56, "duration": 4.38}, {"text": "And I'm going to set g to--", "start": 1624.94, "duration": 2.64}, {"text": "I've got something we're going\nto come back to in a second", "start": 1627.58, "duration": 3.4}, {"text": "that actually creates a graph.", "start": 1630.98, "duration": 1.93}, {"text": "And if I print out\ng, it prints out,", "start": 1632.91, "duration": 4.22}, {"text": "in this case, all of the links\nfrom source to destination,", "start": 1637.13, "duration": 5.43}, {"text": "each one on a new line.", "start": 1642.56, "duration": 3.12}, {"text": "OK.", "start": 1645.68, "duration": 2.49}, {"text": "So I can create the graphs.", "start": 1648.17, "duration": 3.63}, {"text": "That was digraphs.", "start": 1651.8, "duration": 3.27}, {"text": "Suppose I actually\nwant to get a graph.", "start": 1655.07, "duration": 3.63}, {"text": "Well, I'm going to make it\nas a subclass of digraph.", "start": 1658.7, "duration": 3.4}, {"text": "And in particular, the\nonly thing I'm going to do", "start": 1662.1, "duration": 2.45}, {"text": "is I'm going to shadow the\naddEdge method of digraphs.", "start": 1664.55, "duration": 4.829}, {"text": "So if you think about it,\nit's so I make a graph.", "start": 1669.379, "duration": 2.041}, {"text": "If I ask it to add\nedges, it's going", "start": 1671.42, "duration": 1.5}, {"text": "to use this version of addEdge.", "start": 1672.92, "duration": 2.487}, {"text": "And what am I going to do?", "start": 1675.407, "duration": 1.083}, {"text": "I know in a graph, I could\nhave both directions work.", "start": 1676.49, "duration": 5.26}, {"text": "So, given an edge that I\nwant to add into this graph,", "start": 1681.75, "duration": 4.76}, {"text": "I'll use the method\nfrom the digraph class.", "start": 1686.51, "duration": 3.0}, {"text": "And I'll add an edge going\nfrom source to destination.", "start": 1689.51, "duration": 4.25}, {"text": "And then I'll just create\nan edge the other direction.", "start": 1693.76, "duration": 4.51}, {"text": "Destination becomes source.", "start": 1698.27, "duration": 1.29}, {"text": "Source becomes destination.", "start": 1699.56, "duration": 1.77}, {"text": "And I'll add that\ninto the graph.", "start": 1701.33, "duration": 3.03}, {"text": "Nice and easy,\nstraightforward to do.", "start": 1704.36, "duration": 2.79}, {"text": "And this is kind of nice\nbecause, in a graph,", "start": 1707.15, "duration": 3.21}, {"text": "I don't have any directionality\nassociated with the edge.", "start": 1710.36, "duration": 2.4}, {"text": "I can go in either direction.", "start": 1712.76, "duration": 1.208}, {"text": "I just created\nsomething like that.", "start": 1713.968, "duration": 1.697}, {"text": "And you might say,\nwell, wait a minute.", "start": 1715.665, "duration": 1.625}, {"text": "Why did I pick graph to\nbe a subclass of digraph?", "start": 1717.29, "duration": 3.48}, {"text": "Why not the other way around?", "start": 1720.77, "duration": 2.71}, {"text": "Reasonable question, and you\nactually know the answer.", "start": 1723.48, "duration": 3.14}, {"text": "You've seen this before.", "start": 1726.62, "duration": 1.92}, {"text": "One of the things\nI'd like to have", "start": 1728.54, "duration": 1.47}, {"text": "is the property that if the\nclient code works correctly", "start": 1730.01, "duration": 3.72}, {"text": "using an instance\nof the bigger type,", "start": 1733.73, "duration": 2.07}, {"text": "it should also\nwork correctly when", "start": 1735.8, "duration": 1.77}, {"text": "it is using an instance of the\nsubtype substituted in, which", "start": 1737.57, "duration": 4.03}, {"text": "is another way of\nsaying anything that", "start": 1741.6, "duration": 1.68}, {"text": "works for a digraph will\nalso work for a graph,", "start": 1743.28, "duration": 4.17}, {"text": "but not vice versa.", "start": 1747.45, "duration": 1.89}, {"text": "And as a consequence,\nit's easier", "start": 1749.34, "duration": 1.5}, {"text": "to make the graph a\nsubclass of digraph.", "start": 1750.84, "duration": 3.044}, {"text": "Notice the other thing\nthat's nice here.", "start": 1753.884, "duration": 1.666}, {"text": "One little piece of\ncode, just change", "start": 1755.55, "duration": 2.25}, {"text": "what it means to make an edge.", "start": 1757.8, "duration": 1.74}, {"text": "Everything else still holds.", "start": 1759.54, "duration": 1.98}, {"text": "And also notice-- you've seen\nthis before-- how we nicely", "start": 1761.52, "duration": 2.46}, {"text": "inherit the method\nfrom the subclass", "start": 1763.98, "duration": 3.21}, {"text": "by explicitly calling it.", "start": 1767.19, "duration": 1.21}, {"text": "It says, from the digraph class,\nget out the addEdge method", "start": 1768.4, "duration": 3.68}, {"text": "and apply it.", "start": 1772.08, "duration": 2.77}, {"text": "OK.", "start": 1774.85, "duration": 1.8}, {"text": "So we can build graphs.", "start": 1776.65, "duration": 1.68}, {"text": "We're going to do\nthat in a second.", "start": 1778.33, "duration": 2.47}, {"text": "Let's turn now to thinking about\nI'd like to search on a graph.", "start": 1780.8, "duration": 3.45}, {"text": "And I'm going to start with\nthe classic graph optimization", "start": 1784.25, "duration": 2.63}, {"text": "problem.", "start": 1786.88, "duration": 1.05}, {"text": "I'd like to find\nthe best path home.", "start": 1787.93, "duration": 1.96}, {"text": "So, what's the shortest path\nfrom one node to another?", "start": 1789.89, "duration": 4.31}, {"text": "And that shortest path\ninitially will just", "start": 1794.2, "duration": 2.02}, {"text": "be the shortest\nsequence of steps.", "start": 1796.22, "duration": 2.95}, {"text": "I hope I'm not having\na little attack here.", "start": 1802.829, "duration": 1.791}, {"text": "You just saw that\nscreen blank out, right?", "start": 1804.62, "duration": 2.06}, {"text": "The shortest path of\nsteps with the property", "start": 1806.68, "duration": 2.83}, {"text": "that the source of the first\nedge is the starting point.", "start": 1809.51, "duration": 4.56}, {"text": "The destination of\nthe last edge is", "start": 1814.07, "duration": 1.589}, {"text": "the thing I'm trying to get to.", "start": 1815.659, "duration": 1.291}, {"text": "And for any edge\nin between, if I", "start": 1816.95, "duration": 2.25}, {"text": "go in my first edge from\nsource to say node one,", "start": 1819.2, "duration": 3.66}, {"text": "the next edge has that\ndestination as its source.", "start": 1822.86, "duration": 2.96}, {"text": "So there's simply a chain that\nsays can go from here to here", "start": 1825.82, "duration": 2.5}, {"text": "to here to here to get\nall the way through.", "start": 1828.32, "duration": 2.85}, {"text": "And I'd like to find what's\nthe shortest number of steps?", "start": 1831.17, "duration": 2.95}, {"text": "Edges like that that will get\nme from source to destination.", "start": 1834.12, "duration": 4.25}, {"text": "Ultimately, if those edges\nhave weights on them,", "start": 1838.37, "duration": 3.39}, {"text": "the optimization problem\nI'd like to solve", "start": 1841.76, "duration": 1.86}, {"text": "is, what's the shortest\nweighted path, the shortest", "start": 1843.62, "duration": 3.24}, {"text": "amount of work I have to\ndo to get to those places?", "start": 1846.86, "duration": 2.634}, {"text": "And if we can solve\none, we'll see", "start": 1849.494, "duration": 1.416}, {"text": "that we can solve the other\none pretty straightforwardly.", "start": 1850.91, "duration": 3.43}, {"text": "And we've already seen examples\nof shortest path problems.", "start": 1854.34, "duration": 3.6}, {"text": "Clearly, finding a\nroute navigation is one.", "start": 1857.94, "duration": 3.12}, {"text": "Designing communication networks\nis another great example", "start": 1861.06, "duration": 2.76}, {"text": "of a shortest path problem.", "start": 1863.82, "duration": 1.605}, {"text": "You'd like your message\nto get to your friend", "start": 1865.425, "duration": 1.875}, {"text": "as quickly as possible\nand not go as many times", "start": 1867.3, "duration": 1.997}, {"text": "around the world\nbefore it gets there.", "start": 1869.297, "duration": 1.583}, {"text": "So what's the shortest amount\nof time or the fewest links", "start": 1870.88, "duration": 2.81}, {"text": "I have to use to get there?", "start": 1873.69, "duration": 1.86}, {"text": "Lots of nice biological problems\nthat also captured this piece.", "start": 1875.55, "duration": 5.41}, {"text": "So here is an example.", "start": 1880.96, "duration": 1.22}, {"text": "And we're going to\nuse this to look", "start": 1882.18, "duration": 0.84}, {"text": "at two different\nkinds of algorithms", "start": 1883.02, "duration": 1.59}, {"text": "to solve this problem.", "start": 1884.61, "duration": 2.29}, {"text": "This is a little navigation\nproblem from a set of cities.", "start": 1886.9, "duration": 3.91}, {"text": "Think of it as flight paths.", "start": 1890.81, "duration": 2.04}, {"text": "If you're from\nArizona, my apologies.", "start": 1892.85, "duration": 1.65}, {"text": "But once you get to Phoenix,\nyou can't get out of there", "start": 1894.5, "duration": 2.85}, {"text": "unless you grow from\nthe ashes, I guess.", "start": 1897.35, "duration": 1.74}, {"text": "[LAUGHTER]", "start": 1899.09, "duration": 1.207}, {"text": "But you know, it's a\nway of dealing with how", "start": 1900.297, "duration": 1.833}, {"text": "to get around in places.", "start": 1902.13, "duration": 1.69}, {"text": "And to think about this,\nhere's the representation", "start": 1903.82, "duration": 2.994}, {"text": "that we'd have in the graph.", "start": 1906.814, "duration": 1.166}, {"text": "The adjacency graph\nhere-- or adjacency list", "start": 1907.98, "duration": 2.67}, {"text": "here is, from Boston, I\ncan get to Providence.", "start": 1910.65, "duration": 2.53}, {"text": "I can get to New York.", "start": 1913.18, "duration": 1.76}, {"text": "From Providence, I\ncan get to Boston.", "start": 1914.94, "duration": 2.31}, {"text": "I can get to New York.", "start": 1917.25, "duration": 1.86}, {"text": "From New York, I can\nonly get to Chicago.", "start": 1919.11, "duration": 3.06}, {"text": "Chicago, I can go to\nDenver or Phoenix.", "start": 1922.17, "duration": 2.46}, {"text": "Denver, I can go to\nPhoenix or New York.", "start": 1924.63, "duration": 2.07}, {"text": "And from L.A., you can\nonly come back to Boston.", "start": 1926.7, "duration": 2.88}, {"text": "And Phoenix has no\nexits out of it.", "start": 1929.58, "duration": 2.432}, {"text": "So there is that representation.", "start": 1932.012, "duration": 1.333}, {"text": "I just want to let you see that.", "start": 1933.345, "duration": 1.333}, {"text": "Right?", "start": 1934.678, "duration": 0.632}, {"text": "There are the keys\nin the dictionary.", "start": 1935.31, "duration": 2.35}, {"text": "They're all the nodes.", "start": 1937.66, "duration": 1.22}, {"text": "And there, each\none of those lists", "start": 1938.88, "duration": 2.76}, {"text": "is a set of edges from the\nsource to the destination.", "start": 1941.64, "duration": 4.06}, {"text": "OK.", "start": 1945.7, "duration": 1.74}, {"text": "How would I build this?", "start": 1947.44, "duration": 2.925}, {"text": "Well this is the\ncode I just ran.", "start": 1950.365, "duration": 1.375}, {"text": "I just want to show it to you.", "start": 1951.74, "duration": 1.47}, {"text": "I notice, by the way, in the\nslides I distributed earlier,", "start": 1953.21, "duration": 4.08}, {"text": "the return g is missing there.", "start": 1957.29, "duration": 1.41}, {"text": "If you want to correct it,\nI'll repost it later on.", "start": 1958.7, "duration": 2.97}, {"text": "I'm going to create a\nlittle function that's", "start": 1961.67, "duration": 1.86}, {"text": "going to build a city graph.", "start": 1963.53, "duration": 1.56}, {"text": "I'm going to pass in a type\nof graph, which I will then", "start": 1965.09, "duration": 2.76}, {"text": "call to create it.", "start": 1967.85, "duration": 0.81}, {"text": "So I could make\nthis as a digraph.", "start": 1968.66, "duration": 1.52}, {"text": "I could make it as a graph.", "start": 1970.18, "duration": 1.37}, {"text": "I'm going to start off\nwith it as a digraph.", "start": 1971.55, "duration": 2.42}, {"text": "And then notice what I do here.", "start": 1973.97, "duration": 1.35}, {"text": "I just run over a little\nloop with a set of names,", "start": 1975.32, "duration": 3.21}, {"text": "creating a node with\nthat name and then", "start": 1978.53, "duration": 3.63}, {"text": "adding it into the graph.", "start": 1982.16, "duration": 2.122}, {"text": "All right, so node\nis a class instance.", "start": 1984.282, "duration": 2.498}, {"text": "It creates-- or a\nclass definition--", "start": 1986.78, "duration": 1.59}, {"text": "it creates an instance.", "start": 1988.37, "duration": 1.47}, {"text": "And once I've got that, addNode\nas a method on the graph.", "start": 1989.84, "duration": 3.26}, {"text": "It will simply add it in.", "start": 1993.1, "duration": 1.96}, {"text": "And then this set here, is\nsimply adding in the edges.", "start": 1995.06, "duration": 4.11}, {"text": "And I can do that.", "start": 1999.17, "duration": 0.75}, {"text": "I'm capturing what I had\non that previous slide.", "start": 1999.92, "duration": 2.38}, {"text": "And on a given\nname to getNode, it", "start": 2002.3, "duration": 2.12}, {"text": "will get out the actual node.", "start": 2004.42, "duration": 2.29}, {"text": "And I use that coming\nout of the graph g.", "start": 2006.71, "duration": 3.12}, {"text": "I do the same thing\nwith the getNode", "start": 2009.83, "duration": 2.04}, {"text": "from graph g for Providence.", "start": 2011.87, "duration": 1.86}, {"text": "And then I make an\nedge out of that.", "start": 2013.73, "duration": 2.04}, {"text": "And then I use the method from\nthe graph to add the edge.", "start": 2015.77, "duration": 4.17}, {"text": "If this looks like\na lot of code,", "start": 2019.94, "duration": 1.77}, {"text": "yeah, it's a lot of words.", "start": 2021.71, "duration": 1.167}, {"text": "But it's pretty straightforward.", "start": 2022.877, "duration": 1.333}, {"text": "I'm literally creating\nnodes with the names,", "start": 2024.21, "duration": 2.69}, {"text": "using the appropriate\nmethods, creating an edge,", "start": 2026.9, "duration": 2.92}, {"text": "adding it into the graph.", "start": 2029.82, "duration": 1.147}, {"text": "And when I'm done, I'm just\ngoing to return the graph g.", "start": 2030.967, "duration": 2.333}, {"text": "OK.", "start": 2036.07, "duration": 1.1}, {"text": "Now I want to find\nthe shortest path.", "start": 2037.17, "duration": 3.43}, {"text": "I'm going to show you two\ntechniques for doing this.", "start": 2040.6, "duration": 2.43}, {"text": "The first one is called\ndepth first search.", "start": 2043.03, "duration": 5.322}, {"text": "It's similar to something\nProfessor Guttag showed you", "start": 2048.352, "duration": 2.208}, {"text": "when you sort of took the\nleft most depth first method", "start": 2050.56, "duration": 3.84}, {"text": "in terms of a search tree.", "start": 2054.4, "duration": 2.069}, {"text": "The one trick here is, because\nI've got graphs not trees,", "start": 2056.469, "duration": 2.851}, {"text": "there are the\npotential for loops.", "start": 2059.32, "duration": 1.669}, {"text": "So I'm simply going to keep\ntrack of what's in the path.", "start": 2060.989, "duration": 2.973}, {"text": "And I'm never going to\ngo back to a node that's", "start": 2063.962, "duration": 1.958}, {"text": "already in the path.", "start": 2065.92, "duration": 0.833}, {"text": "So I don't just run in circles\ngoing from New York to Boston", "start": 2066.753, "duration": 2.857}, {"text": "to New York to\nBoston constantly.", "start": 2069.61, "duration": 2.27}, {"text": "All right.", "start": 2071.88, "duration": 1.27}, {"text": "So, the second thing\nI'm going to do here", "start": 2073.15, "duration": 3.337}, {"text": "is I'm going to take\nadvantage of a problem you've", "start": 2076.487, "duration": 2.083}, {"text": "seen before, which is this is\nliterally a version of divide", "start": 2078.57, "duration": 4.29}, {"text": "and conquer.", "start": 2082.86, "duration": 1.117}, {"text": "What does that mean?", "start": 2083.977, "duration": 0.833}, {"text": "If I want to find a\npath from a source node", "start": 2084.81, "duration": 2.25}, {"text": "to destination\nnode, if I can find", "start": 2087.06, "duration": 2.429}, {"text": "a path to some intermediate\nnode from source intermediate,", "start": 2089.489, "duration": 3.181}, {"text": "and then I find a path from\nintermediate to destination,", "start": 2092.67, "duration": 3.12}, {"text": "the combination is obviously\na path the entire way.", "start": 2095.79, "duration": 3.93}, {"text": "So recursively, I can\njust break this down", "start": 2099.72, "duration": 2.4}, {"text": "into simpler and simpler\nversions of that search", "start": 2102.12, "duration": 3.27}, {"text": "problem.", "start": 2105.39, "duration": 2.04}, {"text": "So here's the idea behind\ndepth first search.", "start": 2107.43, "duration": 2.48}, {"text": "Start off with that source\nnode, that initial node.", "start": 2109.91, "duration": 2.95}, {"text": "I'm going to look\nat all the edges", "start": 2112.86, "duration": 1.53}, {"text": "that leave that\nnode in some order,", "start": 2114.39, "duration": 1.87}, {"text": "however order it was\nput into the system.", "start": 2116.26, "duration": 2.93}, {"text": "And I'm going to\nfollow the first edge.", "start": 2119.19, "duration": 2.412}, {"text": "I'll check to see if I'm\nat the right location.", "start": 2121.602, "duration": 1.958}, {"text": "If I am, I'm done.", "start": 2123.56, "duration": 1.87}, {"text": "If I'm not, I'm going to\nfollow the first edge out", "start": 2125.43, "duration": 2.87}, {"text": "of that node.", "start": 2128.3, "duration": 1.54}, {"text": "So I'm actually creating\na little loop here.", "start": 2129.84, "duration": 2.86}, {"text": "And I'm going to keep doing that\nuntil I either find the goal", "start": 2132.7, "duration": 3.4}, {"text": "node or I run out of options.", "start": 2136.1, "duration": 2.65}, {"text": "So let me show you an example.", "start": 2138.75, "duration": 2.6}, {"text": "I've got a little search\ntree here, a very simple one.", "start": 2141.35, "duration": 3.02}, {"text": "Here's my source.", "start": 2144.37, "duration": 1.21}, {"text": "There is my destination.", "start": 2145.58, "duration": 1.901}, {"text": "In depth first, I'm going\nto start at the source", "start": 2147.481, "duration": 1.999}, {"text": "and go down the first path.", "start": 2149.48, "duration": 2.81}, {"text": "See if I'm at the right place.", "start": 2152.29, "duration": 1.35}, {"text": "I'm not.", "start": 2153.64, "duration": 1.38}, {"text": "So I'm going to take\nthe first path out", "start": 2155.02, "duration": 1.71}, {"text": "of here, which\nmight be that one.", "start": 2156.73, "duration": 2.82}, {"text": "See if I'm in the right place.", "start": 2159.55, "duration": 1.44}, {"text": "Actually, let me\nnot do it that way.", "start": 2160.99, "duration": 1.5}, {"text": "Let me do it this way.", "start": 2162.49, "duration": 2.79}, {"text": "Am I in the right place?", "start": 2165.28, "duration": 1.57}, {"text": "I'm not.", "start": 2166.85, "duration": 0.655}, {"text": "So I'm going to take\nthe first path out", "start": 2167.505, "duration": 1.825}, {"text": "of this one, which\ngets me there.", "start": 2169.33, "duration": 3.346}, {"text": "I'm still not in\nthe right place,", "start": 2172.676, "duration": 1.374}, {"text": "so I'm going to take the\nfirst path out of that one.", "start": 2174.05, "duration": 3.857}, {"text": "And you can see why\nit's called depth first.", "start": 2177.907, "duration": 1.833}, {"text": "I'm going as deep, if you\nlike, in this graph as I can,", "start": 2179.74, "duration": 2.58}, {"text": "from here, to there, to\nthere, to there, to there.", "start": 2182.32, "duration": 4.52}, {"text": "At this stage, I'm stuck.", "start": 2186.84, "duration": 1.044}, {"text": "There is no place\nto go to, so I'm", "start": 2187.884, "duration": 1.416}, {"text": "going to go back to this node\nand say, is there another edge?", "start": 2189.3, "duration": 3.737}, {"text": "In this case there isn't,\nso I'll go back to here.", "start": 2193.037, "duration": 2.083}, {"text": "There's not another edge.", "start": 2195.12, "duration": 1.24}, {"text": "Go back to here.", "start": 2196.36, "duration": 1.22}, {"text": "There is another edge.", "start": 2197.58, "duration": 1.47}, {"text": "So I'm going to\ngo this direction.", "start": 2199.05, "duration": 3.66}, {"text": "And from here, I'll\nlook down there.", "start": 2202.71, "duration": 4.24}, {"text": "OK, notice I'm now going depth\nfirst down the next chain.", "start": 2206.95, "duration": 3.197}, {"text": "There's nothing from here.", "start": 2210.147, "duration": 1.083}, {"text": "I backtrack.", "start": 2211.23, "duration": 0.69}, {"text": "There's nothing from there.", "start": 2211.92, "duration": 1.125}, {"text": "I backtrack over to here.", "start": 2213.045, "duration": 1.065}, {"text": "There's no additional\nchoices there,", "start": 2214.11, "duration": 1.95}, {"text": "so go all the way back to\nhere to follow that one.", "start": 2216.06, "duration": 4.97}, {"text": "And then we'll go down this one\nagain, backtrack, backtrack,", "start": 2221.03, "duration": 3.33}, {"text": "and eventually I find the\nthing I'm looking for.", "start": 2224.36, "duration": 5.59}, {"text": "Depth first-- following\nmy way down this path.", "start": 2229.95, "duration": 5.11}, {"text": "So let's write the\ncode for-- yes ma'am?", "start": 2235.06, "duration": 1.86}, {"text": "AUDIENCE: Pardon me.", "start": 2236.92, "duration": 0.833}, {"text": "Is the choice of\ndepth first node", "start": 2237.753, "duration": 1.927}, {"text": "we go down, is that random?", "start": 2239.68, "duration": 2.027}, {"text": "PROFESSOR: The question\nis, which node do I,", "start": 2241.707, "duration": 1.833}, {"text": "or which edge do I choose?", "start": 2243.54, "duration": 1.705}, {"text": "It's however I stored\nit in the system.", "start": 2245.245, "duration": 2.185}, {"text": "So since it's a list, I'm\ngoing to just make that choice.", "start": 2247.43, "duration": 2.706}, {"text": "I could have other\nways of deciding it.", "start": 2250.136, "duration": 1.624}, {"text": "But think of it as,\nyeah, essentially random,", "start": 2251.76, "duration": 2.45}, {"text": "which one I would pick.", "start": 2254.21, "duration": 2.69}, {"text": "OK, let's look at the code.", "start": 2256.9, "duration": 2.84}, {"text": "Don't panic.", "start": 2259.74, "duration": 0.78}, {"text": "It's not as bad as it looks.", "start": 2260.52, "duration": 1.65}, {"text": "It actually just\ncaptures that idea.", "start": 2262.17, "duration": 3.379}, {"text": "Ignore for the moment\nthis down here.", "start": 2265.549, "duration": 1.541}, {"text": "It's just going to set it up.", "start": 2267.09, "duration": 1.208}, {"text": "Depth first search, I'm going\nto give it a graph, a start", "start": 2268.298, "duration": 2.482}, {"text": "node, an end node, and a path\nthat got me to that start", "start": 2270.78, "duration": 3.792}, {"text": "node, which initially\nis just going", "start": 2274.572, "duration": 1.458}, {"text": "to be an empty list,\nsomething that tells me what's", "start": 2276.03, "duration": 3.66}, {"text": "the shortest path\nI've found so far,", "start": 2279.69, "duration": 1.637}, {"text": "which would be my best solution?", "start": 2281.327, "duration": 1.333}, {"text": "And then just a little flag\nhere if I want to print out", "start": 2282.66, "duration": 2.31}, {"text": "things along the way.", "start": 2284.97, "duration": 2.46}, {"text": "What do I do?", "start": 2287.43, "duration": 1.11}, {"text": "I set up path to add\nin the start node.", "start": 2288.54, "duration": 2.94}, {"text": "So if path initially\nis an empty list,", "start": 2291.48, "duration": 2.54}, {"text": "the first time around is\njust, here's the node I'm at.", "start": 2294.02, "duration": 3.07}, {"text": "I print out some stuff and\nthen I say, see if I'm done.", "start": 2297.09, "duration": 3.599}, {"text": "I'm just going to stay at home.", "start": 2300.689, "duration": 1.291}, {"text": "I'm not going to go anywhere.", "start": 2301.98, "duration": 1.644}, {"text": "Unlikely to happen, but\nyou'll see recursively", "start": 2303.624, "duration": 1.916}, {"text": "why this is going to be nice.", "start": 2305.54, "duration": 1.8}, {"text": "If I'm not done,\nthen notice the loop.", "start": 2307.34, "duration": 2.52}, {"text": "I'm going to loop over all the\nchildren of the start node.", "start": 2309.86, "duration": 5.1}, {"text": "Those are the edges I can reach.", "start": 2314.96, "duration": 1.44}, {"text": "Then those I can reach\nwith a single edge.", "start": 2316.4, "duration": 2.07}, {"text": "I pick the first one.", "start": 2318.47, "duration": 1.457}, {"text": "And in answer to the\nquestion, in this case,", "start": 2319.927, "duration": 1.833}, {"text": "it would be the order in\nwhich I started in the list.", "start": 2321.76, "duration": 2.208}, {"text": "I just pick that one up.", "start": 2323.968, "duration": 1.602}, {"text": "I then say, let's make sure\nit's not already in the path", "start": 2325.57, "duration": 3.78}, {"text": "because I want to avoid loops.", "start": 2329.35, "duration": 2.13}, {"text": "And assuming it\nisn't, and assuming", "start": 2331.48, "duration": 2.13}, {"text": "I don't yet have a solution,\nor the best solution I have", "start": 2333.61, "duration": 3.75}, {"text": "is smaller than what\nI've done so far,", "start": 2337.36, "duration": 3.34}, {"text": "oh, cool, just do\nthe same search.", "start": 2340.7, "duration": 4.61}, {"text": "So notice, there's\nthat nice recursion.", "start": 2345.31, "duration": 1.87}, {"text": "Right?", "start": 2347.18, "duration": 1.11}, {"text": "I'm going to explore.", "start": 2348.29, "duration": 1.14}, {"text": "I just picked the first\noption out of that first node.", "start": 2349.43, "duration": 3.296}, {"text": "And the first thing\nI do is try and see", "start": 2352.726, "duration": 1.624}, {"text": "if there's a path from that\nnode using the same thing.", "start": 2354.35, "duration": 2.71}, {"text": "So it's literally like\nI picked this one.", "start": 2357.06, "duration": 1.809}, {"text": "I don't care about\nthose other edges.", "start": 2358.869, "duration": 1.541}, {"text": "I'm going to try and\ntake this search down.", "start": 2360.41, "duration": 4.19}, {"text": "When it comes back\nwith a solution,", "start": 2364.6, "duration": 1.53}, {"text": "as long as there\nis a solution, I'll", "start": 2366.13, "duration": 1.68}, {"text": "say that's my best\nsolution so far.", "start": 2367.81, "duration": 1.62}, {"text": "And then I go back around.", "start": 2373.557, "duration": 1.083}, {"text": "Now this last little\npiece here is just,", "start": 2374.64, "duration": 1.77}, {"text": "if in fact the node's\nalready in the path,", "start": 2376.41, "duration": 1.925}, {"text": "I'm just going to\nprint something", "start": 2378.335, "duration": 1.375}, {"text": "that says don't keep\ndoing it because you", "start": 2379.71, "duration": 1.708}, {"text": "don't need to keep going on.", "start": 2381.418, "duration": 1.982}, {"text": "And I'm going to do that loop,\ntaking all the paths down", "start": 2383.4, "duration": 2.88}, {"text": "until it comes back.", "start": 2386.28, "duration": 1.73}, {"text": "And only at that stage do\nI go to the next portion", "start": 2388.01, "duration": 3.85}, {"text": "around this loop.", "start": 2391.86, "duration": 2.92}, {"text": "The piece down here\njust sets this up,", "start": 2394.78, "duration": 2.04}, {"text": "calling it with an initial\nempty list for path", "start": 2396.82, "duration": 4.98}, {"text": "and no solution for shortest.", "start": 2401.8, "duration": 1.33}, {"text": "So it's just a nice way of\nputting a wrap around it that", "start": 2403.13, "duration": 2.93}, {"text": "gets things started up.", "start": 2406.06, "duration": 3.37}, {"text": "This may look a little funky.", "start": 2409.43, "duration": 1.922}, {"text": "It may look a\nlittle bit twisted.", "start": 2411.352, "duration": 2.348}, {"text": "So let's see if it actually\ndoes what we'd expect it to.", "start": 2413.7, "duration": 3.602}, {"text": "And to do that I'm just going\nto be a little test function.", "start": 2417.302, "duration": 2.458}, {"text": "I'm going to build that\ncity graph I'm just", "start": 2419.76, "duration": 1.791}, {"text": "going to call \"Shortest Path.\"", "start": 2421.551, "duration": 1.376}, {"text": "I'm going to print it out.", "start": 2422.927, "duration": 1.083}, {"text": "And I'd like to\nsee, is there a way", "start": 2424.01, "duration": 1.458}, {"text": "to get from Boston to Chicago?", "start": 2425.468, "duration": 2.692}, {"text": "So let's go back over to\nmy Python and try that out.", "start": 2428.16, "duration": 5.19}, {"text": "And I've got a call for that.", "start": 2433.35, "duration": 2.75}, {"text": "Oh, and it prints out.", "start": 2436.1, "duration": 1.37}, {"text": "I start off-- oh, so I\ndid it the wrong way.", "start": 2437.47, "duration": 2.344}, {"text": "It's from Chicago to Boston.", "start": 2439.814, "duration": 1.166}, {"text": "Yes, Chicago to Denver\nto Phoenix, from Denver", "start": 2440.98, "duration": 3.89}, {"text": "to New York, it comes back and\nsays, I've already visited.", "start": 2444.87, "duration": 3.66}, {"text": "Basically concludes I can't\nget from Chicago to Boston.", "start": 2448.53, "duration": 3.725}, {"text": "It's just printing\nout each stage.", "start": 2452.255, "duration": 1.757}, {"text": "Let's actually look\nat that a little more", "start": 2454.012, "duration": 1.708}, {"text": "carefully to see\nhow it got there.", "start": 2455.72, "duration": 1.47}, {"text": "So there's my example.", "start": 2461.22, "duration": 1.89}, {"text": "There is the adjacency list.", "start": 2463.11, "duration": 1.52}, {"text": "And here's what happens.", "start": 2464.63, "duration": 1.62}, {"text": "I start off in Chicago.", "start": 2466.25, "duration": 1.93}, {"text": "So that's my first node.", "start": 2468.18, "duration": 1.97}, {"text": "From Chicago, the first\nedge goes to Denver.", "start": 2470.15, "duration": 3.99}, {"text": "Denver is not what\nI'm looking for.", "start": 2474.14, "duration": 1.63}, {"text": "But since I am in\nDenver, recursively I'm", "start": 2475.77, "duration": 2.58}, {"text": "going to call it again.", "start": 2478.35, "duration": 1.05}, {"text": "So the first edge out\nof there is to Phoenix.", "start": 2479.4, "duration": 3.82}, {"text": "Again, sorry if you're\nfrom Arizona and Phoenix.", "start": 2483.22, "duration": 2.0}, {"text": "There's nowhere to go.", "start": 2485.22, "duration": 1.59}, {"text": "So I'm going to\nhave to backtrack.", "start": 2486.81, "duration": 2.06}, {"text": "And that will take\nme back up to Denver.", "start": 2488.87, "duration": 2.724}, {"text": "And I look at the next edge.", "start": 2491.594, "duration": 1.166}, {"text": "It takes me to New York.", "start": 2492.76, "duration": 2.32}, {"text": "From New York I'd\nlike to go to Chicago.", "start": 2495.08, "duration": 1.987}, {"text": "But oh, that's nice\nbecause, remember,", "start": 2497.067, "duration": 1.583}, {"text": "that first check it says, is\nChicago already in the path?", "start": 2498.65, "duration": 2.97}, {"text": "It is.", "start": 2501.62, "duration": 0.99}, {"text": "I don't want to loop,\nbecause otherwise I'm", "start": 2502.61, "duration": 2.91}, {"text": "simply going to go around\nand around and around here.", "start": 2505.52, "duration": 2.81}, {"text": "And it may be good for\nfrequent flyer miles,", "start": 2508.33, "duration": 1.84}, {"text": "but it's not a great way to get\nto where you're trying to go.", "start": 2510.17, "duration": 3.46}, {"text": "So I break out of it.", "start": 2513.63, "duration": 1.954}, {"text": "And now, what else\ndo I have left?", "start": 2515.584, "duration": 1.416}, {"text": "Chicago to Denver I've explored.", "start": 2517.0, "duration": 1.5}, {"text": "I'll look at Chicago to Phoenix.", "start": 2518.5, "duration": 1.35}, {"text": "From Phoenix there's\nnowhere to go.", "start": 2519.85, "duration": 1.458}, {"text": "I go back up to Chicago.", "start": 2521.308, "duration": 1.262}, {"text": "There are no more paths.", "start": 2522.57, "duration": 1.63}, {"text": "I'm done.", "start": 2524.2, "duration": 2.76}, {"text": "OK.", "start": 2526.96, "duration": 1.12}, {"text": "Now, it turns out\nyou can actually", "start": 2528.08, "duration": 1.46}, {"text": "get somewhere in this graph.", "start": 2529.54, "duration": 1.09}, {"text": "So here's just another example.", "start": 2530.63, "duration": 1.22}, {"text": "I'm simply going\nto show you, if I", "start": 2531.85, "duration": 1.416}, {"text": "want to go from\nBoston to Phoenix,", "start": 2533.266, "duration": 2.384}, {"text": "notice the set of stages.", "start": 2535.65, "duration": 1.38}, {"text": "And you can see, notice\nhow at each stage", "start": 2537.03, "duration": 1.89}, {"text": "it tends to be growing.", "start": 2538.92, "duration": 1.17}, {"text": "That's that depth first.", "start": 2540.09, "duration": 0.999}, {"text": "I'm exploring the edges.", "start": 2541.089, "duration": 1.851}, {"text": "I find a path.", "start": 2542.94, "duration": 2.49}, {"text": "That's great.", "start": 2545.43, "duration": 1.36}, {"text": "But is it the shortest path?", "start": 2546.79, "duration": 2.35}, {"text": "I don't know.", "start": 2549.14, "duration": 1.08}, {"text": "So having found that path, I\ntry and take the next branch,", "start": 2550.22, "duration": 2.97}, {"text": "which finds a loop.", "start": 2553.19, "duration": 2.01}, {"text": "And I keep moving through\nthis, finding paths", "start": 2555.2, "duration": 4.66}, {"text": "until I look at all\nthe possible paths", "start": 2559.86, "duration": 2.22}, {"text": "and I actually return\nthe shortest path.", "start": 2562.08, "duration": 3.612}, {"text": "You can try running\nthe code on it.", "start": 2565.692, "duration": 1.458}, {"text": "But what I want you to\nsee is, again, this idea", "start": 2567.15, "duration": 1.98}, {"text": "that I can explore it.", "start": 2569.13, "duration": 1.47}, {"text": "But in fact, I'm going\nto have to explore it", "start": 2570.6, "duration": 2.82}, {"text": "in a particular order.", "start": 2573.42, "duration": 2.89}, {"text": "But there is depth first search.", "start": 2576.31, "duration": 1.5}, {"text": "It will find a solution for me.", "start": 2577.81, "duration": 3.62}, {"text": "Alternative, it's what's\ncalled breadth first search.", "start": 2581.43, "duration": 3.93}, {"text": "Sounds almost the same.", "start": 2585.36, "duration": 1.45}, {"text": "Again, I'm going to start\noff with initial load.", "start": 2586.81, "duration": 2.0}, {"text": "I'm going to look at\nall the edges that", "start": 2588.81, "duration": 1.624}, {"text": "leave that node, in some order.", "start": 2590.434, "duration": 1.376}, {"text": "I'm going to follow the\nfirst edge as before", "start": 2591.81, "duration": 2.4}, {"text": "and see if I'm at\nthe right place.", "start": 2594.21, "duration": 2.62}, {"text": "If I'm not, I'm going\nto follow the next edge", "start": 2596.83, "duration": 3.68}, {"text": "and do the same thing.", "start": 2600.51, "duration": 2.22}, {"text": "So whereas this went\ndown through the tree", "start": 2602.73, "duration": 1.97}, {"text": "as deeply as it could of\nthe graph, in breadth first,", "start": 2604.7, "duration": 2.74}, {"text": "I'm going to start off\ntaking that edge as before.", "start": 2607.44, "duration": 3.59}, {"text": "I'm not done.", "start": 2611.03, "duration": 1.142}, {"text": "I'm going to keep\ntrack of that in case I", "start": 2612.172, "duration": 1.708}, {"text": "want to explore more of it.", "start": 2613.88, "duration": 1.125}, {"text": "But I'm going to go back over\nhere and follow that edge.", "start": 2615.005, "duration": 3.405}, {"text": "I'm not done.", "start": 2618.41, "duration": 0.92}, {"text": "Again, I'll keep track of that,\nbut I'll come back up here", "start": 2619.33, "duration": 2.71}, {"text": "and explore that one.", "start": 2622.04, "duration": 1.305}, {"text": "And oh, cool, I found a\nsolution in three steps.", "start": 2623.345, "duration": 5.145}, {"text": "I've reached the destination.", "start": 2628.49, "duration": 2.4}, {"text": "And notice, because\nI'm exploring", "start": 2630.89, "duration": 1.77}, {"text": "all the paths of\nlength one before I", "start": 2632.66, "duration": 3.33}, {"text": "get to paths of length two.", "start": 2635.99, "duration": 1.8}, {"text": "Once I find a solution,\nI can stop because I", "start": 2637.79, "duration": 3.66}, {"text": "know it's the shortest path.", "start": 2641.45, "duration": 1.83}, {"text": "Any other path through\nhere would be longer", "start": 2643.28, "duration": 1.92}, {"text": "than that particular solution.", "start": 2645.2, "duration": 2.52}, {"text": "So the loop here is\na little different.", "start": 2647.72, "duration": 3.09}, {"text": "I'm looking over all\nthe paths of length one.", "start": 2650.81, "duration": 2.39}, {"text": "There are all the\npaths of length two.", "start": 2653.2, "duration": 1.74}, {"text": "And the one thing I'm\ngoing to have to do", "start": 2654.94, "duration": 1.708}, {"text": "is I'm going to have to keep\ntrack of the remaining options", "start": 2656.648, "duration": 2.644}, {"text": "here in case I have\nto come down to them.", "start": 2659.292, "duration": 1.708}, {"text": "Because if I didn't find\nit at the first level,", "start": 2661.0, "duration": 1.958}, {"text": "then I come down here and\nlook at things of length two.", "start": 2662.958, "duration": 4.66}, {"text": "OK?", "start": 2667.618, "duration": 0.954}, {"text": "So let's build that code.", "start": 2668.572, "duration": 3.038}, {"text": "Breadth first search, or\nBFS, again, a graph, a start,", "start": 2671.61, "duration": 4.832}, {"text": "and an end node, something that\nwould just print things out", "start": 2676.442, "duration": 2.458}, {"text": "as I go along.", "start": 2678.9, "duration": 2.64}, {"text": "My initial path is\njust the start point.", "start": 2681.54, "duration": 4.18}, {"text": "But now I've got to keep track\nof what are the paths that I", "start": 2685.72, "duration": 2.58}, {"text": "have yet to explore?", "start": 2688.3, "duration": 2.37}, {"text": "And so for that,\nI'm going to create", "start": 2690.67, "duration": 1.5}, {"text": "something called a queue.", "start": 2692.17, "duration": 1.53}, {"text": "And a queue is going\nto be a list of paths.", "start": 2693.7, "duration": 3.87}, {"text": "Remember, a path\nis a list of nodes.", "start": 2697.57, "duration": 1.71}, {"text": "A queue is going to\nbe a list of paths.", "start": 2699.28, "duration": 1.68}, {"text": "So the initial queue is\njust where I've started.", "start": 2700.96, "duration": 4.62}, {"text": "And then, as long as I've got\nsomething still to explore", "start": 2705.58, "duration": 2.57}, {"text": "and I haven't found\na solution, I'm", "start": 2708.15, "duration": 2.46}, {"text": "going to pop off the\nqueue the oldest element,", "start": 2710.61, "duration": 3.15}, {"text": "the thing at the beginning.", "start": 2713.76, "duration": 1.88}, {"text": "That's my temporary path.", "start": 2715.64, "duration": 1.15}, {"text": "I'll print out some\ninformation about it.", "start": 2716.79, "duration": 2.13}, {"text": "And then I'll grab the\nlast element of that path.", "start": 2718.92, "duration": 2.4}, {"text": "That's the last\npoint in that path.", "start": 2721.32, "duration": 2.84}, {"text": "And I'll now explore.", "start": 2724.16, "duration": 2.01}, {"text": "Is it the thing I'm looking for?", "start": 2726.17, "duration": 1.35}, {"text": "In which case I'm done.", "start": 2727.52, "duration": 1.21}, {"text": "I'll return the path.", "start": 2728.73, "duration": 1.64}, {"text": "Otherwise, for each node that\nyou can reach from that point,", "start": 2730.37, "duration": 5.1}, {"text": "create a new path by adding\nthat on the end of this path", "start": 2735.47, "duration": 3.94}, {"text": "and add it into the queue\nat the end of the queue.", "start": 2739.41, "duration": 3.652}, {"text": "So I'm going to\nkeep looping around", "start": 2743.062, "duration": 1.458}, {"text": "here until I either\nfind a solution here,", "start": 2744.52, "duration": 2.95}, {"text": "which I'll return.", "start": 2747.47, "duration": 1.42}, {"text": "And if I get through all of\nit, I'm going to return none.", "start": 2748.89, "duration": 3.33}, {"text": "And right there, there\nis that nice thing where", "start": 2752.22, "duration": 2.49}, {"text": "once I find a solution, I\nknow it's the shortest thing,", "start": 2754.71, "duration": 2.82}, {"text": "I can stop.", "start": 2757.53, "duration": 2.29}, {"text": "OK, let's look at\nan example of this.", "start": 2759.82, "duration": 3.425}, {"text": "So I'm going to go back\nover to Python, where", "start": 2763.245, "duration": 1.875}, {"text": "I've got a version of this.", "start": 2765.12, "duration": 1.2}, {"text": "I'm going to comment that out.", "start": 2766.32, "duration": 6.232}, {"text": "And down here in\nbreadth first search,", "start": 2772.552, "duration": 1.898}, {"text": "I've actually added a\nlittle piece of code", "start": 2774.45, "duration": 1.751}, {"text": "that I don't have in\nthe handout that's", "start": 2776.201, "duration": 1.624}, {"text": "going to print out the\nqueue as well so we can see", "start": 2777.825, "duration": 2.115}, {"text": "what happens when we call this.", "start": 2779.94, "duration": 3.05}, {"text": "So let's take a look at it.", "start": 2782.99, "duration": 3.34}, {"text": "My initial call, there's\none thing in the queue.", "start": 2786.33, "duration": 2.0}, {"text": "It's just Boston.", "start": 2788.33, "duration": 0.87}, {"text": "I started in Boston.", "start": 2789.2, "duration": 2.16}, {"text": "So the current path\nis to start in Boston.", "start": 2791.36, "duration": 4.17}, {"text": "I take that element\noff the queue,", "start": 2795.53, "duration": 2.13}, {"text": "and I say what are the things\nI can reach from Boston?", "start": 2797.66, "duration": 2.7}, {"text": "Oh, nice, I put two things in.", "start": 2800.36, "duration": 2.37}, {"text": "I can get from\nBoston to Providence.", "start": 2802.73, "duration": 1.5}, {"text": "I can get from\nBoston to New York.", "start": 2804.23, "duration": 2.55}, {"text": "The top thing is\ngone off the queue.", "start": 2806.78, "duration": 1.5}, {"text": "I popped it.", "start": 2808.28, "duration": 0.54}, {"text": "I've replaced it\nwith two things.", "start": 2808.82, "duration": 1.374}, {"text": "Or I take this, and\nsay, OK, from Boston", "start": 2810.194, "duration": 3.006}, {"text": "to Providence, where can\nI get from Providence?", "start": 2813.2, "duration": 3.06}, {"text": "Oh, I can get to New York.", "start": 2816.26, "duration": 1.24}, {"text": "So I put that in the queue.", "start": 2817.5, "duration": 2.18}, {"text": "This has gone off.", "start": 2819.68, "duration": 1.41}, {"text": "That one is still there.", "start": 2821.09, "duration": 1.602}, {"text": "And I do that\nbecause I haven't yet", "start": 2822.692, "duration": 1.458}, {"text": "reached the thing I'm looking\nfor, which was, I think,", "start": 2824.15, "duration": 2.249}, {"text": "Phoenix I was trying to get to.", "start": 2826.399, "duration": 1.892}, {"text": "And you could see\nat each stage, I'm", "start": 2828.291, "duration": 1.499}, {"text": "taking the top\nthing off the queue,", "start": 2829.79, "duration": 1.8}, {"text": "and asking for all the\nthings that I can get to,", "start": 2831.59, "duration": 2.58}, {"text": "and adding them to it.", "start": 2834.17, "duration": 2.2}, {"text": "And notice, in some cases,\nit may be more than one.", "start": 2836.37, "duration": 3.05}, {"text": "For example, which\none do I want here?", "start": 2839.42, "duration": 2.85}, {"text": "Right here, if I take\nBoston, New York to Chicago,", "start": 2842.27, "duration": 3.15}, {"text": "from Chicago I\ncan get to Denver.", "start": 2845.42, "duration": 2.05}, {"text": "So there's one new path.", "start": 2847.47, "duration": 1.16}, {"text": "I can also get to Phoenix.", "start": 2848.63, "duration": 1.86}, {"text": "There's a second new path.", "start": 2850.49, "duration": 2.54}, {"text": "Also notice how they\nare only growing slowly", "start": 2853.03, "duration": 3.47}, {"text": "as I build them out.", "start": 2856.5, "duration": 1.76}, {"text": "And in fact, if we go back,\nwe can see that nicely", "start": 2858.26, "duration": 3.09}, {"text": "by looking at what happens if\nwe were to actually trace this", "start": 2861.35, "duration": 3.06}, {"text": "along.", "start": 2864.41, "duration": 1.83}, {"text": "So Boston to Phoenix,\nI start at Boston.", "start": 2866.24, "duration": 2.86}, {"text": "Then I look at\nthat and then that.", "start": 2869.1, "duration": 2.74}, {"text": "Those are all the\npaths of length one.", "start": 2871.84, "duration": 2.55}, {"text": "Having exhausted\nthose, oh nice, I'm", "start": 2874.39, "duration": 2.49}, {"text": "looking at paths of length two,\nand then paths of length three,", "start": 2876.88, "duration": 5.09}, {"text": "and then paths the\nlength four, until I", "start": 2881.97, "duration": 1.93}, {"text": "found the one that I wanted.", "start": 2883.9, "duration": 3.65}, {"text": "And here's one other\nway of looking at it.", "start": 2887.55, "duration": 3.11}, {"text": "Breadth first says, I'll look\nat each path of length one.", "start": 2890.66, "duration": 4.89}, {"text": "And then, oh yes,\nI avoid the loop.", "start": 2895.55, "duration": 2.91}, {"text": "I look at each\npath of length two,", "start": 2898.46, "duration": 2.6}, {"text": "then paths of length\nthree, until I actually", "start": 2901.06, "duration": 3.34}, {"text": "find the solution.", "start": 2904.4, "duration": 3.3}, {"text": "Subtle difference,\ndifferent performance.", "start": 2907.7, "duration": 3.03}, {"text": "Depth first, I'm\nalways following", "start": 2910.73, "duration": 2.16}, {"text": "the next available edge until\nI get stuck and I backtrack.", "start": 2912.89, "duration": 4.02}, {"text": "Breadth first, I'm always\nexploring the next equal length", "start": 2916.91, "duration": 3.84}, {"text": "option.", "start": 2920.75, "duration": 1.14}, {"text": "And I just have to keep\ntrack in that queue", "start": 2921.89, "duration": 2.07}, {"text": "of the things I have left to\ndo as I walk my way through.", "start": 2923.96, "duration": 3.09}, {"text": "What about weighted\nshortest path?", "start": 2929.61, "duration": 3.93}, {"text": "Well, as the\nmathematicians say, we", "start": 2933.54, "duration": 1.68}, {"text": "leave this is an easy\nexercise for the reader.", "start": 2935.22, "duration": 3.16}, {"text": "It's a little unfair.", "start": 2938.38, "duration": 1.25}, {"text": "The idea would be, imagine on\nmy edges, it's not just a step,", "start": 2939.63, "duration": 3.36}, {"text": "but I have a weight.", "start": 2942.99, "duration": 1.53}, {"text": "Flying to L.A. Is a\nlittle longer than flying", "start": 2944.52, "duration": 2.13}, {"text": "from Boston to New York.", "start": 2946.65, "duration": 1.86}, {"text": "What I'd like to do is do the\nsame kind of optimization,", "start": 2948.51, "duration": 2.82}, {"text": "but now just minimizing the sum\nof the weights on the edges,", "start": 2951.33, "duration": 3.0}, {"text": "not the number of edges.", "start": 2954.33, "duration": 3.09}, {"text": "As you might guess,\ndepth first search", "start": 2957.42, "duration": 1.74}, {"text": "is easily modified to do this.", "start": 2959.16, "duration": 2.52}, {"text": "The cost now would\nsimply be what's", "start": 2961.68, "duration": 1.74}, {"text": "the sum of those weights?", "start": 2963.42, "duration": 1.08}, {"text": "And again, I would have to\nsearch all possible options", "start": 2964.5, "duration": 2.25}, {"text": "till I find a solution.", "start": 2966.75, "duration": 2.4}, {"text": "Unfortunately,\nbreadth first search", "start": 2969.15, "duration": 1.56}, {"text": "can't easily be modified because\nthe short weighted path may", "start": 2970.71, "duration": 5.19}, {"text": "have many more than the\nminimum number of loops.", "start": 2975.9, "duration": 2.07}, {"text": "And I'd have to think\nabout how to adjust", "start": 2977.97, "duration": 1.708}, {"text": "it to make that happen.", "start": 2979.678, "duration": 3.422}, {"text": "But to pull it together,\nhere's a new model--", "start": 2983.1, "duration": 2.88}, {"text": "graphs.", "start": 2985.98, "duration": 1.46}, {"text": "Great way of\nrepresenting networks,", "start": 2987.44, "duration": 1.59}, {"text": "collections of entities with\nrelationships between them.", "start": 2989.03, "duration": 3.76}, {"text": "There are lots of nice\ngraph optimization problems.", "start": 2992.79, "duration": 2.75}, {"text": "And we've just shown you\ntwo examples of that.", "start": 2995.54, "duration": 2.77}, {"text": "But we'll come back to more\nexamples as we go along.", "start": 2998.31, "duration": 2.6}, {"text": "And with that, we'll\nsee you next time.", "start": 3000.91, "duration": 2.51}]