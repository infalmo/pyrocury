[{"text": "The following content is\nprovided under a Creative", "start": 0.79, "duration": 2.34}, {"text": "Commons license.", "start": 3.13, "duration": 1.42}, {"text": "Your support will help\nMIT OpenCourseWare", "start": 4.55, "duration": 2.21}, {"text": "continue to offer high quality\neducational resources for free.", "start": 6.76, "duration": 4.09}, {"text": "To make a donation or to\nview additional materials", "start": 10.85, "duration": 2.54}, {"text": "from hundreds of MIT courses\nvisit MIT OpenCourseWare", "start": 13.39, "duration": 3.93}, {"text": "at ocw.mit.edu.", "start": 17.32, "duration": 1.25}, {"text": "JOHN GUTTAG: We ended\nthe last lecture", "start": 29.77, "duration": 2.4}, {"text": "looking at greedy algorithms.", "start": 32.17, "duration": 3.03}, {"text": "Today I want to discuss the\npros and cons of greedy.", "start": 35.2, "duration": 3.17}, {"text": "Oh, I should mention--", "start": 38.37, "duration": 1.87}, {"text": "in response to popular demand,\nI have put the PowerPoint up,", "start": 40.24, "duration": 4.07}, {"text": "so if you download the ZIP\nfile, you'll find the questions,", "start": 44.31, "duration": 4.61}, {"text": "including question 1, the\nfirst question, plus the code,", "start": 48.92, "duration": 3.68}, {"text": "plus the PowerPoint.", "start": 52.6, "duration": 3.49}, {"text": "We actually do read Piazza,\nand sometimes, at least,", "start": 56.09, "duration": 3.21}, {"text": "pay attention.", "start": 59.3, "duration": 1.08}, {"text": "We should pay\nattention all the time.", "start": 60.38, "duration": 3.33}, {"text": "So what are the pros\nand cons of greedy?", "start": 63.71, "duration": 4.44}, {"text": "The pro-- and it's\na big pro-- is", "start": 68.15, "duration": 3.01}, {"text": "that it's really easy to\nimplement, as you could see.", "start": 71.16, "duration": 3.63}, {"text": "Also enormously important--\nit's really fast.", "start": 74.79, "duration": 3.49}, {"text": "We looked at the\ncomplexity last time--", "start": 78.28, "duration": 1.82}, {"text": "it was m log n-- quite quick.", "start": 80.1, "duration": 3.63}, {"text": "The downside-- and this can\nbe either a big problem or not", "start": 83.73, "duration": 3.36}, {"text": "a big problem--", "start": 87.09, "duration": 1.41}, {"text": "is that it doesn't\nactually solve", "start": 88.5, "duration": 2.34}, {"text": "the problem, in the sense\nthat we've asked ourselves", "start": 90.84, "duration": 3.6}, {"text": "to optimize something.", "start": 94.44, "duration": 2.02}, {"text": "And we get a solution that\nmay or may not be optimal.", "start": 96.46, "duration": 4.47}, {"text": "Worse-- we don't even\nknow, in this case,", "start": 100.93, "duration": 2.97}, {"text": "how close to optimal it is.", "start": 103.9, "duration": 2.64}, {"text": "Maybe it's almost optimal, but\nmaybe it's really far away.", "start": 106.54, "duration": 4.29}, {"text": "And that's a big problem\nwith many greedy algorithms.", "start": 110.83, "duration": 4.09}, {"text": "There are some very\nsophisticated greedy algorithms", "start": 114.92, "duration": 3.74}, {"text": "we won't be looking at that\ngive you a bound on how good", "start": 118.66, "duration": 3.54}, {"text": "the approximation is, but\nmost of them don't do that.", "start": 122.2, "duration": 4.81}, {"text": "Last time we looked\nat an alternative", "start": 127.01, "duration": 3.54}, {"text": "to a greedy algorithm\nthat was guaranteed", "start": 130.55, "duration": 2.76}, {"text": "to find the right solution.", "start": 133.31, "duration": 1.23}, {"text": "It was a brute force algorithm.", "start": 134.54, "duration": 2.28}, {"text": "The basic idea is simple--", "start": 136.82, "duration": 2.22}, {"text": "that you enumerate all\npossible combinations of items,", "start": 139.04, "duration": 4.0}, {"text": "remove the combination\nwhose total units exceed", "start": 143.04, "duration": 2.64}, {"text": "the allowable weight, and\nthen choose the winner", "start": 145.68, "duration": 3.24}, {"text": "from those that are remaining.", "start": 148.92, "duration": 3.48}, {"text": "Now let's talk about\nhow to implement it.", "start": 152.4, "duration": 1.96}, {"text": "And the way I want to\nimplement it is using something", "start": 154.36, "duration": 2.27}, {"text": "called a search tree.", "start": 156.63, "duration": 2.73}, {"text": "There are lots of different\nways to implement it.", "start": 159.36, "duration": 2.95}, {"text": "In the second half\nof today's lecture,", "start": 162.31, "duration": 1.87}, {"text": "you'll see why I\nhappen to choose", "start": 164.18, "duration": 1.77}, {"text": "this particular approach.", "start": 165.95, "duration": 2.83}, {"text": "So what is a search tree?", "start": 168.78, "duration": 3.23}, {"text": "A tree is, basically,\na kind of graph.", "start": 172.01, "duration": 4.8}, {"text": "And we'll hear much more\nabout graphs next week.", "start": 176.81, "duration": 3.19}, {"text": "But this is a simple form\nwhere you have a root", "start": 180.0, "duration": 4.45}, {"text": "and then children of the root.", "start": 184.45, "duration": 2.07}, {"text": "In this particular\nform, research C,", "start": 186.52, "duration": 2.79}, {"text": "you have two children.", "start": 189.31, "duration": 1.62}, {"text": "So we start with the root.", "start": 190.93, "duration": 1.32}, {"text": "And then we look at\nour list of elements", "start": 195.22, "duration": 2.46}, {"text": "to be considered\nthat we might take,", "start": 197.68, "duration": 3.75}, {"text": "and we look at the first\nelement in that list.", "start": 201.43, "duration": 3.27}, {"text": "And then we draw a\nleft branch, which", "start": 204.7, "duration": 3.96}, {"text": "shows the consequence of\nchoosing to take that element,", "start": 208.66, "duration": 3.93}, {"text": "and a right branch, which\nshows the consequences of not", "start": 212.59, "duration": 3.66}, {"text": "taking that element.", "start": 216.25, "duration": 0.96}, {"text": "And then we consider\nthe second element,", "start": 219.98, "duration": 3.27}, {"text": "and so on and so forth, until we\nget to the bottom of the tree.", "start": 223.25, "duration": 6.14}, {"text": "So by convention, the left\nelement will mean we took it,", "start": 229.39, "duration": 3.17}, {"text": "the right direction will\nmean we didn't take it.", "start": 232.56, "duration": 2.11}, {"text": "And then we apply it recursively\nto the non-leaf children.", "start": 239.0, "duration": 3.93}, {"text": "The leaf means we\nget to the end,", "start": 242.93, "duration": 1.59}, {"text": "we've considered the last\nelement to be considered.", "start": 244.52, "duration": 2.88}, {"text": "Nothing else to think about.", "start": 247.4, "duration": 2.73}, {"text": "When we get to the\ncode, we'll see", "start": 250.13, "duration": 1.53}, {"text": "that, in addition to the\ndescription being recursive,", "start": 251.66, "duration": 3.48}, {"text": "it's convenient to write\nthe code that way, too.", "start": 255.14, "duration": 3.86}, {"text": "And then finally,\nwe'll choose the node", "start": 259.0, "duration": 2.25}, {"text": "that has the highest value\nthat meets our constraints.", "start": 261.25, "duration": 3.31}, {"text": "So let's look at an example.", "start": 264.56, "duration": 2.39}, {"text": "My example is I have\nmy backpack that", "start": 266.95, "duration": 2.61}, {"text": "can hold a certain number\nof calories if you will.", "start": 269.56, "duration": 4.36}, {"text": "And I'm choosing between, to\nkeep it small, a beer, a pizza,", "start": 273.92, "duration": 3.44}, {"text": "and a burger--", "start": 277.36, "duration": 2.22}, {"text": "three essential food groups.", "start": 279.58, "duration": 3.74}, {"text": "The first thing I explore on\nthe left is take the beer,", "start": 283.32, "duration": 4.51}, {"text": "and then I have the\npizza and the burger", "start": 287.83, "duration": 2.52}, {"text": "to continue to consider.", "start": 290.35, "duration": 2.81}, {"text": "I then say, all right,\nlet's take the pizza.", "start": 293.16, "duration": 3.36}, {"text": "Now I have just the burger.", "start": 296.52, "duration": 1.65}, {"text": "Now I taste the burger.", "start": 298.17, "duration": 2.34}, {"text": "This traversal of this\ngeneration of the tree", "start": 300.51, "duration": 3.99}, {"text": "is called left-most depth-most.", "start": 304.5, "duration": 3.48}, {"text": "So I go all the way down\nto the bottom of the tree.", "start": 307.98, "duration": 3.92}, {"text": "I then back up a\nlevel and say, all", "start": 311.9, "duration": 2.78}, {"text": "right, I'm now at the bottom.", "start": 314.68, "duration": 3.06}, {"text": "Let's go back and\nsee what happens", "start": 317.74, "duration": 6.39}, {"text": "if I make the other choice\nat the one level up the tree.", "start": 324.13, "duration": 5.08}, {"text": "So I went up and\nsaid, well, now let's", "start": 329.21, "duration": 2.39}, {"text": "see what happens if I\nmake a different decision,", "start": 331.6, "duration": 5.4}, {"text": "as in we didn't take the burger.", "start": 337.0, "duration": 3.52}, {"text": "And then I work my way--", "start": 340.52, "duration": 1.26}, {"text": "this is called backtracking--", "start": 341.78, "duration": 2.07}, {"text": "up another level.", "start": 343.85, "duration": 1.62}, {"text": "I now say, suppose, I didn't\ntake the piece of pizza.", "start": 345.47, "duration": 4.03}, {"text": "Now I have the beer\nonly and only the burger", "start": 349.5, "duration": 2.75}, {"text": "to think about, so\non and so forth,", "start": 352.25, "duration": 5.86}, {"text": "until I've generated\nthe whole tree.", "start": 358.11, "duration": 2.52}, {"text": "You'll notice it will always be\nthe case that the leftmost leaf", "start": 360.63, "duration": 3.42}, {"text": "of this tree has got all\nthe possible items in it,", "start": 364.05, "duration": 4.75}, {"text": "and the rightmost leaf none.", "start": 368.8, "duration": 3.28}, {"text": "And then I just check\nwhich of these leaves", "start": 372.08, "duration": 2.88}, {"text": "meets the constraint\nand what are the values.", "start": 374.96, "duration": 4.22}, {"text": "And if I compute the value\nand the calories in each one,", "start": 379.18, "duration": 5.25}, {"text": "and if our constraint\nwas 750 calories,", "start": 384.43, "duration": 3.69}, {"text": "then I get to choose\nthe winner, which is--", "start": 388.12, "duration": 2.385}, {"text": "I guess, it's the\npizza and the burger.", "start": 393.356, "duration": 1.624}, {"text": "Is that right?", "start": 394.98, "duration": 0.73}, {"text": "The most value under 750.", "start": 398.44, "duration": 7.37}, {"text": "That's the way I go through.", "start": 405.81, "duration": 3.37}, {"text": "It's quite a\nstraightforward algorithm.", "start": 409.18, "duration": 3.53}, {"text": "And I don't know why we draw our\ntrees with the root at the top", "start": 412.71, "duration": 3.64}, {"text": "and the leaves at the bottom.", "start": 416.35, "duration": 1.94}, {"text": "My only conjecture is\ncomputer scientists", "start": 418.29, "duration": 2.67}, {"text": "don't spend enough\ntime outdoors.", "start": 420.96, "duration": 1.395}, {"text": "Now let's think of the\ncomputational complexity", "start": 426.21, "duration": 3.66}, {"text": "of this process.", "start": 429.87, "duration": 3.15}, {"text": "The time is going to be based\non the total number of nodes", "start": 433.02, "duration": 2.94}, {"text": "we generate.", "start": 435.96, "duration": 2.14}, {"text": "So if we know the number of\nnodes that are in the tree,", "start": 438.1, "duration": 3.45}, {"text": "we then know the complexity\nof the algorithm,", "start": 441.55, "duration": 2.61}, {"text": "the asymptotic complexity.", "start": 444.16, "duration": 3.17}, {"text": "Well, how many levels\ndo we have in the tree?", "start": 447.33, "duration": 4.13}, {"text": "Just the number of items, right?", "start": 451.46, "duration": 2.46}, {"text": "Because at each\nlevel of the tree", "start": 453.92, "duration": 1.74}, {"text": "we're deciding to take\nor not to take an item.", "start": 455.66, "duration": 3.38}, {"text": "And so we can only do that for\nthe number of items we have.", "start": 459.04, "duration": 4.17}, {"text": "So if we go back, for example,\nand we look at the tree--", "start": 463.21, "duration": 3.63}, {"text": "not that tree, that tree--", "start": 466.84, "duration": 3.58}, {"text": "and we count the\nnumber of levels,", "start": 470.42, "duration": 2.17}, {"text": "it's going to be based upon\nthe total number of items.", "start": 472.59, "duration": 4.01}, {"text": "We know that because if you\nlook at, say, the leftmost node", "start": 476.6, "duration": 2.55}, {"text": "at the bottom, we've made\nthree separate decisions.", "start": 479.15, "duration": 5.01}, {"text": "So counting the\nroot, it's n plus 1.", "start": 484.16, "duration": 4.5}, {"text": "But we don't care\nabout plus 1 when we're", "start": 488.66, "duration": 2.28}, {"text": "doing asymptotic complexity.", "start": 490.94, "duration": 3.95}, {"text": "So that tells us how many\nlevels we have in the tree.", "start": 494.89, "duration": 4.42}, {"text": "The next question we\nneed to ask is, how many", "start": 499.31, "duration": 3.72}, {"text": "nodes are there at each level?", "start": 503.03, "duration": 3.14}, {"text": "And you can look at this\nand see-- the deeper we go,", "start": 506.17, "duration": 4.41}, {"text": "the more nodes we\nhave at each level.", "start": 510.58, "duration": 4.01}, {"text": "In fact, if we come\nhere, we can see", "start": 514.59, "duration": 4.75}, {"text": "that the number of\nnodes at level i--", "start": 519.34, "duration": 2.63}, {"text": "depth i of the\ntree-- is 2 to the i.", "start": 521.97, "duration": 4.68}, {"text": "That makes sense if you\nremember last time we", "start": 526.65, "duration": 2.19}, {"text": "looked at binary numbers.", "start": 528.84, "duration": 2.13}, {"text": "We're saying we're representing\nour choices as either 0", "start": 530.97, "duration": 2.58}, {"text": "or 1 for what we take.", "start": 533.55, "duration": 2.01}, {"text": "If we have n items\nto choose from,", "start": 535.56, "duration": 2.67}, {"text": "then the number of\npossible choices", "start": 538.23, "duration": 2.01}, {"text": "is 2 to the n, the\nsize of the powerset.", "start": 540.24, "duration": 3.11}, {"text": "So that will tell us the\nnumber of nodes at each level.", "start": 543.35, "duration": 2.515}, {"text": "So if there are n items, the\nnumber of nodes in the tree", "start": 549.55, "duration": 3.92}, {"text": "is going to be the sum\nfrom 0 to n of 2 to the i", "start": 553.47, "duration": 5.04}, {"text": "because we have\nthat many levels.", "start": 558.51, "duration": 2.94}, {"text": "And if you've studied\na little math,", "start": 561.45, "duration": 2.4}, {"text": "you know that's exactly\n2 to the n plus 1.", "start": 563.85, "duration": 4.55}, {"text": "Or if you do what I do,\nyou look it up in Wikipedia", "start": 568.4, "duration": 2.58}, {"text": "and you know it's\n2 to the n plus 1.", "start": 570.98, "duration": 3.68}, {"text": "Now, there's an\nobvious optimization.", "start": 574.66, "duration": 2.55}, {"text": "We don't need to\nexplore the whole tree.", "start": 577.21, "duration": 4.11}, {"text": "If we get to a point where\nthe backpack is overstuffed,", "start": 581.32, "duration": 4.44}, {"text": "there's no point in saying,\nshould we take this next item?", "start": 585.76, "duration": 2.88}, {"text": "Because we know we can't.", "start": 588.64, "duration": 2.28}, {"text": "I generated a bunch\nof leaves that", "start": 590.92, "duration": 2.4}, {"text": "were useless because\nthe weight was too high.", "start": 593.32, "duration": 4.5}, {"text": "So you could always\nabort early and say, oh,", "start": 597.82, "duration": 3.84}, {"text": "no point in generating the\nrest of this part of the tree", "start": 601.66, "duration": 3.66}, {"text": "because we know everything\nin it will be too heavy.", "start": 605.32, "duration": 4.0}, {"text": "Adding something cannot\nreduce the weight.", "start": 609.32, "duration": 4.14}, {"text": "It's a nice optimization.", "start": 613.46, "duration": 1.32}, {"text": "It's one you'll see we\nactually do in the code.", "start": 614.78, "duration": 3.04}, {"text": "But it really doesn't\nchange the complexity.", "start": 617.82, "duration": 2.93}, {"text": "It's not going to change\nthe worst-cost complexity.", "start": 620.75, "duration": 3.51}, {"text": "Exponential, as we saw this,\nI think, in Eric's lecture,", "start": 628.83, "duration": 3.56}, {"text": "is a big number.", "start": 632.39, "duration": 1.36}, {"text": "You don't usually\nlike 2 to the n.", "start": 633.75, "duration": 2.4}, {"text": "Does this mean that brute\nforce is never useful?", "start": 636.15, "duration": 3.15}, {"text": "Well, let's give it a try.", "start": 639.3, "duration": 1.32}, {"text": "We'll look at some code.", "start": 643.675, "duration": 1.0}, {"text": "Here is the implementation.", "start": 648.44, "duration": 1.33}, {"text": "So it's maxVal,\ntoConsider, and avail.", "start": 657.85, "duration": 4.55}, {"text": "And then we say, if toConsider\nis empty or avail is 0--", "start": 662.4, "duration": 6.39}, {"text": "avail is an index, we're going\nto go through the list using", "start": 668.79, "duration": 2.91}, {"text": "that to tell us\nwhether or not we still", "start": 671.7, "duration": 2.88}, {"text": "have an element to consider--", "start": 674.58, "duration": 2.59}, {"text": "then the result will be the\ntuple 0 and the empty tuple.", "start": 677.17, "duration": 5.44}, {"text": "We couldn't take anything.", "start": 685.28, "duration": 1.14}, {"text": "This is the base\nof our recursion.", "start": 686.42, "duration": 3.11}, {"text": "Either there's nothing\nleft to consider or there's", "start": 689.53, "duration": 2.98}, {"text": "no available weight--", "start": 692.51, "duration": 1.74}, {"text": "the Val, as the\namount of weight,", "start": 694.25, "duration": 1.38}, {"text": "is 0 or toConsider is empty.", "start": 695.63, "duration": 3.78}, {"text": "Well, if either\nof those are true,", "start": 699.41, "duration": 3.42}, {"text": "then we ask whether\nto consider * 0,", "start": 702.83, "duration": 3.02}, {"text": "the first element to look at.", "start": 705.85, "duration": 2.61}, {"text": "Is that cost greater\nthan availability?", "start": 708.46, "duration": 3.21}, {"text": "If it is, we don't need to\nexplore the left branch.", "start": 714.74, "duration": 4.22}, {"text": "because it means we can't\nafford to put that thing", "start": 718.96, "duration": 2.31}, {"text": "in the backpack, the knapsack.", "start": 721.27, "duration": 2.22}, {"text": "There's just no room for it.", "start": 723.49, "duration": 1.86}, {"text": "So we'll explore the\nright branch only.", "start": 725.35, "duration": 3.18}, {"text": "The result will be whatever the\nmaximum value is of toConsider", "start": 728.53, "duration": 4.86}, {"text": "of the remainder of the list--\nthe list with the first element", "start": 733.39, "duration": 4.14}, {"text": "sliced off--", "start": 737.53, "duration": 1.37}, {"text": "and availability unchanged.", "start": 738.9, "duration": 3.17}, {"text": "So it's a recursive\nimplementation, saying,", "start": 742.07, "duration": 2.41}, {"text": "now we only have to consider\nthe right branch of the tree", "start": 744.48, "duration": 3.45}, {"text": "because we knew we\ncouldn't take this element.", "start": 747.93, "duration": 1.98}, {"text": "It just weighs too\nmuch, or costs too much,", "start": 749.91, "duration": 2.58}, {"text": "or was too fattening,\nin my case.", "start": 752.49, "duration": 3.51}, {"text": "Otherwise, we now have to\nconsider both branches.", "start": 756.0, "duration": 5.21}, {"text": "So we'll set next item to\ntoConsider of 0, the first one,", "start": 761.21, "duration": 4.79}, {"text": "and explore the left branch.", "start": 766.0, "duration": 1.27}, {"text": "On this branch, there\nare two possibilities", "start": 771.04, "duration": 2.94}, {"text": "to think about, which I'm\ncalling withVal and withToTake.", "start": 773.98, "duration": 7.3}, {"text": "So I'm going to call maxVal\nof toConsider of everything", "start": 781.28, "duration": 4.49}, {"text": "except the current element and\npass in an available weight", "start": 785.77, "duration": 6.54}, {"text": "of avail minus whatever--", "start": 792.31, "duration": 3.39}, {"text": "well, let me widen this so\nwe can see the whole code.", "start": 795.7, "duration": 4.31}, {"text": "This is not going to let me\nwiden this window any more.", "start": 803.986, "duration": 4.054}, {"text": "Shame on it.", "start": 808.04, "duration": 0.76}, {"text": "Let me see if I can\nget rid of the console.", "start": 808.8, "duration": 1.791}, {"text": "Well, we'll have\nto do this instead.", "start": 817.06, "duration": 1.71}, {"text": "So we're going to call\nmaxVal with everything", "start": 825.19, "duration": 3.5}, {"text": "except the current\nelement and give it", "start": 828.69, "duration": 2.61}, {"text": "avail minus the cost of that\nnext item of toConsider sub 0.", "start": 831.3, "duration": 6.9}, {"text": "Because we know that the\navailability, available weight", "start": 838.2, "duration": 2.85}, {"text": "has to have that cost\nsubtracted from it.", "start": 841.05, "duration": 2.08}, {"text": "And then we'll add to withVal\nnext item dot getValue.", "start": 849.16, "duration": 9.25}, {"text": "So that's a value\nif we do take it.", "start": 858.41, "duration": 3.79}, {"text": "Then we'll explore the\nright branch-- what", "start": 862.2, "duration": 1.75}, {"text": "happens if we don't take it?", "start": 863.95, "duration": 1.32}, {"text": "And then we'll choose\nthe better branch.", "start": 867.939, "duration": 1.666}, {"text": "So it's a pretty simple\nrecursive algorithm.", "start": 873.67, "duration": 3.24}, {"text": "We just go all the\nway to the bottom", "start": 876.91, "duration": 3.27}, {"text": "and make the right\nchoice at the bottom,", "start": 880.18, "duration": 2.07}, {"text": "and then percolate back up, like\nso many recursive algorithms.", "start": 882.25, "duration": 4.44}, {"text": "We have a simple\nprogram to test it.", "start": 892.68, "duration": 1.89}, {"text": "I better start a console\nnow if I'm going to run it.", "start": 902.414, "duration": 2.166}, {"text": "And we'll testGreedys on foods.", "start": 912.19, "duration": 2.68}, {"text": "Well, we'll testGreedys\nand then we'll testMaxVal.", "start": 914.87, "duration": 3.92}, {"text": "So I'm building\nthe same thing we", "start": 918.79, "duration": 1.92}, {"text": "did in Monday's\nlecture, the same menu.", "start": 920.71, "duration": 3.21}, {"text": "And I'll run the\nsame testGreedys", "start": 923.92, "duration": 1.62}, {"text": "we looked at last time.", "start": 925.54, "duration": 1.92}, {"text": "And we'll see whether or not\nwe get something better when", "start": 927.46, "duration": 3.57}, {"text": "we run the truly optimal one.", "start": 931.03, "duration": 1.74}, {"text": "Well, indeed we do.", "start": 941.26, "duration": 1.98}, {"text": "You remember that last\ntime and, fortunately,", "start": 943.24, "duration": 2.4}, {"text": "this time too, the best\nwe did was a value of 318.", "start": 945.64, "duration": 6.51}, {"text": "But now we see we can\nactually get to 353 if we use", "start": 952.15, "duration": 4.32}, {"text": "the truly optimal algorithm.", "start": 956.47, "duration": 4.13}, {"text": "So we see it ran pretty\nquickly and actually", "start": 960.6, "duration": 4.51}, {"text": "gave us a better answer than we\ngot from the greedy algorithm.", "start": 965.11, "duration": 5.31}, {"text": "And it's often the case.", "start": 970.42, "duration": 2.34}, {"text": "If I have time at the\nend, I'll show you", "start": 972.76, "duration": 1.92}, {"text": "an optimization\nprogram you might", "start": 974.68, "duration": 1.68}, {"text": "want to run that works\nperfectly fine to use", "start": 976.36, "duration": 4.86}, {"text": "this kind of brute\nforce algorithm on.", "start": 981.22, "duration": 3.09}, {"text": "Let's go back to the PowerPoint.", "start": 984.31, "duration": 3.92}, {"text": "So I'm just going through\nthe code again we just ran.", "start": 988.23, "duration": 3.33}, {"text": "This was the header we saw--", "start": 991.56, "duration": 3.66}, {"text": "toConsider, as the\nitems that correspond", "start": 995.22, "duration": 2.48}, {"text": "to nodes higher up the\ntree, and avail, as I said,", "start": 997.7, "duration": 4.5}, {"text": "the amount of space.", "start": 1002.2, "duration": 2.419}, {"text": "And again, here's what\nthe body of the code", "start": 1004.619, "duration": 1.791}, {"text": "loooked like, I took\nout the comments.", "start": 1006.41, "duration": 2.625}, {"text": "One of the things you might\nthink about in your head", "start": 1011.364, "duration": 2.166}, {"text": "when you look at this code is\nputting the comments back in.", "start": 1013.53, "duration": 3.66}, {"text": "I always find that for\nme a really good way", "start": 1017.19, "duration": 2.22}, {"text": "to understand code that I didn't\nwrite is to try and comment it.", "start": 1019.41, "duration": 4.65}, {"text": "And that helps me sort of\nforce myself to think about", "start": 1024.06, "duration": 2.519}, {"text": "what is it really doing.", "start": 1026.579, "duration": 2.49}, {"text": "So you'll have both versions--\nyou'll have the PowerPoint", "start": 1029.069, "duration": 3.03}, {"text": "version without the\ncomments and the actual code", "start": 1032.099, "duration": 2.911}, {"text": "with the comments.", "start": 1035.01, "duration": 1.89}, {"text": "You can think about\nlooking at this", "start": 1036.9, "duration": 1.679}, {"text": "and then looking\nat the real code", "start": 1038.579, "duration": 2.131}, {"text": "and making sure that\nyou're understanding jibes.", "start": 1040.71, "duration": 2.755}, {"text": "I should point out that\nthis doesn't actually", "start": 1048.0, "duration": 2.53}, {"text": "build the search tree.", "start": 1050.53, "duration": 2.98}, {"text": "We've got this local variable\nresult, starting here,", "start": 1053.51, "duration": 9.15}, {"text": "that records the best\nsolution found so far.", "start": 1062.66, "duration": 5.39}, {"text": "So it's not the picture I drew\nwhere I generate all the nodes", "start": 1068.05, "duration": 3.16}, {"text": "and then I inspect them.", "start": 1071.21, "duration": 1.88}, {"text": "I just keep track--", "start": 1073.09, "duration": 1.11}, {"text": "as I generate a node, I\nsay, how good is this?", "start": 1074.2, "duration": 3.69}, {"text": "Is it better than the\nbest I've found so far?", "start": 1077.89, "duration": 2.08}, {"text": "If so, it becomes the new best.", "start": 1079.97, "duration": 3.21}, {"text": "And I can do that because\nevery node I generate", "start": 1083.18, "duration": 3.82}, {"text": "is, in some sense, a legal\nsolution to the problem.", "start": 1087.0, "duration": 5.61}, {"text": "Probably rarely is it the\nfinal optimal solution", "start": 1092.61, "duration": 4.59}, {"text": "but it's at least\na legal solution.", "start": 1097.2, "duration": 1.83}, {"text": "And so if it's\nbetter than something", "start": 1099.03, "duration": 1.5}, {"text": "we saw before, we can\nmake it the new best.", "start": 1100.53, "duration": 5.3}, {"text": "This is very common.", "start": 1105.83, "duration": 1.09}, {"text": "And this is, in fact, what\nmost people do with it", "start": 1106.92, "duration": 2.39}, {"text": "when they use a search tree--", "start": 1109.31, "duration": 2.04}, {"text": "they don't actually\nbuild the tree", "start": 1111.35, "duration": 2.55}, {"text": "in the pictorial way\nwe've looked at it", "start": 1113.9, "duration": 2.76}, {"text": "but play some trick like\nthis of just keeping", "start": 1116.66, "duration": 3.272}, {"text": "track of their results.", "start": 1119.932, "duration": 0.958}, {"text": "Any questions about this?", "start": 1124.61, "duration": 1.215}, {"text": "All right.", "start": 1130.29, "duration": 1.92}, {"text": "We did just try it on\nexample from lecture 1.", "start": 1132.21, "duration": 4.9}, {"text": "And we saw that it worked great.", "start": 1137.11, "duration": 1.89}, {"text": "It gave us a better answer.", "start": 1139.0, "duration": 1.98}, {"text": "It finished quickly.", "start": 1140.98, "duration": 2.34}, {"text": "But we should not take too\nmuch solace from the fact", "start": 1143.32, "duration": 3.57}, {"text": "that it finished quickly\nbecause 2 to the eighth", "start": 1146.89, "duration": 3.27}, {"text": "is actually a\npretty tiny number.", "start": 1150.16, "duration": 1.59}, {"text": "Almost any algorithm is fine\nwhen I'm working on something", "start": 1156.16, "duration": 3.6}, {"text": "this small.", "start": 1159.76, "duration": 1.5}, {"text": "Let's look now at what happens\nif we have a bigger menu.", "start": 1161.26, "duration": 2.88}, {"text": "Here is some code\nto do a bigger menu.", "start": 1168.87, "duration": 4.26}, {"text": "Since, as you will discover\nif you haven't already,", "start": 1173.13, "duration": 4.31}, {"text": "I'm a pretty lazy\nperson, I didn't", "start": 1177.44, "duration": 2.47}, {"text": "want to write out a menu with\na 100 items or even 50 items.", "start": 1179.91, "duration": 3.66}, {"text": "So I wrote some code\nto generate the menus.", "start": 1183.57, "duration": 3.12}, {"text": "And I used randomness\nto do that.", "start": 1186.69, "duration": 3.66}, {"text": "This is a Python\nlibrary we'll be", "start": 1190.35, "duration": 2.46}, {"text": "using a lot for the\nrest of the semester.", "start": 1192.81, "duration": 5.14}, {"text": "It's used any time you want\nto generate things at random", "start": 1197.95, "duration": 6.3}, {"text": "and do many other things.", "start": 1204.25, "duration": 1.5}, {"text": "We'll come back to it a lot.", "start": 1205.75, "duration": 1.68}, {"text": "Here we're just going to\nuse a very small part of it.", "start": 1207.43, "duration": 3.51}, {"text": "To build a large menu\nof some numItems--", "start": 1214.21, "duration": 5.262}, {"text": "and we're going to\ngive the maximum value", "start": 1219.472, "duration": 1.708}, {"text": "and the maximum\ncost for each item.", "start": 1221.18, "duration": 4.04}, {"text": "We'll assume the minimum\nis, in this case, 1.", "start": 1225.22, "duration": 5.2}, {"text": "Items will start empty.", "start": 1230.42, "duration": 1.59}, {"text": "And then for i in\nrange number of items,", "start": 1232.01, "duration": 3.62}, {"text": "I'm going to call this function\nrandom dot randint that", "start": 1235.63, "duration": 6.06}, {"text": "takes a range of integers from\n1 to, actually in this case,", "start": 1241.69, "duration": 5.09}, {"text": "maxVal minus 1, or 1 to\nmaxVal, actually, in this case.", "start": 1246.78, "duration": 6.01}, {"text": "And it just chooses\none of them at random.", "start": 1252.79, "duration": 3.03}, {"text": "So when you run this, you don't\nknow what it's going to get.", "start": 1255.82, "duration": 3.23}, {"text": "Random dot randint might\nreturn 1, it might return 23,", "start": 1259.05, "duration": 3.99}, {"text": "it might return 54.", "start": 1263.04, "duration": 1.739}, {"text": "The only thing you know\nis it will be an integer.", "start": 1264.779, "duration": 2.041}, {"text": "And then I'm going to build\nmenus ranging from 5 items", "start": 1269.64, "duration": 4.34}, {"text": "to 60 items--", "start": 1273.98, "duration": 0.94}, {"text": "buildLargeMenu, the number\nof items, with maxVal of 90", "start": 1279.76, "duration": 9.96}, {"text": "and a maxCost of 250,\npleasure and calories.", "start": 1289.72, "duration": 5.53}, {"text": "And then I'm going to test\nmaxVal on each of these menus.", "start": 1295.25, "duration": 4.08}, {"text": "So building menus of\nvarious sizes at random", "start": 1303.05, "duration": 3.54}, {"text": "and then just trying to find the\noptimal value for each of them.", "start": 1306.59, "duration": 5.63}, {"text": "Let's look at the code.", "start": 1312.22, "duration": 1.02}, {"text": "Let's comment this out, we\ndon't need to run that again.", "start": 1316.61, "duration": 6.99}, {"text": "So we'll build a\nlarge menu and then", "start": 1330.432, "duration": 2.998}, {"text": "we'll try it for a bunch of\nitems and see what we get.", "start": 1333.43, "duration": 2.58}, {"text": "So it's going along.", "start": 1349.44, "duration": 1.55}, {"text": "Trying the menu up to\n30 went pretty quickly.", "start": 1350.99, "duration": 3.73}, {"text": "So even 2 to the 30\ndidn't take too long.", "start": 1354.72, "duration": 3.29}, {"text": "But you might notice it's kind\nof bogging down, we got 35.", "start": 1358.01, "duration": 3.52}, {"text": "I guess, I could ask\nthe question now--", "start": 1366.25, "duration": 1.87}, {"text": "it was one of the questions\nI was going to ask as a poll", "start": 1368.12, "duration": 3.17}, {"text": "but maybe I won't bother--", "start": 1371.29, "duration": 2.37}, {"text": "how much patience do we have?", "start": 1373.66, "duration": 1.932}, {"text": "When do you think we'll run\nout of patience and quit?", "start": 1375.592, "duration": 2.208}, {"text": "If you're out of\npatience, raise your hand.", "start": 1383.86, "duration": 1.83}, {"text": "Well, some of you are way\nmore patient than I am.", "start": 1388.64, "duration": 2.96}, {"text": "So we're going to quit anyway.", "start": 1391.6, "duration": 1.25}, {"text": "We were trying to do 40.", "start": 1398.74, "duration": 1.5}, {"text": "It might have finished 40, 45.", "start": 1400.24, "duration": 2.58}, {"text": "I've never waited long\nenough to get to 45.", "start": 1402.82, "duration": 3.66}, {"text": "It just is too long.", "start": 1406.48, "duration": 1.26}, {"text": "That raises the\nquestion, is it hopeless?", "start": 1413.1, "duration": 2.41}, {"text": "And in theory, yes.", "start": 1421.5, "duration": 2.25}, {"text": "As I mentioned last time, it\nis an inherently exponential", "start": 1423.75, "duration": 3.09}, {"text": "problem.", "start": 1426.84, "duration": 1.62}, {"text": "The answer is-- in practice, no.", "start": 1428.46, "duration": 2.13}, {"text": "Because there's something\ncalled dynamic programming,", "start": 1430.59, "duration": 4.33}, {"text": "which was invented by a\nfellow at the RAND Corporation", "start": 1434.92, "duration": 4.28}, {"text": "called Richard Bellman,\na rather remarkable", "start": 1439.2, "duration": 3.03}, {"text": "mathematician/computer\nscientist.", "start": 1442.23, "duration": 3.27}, {"text": "He wrote a whole book\non it, but I'm not sure", "start": 1445.5, "duration": 2.22}, {"text": "why because it's not\nthat complicated.", "start": 1447.72, "duration": 1.92}, {"text": "When we talk about\ndynamic programming,", "start": 1454.14, "duration": 2.88}, {"text": "it's a kind of a funny\nstory, at least to me.", "start": 1457.02, "duration": 3.84}, {"text": "I learned it and I\ndidn't know anything", "start": 1460.86, "duration": 2.69}, {"text": "about the history of it.", "start": 1463.55, "duration": 1.0}, {"text": "And I've had all sorts\nof theories about why it", "start": 1464.55, "duration": 3.63}, {"text": "was called dynamic programming.", "start": 1468.18, "duration": 2.49}, {"text": "You know how it is, how people\ntry and fit a theory to data.", "start": 1470.67, "duration": 4.59}, {"text": "And then I read a\nhistory book about it,", "start": 1475.26, "duration": 1.74}, {"text": "and this was Bellman's\nown description", "start": 1477.0, "duration": 2.37}, {"text": "of why he called it\ndynamic programming.", "start": 1479.37, "duration": 4.52}, {"text": "And it turned out,\nas you can see,", "start": 1483.89, "duration": 1.74}, {"text": "he basically chose a word\nbecause it was the description", "start": 1485.63, "duration": 3.33}, {"text": "that didn't mean anything.", "start": 1488.96, "duration": 2.47}, {"text": "Because he was doing\nmathematics, and at the time", "start": 1491.43, "duration": 3.9}, {"text": "he was being funded by a part\nof the Defense Department", "start": 1495.33, "duration": 2.85}, {"text": "that didn't approve\nof mathematics.", "start": 1498.18, "duration": 2.61}, {"text": "And he wanted to\nconceal that fact.", "start": 1500.79, "duration": 3.27}, {"text": "And indeed at the time, the\nhead of Defense Appropriations", "start": 1504.06, "duration": 4.35}, {"text": "in the US Congress didn't\nmuch like mathematics.", "start": 1508.41, "duration": 3.829}, {"text": "And he was afraid\nthat he didn't want", "start": 1512.239, "duration": 1.541}, {"text": "to have to go and testify and\ntell people he was doing math.", "start": 1513.78, "duration": 3.75}, {"text": "So he just invented\nsomething that no one", "start": 1517.53, "duration": 2.04}, {"text": "would know what it meant.", "start": 1519.57, "duration": 1.83}, {"text": "And years of students\nspent time later trying", "start": 1521.4, "duration": 3.0}, {"text": "to figure out what\nit actually did mean.", "start": 1524.4, "duration": 3.22}, {"text": "Anyway, what's the basic idea?", "start": 1527.62, "duration": 2.66}, {"text": "To understand it I want\nto temporarily abandon", "start": 1530.28, "duration": 4.59}, {"text": "the knapsack problem and look\nat a much simpler problem--", "start": 1534.87, "duration": 4.38}, {"text": "Fibonacci numbers.", "start": 1539.25, "duration": 0.975}, {"text": "You've seen this already, with\ncute little bunnies, I think,", "start": 1542.88, "duration": 3.75}, {"text": "when you saw it.", "start": 1546.63, "duration": 2.97}, {"text": "N equals 0, n\nequals 1-- return 1.", "start": 1549.6, "duration": 2.38}, {"text": "Otherwise, fib of n minus\n1 plus fib of n minus 2.", "start": 1551.98, "duration": 5.24}, {"text": "And as I think you saw\nwhen you first saw it,", "start": 1557.22, "duration": 2.34}, {"text": "it takes a long time to run.", "start": 1559.56, "duration": 4.41}, {"text": "Fib of 120, for example,\nis a very big number.", "start": 1563.97, "duration": 4.06}, {"text": "It's shocking how\nquickly Fibonacci grows.", "start": 1568.03, "duration": 4.38}, {"text": "So let's think about\nimplementing it.", "start": 1572.41, "duration": 8.48}, {"text": "If we run Fibonacci--", "start": 1580.89, "duration": 1.569}, {"text": "well, maybe we'll just do that.", "start": 1582.459, "duration": 1.291}, {"text": "So here is fib of n,\nlet's just try running it.", "start": 1597.03, "duration": 2.434}, {"text": "And again, we'll test\npeople's patience.", "start": 1599.464, "duration": 1.666}, {"text": "We'll see how long\nwe're letting it run.", "start": 1614.14, "duration": 1.83}, {"text": "I'm going to try for\ni in the range of 121.", "start": 1615.97, "duration": 3.27}, {"text": "We'll print fib of i.", "start": 1619.24, "duration": 3.193}, {"text": "Comes clumping along.", "start": 1629.84, "duration": 1.365}, {"text": "It slows down pretty quickly.", "start": 1634.17, "duration": 2.8}, {"text": "And if you look at it,\nit's kind of surprising", "start": 1636.97, "duration": 1.94}, {"text": "it's this slow because these\nnumbers aren't that big.", "start": 1638.91, "duration": 2.28}, {"text": "These are not enormous numbers.", "start": 1644.09, "duration": 1.71}, {"text": "Fib of 35 is not a huge number.", "start": 1645.8, "duration": 2.52}, {"text": "Yet it took a long\ntime to compute.", "start": 1648.32, "duration": 3.8}, {"text": "So you have the numbers\ngrowing pretty quickly", "start": 1652.12, "duration": 2.16}, {"text": "but the computation, actually,\nseems to be growing faster", "start": 1654.28, "duration": 3.87}, {"text": "than the results.", "start": 1658.15, "duration": 2.39}, {"text": "We're at 37.", "start": 1660.54, "duration": 0.62}, {"text": "It's going to gets slower and\nslower, even though our numbers", "start": 1664.38, "duration": 3.87}, {"text": "are not that big.", "start": 1668.25, "duration": 3.4}, {"text": "The question is,\nwhat's going on?", "start": 1671.65, "duration": 2.22}, {"text": "Why is it taking so\nlong for Fibonacci", "start": 1673.87, "duration": 3.57}, {"text": "to compute these results?", "start": 1677.44, "duration": 3.35}, {"text": "Well, let's call it and\nlook at the question.", "start": 1680.79, "duration": 12.79}, {"text": "And to do that I want to\nlook at the call tree.", "start": 1693.58, "duration": 4.98}, {"text": "This is for Fibonacci\nof 6, which is only 13,", "start": 1698.56, "duration": 4.8}, {"text": "which, I think, most\nof us would agree", "start": 1703.36, "duration": 2.27}, {"text": "was not a very big number.", "start": 1705.63, "duration": 2.35}, {"text": "And let's look\nwhat's going on here.", "start": 1707.98, "duration": 2.22}, {"text": "If you look at this,\nwhat in some sense", "start": 1713.51, "duration": 2.24}, {"text": "seems really stupid about it?", "start": 1715.75, "duration": 3.66}, {"text": "What is it doing that a\nrational person would not want", "start": 1719.41, "duration": 4.71}, {"text": "to do if they could avoid it?", "start": 1724.12, "duration": 1.23}, {"text": "It's bad enough to\ndo something once.", "start": 1732.74, "duration": 2.58}, {"text": "But to do the same thing\nover and over again", "start": 1735.32, "duration": 2.46}, {"text": "is really wasteful.", "start": 1737.78, "duration": 3.21}, {"text": "And if we look at this,\nwe'll see, for example,", "start": 1740.99, "duration": 3.03}, {"text": "that fib 4 is being\ncomputed here,", "start": 1744.02, "duration": 3.42}, {"text": "and fib 4 is being\ncomputed here.", "start": 1747.44, "duration": 3.91}, {"text": "Fib 3 is being considered\nhere, and here, and here.", "start": 1751.35, "duration": 4.665}, {"text": "And do you think we'll get\na different answer for fib 3", "start": 1759.19, "duration": 2.79}, {"text": "in one place when we get\nit in the other place?", "start": 1761.98, "duration": 2.5}, {"text": "You sure hope not.", "start": 1764.48, "duration": 2.75}, {"text": "So you think, well, what\nshould we do about this?", "start": 1767.23, "duration": 5.93}, {"text": "How would we go about avoiding\ndoing the same work over", "start": 1773.16, "duration": 3.53}, {"text": "and over again?", "start": 1776.69, "duration": 1.85}, {"text": "And there's kind of\nan obvious answer,", "start": 1778.54, "duration": 1.62}, {"text": "and that answer is at the\nheart of dynamic programming.", "start": 1780.16, "duration": 3.44}, {"text": "What's the answer?", "start": 1783.6, "duration": 3.16}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 1786.76, "duration": 3.28}, {"text": "JOHN GUTTAG: Exactly.", "start": 1790.04, "duration": 1.427}, {"text": "And I'm really happy that\nsomeone in the front row", "start": 1791.467, "duration": 2.083}, {"text": "answered the question because\nI can throw it that far.", "start": 1793.55, "duration": 4.44}, {"text": "You store the answer and then\nlook it up when you need it.", "start": 1797.99, "duration": 5.67}, {"text": "Because we know that we can\nlook things up very quickly.", "start": 1803.66, "duration": 2.92}, {"text": "Dictionary, despite what\nEric said in his lecture,", "start": 1809.1, "duration": 3.85}, {"text": "almost all the time\nworks in constant time", "start": 1812.95, "duration": 4.56}, {"text": "if you make it big enough,\nand it usually is in Python.", "start": 1817.51, "duration": 3.45}, {"text": "We'll see later in the\nterm how to do that trick.", "start": 1820.96, "duration": 4.32}, {"text": "So you store it and then you'd\nnever have to compute it again.", "start": 1825.28, "duration": 5.24}, {"text": "And that's the basic trick\nbehind dynamic programming.", "start": 1830.52, "duration": 4.38}, {"text": "And it's something\ncalled memoization,", "start": 1834.9, "duration": 7.04}, {"text": "as in you create a memo and\nyou store it in the memo.", "start": 1841.94, "duration": 2.95}, {"text": "So we see this here.", "start": 1848.4, "duration": 2.22}, {"text": "Notice that what we're doing\nis trading time for space.", "start": 1850.62, "duration": 5.53}, {"text": "It takes some space to store\nthe old results, but negligible", "start": 1856.15, "duration": 9.15}, {"text": "related to the time we save.", "start": 1865.3, "duration": 3.45}, {"text": "So here's the trick.", "start": 1868.75, "duration": 1.38}, {"text": "We're going to create a table\nto record what we've done.", "start": 1870.13, "duration": 3.4}, {"text": "And then before\ncomputing fib of x,", "start": 1873.53, "duration": 2.85}, {"text": "we'll check if the value\nhas already been computed.", "start": 1876.38, "duration": 3.99}, {"text": "If so, we just look\nit up and return it.", "start": 1880.37, "duration": 2.55}, {"text": "Otherwise, we'll compute it--", "start": 1882.92, "duration": 2.08}, {"text": "it's the first time-- and\nstore it in the table.", "start": 1885.0, "duration": 2.0}, {"text": "Here is a fast implementation\nof Fibonacci that does that.", "start": 1891.56, "duration": 4.63}, {"text": "It looks like the\nold one, except it's", "start": 1896.19, "duration": 2.79}, {"text": "got an extra argument--", "start": 1898.98, "duration": 2.43}, {"text": "memo-- which is a dictionary.", "start": 1901.41, "duration": 3.94}, {"text": "The first time we call it,\nthe memo will be empty.", "start": 1905.35, "duration": 2.61}, {"text": "It tries to return\nthe value in the memo.", "start": 1912.32, "duration": 4.92}, {"text": "If it's not there, an exception\nwill get raised, we know that.", "start": 1917.24, "duration": 3.84}, {"text": "And it will branch to\nhere, compute the result,", "start": 1921.08, "duration": 4.1}, {"text": "and then store it in\nthe memo and return it.", "start": 1925.18, "duration": 6.01}, {"text": "It's the same old\nrecursive thing", "start": 1931.19, "duration": 2.07}, {"text": "we did before but with the memo.", "start": 1933.26, "duration": 3.66}, {"text": "Notice, by the way, that\nI'm using exceptions", "start": 1936.92, "duration": 3.27}, {"text": "not as an error\nhandling mechanism,", "start": 1940.19, "duration": 2.16}, {"text": "really, but just as\na flow of control.", "start": 1942.35, "duration": 3.92}, {"text": "To me, this is cleaner than\nwriting code that says,", "start": 1946.27, "duration": 3.24}, {"text": "if this is in the keys, then\ndo this, otherwise, do that.", "start": 1949.51, "duration": 4.93}, {"text": "It's slightly fewer lines of\ncode, and for me, at least,", "start": 1954.44, "duration": 3.0}, {"text": "easier to read to use try-except\nfor this sort of thing.", "start": 1957.44, "duration": 3.61}, {"text": "Let's see what happens\nif we run this one.", "start": 1964.69, "duration": 4.24}, {"text": "Get rid of the slow fib\nand we'll run fastFib.", "start": 1968.93, "duration": 13.88}, {"text": "Wow.", "start": 1997.78, "duration": 2.46}, {"text": "We're already done with fib 120.", "start": 2000.24, "duration": 5.72}, {"text": "Pretty amazing, considering last\ntime we got stuck around 40.", "start": 2005.96, "duration": 3.02}, {"text": "It really works, this\nmemoization trick.", "start": 2011.89, "duration": 3.81}, {"text": "An enormous difference.", "start": 2015.7, "duration": 1.74}, {"text": "When can you use it?", "start": 2027.94, "duration": 1.62}, {"text": "It's not that memorization\nis a magic bullet that", "start": 2029.56, "duration": 3.45}, {"text": "will solve all problems.", "start": 2033.01, "duration": 1.47}, {"text": "The problems it can solve,\nit can help with, really,", "start": 2038.71, "duration": 3.09}, {"text": "is the right thing.", "start": 2041.8, "duration": 1.17}, {"text": "And by the way, as we'll see, it\nfinds an optimal solution, not", "start": 2042.97, "duration": 3.81}, {"text": "an approximation.", "start": 2046.78, "duration": 3.24}, {"text": "Problems have two things\ncalled optimal substructure,", "start": 2050.02, "duration": 3.9}, {"text": "overlapping subproblems.", "start": 2053.92, "duration": 2.7}, {"text": "What are these mean?", "start": 2056.62, "duration": 2.73}, {"text": "We have optimal\nsubstructure when", "start": 2059.35, "duration": 2.099}, {"text": "a globally optimal\nsolution can be", "start": 2061.449, "duration": 2.101}, {"text": "found by combining optimal\nsolutions to local subproblems.", "start": 2063.55, "duration": 8.1}, {"text": "So for example, when\nx is greater than 1", "start": 2071.65, "duration": 3.48}, {"text": "we can solve fib x by solving\nfib x minus 1 and fib x minus 2", "start": 2075.13, "duration": 7.77}, {"text": "and adding those\ntwo things together.", "start": 2082.9, "duration": 4.18}, {"text": "So there is optimal\nsubstructure--", "start": 2087.08, "duration": 3.05}, {"text": "you solve these two smaller\nproblems independently", "start": 2090.13, "duration": 3.52}, {"text": "of each other and then combine\nthe solutions in a fast way.", "start": 2093.65, "duration": 4.41}, {"text": "You also have to have something\ncalled overlapping subproblems.", "start": 2103.75, "duration": 5.74}, {"text": "This is why the memo worked.", "start": 2109.49, "duration": 2.35}, {"text": "Finding an optimal\nsolution has to involve", "start": 2111.84, "duration": 2.73}, {"text": "solving the same\nproblem multiple times.", "start": 2114.57, "duration": 4.63}, {"text": "Even if you have\noptimal substructure,", "start": 2119.2, "duration": 1.89}, {"text": "if you don't see the same\nproblem more than once--", "start": 2121.09, "duration": 3.48}, {"text": "creating a memo.", "start": 2124.57, "duration": 1.19}, {"text": "Well, it'll work, you can\nstill create the memo.", "start": 2125.76, "duration": 3.19}, {"text": "You'll just never\nfind anything in it", "start": 2128.95, "duration": 1.84}, {"text": "when you look things\nup because you're", "start": 2130.79, "duration": 1.94}, {"text": "solving each problem once.", "start": 2132.73, "duration": 1.545}, {"text": "So you have to be solving the\nsame problem multiple times", "start": 2136.81, "duration": 4.28}, {"text": "and you have to be able to\nsolve it by combining solutions", "start": 2141.09, "duration": 4.0}, {"text": "to smaller problems.", "start": 2145.09, "duration": 0.885}, {"text": "Now, we've seen things with\noptimal substructure before.", "start": 2148.94, "duration": 2.84}, {"text": "In some sense, merge\nsort worked that way--", "start": 2154.92, "duration": 3.33}, {"text": "we were combining\nseparate problems.", "start": 2158.25, "duration": 2.52}, {"text": "Did merge sort have\noverlapping subproblems?", "start": 2160.77, "duration": 2.49}, {"text": "No, because-- well,\nI guess, it might", "start": 2165.93, "duration": 4.05}, {"text": "have if the list had the same\nelement many, many times.", "start": 2169.98, "duration": 3.57}, {"text": "But we would expect, mostly not.", "start": 2173.55, "duration": 3.9}, {"text": "Because each time we're\nsolving a different problem,", "start": 2177.45, "duration": 2.49}, {"text": "because we have different\nlists that we're now", "start": 2179.94, "duration": 1.92}, {"text": "sorting and merging.", "start": 2181.86, "duration": 2.46}, {"text": "So it has half of it\nbut not the other.", "start": 2184.32, "duration": 3.24}, {"text": "Dynamic programming will\nnot help us for sorting,", "start": 2187.56, "duration": 3.96}, {"text": "cannot be used to\nimprove merge sort.", "start": 2191.52, "duration": 3.1}, {"text": "Oh, well, nothing\nis a silver bullet.", "start": 2194.62, "duration": 3.15}, {"text": "What about the knapsack problem?", "start": 2200.51, "duration": 3.47}, {"text": "Does it have these\ntwo properties?", "start": 2203.98, "duration": 2.86}, {"text": "We can look at it in\nterms of these pictures.", "start": 2210.64, "duration": 4.57}, {"text": "And it's pretty clear that it\ndoes have optimal substructure", "start": 2215.21, "duration": 3.78}, {"text": "because we're taking the left\nbranch and the right branch", "start": 2218.99, "duration": 3.33}, {"text": "and choosing the winner.", "start": 2222.32, "duration": 1.08}, {"text": "But what about\noverlapping subproblems?", "start": 2226.21, "duration": 4.28}, {"text": "Are we ever solving, in this\ncase, the same problem--", "start": 2230.49, "duration": 2.99}, {"text": "add two nodes?", "start": 2236.33, "duration": 0.79}, {"text": "Well, do any of these\nnodes look identical?", "start": 2241.48, "duration": 2.43}, {"text": "In this case, no.", "start": 2248.43, "duration": 2.43}, {"text": "We could write a dynamic\nprogramming solution", "start": 2250.86, "duration": 3.39}, {"text": "to the knapsack problem--", "start": 2254.25, "duration": 1.33}, {"text": "and we will-- and run\nit on this example,", "start": 2255.58, "duration": 4.59}, {"text": "and we'd get the right answer.", "start": 2260.17, "duration": 1.89}, {"text": "We would get zero speedup.", "start": 2262.06, "duration": 3.07}, {"text": "Because at each\nnode, if you can see,", "start": 2265.13, "duration": 1.83}, {"text": "the problems are different.", "start": 2266.96, "duration": 2.4}, {"text": "We have different things in the\nknapsack or different things", "start": 2269.36, "duration": 3.95}, {"text": "to consider.", "start": 2273.31, "duration": 1.32}, {"text": "Never do we have the same\ncontents and the same things", "start": 2274.63, "duration": 2.585}, {"text": "left to decide.", "start": 2277.215, "duration": 0.625}, {"text": "So \"maybe\" was not a bad\nanswer if that was the answer", "start": 2281.77, "duration": 3.03}, {"text": "you gave to this question.", "start": 2284.8, "duration": 1.14}, {"text": "But let's look at\na different menu.", "start": 2288.55, "duration": 3.4}, {"text": "This menu happens to\nhave two beers in it.", "start": 2291.95, "duration": 3.06}, {"text": "Now, if we look at\nwhat happens, do", "start": 2299.11, "duration": 3.57}, {"text": "we see two nodes that are\nsolving the same problem?", "start": 2302.68, "duration": 3.14}, {"text": "The answer is what?", "start": 2311.79, "duration": 2.85}, {"text": "Yes or no?", "start": 2314.64, "duration": 0.87}, {"text": "I haven't drawn the\nwhole tree here.", "start": 2323.2, "duration": 2.28}, {"text": "Well, you'll notice\nthe answer is yes.", "start": 2325.48, "duration": 3.96}, {"text": "This node and this node are\nsolving the same problem.", "start": 2329.44, "duration": 7.39}, {"text": "Why is it?", "start": 2336.83, "duration": 1.23}, {"text": "Well, in this node,\nwe took this beer", "start": 2338.06, "duration": 4.07}, {"text": "and still had this\none to consider.", "start": 2342.13, "duration": 3.14}, {"text": "But in this node,\nwe took that beer", "start": 2345.27, "duration": 4.98}, {"text": "but it doesn't matter\nwhich beer we took.", "start": 2350.25, "duration": 2.67}, {"text": "We still have a beer in\nthe knapsack and a burger", "start": 2352.92, "duration": 4.83}, {"text": "and a slice to consider.", "start": 2357.75, "duration": 2.91}, {"text": "So we got there different ways,\nby choosing different beers,", "start": 2360.66, "duration": 3.41}, {"text": "but we're in the same place.", "start": 2364.07, "duration": 3.7}, {"text": "So in fact, we\nactually, in this case,", "start": 2367.77, "duration": 3.11}, {"text": "do have the same problem\nto solve more than once.", "start": 2370.88, "duration": 6.6}, {"text": "Now, here I had two\nthings that were the same.", "start": 2377.48, "duration": 5.46}, {"text": "That's not really necessary.", "start": 2382.94, "duration": 2.37}, {"text": "Here's another\nvery small example.", "start": 2385.31, "duration": 4.12}, {"text": "And the point I want to\nmake here is shown by this.", "start": 2389.43, "duration": 6.9}, {"text": "So here I have again\ndrawn a search tree.", "start": 2396.33, "duration": 3.06}, {"text": "And I'm showing you this\nbecause, in fact, it's exactly", "start": 2399.39, "duration": 3.21}, {"text": "this tree that will be producing\nin our dynamic programming", "start": 2402.6, "duration": 4.83}, {"text": "solution to the\nknapsack problem.", "start": 2407.43, "duration": 2.61}, {"text": "Each node in the tree starts\nwith what you've taken--", "start": 2410.04, "duration": 6.18}, {"text": "initially, nothing,\nthe empty set.", "start": 2416.22, "duration": 2.28}, {"text": "What's left, the total value,\nand the remaining calories.", "start": 2418.5, "duration": 3.93}, {"text": "There's some redundancy\nhere, by the way.", "start": 2422.43, "duration": 2.28}, {"text": "If I know what I've taken, I\ncould already always compute", "start": 2424.71, "duration": 2.7}, {"text": "the value and what's left.", "start": 2427.41, "duration": 3.9}, {"text": "But this is just so\nit's easier to see.", "start": 2431.31, "duration": 2.556}, {"text": "And I've numbered the\nnodes here in the order", "start": 2433.866, "duration": 1.874}, {"text": "in which they're get generated.", "start": 2435.74, "duration": 1.39}, {"text": "Now, the thing that\nI want you to notice", "start": 2440.24, "duration": 4.41}, {"text": "is, when we ask whether we're\nsolving the same problem,", "start": 2444.65, "duration": 4.77}, {"text": "we don't actually\ncare what we've taken.", "start": 2449.42, "duration": 6.64}, {"text": "We don't even care\nabout the value.", "start": 2456.06, "duration": 4.68}, {"text": "All we care is, how much room\nwe have left in the knapsack", "start": 2460.74, "duration": 7.94}, {"text": "and which items we\nhave left to consider.", "start": 2468.68, "duration": 2.835}, {"text": "Because what I take next or\nwhat I take remaining really", "start": 2474.28, "duration": 6.21}, {"text": "has nothing to do with how\nmuch value I already have", "start": 2480.49, "duration": 2.73}, {"text": "because I'm trying to maximize\nthe value that's left,", "start": 2483.22, "duration": 4.2}, {"text": "independent of\nprevious things done.", "start": 2487.42, "duration": 3.18}, {"text": "Similarly, I don't care why\nI have a 100 calories left.", "start": 2490.6, "duration": 5.61}, {"text": "Whether I used it up on beers\nor a burger, doesn't matter.", "start": 2496.21, "duration": 3.28}, {"text": "All that matters is that\nI just have 100 left.", "start": 2499.49, "duration": 5.08}, {"text": "So we see in a large complicated\nproblem it could easily", "start": 2504.57, "duration": 5.34}, {"text": "be a situation where different\nchoices of what to take", "start": 2509.91, "duration": 3.48}, {"text": "and what to not take would\nleave you in a situation", "start": 2513.39, "duration": 4.23}, {"text": "where you have the same\nnumber of remaining calories.", "start": 2517.62, "duration": 2.215}, {"text": "And therefore you are solving a\nproblem you've already solved.", "start": 2522.67, "duration": 3.03}, {"text": "At each node, we're just\ngiven the remaining weight,", "start": 2532.22, "duration": 3.27}, {"text": "maximize the value by choosing\namong the remaining items.", "start": 2535.49, "duration": 4.05}, {"text": "That's all that matters.", "start": 2539.54, "duration": 1.17}, {"text": "And so indeed, you will have\noverlapping subproblems.", "start": 2543.31, "duration": 3.47}, {"text": "As we see in this tree, for\nthe example we just saw,", "start": 2549.32, "duration": 4.37}, {"text": "the box is around a place\nwhere we're actually", "start": 2553.69, "duration": 2.55}, {"text": "solving the same problem,\neven though we've", "start": 2556.24, "duration": 3.66}, {"text": "made different decisions about\nwhat to take, A versus B.", "start": 2559.9, "duration": 4.68}, {"text": "And in fact, we have\ndifferent amounts of value", "start": 2564.58, "duration": 2.31}, {"text": "in the knapsack--", "start": 2566.89, "duration": 1.17}, {"text": "6 versus 7.", "start": 2568.06, "duration": 1.59}, {"text": "What matters is we still\nhave C and D to consider", "start": 2569.65, "duration": 4.12}, {"text": "and we have two units left.", "start": 2573.77, "duration": 2.49}, {"text": "It's a small and easy step.", "start": 2583.93, "duration": 2.7}, {"text": "I'm not going to walk\nyou through the code", "start": 2586.63, "duration": 1.8}, {"text": "because it's kind\nof boring to do so.", "start": 2588.43, "duration": 2.43}, {"text": "How do you modify the maxVal we\nlooked at before to use a memo?", "start": 2590.86, "duration": 5.75}, {"text": "First, you have to add the third\nargument, which is initially", "start": 2596.61, "duration": 3.18}, {"text": "going to be set to\nthe empty dictionary.", "start": 2599.79, "duration": 3.82}, {"text": "The key of the memo\nwill be a tuple--", "start": 2603.61, "duration": 3.23}, {"text": "the items left to be considered\nand the available weight.", "start": 2606.84, "duration": 5.82}, {"text": "Because the items left to\nbe considered are in a list,", "start": 2612.66, "duration": 4.71}, {"text": "we can represent the items\nleft to be considered", "start": 2617.37, "duration": 4.05}, {"text": "by how long the list is.", "start": 2621.42, "duration": 4.13}, {"text": "Because we'll start at\nthe front item and just", "start": 2625.55, "duration": 2.16}, {"text": "work our way to the end.", "start": 2627.71, "duration": 1.05}, {"text": "And then the function\nworks, essentially,", "start": 2632.46, "duration": 2.58}, {"text": "exactly the same\nway fastFib worked.", "start": 2635.04, "duration": 2.66}, {"text": "I'm not going to run it for\nyou because we're running out", "start": 2643.796, "duration": 2.374}, {"text": "of time.", "start": 2646.17, "duration": 2.585}, {"text": "You might want to\nrun it yourself", "start": 2648.755, "duration": 1.375}, {"text": "because it is kind of fun to\nsee how really fast it is.", "start": 2650.13, "duration": 3.99}, {"text": "But more interestingly,\nwe can look at this table.", "start": 2654.12, "duration": 5.45}, {"text": "This column is what we would\nget with the original recursive", "start": 2659.57, "duration": 3.24}, {"text": "implementation where\nwe didn't use a memo.", "start": 2662.81, "duration": 3.51}, {"text": "And it was therefore 2\nto the length of items.", "start": 2666.32, "duration": 4.41}, {"text": "And as you can see,\nit gets really big", "start": 2670.73, "duration": 4.26}, {"text": "or, as we say at the end, huge.", "start": 2674.99, "duration": 2.4}, {"text": "But the number of\ncalls grows incredibly", "start": 2680.77, "duration": 3.18}, {"text": "slowly for the dynamic\nprogramming solution.", "start": 2683.95, "duration": 5.25}, {"text": "In the beginning\nit's worth Oh, well.", "start": 2689.2, "duration": 4.16}, {"text": "But by the time we get to\nthe last number I wrote,", "start": 2693.36, "duration": 5.31}, {"text": "we're looking at 43,000\nversus some really big number", "start": 2698.67, "duration": 4.62}, {"text": "I don't know how to pronounce--", "start": 2703.29, "duration": 2.92}, {"text": "18 somethings.", "start": 2706.21, "duration": 3.2}, {"text": "Incredible improvement\nin performance.", "start": 2709.41, "duration": 4.71}, {"text": "And then at the\nend, it's a number", "start": 2714.12, "duration": 3.54}, {"text": "we couldn't fit on the\nslide, even in tiny font.", "start": 2717.66, "duration": 3.42}, {"text": "And yet, only 703,000 calls.", "start": 2721.08, "duration": 4.38}, {"text": "How can this be?", "start": 2725.46, "duration": 1.92}, {"text": "We know the problem is\ninherently exponential.", "start": 2727.38, "duration": 3.39}, {"text": "Have we overturned the\nlaws of the universe?", "start": 2730.77, "duration": 3.28}, {"text": "Is dynamic programming a\nmiracle in the liturgical sense?", "start": 2734.05, "duration": 4.81}, {"text": "No.", "start": 2738.86, "duration": 1.99}, {"text": "But the thing I want\nyou to carry away", "start": 2740.85, "duration": 2.67}, {"text": "is that computational complexity\ncan be a very subtle notion.", "start": 2743.52, "duration": 6.67}, {"text": "The running time\nof fastMaxVal is", "start": 2750.19, "duration": 2.28}, {"text": "governed by the number\nof distinct pairs", "start": 2752.47, "duration": 3.15}, {"text": "that we might be able to\nuse as keys in the memo--", "start": 2755.62, "duration": 5.07}, {"text": "toConsider and available.", "start": 2760.69, "duration": 2.79}, {"text": "The number of possible values\nof toConsider is small.", "start": 2763.48, "duration": 4.95}, {"text": "It's bounded by the\nlength of the items.", "start": 2768.43, "duration": 2.44}, {"text": "If I have a 100 items,\nit's 0, 1, 2, up to a 100.", "start": 2770.87, "duration": 5.46}, {"text": "The possible values\nof available weight", "start": 2776.33, "duration": 2.97}, {"text": "is harder to characterize.", "start": 2779.3, "duration": 3.04}, {"text": "But it's bounded by the number\nof distinct sums of weights", "start": 2782.34, "duration": 3.69}, {"text": "you can get.", "start": 2786.03, "duration": 2.5}, {"text": "If I start with\n750 calories left,", "start": 2788.53, "duration": 5.06}, {"text": "what are the possibilities?", "start": 2793.59, "duration": 1.51}, {"text": "Well, in fact, in this case,\nmaybe we can take only 750", "start": 2795.1, "duration": 5.23}, {"text": "because we're using with units.", "start": 2800.33, "duration": 2.29}, {"text": "So it's small.", "start": 2802.62, "duration": 0.9}, {"text": "But it's actually smaller\nthan that because it", "start": 2803.52, "duration": 2.42}, {"text": "has to do with the\ncombinations of ways", "start": 2805.94, "duration": 2.82}, {"text": "I can add up the units I have.", "start": 2808.76, "duration": 3.28}, {"text": "I know this is complicated.", "start": 2812.04, "duration": 1.47}, {"text": "It's not worth my going through\nthe details in the lectures.", "start": 2813.51, "duration": 3.05}, {"text": "It's covered in considerable\ndetail in the assigned reading.", "start": 2816.56, "duration": 5.05}, {"text": "Quickly summarizing\nlectures 1 and 2,", "start": 2821.61, "duration": 2.25}, {"text": "here's what I want\nyou to take away.", "start": 2823.86, "duration": 2.46}, {"text": "Many problems of\npractical importance", "start": 2826.32, "duration": 2.01}, {"text": "can be formulated as\noptimization problems.", "start": 2828.33, "duration": 3.752}, {"text": "Greedy algorithms often provide\nan adequate though often not", "start": 2832.082, "duration": 4.258}, {"text": "optimal solution.", "start": 2836.34, "duration": 2.41}, {"text": "Even though finding\nan optimal solution", "start": 2838.75, "duration": 3.12}, {"text": "is, in theory,\nexponentially hard,", "start": 2841.87, "duration": 2.76}, {"text": "dynamic programming really\noften yields great results.", "start": 2844.63, "duration": 5.13}, {"text": "It always gives you a correct\nresult and it's sometimes,", "start": 2849.76, "duration": 3.35}, {"text": "in fact, most of the times\ngives it to you very quickly.", "start": 2853.11, "duration": 4.78}, {"text": "Finally, in the\nPowerPoint, you'll", "start": 2857.89, "duration": 1.77}, {"text": "find an interesting\noptimization problem", "start": 2859.66, "duration": 3.21}, {"text": "having to do with whether or\nnot you should roll over problem", "start": 2862.87, "duration": 3.13}, {"text": "that grades into a quiz.", "start": 2866.0, "duration": 2.92}, {"text": "And it's simply a question\nof solving this optimization", "start": 2868.92, "duration": 2.98}, {"text": "problem.", "start": 2871.9, "duration": 1.55}]