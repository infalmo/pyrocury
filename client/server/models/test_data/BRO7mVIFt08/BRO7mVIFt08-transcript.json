[{"text": "The following\ncontent is provided", "start": 0.08, "duration": 1.69}, {"text": "under a Creative\nCommons license.", "start": 1.77, "duration": 2.24}, {"text": "Your support will help MIT\nOpenCourseWare continue", "start": 4.01, "duration": 2.85}, {"text": "to offer high quality\neducational resources for free.", "start": 6.86, "duration": 3.86}, {"text": "To make a donation or\nview additional materials", "start": 10.72, "duration": 2.61}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.33, "duration": 3.877}, {"text": "at ocw.mit.edu.", "start": 17.207, "duration": 0.625}, {"text": "PROFESSOR: A trilogy,\nif you will, on hashing.", "start": 22.12, "duration": 4.0}, {"text": "We did a lot of\ncool hashing stuff.", "start": 26.12, "duration": 2.11}, {"text": "In some sense, we already have\nwhat we want with hashing.", "start": 28.23, "duration": 3.09}, {"text": "Hashing with chaining, we can\ndo constant expected time,", "start": 31.32, "duration": 5.9}, {"text": "I should say, constant\nas long as-- yeah.", "start": 37.22, "duration": 6.39}, {"text": "If we're doing insert,\ndelete, and exact search.", "start": 43.61, "duration": 4.1}, {"text": "Is this key in there?", "start": 47.71, "duration": 1.04}, {"text": "If so, return the item.", "start": 48.75, "duration": 0.98}, {"text": "Otherwise, say no.", "start": 49.73, "duration": 2.44}, {"text": "And we do that with\nhashing with chaining.", "start": 52.17, "duration": 2.22}, {"text": "Under the analysis we did was\nwith simple uniform hashing.", "start": 54.39, "duration": 4.37}, {"text": "An alternative is to use\nuniversal hashing, which", "start": 58.76, "duration": 2.38}, {"text": "is not really in this class.", "start": 61.14, "duration": 1.22}, {"text": "But if you find this weird,\nthen this is less weird.", "start": 62.36, "duration": 5.61}, {"text": "And hashing with\nchaining, the idea", "start": 67.97, "duration": 2.62}, {"text": "was we had this giant universe\nof all keys, could be actually", "start": 70.59, "duration": 3.36}, {"text": "all integers.", "start": 73.95, "duration": 1.0}, {"text": "So it's infinite.", "start": 74.95, "duration": 2.191}, {"text": "But then what we actually\nare storing in our structure", "start": 77.141, "duration": 2.249}, {"text": "is some finite set of n keys.", "start": 79.39, "duration": 2.59}, {"text": "Here, I'm labeling them\nk1 through k4, n is four.", "start": 81.98, "duration": 3.02}, {"text": "But in general, you don't\nknow what they're going to be.", "start": 85.0, "duration": 4.49}, {"text": "We reduce that to\na table of size m", "start": 89.49, "duration": 3.48}, {"text": "by this hash function\nh-- stuff drawn in red.", "start": 92.97, "duration": 3.29}, {"text": "And so here I have a\nthree way collision.", "start": 96.26, "duration": 1.72}, {"text": "These three keys all\nmap to one, and so I", "start": 97.98, "duration": 2.45}, {"text": "store a linked list\nof k1, k4 and k2.", "start": 100.43, "duration": 4.13}, {"text": "They're in no particular order.", "start": 104.56, "duration": 1.48}, {"text": "That's the point\nof that picture.", "start": 106.04, "duration": 1.84}, {"text": "Here k3 happens to\nmap to its own slot.", "start": 107.88, "duration": 2.839}, {"text": "And the other slots\nare empty, so they just", "start": 110.719, "duration": 1.791}, {"text": "have a null saying there's\nan empty linked list there.", "start": 112.51, "duration": 4.74}, {"text": "Total size of this\nstructure is n plus m.", "start": 117.25, "duration": 4.58}, {"text": "There's m to store the table.", "start": 121.83, "duration": 2.69}, {"text": "There's n to store the sum of\nthe lengths of all the lists", "start": 124.52, "duration": 3.76}, {"text": "is going to be n.", "start": 128.28, "duration": 2.18}, {"text": "And then we said the\nexpected chain length,", "start": 130.46, "duration": 4.71}, {"text": "if everything's uniform,\nthen the probability", "start": 135.17, "duration": 3.04}, {"text": "of a particular key going\nto a particular slot is 1/m.", "start": 138.21, "duration": 3.93}, {"text": "And if everything's\nnice and independent", "start": 142.14, "duration": 2.51}, {"text": "or if you use\nuniversal hashing, you", "start": 144.65, "duration": 1.92}, {"text": "can show that the total\nexpected chain length is n/m.", "start": 146.57, "duration": 5.45}, {"text": "n independent trials,\neach probability 1/m", "start": 152.02, "duration": 2.5}, {"text": "of falling here.", "start": 154.52, "duration": 1.45}, {"text": "And we call that\nalpha, the load factor.", "start": 155.97, "duration": 3.53}, {"text": "And we concluded that\nthe operation time", "start": 159.5, "duration": 2.51}, {"text": "to do an insert, delete, or\nsearch was order 1 plus alpha.", "start": 162.01, "duration": 3.715}, {"text": "So that's n expectation.", "start": 168.82, "duration": 2.12}, {"text": "So that was hashing\nwith chaining.", "start": 170.94, "duration": 1.62}, {"text": "This is good news.", "start": 172.56, "duration": 1.12}, {"text": "As long as alpha is a\nconstant, we get constant time.", "start": 173.68, "duration": 3.86}, {"text": "And just for\nrecollection, today we're", "start": 177.54, "duration": 3.93}, {"text": "not really going to be thinking\ntoo much about what the hash", "start": 181.47, "duration": 2.5}, {"text": "function is, but just\nremember two of them I talked", "start": 183.97, "duration": 2.71}, {"text": "about-- this one we actually\nwill use today, where you just", "start": 186.68, "duration": 4.21}, {"text": "take the key and\ntake it module m.", "start": 190.89, "duration": 1.59}, {"text": "That's one easy way of mapping\nall integers into the space", "start": 192.48, "duration": 3.0}, {"text": "zero through m minus 1.", "start": 195.48, "duration": 1.694}, {"text": "That's called the\ndivision method.", "start": 197.174, "duration": 1.416}, {"text": "Multiplication\nmethod is more fancy.", "start": 198.59, "duration": 2.26}, {"text": "You multiply by\na random integer,", "start": 200.85, "duration": 2.14}, {"text": "and then you look at the\nmiddle of that multiplication.", "start": 202.99, "duration": 3.22}, {"text": "And that's where lots\nof copies of the key k", "start": 206.21, "duration": 3.48}, {"text": "get mixed up together and that's\nsort of the name of hashing.", "start": 209.69, "duration": 4.29}, {"text": "And that's a better hash\nfunction in the real world.", "start": 213.98, "duration": 5.09}, {"text": "So that's hashing with chaining.", "start": 219.07, "duration": 1.68}, {"text": "Cool?", "start": 220.75, "duration": 0.86}, {"text": "Now, it seemed like\na complete picture,", "start": 221.61, "duration": 3.82}, {"text": "but there's one crucial thing\nthat we're missing here.", "start": 225.43, "duration": 2.78}, {"text": "Any suggestions?", "start": 228.21, "duration": 2.2}, {"text": "If I went to go to implement\nthis data structure,", "start": 230.41, "duration": 5.08}, {"text": "what don't I know how to do?", "start": 235.49, "duration": 1.44}, {"text": "And one answer could\nbe the hash function,", "start": 240.15, "duration": 1.78}, {"text": "but we're going to ignore that.", "start": 241.93, "duration": 1.825}, {"text": "I know you know the answer.", "start": 243.755, "duration": 1.125}, {"text": "Does anyone else\nknow the answer?", "start": 244.88, "duration": 1.61}, {"text": "Yeah.", "start": 246.49, "duration": 0.78}, {"text": "AUDIENCE: Grow the table.", "start": 247.27, "duration": 1.207}, {"text": "PROFESSOR: Grow the table.", "start": 248.477, "duration": 1.083}, {"text": "Yeah.", "start": 249.56, "duration": 0.51}, {"text": "The question is,\nwhat should m be?", "start": 250.07, "duration": 4.58}, {"text": "OK, we have to create\na table size m,", "start": 254.65, "duration": 2.74}, {"text": "and we put our keys into it.", "start": 257.39, "duration": 1.85}, {"text": "We know we'd like m to\nbe about the same as n.", "start": 259.24, "duration": 3.804}, {"text": "But the trouble\nis we don't really", "start": 263.044, "duration": 1.416}, {"text": "know n because\ninsertions come along,", "start": 264.46, "duration": 2.502}, {"text": "and then we might have\nto grow the table.", "start": 266.962, "duration": 1.708}, {"text": "If n gets really\nbig relative to m,", "start": 268.67, "duration": 3.24}, {"text": "we're in trouble because\nthis factor will go up", "start": 271.91, "duration": 3.19}, {"text": "and it will be no\nlonger constant time.", "start": 275.1, "duration": 2.28}, {"text": "The other hand, if we\nset m to be really big,", "start": 277.38, "duration": 3.22}, {"text": "we're also kind of wasteful.", "start": 280.6, "duration": 2.255}, {"text": "The whole point\nof this structure", "start": 282.855, "duration": 1.375}, {"text": "was to avoid having one\nslot for every possible key", "start": 284.23, "duration": 3.72}, {"text": "because that was giant.", "start": 287.95, "duration": 2.5}, {"text": "We want it to save space.", "start": 290.45, "duration": 2.23}, {"text": "So we want m to be big enough\nthat our structure is fast,", "start": 292.68, "duration": 2.76}, {"text": "but small enough that it's\nnot wasteful in space.", "start": 295.44, "duration": 3.11}, {"text": "And so that's the\nremaining question.", "start": 298.55, "duration": 1.795}, {"text": "We want m to be theta n.", "start": 312.71, "duration": 3.46}, {"text": "We want it to be omega n.", "start": 316.17, "duration": 3.03}, {"text": "So we want it to be at\nleast some constant times n,", "start": 319.2, "duration": 2.42}, {"text": "in order to make\nalpha be a constant.", "start": 321.62, "duration": 2.48}, {"text": "And we want it to be\nbig O of n in order", "start": 324.1, "duration": 2.19}, {"text": "to make the space linear.", "start": 326.29, "duration": 1.2}, {"text": "And the way we're going to\ndo this, as we suggested,", "start": 336.62, "duration": 3.18}, {"text": "is to grow the table.", "start": 339.8, "duration": 1.36}, {"text": "We're going to start with\nm equals some constant.", "start": 346.63, "duration": 2.34}, {"text": "Pick your favorite constant.", "start": 348.97, "duration": 1.166}, {"text": "That's 20.", "start": 352.37, "duration": 1.65}, {"text": "My favorite constant's 7.", "start": 354.02, "duration": 1.87}, {"text": "Probably want it to be a power\nof two, but what the hell?", "start": 355.89, "duration": 4.55}, {"text": "And then we're going to grow\nand shrink as necessary.", "start": 360.44, "duration": 6.14}, {"text": "This is a pretty obvious idea.", "start": 366.58, "duration": 2.94}, {"text": "The interesting part\nis to get it to work.", "start": 369.52, "duration": 2.93}, {"text": "And it's going to introduce\na whole new concept, which", "start": 372.45, "duration": 3.92}, {"text": "is amortization.", "start": 376.37, "duration": 0.715}, {"text": "So it's going to be cool.", "start": 380.34, "duration": 2.27}, {"text": "Trust me.", "start": 382.61, "duration": 1.84}, {"text": "Not only are we going to\nsolve this problem of how", "start": 384.45, "duration": 2.18}, {"text": "to choose m, we're also going to\nfigure out how the Python data", "start": 386.63, "duration": 4.59}, {"text": "structure called list, also\nknown as array, is implemented.", "start": 391.22, "duration": 3.62}, {"text": "So it's the exactly\nthe same problem.", "start": 394.84, "duration": 2.81}, {"text": "I'll get to that in a moment.", "start": 397.65, "duration": 2.08}, {"text": "So for example, let's\nsay that we-- I said m", "start": 399.73, "duration": 8.99}, {"text": "should be theta n.", "start": 408.72, "duration": 1.45}, {"text": "Let's say we want m to be\nat least n at all times.", "start": 410.17, "duration": 5.38}, {"text": "So what happens, we\nstart with m equals 8.", "start": 415.55, "duration": 3.03}, {"text": "And so, let's say we\nstart with an empty hash", "start": 418.58, "duration": 4.04}, {"text": "table, an empty dictionary.", "start": 422.62, "duration": 1.7}, {"text": "And then I insert eight things.", "start": 424.32, "duration": 2.39}, {"text": "And then I go to\ninsert the ninth thing.", "start": 426.71, "duration": 2.57}, {"text": "And I say, oh, now\nm is bigger than n.", "start": 429.28, "duration": 1.89}, {"text": "What should I do?", "start": 431.17, "duration": 1.4}, {"text": "So this would be like at the\nend of an insertion algorithm.", "start": 440.03, "duration": 5.16}, {"text": "After I insert something and\nsay oh, if m is greater than n,", "start": 445.19, "duration": 2.63}, {"text": "then I'm getting worried that m\nis getting much bigger than n.", "start": 447.82, "duration": 2.79}, {"text": "So I'd like to grow the table.", "start": 450.61, "duration": 2.76}, {"text": "OK?", "start": 453.37, "duration": 0.6}, {"text": "Let's take a little diversion\nto what does grow a table mean.", "start": 453.97, "duration": 3.56}, {"text": "So maybe I have\ncurrent size m and I'd", "start": 464.02, "duration": 4.15}, {"text": "like to go to a\nnew size, m prime.", "start": 468.17, "duration": 3.537}, {"text": "This would actually work if\nyou're growing or shrinking,", "start": 471.707, "duration": 2.333}, {"text": "but m could be bigger\nor smaller than m prime.", "start": 474.04, "duration": 4.09}, {"text": "What should I do--\nwhat do I need", "start": 478.13, "duration": 1.69}, {"text": "to do in order to build\na new table of this size?", "start": 479.82, "duration": 3.23}, {"text": "Easy warm up.", "start": 487.68, "duration": 1.75}, {"text": "Yeah?", "start": 489.43, "duration": 0.93}, {"text": "AUDIENCE: Allocate the memory\nand then rehash [INAUDIBLE].", "start": 490.36, "duration": 2.924}, {"text": "PROFESSOR: Yeah.", "start": 493.284, "duration": 0.666}, {"text": "Allocate the memory and rehash.", "start": 493.95, "duration": 2.11}, {"text": "So we have all these keys.", "start": 496.06, "duration": 1.8}, {"text": "They're stored with some\nhash function in here,", "start": 497.86, "duration": 2.8}, {"text": "in table size m.", "start": 500.66, "duration": 1.67}, {"text": "I need to build an\nentirely new table,", "start": 502.33, "duration": 1.74}, {"text": "size m prime, and then I\nneed to rehash everything.", "start": 504.07, "duration": 4.135}, {"text": "One way to think of this is\nfor each item in the old table,", "start": 534.66, "duration": 7.52}, {"text": "insert into the\nnew table, T prime.", "start": 542.18, "duration": 9.31}, {"text": "I think that's worth a cushion.", "start": 551.49, "duration": 4.33}, {"text": "You got one?", "start": 555.82, "duration": 1.54}, {"text": "You don't want to get hit.", "start": 557.36, "duration": 1.431}, {"text": "It's fine.", "start": 558.791, "duration": 0.499}, {"text": "We're not burning through\nthese questions fast enough,", "start": 559.29, "duration": 2.25}, {"text": "so answer more questions.", "start": 561.54, "duration": 1.2}, {"text": "OK.", "start": 565.321, "duration": 0.499}, {"text": "So how much time does this take?", "start": 565.82, "duration": 1.841}, {"text": "That's the main point\nof this exercise.", "start": 567.661, "duration": 1.624}, {"text": "Yeah?", "start": 578.011, "duration": 1.489}, {"text": "AUDIENCE: Order n.", "start": 579.5, "duration": 1.1}, {"text": "PROFESSOR: Order n.", "start": 580.6, "duration": 1.56}, {"text": "Yeah, I think as long as\nm and m prime are theta n,", "start": 582.16, "duration": 3.9}, {"text": "this is order n.", "start": 586.06, "duration": 1.66}, {"text": "In general, it's going to\nbe n plus m plus m prime,", "start": 587.72, "duration": 5.55}, {"text": "but you're right.", "start": 593.27, "duration": 0.736}, {"text": "Most of the time\nthat's-- I mean,", "start": 594.006, "duration": 1.374}, {"text": "in the situation we're\ngoing to construct,", "start": 595.38, "duration": 2.06}, {"text": "this will be theta n.", "start": 597.44, "duration": 2.87}, {"text": "But in general, there's this\nissue that, for example,", "start": 600.31, "duration": 2.74}, {"text": "to iterate over every\nitem in the table you", "start": 603.05, "duration": 1.91}, {"text": "have to look at every slot.", "start": 604.96, "duration": 1.45}, {"text": "And so you have to\npay order m just", "start": 606.41, "duration": 1.83}, {"text": "to visit every slot, order n\nto visit all those lists, m", "start": 608.24, "duration": 4.05}, {"text": "prime just to build the\nnew table, size m prime.", "start": 612.29, "duration": 3.56}, {"text": "Initialize it all to nil.", "start": 615.85, "duration": 2.26}, {"text": "Good.", "start": 618.11, "duration": 0.5}, {"text": "I guess another\nmain point here is", "start": 622.484, "duration": 1.416}, {"text": "that we have to build\na new hash function.", "start": 623.9, "duration": 1.96}, {"text": "Why do we need to build\na new hash function?", "start": 625.86, "duration": 1.833}, {"text": "Because the hash function--\nwhy did I call it f prime?", "start": 627.693, "duration": 4.507}, {"text": "Calling it h prime.", "start": 632.2, "duration": 1.04}, {"text": "The hash function is all about\nmapping the universe of keys", "start": 637.3, "duration": 2.91}, {"text": "to a table of size m.", "start": 640.21, "duration": 1.95}, {"text": "So if m changes, we definitely\nneed a new hash function.", "start": 642.16, "duration": 2.396}, {"text": "If you use the\nold hash function,", "start": 644.556, "duration": 1.374}, {"text": "you would just use the\nbeginning of the table.", "start": 645.93, "duration": 2.25}, {"text": "If you add more slots down here,\nyou're not going to use them.", "start": 648.18, "duration": 3.43}, {"text": "For every key you've\ngot to rehash it,", "start": 651.61, "duration": 1.69}, {"text": "figure out where it goes.", "start": 653.3, "duration": 1.62}, {"text": "I think I've drilled\nthat home enough times.", "start": 654.92, "duration": 3.04}, {"text": "So the question becomes when we\nsee that our table is too big,", "start": 657.96, "duration": 6.387}, {"text": "we need to make it bigger.", "start": 664.347, "duration": 1.083}, {"text": "But how much bigger?", "start": 665.43, "duration": 3.01}, {"text": "Suggestions?", "start": 668.44, "duration": 1.716}, {"text": "Yeah?", "start": 670.156, "duration": 0.966}, {"text": "AUDIENCE: 2x.", "start": 671.122, "duration": 0.968}, {"text": "PROFESSOR: 2x.", "start": 672.09, "duration": 1.47}, {"text": "Twice m.", "start": 673.56, "duration": 0.914}, {"text": "Good suggestion.", "start": 674.474, "duration": 0.666}, {"text": "Any other suggestions?", "start": 675.14, "duration": 0.916}, {"text": "3x?", "start": 678.331, "duration": 0.499}, {"text": "OK.", "start": 681.34, "duration": 2.75}, {"text": "m prime equals 2 m is\nthe correct answer.", "start": 684.09, "duration": 3.82}, {"text": "But for fun, or\nfor pain I guess,", "start": 687.91, "duration": 3.52}, {"text": "let's think about the wrong\nanswer, which would be,", "start": 691.43, "duration": 2.23}, {"text": "just make it one bigger.", "start": 693.66, "duration": 2.03}, {"text": "That'll make m equal\nto n again, so that", "start": 695.69, "duration": 2.26}, {"text": "seems-- it's at least safe.", "start": 697.95, "duration": 1.84}, {"text": "It will maintain my invariant\nthat m is at least n.", "start": 699.79, "duration": 3.46}, {"text": "I get this wrong-- sorry,\nthat's the wrong way.", "start": 703.25, "duration": 5.26}, {"text": "n is greater than m.", "start": 708.51, "duration": 1.96}, {"text": "I want m to be greater\nthan or equal to n.", "start": 710.47, "duration": 4.23}, {"text": "So if we just incremented\nour table size,", "start": 714.7, "duration": 3.46}, {"text": "then the question becomes, what\nis the cost of n insertions?", "start": 718.16, "duration": 4.635}, {"text": "So say we start\nwith an empty table", "start": 725.59, "duration": 2.59}, {"text": "and it has size\neight or whatever,", "start": 728.18, "duration": 1.94}, {"text": "some constant, and\nwe insert n times.", "start": 730.12, "duration": 4.98}, {"text": "Then after eight insertions\nwhen we insert we", "start": 735.1, "duration": 2.44}, {"text": "have to rebuild\nour entire table.", "start": 737.54, "duration": 1.68}, {"text": "That takes linear time.", "start": 739.22, "duration": 1.49}, {"text": "After we insert one\nmore, we have to rebuild.", "start": 740.71, "duration": 2.28}, {"text": "That takes linear time.", "start": 742.99, "duration": 1.53}, {"text": "And so the cost is going\nto be something like,", "start": 744.52, "duration": 3.98}, {"text": "after you get to 8, it's going\nto be 1 plus 2 plus 3 plus 4.", "start": 748.5, "duration": 3.865}, {"text": "So a triangular number.", "start": 752.365, "duration": 2.175}, {"text": "Every time we insert, we\nhave to rebuild everything.", "start": 754.54, "duration": 4.15}, {"text": "So this is quadratic,\nthis is bad.", "start": 758.69, "duration": 2.345}, {"text": "Fortunately, if all we do\nis double m, we're golden.", "start": 765.97, "duration": 4.97}, {"text": "And this is sort\nof the point of why", "start": 770.94, "duration": 2.95}, {"text": "it's called table-- I call\nit table resizing there.", "start": 773.89, "duration": 2.972}, {"text": "Or to not give it\naway, but this is", "start": 776.862, "duration": 1.458}, {"text": "a technique called\ntable doubling.", "start": 778.32, "duration": 1.53}, {"text": "And let's just think of\nthe cost of n insertions.", "start": 782.38, "duration": 3.58}, {"text": "There's also deletions.", "start": 785.96, "duration": 1.24}, {"text": "But if we just, again,\nstart with an empty table,", "start": 787.2, "duration": 2.86}, {"text": "and we repeatedly\ninsert, then the cost", "start": 790.06, "duration": 2.41}, {"text": "we get-- if we double each\ntime and we're inserting,", "start": 792.47, "duration": 6.99}, {"text": "after we get to 8, we\ninsert, we double to 16.", "start": 799.46, "duration": 4.09}, {"text": "Then we insert eight more\ntimes, then we double to 32.", "start": 803.55, "duration": 2.99}, {"text": "Then we insert 16 times,\nthen we double to 64.", "start": 806.54, "duration": 4.0}, {"text": "All these numbers\nare roughly the same.", "start": 810.54, "duration": 1.64}, {"text": "They're within a factor\nof two of each other.", "start": 812.18, "duration": 2.2}, {"text": "Every time we're\nrebuilding in linear time,", "start": 814.38, "duration": 2.29}, {"text": "but we're only doing\nit like log end times.", "start": 816.67, "duration": 4.32}, {"text": "If we're going from one to\nn, their log end growths--", "start": 820.99, "duration": 3.57}, {"text": "log end doublings\nthat we're able to do.", "start": 824.56, "duration": 2.47}, {"text": "So you might think,\noh, it's n log n.", "start": 827.03, "duration": 2.857}, {"text": "But we don't want n log n.", "start": 829.887, "duration": 1.083}, {"text": "That would be\nbinary search trees.", "start": 830.97, "duration": 1.416}, {"text": "We want to do\nbetter than n log n.", "start": 832.386, "duration": 2.044}, {"text": "If you think about\nthe costs here,", "start": 834.43, "duration": 2.61}, {"text": "the cost to rebuild the first\ntime is concepts, like 8.", "start": 837.04, "duration": 4.427}, {"text": "And then the cost to\nrebuild the second time", "start": 841.467, "duration": 1.833}, {"text": "is 16, so twice that.", "start": 843.3, "duration": 3.01}, {"text": "The cost to build\nthe next time is 64.", "start": 846.31, "duration": 4.18}, {"text": "So these go up geometrically.", "start": 850.49, "duration": 3.75}, {"text": "You've got to get from 1\nto n with log end steps.", "start": 854.24, "duration": 2.96}, {"text": "The natural way to\ndo it is by doubling,", "start": 857.2, "duration": 1.71}, {"text": "and you can prove that\nindeed this is the case.", "start": 858.91, "duration": 3.32}, {"text": "So this is a geometric series.", "start": 862.23, "duration": 2.26}, {"text": "Didn't mean to\ncross it out there.", "start": 864.49, "duration": 1.65}, {"text": "And so this is theta n.", "start": 866.14, "duration": 1.333}, {"text": "Now, it's a little strange\nto be talking about theta n.", "start": 870.379, "duration": 2.291}, {"text": "This is a data\nstructure supposed", "start": 872.67, "duration": 1.375}, {"text": "to be constant\ntime per operation.", "start": 874.045, "duration": 2.595}, {"text": "This data structure is not\nconstant time per operation.", "start": 876.64, "duration": 3.88}, {"text": "Even ignoring all\nthe hashing business,", "start": 880.52, "duration": 3.09}, {"text": "all you're trying to\ndo is grow a table.", "start": 883.61, "duration": 2.02}, {"text": "It takes more than constant\ntime for some operations.", "start": 885.63, "duration": 3.19}, {"text": "Near the end, you have\nto rebuild the last time,", "start": 888.82, "duration": 3.94}, {"text": "you're restructuring\nthe entire table.", "start": 892.76, "duration": 2.57}, {"text": "That take linear time\nfor one operation.", "start": 895.33, "duration": 4.14}, {"text": "You might say that's bad.", "start": 899.47, "duration": 2.5}, {"text": "But the comforting\nthing is that there", "start": 901.97, "duration": 1.645}, {"text": "are only a few operations,\nlog end of them,", "start": 903.615, "duration": 2.025}, {"text": "that are really expensive.", "start": 905.64, "duration": 1.309}, {"text": "The rest are all constant time.", "start": 906.949, "duration": 1.291}, {"text": "You don't do anything.", "start": 908.24, "duration": 0.916}, {"text": "You just add into the table.", "start": 909.156, "duration": 2.404}, {"text": "So this is an idea\nwe call amortization.", "start": 911.56, "duration": 3.005}, {"text": "Maybe I should write here--\nwe call this table doubling.", "start": 924.0, "duration": 2.865}, {"text": "So the idea with amortization,\nlet me give you a definition.", "start": 938.085, "duration": 2.5}, {"text": "Actually, I'm going to be\na little bit vague here", "start": 958.618, "duration": 2.072}, {"text": "and just say-- T of n.", "start": 960.69, "duration": 2.817}, {"text": "Let me see what it\nsays in my notes.", "start": 963.507, "duration": 1.499}, {"text": "Yeah.", "start": 968.91, "duration": 0.61}, {"text": "I say T of n.", "start": 969.52, "duration": 0.75}, {"text": "So we're going to use\na concept of-- usually", "start": 997.59, "duration": 3.39}, {"text": "we say running time is T of n.", "start": 1000.98, "duration": 2.91}, {"text": "And we started saying\nthe expected running time", "start": 1003.89, "duration": 3.42}, {"text": "is some T of n plus\nalpha or whatever.", "start": 1007.31, "duration": 4.48}, {"text": "Now, we're going to be able to\nsay the amortized running time", "start": 1011.79, "duration": 3.26}, {"text": "is T of n, or the running\ntime is T of n amortized.", "start": 1015.05, "duration": 4.39}, {"text": "That's what this is saying.", "start": 1019.44, "duration": 2.05}, {"text": "And what that means\nis that it's not", "start": 1021.49, "duration": 3.079}, {"text": "any statement about\nthe individual running", "start": 1024.569, "duration": 1.768}, {"text": "time of the operations.", "start": 1026.337, "duration": 0.958}, {"text": "It's saying if you do a whole\nbunch of operations, k of them,", "start": 1027.295, "duration": 3.745}, {"text": "then the total running time\nis, at most, k times T of n.", "start": 1031.04, "duration": 4.809}, {"text": "This is a way to\namortize, or to-- yeah,", "start": 1035.849, "duration": 2.341}, {"text": "amortize-- this is in the\neconomic sense of amortize,", "start": 1038.19, "duration": 3.86}, {"text": "I guess.", "start": 1042.05, "duration": 0.76}, {"text": "You spread out the high costs\nso that's it's cheap on average", "start": 1042.81, "duration": 4.66}, {"text": "all the time.", "start": 1047.47, "duration": 1.23}, {"text": "It's kind of like-- normally,\nwe pay rent every month.", "start": 1048.7, "duration": 3.94}, {"text": "But you could think of\nit instead as you're only", "start": 1052.64, "duration": 2.14}, {"text": "paying $50 a day or something\nfor your monthly rent.", "start": 1054.78, "duration": 4.71}, {"text": "It's maybe-- if you want\nto smooth things out,", "start": 1059.49, "duration": 4.134}, {"text": "that would be a nice way\nto think about paying rent,", "start": 1063.624, "duration": 2.166}, {"text": "or every second you're\npaying a penny or something.", "start": 1065.79, "duration": 3.0}, {"text": "It's close, actually.", "start": 1072.61, "duration": 2.22}, {"text": "Little bit off, factor or two.", "start": 1074.83, "duration": 2.52}, {"text": "Anyway, so that's the idea.", "start": 1077.35, "duration": 2.57}, {"text": "So you can think\nof-- this is kind", "start": 1079.92, "duration": 12.024}, {"text": "of like saying that the\nrunning time of an operation", "start": 1091.944, "duration": 2.166}, {"text": "is T of n on average.", "start": 1094.11, "duration": 2.42}, {"text": "But put that in quotes.", "start": 1096.53, "duration": 1.07}, {"text": "We don't usually use\nthat terminology.", "start": 1097.6, "duration": 3.68}, {"text": "Maybe put a Tilda here.", "start": 1101.28, "duration": 1.27}, {"text": "Where the average is taken\nover all the operations.", "start": 1105.44, "duration": 5.985}, {"text": "So this is something\nthat only makes", "start": 1116.641, "duration": 1.499}, {"text": "sense for data structures.", "start": 1118.14, "duration": 1.24}, {"text": "Data structures are things that\nhave lots of operations on them", "start": 1119.38, "duration": 3.4}, {"text": "over time.", "start": 1122.78, "duration": 1.45}, {"text": "And if you just-- instead of\ncounting individual operation", "start": 1124.23, "duration": 3.32}, {"text": "times and then adding them up,\nif you add them up and then", "start": 1127.55, "duration": 3.27}, {"text": "divide by the number\nof operations,", "start": 1130.82, "duration": 2.022}, {"text": "that's your amortized\nrunning time.", "start": 1132.842, "duration": 1.458}, {"text": "So the point is,\nin table doubling,", "start": 1134.3, "duration": 4.44}, {"text": "the amortized running\ntime is beta 1.", "start": 1138.74, "duration": 7.38}, {"text": "Because it's n in\ntotal-- at this point", "start": 1146.12, "duration": 2.745}, {"text": "we've only analyzed insertions.", "start": 1148.865, "duration": 1.595}, {"text": "We haven't talked\nabout deletions.", "start": 1150.46, "duration": 1.42}, {"text": "So k inserts.", "start": 1163.34, "duration": 1.23}, {"text": "If we're just doing insertions,\ntake beta k time in total.", "start": 1168.48, "duration": 4.77}, {"text": "So this means constant\namortized per insert.", "start": 1173.25, "duration": 11.165}, {"text": "OK, it's a simple\nidea, but a useful one", "start": 1184.415, "duration": 2.405}, {"text": "because typically-- unless\nyou're in like a real time", "start": 1186.82, "duration": 3.94}, {"text": "system-- you typically only\ncare about the overall running", "start": 1190.76, "duration": 3.924}, {"text": "time of your algorithm,\nwhich might use a data", "start": 1194.684, "duration": 1.916}, {"text": "structure as a sub routine.", "start": 1196.6, "duration": 1.939}, {"text": "You don't care if\nindividual operations are", "start": 1198.539, "duration": 1.791}, {"text": "expensive as long as all the\noperations together are cheap.", "start": 1200.33, "duration": 4.29}, {"text": "You're using hashing to\nsolve some other problem,", "start": 1204.62, "duration": 2.17}, {"text": "like counting duplicate\nwords in doc dist.", "start": 1206.79, "duration": 3.924}, {"text": "You just care about the running\ntime of counting duplicate", "start": 1210.714, "duration": 2.416}, {"text": "words.", "start": 1213.13, "duration": 0.5}, {"text": "You don't care about how long\neach step of the for loop", "start": 1213.63, "duration": 3.41}, {"text": "takes, just the aggregate.", "start": 1217.04, "duration": 3.38}, {"text": "So this is good\nmost of the time.", "start": 1220.42, "duration": 1.6}, {"text": "And we've proved\nit for insertions.", "start": 1222.02, "duration": 2.53}, {"text": "It's also true when\nyou have deletions.", "start": 1224.55, "duration": 5.88}, {"text": "You have k inserts and deletes.", "start": 1230.43, "duration": 1.44}, {"text": "They certainly\ntake order k time.", "start": 1238.53, "duration": 3.836}, {"text": "Actually, this is easy\nto prove at this point", "start": 1242.366, "duration": 1.874}, {"text": "because we haven't\nchanged delete.", "start": 1244.24, "duration": 1.569}, {"text": "So, what delete does is\nit just deletes something", "start": 1245.809, "duration": 2.041}, {"text": "from the table, leaves\nthe table the same size.", "start": 1247.85, "duration": 2.115}, {"text": "And so it actually\nmakes life better for us", "start": 1254.02, "duration": 2.73}, {"text": "because if it decreases m,\nin order to make m big again,", "start": 1256.75, "duration": 4.46}, {"text": "you have to do more insertions\nthan you had to before.", "start": 1261.21, "duration": 2.61}, {"text": "And the only extra cost\nwe're thinking about here", "start": 1263.82, "duration": 2.3}, {"text": "is the growing, the rebuild\ncost from inserting too big.", "start": 1266.12, "duration": 4.77}, {"text": "And so this is still true.", "start": 1270.89, "duration": 1.33}, {"text": "Deletions only help us.", "start": 1272.22, "duration": 2.52}, {"text": "If you have k total inserts and\ndeletes, then still be order k.", "start": 1274.74, "duration": 4.282}, {"text": "So still get constant amortized.", "start": 1279.022, "duration": 1.333}, {"text": "But this is not\ntotally satisfying", "start": 1283.956, "duration": 3.024}, {"text": "because of table\nmight get big again.", "start": 1286.98, "duration": 3.35}, {"text": "m might become\nmuch larger than n.", "start": 1290.33, "duration": 2.47}, {"text": "For example, suppose\nI do n inserts", "start": 1292.8, "duration": 2.91}, {"text": "and then I do n deletes.", "start": 1295.71, "duration": 2.11}, {"text": "So now I have an empty\ntable, n equals 0,", "start": 1297.82, "duration": 3.25}, {"text": "but m is going to be around\nthe original value of n,", "start": 1301.07, "duration": 3.92}, {"text": "or the maximum value\nof n over time.", "start": 1304.99, "duration": 2.29}, {"text": "So we can fix that.", "start": 1310.05, "duration": 4.66}, {"text": "Suggestions on how to fix that?", "start": 1314.71, "duration": 1.45}, {"text": "This is a little more subtle.", "start": 1320.86, "duration": 2.18}, {"text": "There's two obvious answers.", "start": 1323.04, "duration": 1.51}, {"text": "One is correct and the\nother is incorrect.", "start": 1324.55, "duration": 3.91}, {"text": "Yeah?", "start": 1328.46, "duration": 0.565}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 1329.025, "duration": 0.875}, {"text": "PROFESSOR: Good.", "start": 1334.22, "duration": 1.44}, {"text": "So option one is if the\ntable becomes half the size,", "start": 1335.66, "duration": 7.78}, {"text": "then shrink-- to half the size?", "start": 1343.44, "duration": 7.54}, {"text": "Sure.", "start": 1350.98, "duration": 0.5}, {"text": "OK.", "start": 1357.39, "duration": 1.117}, {"text": "That's on the right track.", "start": 1358.507, "duration": 1.083}, {"text": "Anyone see a problem with that?", "start": 1359.59, "duration": 2.698}, {"text": "Yeah?", "start": 1362.288, "duration": 0.952}, {"text": "AUDIENCE: [INAUDIBLE] when\nyou're going from like 8 to 9,", "start": 1363.24, "duration": 2.55}, {"text": "you can go from 8 to\n9, 9 to 8, [INAUDIBLE].", "start": 1365.79, "duration": 1.833}, {"text": "PROFESSOR: Good.", "start": 1367.623, "duration": 1.087}, {"text": "So if you're sizing and say you\nhave eight items in your table,", "start": 1368.71, "duration": 8.44}, {"text": "you add a ninth item\nand so you double to 16.", "start": 1377.15, "duration": 4.24}, {"text": "Then you delete that ninth\nitem, you're back to eight.", "start": 1381.39, "duration": 2.43}, {"text": "And then you say oh,\nnow m equals n/2,", "start": 1383.82, "duration": 2.62}, {"text": "so I'm going to shrink\nto half the size.", "start": 1386.44, "duration": 2.18}, {"text": "And if I insert again--\ndelete, insert, delete,", "start": 1388.62, "duration": 2.34}, {"text": "insert-- I spend linear\ntime for every operation.", "start": 1390.96, "duration": 4.054}, {"text": "So that's the problem.", "start": 1395.014, "duration": 0.916}, {"text": "This is slow.", "start": 1398.81, "duration": 1.323}, {"text": "If we go from 2 to the\nk to 2 to the k plus 1,", "start": 1402.69, "duration": 5.14}, {"text": "we go this way via-- oh\nsorry, 2 to the k plus 1.", "start": 1407.83, "duration": 4.12}, {"text": "Then, I said it right,\ninsert to go to the right,", "start": 1411.95, "duration": 4.06}, {"text": "delete to go to the left.", "start": 1416.01, "duration": 1.55}, {"text": "Then we'll get linear\ntime for operation.", "start": 1417.56, "duration": 2.07}, {"text": "That is that.", "start": 1424.55, "duration": 2.27}, {"text": "So, how do we fix this?", "start": 1426.82, "duration": 2.128}, {"text": "Yeah.", "start": 1428.948, "duration": 1.362}, {"text": "AUDIENCE: Maybe m\nequal m/3 or something?", "start": 1430.31, "duration": 2.27}, {"text": "PROFESSOR: M equals n over 3.", "start": 1432.58, "duration": 1.33}, {"text": "Yep.", "start": 1433.91, "duration": 0.873}, {"text": "AUDIENCE: And then still\nleave it [INAUDIBLE].", "start": 1434.783, "duration": 1.916}, {"text": "PROFESSOR: Good.", "start": 1444.926, "duration": 0.893}, {"text": "I'm going to do 4,\nif you don't mind.", "start": 1445.819, "duration": 1.541}, {"text": "I'll keep it powers of 2.", "start": 1447.36, "duration": 1.32}, {"text": "Any number bigger\nthan 3 will work--", "start": 1448.68, "duration": 1.56}, {"text": "or any number bigger\nthan 2 will work here.", "start": 1450.24, "duration": 3.73}, {"text": "But it's kind of nice to\nstick to powers of two.", "start": 1453.97, "duration": 3.73}, {"text": "Just for fun.", "start": 1457.7, "duration": 0.68}, {"text": "I mean, doesn't really\nmatter because, as you say,", "start": 1458.38, "duration": 2.083}, {"text": "we're still going to\nshrink to half the size,", "start": 1460.463, "duration": 2.447}, {"text": "but we're only going to trigger\nit when we are 3/4 empty.", "start": 1462.91, "duration": 4.44}, {"text": "We're only using a\nquarter of the space.", "start": 1467.35, "duration": 1.94}, {"text": "Then, it turns\nout you can afford", "start": 1469.29, "duration": 1.84}, {"text": "to shrink to half the\nsize because in order", "start": 1471.13, "duration": 2.95}, {"text": "to explode again, in order\nto need to grow again,", "start": 1474.08, "duration": 2.26}, {"text": "you have to still insert\nn over m-- m over 2 items.", "start": 1476.34, "duration": 6.56}, {"text": "Because it's half empty.", "start": 1482.9, "duration": 1.16}, {"text": "So when you're only\na quarter full,", "start": 1484.06, "duration": 2.3}, {"text": "you shrink to become a half\nfull because then to grow again", "start": 1486.36, "duration": 3.38}, {"text": "requires a lot of insertions.", "start": 1489.74, "duration": 1.21}, {"text": "I haven't proved anything\nhere, but it turns out", "start": 1490.95, "duration": 2.32}, {"text": "if you do this, the amortized\ntime becomes constant.", "start": 1493.27, "duration": 9.16}, {"text": "For k insertions and deletions,\narbitrary combination,", "start": 1505.05, "duration": 4.31}, {"text": "you'll maintain linear\nsize because of these two--", "start": 1509.36, "duration": 2.77}, {"text": "because you're\nmaintaining the invariant", "start": 1512.13, "duration": 1.71}, {"text": "that m is between n and 4n.", "start": 1513.84, "duration": 7.99}, {"text": "You maintain that invariant.", "start": 1524.724, "duration": 1.166}, {"text": "That's easy to check.", "start": 1525.89, "duration": 0.88}, {"text": "So you always have linear size.", "start": 1526.77, "duration": 2.08}, {"text": "And the amortized running\ntime becomes constant.", "start": 1528.85, "duration": 2.992}, {"text": "We don't really have time\nto prove that in the class.", "start": 1531.842, "duration": 2.208}, {"text": "It's a little bit tricky.", "start": 1534.05, "duration": 1.78}, {"text": "Read the textbook if\nyou want to know it.", "start": 1535.83, "duration": 2.2}, {"text": "That's table doubling.", "start": 1541.64, "duration": 0.935}, {"text": "Questions?", "start": 1542.575, "duration": 0.5}, {"text": "All right.", "start": 1545.91, "duration": 1.88}, {"text": "Boring.", "start": 1547.79, "duration": 0.69}, {"text": "No.", "start": 1548.48, "duration": 0.5}, {"text": "It's cool because\nnot only can we", "start": 1548.98, "duration": 2.78}, {"text": "solve the hashing problem\nof how do we set m in order", "start": 1551.76, "duration": 3.24}, {"text": "to keep alpha a constant, we\ncan also solve Python lists.", "start": 1555.0, "duration": 3.7}, {"text": "Python lists are also\nknown as resizable arrays.", "start": 1558.7, "duration": 4.22}, {"text": "You may have wondered\nhow they work.", "start": 1565.98, "duration": 1.5}, {"text": "Because they offer\nrandom access,", "start": 1567.48, "duration": 1.64}, {"text": "we can go to the ith\nitem in constant time", "start": 1569.12, "duration": 3.36}, {"text": "and modify it or get the value.", "start": 1572.48, "duration": 2.45}, {"text": "We can add a new item at\nthe end in constant time.", "start": 1574.93, "duration": 3.06}, {"text": "That's append.", "start": 1577.99, "duration": 1.65}, {"text": "list.append.", "start": 1579.64, "duration": 0.5}, {"text": "And we can delete the last\nitem in constant time.", "start": 1584.99, "duration": 3.84}, {"text": "One version is list.pop.", "start": 1588.83, "duration": 1.545}, {"text": "It's also delete list,\nsquare bracket minus 1.", "start": 1590.375, "duration": 4.925}, {"text": "You should know that\ndeleting the first item", "start": 1595.3, "duration": 1.89}, {"text": "is not constant time.", "start": 1597.19, "duration": 0.88}, {"text": "That takes linear\ntime because what", "start": 1598.07, "duration": 1.458}, {"text": "it does is it copies\nall the values over.", "start": 1599.528, "duration": 3.332}, {"text": "Python lists are\nimplemented by arrays.", "start": 1602.86, "duration": 2.42}, {"text": "But how do you support\nthis dynamicness", "start": 1605.28, "duration": 1.774}, {"text": "where you can increase the\nlength and decrease the length,", "start": 1607.054, "duration": 2.416}, {"text": "and still keep linear space?", "start": 1609.47, "duration": 2.16}, {"text": "Well, you do table doubling.", "start": 1611.63, "duration": 2.23}, {"text": "And I don't know\nwhether Python uses", "start": 1613.86, "duration": 1.5}, {"text": "two or some other\nconstant, but any constant", "start": 1615.36, "duration": 3.19}, {"text": "will do, as long as the\ndeletion constant is", "start": 1618.55, "duration": 2.16}, {"text": "smaller than the\ninsertion constant.", "start": 1620.71, "duration": 4.64}, {"text": "And that's how they work.", "start": 1625.35, "duration": 1.34}, {"text": "So in fact, list.append\nand list.pop", "start": 1626.69, "duration": 2.32}, {"text": "are constant amortized.", "start": 1629.01, "duration": 3.23}, {"text": "Before, we just\nsaid for simplicity,", "start": 1632.24, "duration": 2.68}, {"text": "they're constant time\nand for the most part", "start": 1634.92, "duration": 1.792}, {"text": "you can just think of\nthem as constant time.", "start": 1636.712, "duration": 1.832}, {"text": "But in reality, they\nare constant amortized.", "start": 1638.544, "duration": 2.176}, {"text": "Now for fun, just in\ncase you're curious,", "start": 1640.72, "duration": 2.39}, {"text": "you can do all of this\nstuff in constant worst case", "start": 1643.11, "duration": 3.08}, {"text": "time per operation.", "start": 1646.19, "duration": 1.68}, {"text": "May be a fun exercise.", "start": 1647.87, "duration": 3.0}, {"text": "Do you want to know how?", "start": 1650.87, "duration": 2.22}, {"text": "Yeah?", "start": 1653.09, "duration": 1.26}, {"text": "Rough idea is when you\nrealize that you're", "start": 1654.35, "duration": 5.33}, {"text": "getting kind of full, you\nstart building on the side", "start": 1659.68, "duration": 3.56}, {"text": "a new table of twice the size.", "start": 1663.24, "duration": 2.5}, {"text": "And every time you insert\ninto the actual table,", "start": 1665.74, "duration": 3.2}, {"text": "you move like five of the\nitems over to the new table,", "start": 1668.94, "duration": 3.34}, {"text": "or some constant-- it needs\nto be a big enough constant.", "start": 1672.28, "duration": 2.62}, {"text": "So that by the time\nyou're full, you just", "start": 1674.9, "duration": 1.73}, {"text": "switch over immediately\nto the other structure.", "start": 1676.63, "duration": 2.25}, {"text": "It's kind of cool.", "start": 1678.88, "duration": 1.574}, {"text": "It's very tricky to\nactually get that to work.", "start": 1680.454, "duration": 1.916}, {"text": "But if you're in a\nreal time system,", "start": 1682.37, "duration": 1.83}, {"text": "you might care to know that.", "start": 1684.2, "duration": 1.51}, {"text": "For the most part, people\ndon't implement those things", "start": 1685.71, "duration": 2.5}, {"text": "because they're\ncomplicated, but it", "start": 1688.21, "duration": 1.58}, {"text": "is possible to get rid\nof all these amortized.", "start": 1689.79, "duration": 2.115}, {"text": "Cool.", "start": 1694.59, "duration": 2.86}, {"text": "Let's move onto the next topic,\nwhich is more hashing related.", "start": 1697.45, "duration": 6.284}, {"text": "This was sort of\ngeneral data structures", "start": 1703.734, "duration": 1.666}, {"text": "in order to implement\nhashing with chaining,", "start": 1705.4, "duration": 2.31}, {"text": "but didn't really care\nabout hashing per se.", "start": 1707.71, "duration": 4.94}, {"text": "We assumed here that we can\nevaluate the hash function", "start": 1712.65, "duration": 2.28}, {"text": "in constant time, that we can\ndo insertion in constant time,", "start": 1714.93, "duration": 2.73}, {"text": "but that's the name\nof the game here.", "start": 1717.66, "duration": 1.857}, {"text": "But otherwise, we\ndidn't really care--", "start": 1719.517, "duration": 1.583}, {"text": "as long as the rebuilding\nwas linear time,", "start": 1721.1, "duration": 1.96}, {"text": "this technique works.", "start": 1723.06, "duration": 1.04}, {"text": "Now we're going to look\nat a new problem that", "start": 1728.24, "duration": 7.04}, {"text": "has lots of practical\napplications.", "start": 1735.28, "duration": 1.877}, {"text": "I mentioned some\nof these problems", "start": 1737.157, "duration": 1.416}, {"text": "in the last class, which\nis string matching.", "start": 1738.573, "duration": 4.177}, {"text": "This is essentially the problem.", "start": 1742.75, "duration": 1.37}, {"text": "How many people have\nused Grep in their life?", "start": 1744.12, "duration": 2.68}, {"text": "OK, most of you.", "start": 1746.8, "duration": 2.71}, {"text": "How many people have used\nFind in a text editor?", "start": 1749.51, "duration": 3.622}, {"text": "OK, the rest of you.", "start": 1753.132, "duration": 2.517}, {"text": "And so this are the\nsame sorts of problems.", "start": 1755.649, "duration": 1.791}, {"text": "You want to search for\na pattern, which is just", "start": 1757.44, "duration": 3.23}, {"text": "going to be a substring\nin some giant string which", "start": 1760.67, "duration": 2.69}, {"text": "is your document, your\nfile, if you will.", "start": 1763.36, "duration": 3.49}, {"text": "So state this formally--\ngiven two strings, s and t,", "start": 1766.85, "duration": 13.3}, {"text": "you want to know does s\noccur as a substring of t?", "start": 1780.15, "duration": 14.31}, {"text": "So for example, maybe\ns is a string 6006", "start": 1794.46, "duration": 6.27}, {"text": "and t is your entire--\nthe mail that you've ever", "start": 1800.73, "duration": 5.95}, {"text": "received in your life or\nyour inbox, or something.", "start": 1806.68, "duration": 3.45}, {"text": "So t is big, typically,\nand s is small.", "start": 1810.13, "duration": 2.79}, {"text": "It's what you type usually.", "start": 1812.92, "duration": 1.489}, {"text": "Maybe you're searching\nfor all email from Piazza,", "start": 1814.409, "duration": 2.041}, {"text": "so you put the Piazza\nfrom string or whatever.", "start": 1816.45, "duration": 3.59}, {"text": "You're searching for\nthat in this giant thing", "start": 1820.04, "duration": 2.215}, {"text": "and you'd like to\ndo that quickly.", "start": 1822.255, "duration": 1.495}, {"text": "Another application, s is\nwhat you type in Google.", "start": 1826.6, "duration": 3.39}, {"text": "t is the entire web.", "start": 1829.99, "duration": 1.63}, {"text": "That's what Google does.", "start": 1831.62, "duration": 1.0}, {"text": "It searches for the\nstring in the entire web.", "start": 1832.62, "duration": 3.95}, {"text": "I'm not joking.", "start": 1836.57, "duration": 2.66}, {"text": "OK?", "start": 1839.23, "duration": 1.43}, {"text": "Fine.", "start": 1840.66, "duration": 2.56}, {"text": "So we'd like to do that.", "start": 1843.22, "duration": 1.92}, {"text": "What's the obvious way\nto search for a substring", "start": 1845.14, "duration": 4.69}, {"text": "in a giant string?", "start": 1849.83, "duration": 2.138}, {"text": "Yeah?", "start": 1851.968, "duration": 1.956}, {"text": "AUDIENCE: Check each\nsubstring of that length.", "start": 1853.924, "duration": 2.121}, {"text": "PROFESSOR: Just check each\nsubstring of the right length.", "start": 1856.045, "duration": 2.375}, {"text": "So it's got to be\nthe length of s.", "start": 1858.42, "duration": 2.84}, {"text": "And there's only a linear number\nof them, so check each one.", "start": 1861.26, "duration": 3.54}, {"text": "Let's analyze that.", "start": 1864.8, "duration": 0.84}, {"text": "So a simple\nalgorithm-- actually,", "start": 1885.46, "duration": 11.28}, {"text": "just for fun, I have\npseudocode for it.", "start": 1896.74, "duration": 2.125}, {"text": "I have Python code for it.", "start": 1903.462, "duration": 1.988}, {"text": "Even more cool.", "start": 1905.45, "duration": 1.494}, {"text": "OK.", "start": 1929.37, "duration": 0.57}, {"text": "I don't know if you know\nall these Python features,", "start": 1929.94, "duration": 1.96}, {"text": "but you should.", "start": 1931.9, "duration": 0.624}, {"text": "They're super cool.", "start": 1932.524, "duration": 0.916}, {"text": "This is string splicing.", "start": 1933.44, "duration": 2.07}, {"text": "So we're looking in t--\nlet me draw the picture.", "start": 1935.51, "duration": 4.38}, {"text": "Here we have s, here we have t.", "start": 1939.89, "duration": 2.77}, {"text": "Think of it as a big string.", "start": 1942.66, "duration": 1.42}, {"text": "We'd like to\ncompare s like that,", "start": 1944.08, "duration": 3.63}, {"text": "and then we'd like to compare\ns shifted over one to see", "start": 1947.71, "duration": 4.48}, {"text": "whether all of the\ncharacters match there.", "start": 1952.19, "duration": 2.22}, {"text": "And then shifted over\none more, and so on.", "start": 1954.41, "duration": 3.38}, {"text": "And so we're looking at a\nsubstring of t from position", "start": 1957.79, "duration": 2.41}, {"text": "i the position i\nplus the length of s,", "start": 1960.2, "duration": 2.41}, {"text": "not including the last one.", "start": 1962.61, "duration": 1.69}, {"text": "So that's of length\nexactly, length of s.", "start": 1964.3, "duration": 2.68}, {"text": "This is s.", "start": 1966.98, "duration": 1.848}, {"text": "This is t.", "start": 1968.828, "duration": 2.212}, {"text": "And so each of these\nlooks like that pattern.", "start": 1971.04, "duration": 2.04}, {"text": "We compare s to t.", "start": 1973.08, "duration": 1.667}, {"text": "What this comparison\noperation does", "start": 1974.747, "duration": 1.458}, {"text": "in Python is it checks\nthe first characters,", "start": 1976.205, "duration": 1.833}, {"text": "see if they're equal.", "start": 1978.038, "duration": 1.222}, {"text": "If they are, keep going\nuntil they find a mismatch.", "start": 1979.26, "duration": 2.54}, {"text": "If there's no mismatch,\nthen you return true.", "start": 1981.8, "duration": 2.71}, {"text": "Otherwise, you return false.", "start": 1984.51, "duration": 2.66}, {"text": "And then we do this\nroughly length of t times", "start": 1987.17, "duration": 3.6}, {"text": "because that's how many shifts\nthere are, except at the end", "start": 1990.77, "duration": 2.5}, {"text": "we run out of room.", "start": 1993.27, "duration": 0.88}, {"text": "We don't care if we\nshift beyond the right", "start": 1994.15, "duration": 2.42}, {"text": "because that's clearly\nnot going to match.", "start": 1996.57, "duration": 1.95}, {"text": "And so it's actually length\nof t minus like of s.", "start": 1998.52, "duration": 2.23}, {"text": "That's the number of iterations.", "start": 2000.75, "duration": 2.22}, {"text": "Hopefully I got all the\nindex arithmetic right.", "start": 2002.97, "duration": 2.865}, {"text": "And there's no plus\nones or minus ones.", "start": 2005.835, "duration": 1.625}, {"text": "I think this is correct.", "start": 2007.46, "duration": 2.76}, {"text": "We want to know whether\nany of these match.", "start": 2010.22, "duration": 2.16}, {"text": "If so, the answer is yes, s\noccurs as a substring of t.", "start": 2012.38, "duration": 6.66}, {"text": "Of course, in reality you want\nto know not just do any match,", "start": 2019.04, "duration": 2.97}, {"text": "but show them to me,\nthings like that.", "start": 2022.01, "duration": 2.16}, {"text": "But you can change that.", "start": 2024.17, "duration": 3.137}, {"text": "Same amount of time.", "start": 2027.307, "duration": 0.833}, {"text": "So what's the running\ntime of this algorithm?", "start": 2028.14, "duration": 1.875}, {"text": "So my relevant things\nare the length of s", "start": 2034.916, "duration": 3.024}, {"text": "and the length of t.", "start": 2037.94, "duration": 3.19}, {"text": "What's the running time?", "start": 2041.13, "duration": 1.914}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2043.044, "duration": 1.236}, {"text": "PROFESSOR: Sorry?", "start": 2044.28, "duration": 0.991}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2045.271, "duration": 0.874}, {"text": "PROFESSOR: T by-- t\nmultiplied by s, yeah.", "start": 2046.145, "duration": 2.375}, {"text": "Exactly.", "start": 2048.52, "duration": 1.86}, {"text": "Technically, it's length of\ns times length of t minus s.", "start": 2050.38, "duration": 4.359}, {"text": "But typically, this\nis just s times t.", "start": 2058.76, "duration": 5.669}, {"text": "And it's always\nat most s times t,", "start": 2064.429, "duration": 1.471}, {"text": "and it's usually the same thing\nbecause s is usually smaller--", "start": 2065.9, "duration": 2.923}, {"text": "at least a constant\nfactor than t.", "start": 2068.823, "duration": 1.416}, {"text": "This is kind of slow.", "start": 2072.8, "duration": 1.109}, {"text": "If you're searching for a big\nstring, it's not so great.", "start": 2073.909, "duration": 4.931}, {"text": "I mean, certainly\nyou need s plus t.", "start": 2078.84, "duration": 3.03}, {"text": "You've got to look\nat the strings.", "start": 2081.87, "duration": 1.7}, {"text": "But s times t is kind of--\nit could be quadratic,", "start": 2083.57, "duration": 2.365}, {"text": "if you're searching for a really\nlong string in another string.", "start": 2085.935, "duration": 3.264}, {"text": "So what we'd like\nto do today is use", "start": 2089.199, "duration": 1.531}, {"text": "hashing to get this\ndown to linear time.", "start": 2090.73, "duration": 5.56}, {"text": "So, ideas?", "start": 2096.29, "duration": 2.505}, {"text": "How could we do that?", "start": 2098.795, "duration": 0.875}, {"text": "Using hashing.", "start": 2109.35, "duration": 1.04}, {"text": "Subtle hint.", "start": 2110.39, "duration": 1.223}, {"text": "Yeah?", "start": 2111.613, "duration": 2.958}, {"text": "AUDIENCE: If we take something\ninto account [INAUDIBLE].", "start": 2114.571, "duration": 2.958}, {"text": "PROFESSOR: OK, so you want\nto decompose your string", "start": 2124.916, "duration": 2.124}, {"text": "into words and use\nthe fact that there", "start": 2127.04, "duration": 1.8}, {"text": "are fewer words than characters.", "start": 2128.84, "duration": 1.946}, {"text": "You could probably get\nsomething out of that,", "start": 2130.786, "duration": 1.874}, {"text": "and old search engines\nused to do that.", "start": 2132.66, "duration": 4.39}, {"text": "But it's not\nnecessary, turns out.", "start": 2137.05, "duration": 3.0}, {"text": "And it will also depend on what\nyour average word length is.", "start": 2140.05, "duration": 4.42}, {"text": "We are, in the end, today, we're\nnot going to analyze it fully,", "start": 2144.47, "duration": 3.412}, {"text": "but we are going to\nget an algorithm that", "start": 2147.882, "duration": 1.708}, {"text": "runs in this time guaranteed.", "start": 2149.59, "duration": 2.9}, {"text": "In expectation because\nof a randomized-- yeah?", "start": 2152.49, "duration": 4.401}, {"text": "AUDIENCE: If we were to hash\n[INAUDIBLE] size s, that would", "start": 2156.891, "duration": 3.976}, {"text": "[INAUDIBLE] and then we would\ncheck the hash [INAUDIBLE].", "start": 2160.867, "duration": 5.298}, {"text": "PROFESSOR: Good.", "start": 2166.165, "duration": 0.666}, {"text": "So the idea is to--\nwhat we're looking", "start": 2166.831, "duration": 2.169}, {"text": "at is a rolling window\nof t always of size s.", "start": 2169.0, "duration": 3.07}, {"text": "And at each time we want to\nknow, is it the same as s?", "start": 2172.07, "duration": 3.18}, {"text": "Now, if somehow-- it's\nexpensive to check", "start": 2175.25, "duration": 2.417}, {"text": "whether a string is\nequal to a string.", "start": 2177.667, "duration": 1.583}, {"text": "There's no way\ngetting around that.", "start": 2179.25, "duration": 1.952}, {"text": "Well, there are ways, but\nthere isn't a way for just", "start": 2181.202, "duration": 3.408}, {"text": "given two strings.", "start": 2184.61, "duration": 1.03}, {"text": "But if somehow instead of\nchecking the strings we", "start": 2185.64, "duration": 2.69}, {"text": "could check a hash\nfunction of the strings,", "start": 2188.33, "duration": 2.3}, {"text": "because strings are\nbig, potentially.", "start": 2190.63, "duration": 1.71}, {"text": "We don't know how big s is.", "start": 2192.34, "duration": 1.88}, {"text": "And so the universe\nof strings of length s", "start": 2194.22, "duration": 3.57}, {"text": "is potentially very big.", "start": 2197.79, "duration": 1.546}, {"text": "It's expensive to\ncompare things.", "start": 2199.336, "duration": 1.374}, {"text": "If we could just hash it\ndown to some reasonable size,", "start": 2200.71, "duration": 2.48}, {"text": "to something that\nfits in a word,", "start": 2203.19, "duration": 1.55}, {"text": "then we can compare whether\nthose two words are equal,", "start": 2204.74, "duration": 2.25}, {"text": "whether those two\nhash values are equal,", "start": 2206.99, "duration": 1.77}, {"text": "whether there's a\ncollision in the table.", "start": 2208.76, "duration": 2.9}, {"text": "That would somehow-- that\nwould make things go faster.", "start": 2211.66, "duration": 3.84}, {"text": "We could do that in\nconstant time per operation.", "start": 2215.5, "duration": 4.44}, {"text": "How could we do that?", "start": 2219.94, "duration": 1.82}, {"text": "That's the tricky part, but\nthat is exactly the right idea.", "start": 2221.76, "duration": 4.72}, {"text": "So-- make some space.", "start": 2226.48, "duration": 5.93}, {"text": "I think I'm going to do\nthings a little out of order", "start": 2248.13, "duration": 4.09}, {"text": "from what I have in\nmy notes, and tell you", "start": 2252.22, "duration": 1.98}, {"text": "about something\ncalled rolling hashes.", "start": 2254.2, "duration": 3.49}, {"text": "And then we'll see\nhow they're used.", "start": 2257.69, "duration": 3.18}, {"text": "So shelve that idea.", "start": 2260.87, "duration": 1.3}, {"text": "We're going to come back to it.", "start": 2262.17, "duration": 1.55}, {"text": "We need a data structure\nto help us do this.", "start": 2263.72, "duration": 4.71}, {"text": "Because if we just compute the\nhash function of this thing,", "start": 2268.43, "duration": 2.95}, {"text": "compare it to the hash\nfunction of this thing,", "start": 2271.38, "duration": 1.3}, {"text": "and then compute the hash\nfunction of the shifted value", "start": 2272.68, "duration": 2.291}, {"text": "of t and compare\nit, we don't have", "start": 2274.971, "duration": 1.679}, {"text": "to recompute the hash of s.", "start": 2276.65, "duration": 1.7}, {"text": "That's going to be free\nonce you do it once.", "start": 2278.35, "duration": 2.61}, {"text": "But computing the\nhash function of this", "start": 2280.96, "duration": 1.69}, {"text": "and then the hash\nfunction of this", "start": 2282.65, "duration": 0.783}, {"text": "and the hash function\nof this, usually", "start": 2283.433, "duration": 1.757}, {"text": "to compute each of\nthose hash function", "start": 2285.19, "duration": 1.583}, {"text": "would take length of s time.", "start": 2286.773, "duration": 1.582}, {"text": "And so we're not\nsaving any time.", "start": 2288.355, "duration": 2.455}, {"text": "Somehow, if we have the\nhash function of this,", "start": 2290.81, "duration": 2.85}, {"text": "the first substring\nof length s, we'd", "start": 2293.66, "duration": 2.2}, {"text": "like to very quickly\ncompute the hash function", "start": 2295.86, "duration": 2.15}, {"text": "of the next substring\nin constant time.", "start": 2298.01, "duration": 3.696}, {"text": "Yeah?", "start": 2301.706, "duration": 0.5}, {"text": "AUDIENCE: You already\nhave, like, s minus 1", "start": 2302.206, "duration": 1.952}, {"text": "of the characters of the--", "start": 2304.158, "duration": 1.286}, {"text": "PROFESSOR: Yeah.", "start": 2305.444, "duration": 0.666}, {"text": "If you look at this portion\nof s and this portion of s,", "start": 2306.11, "duration": 4.58}, {"text": "they share s minus\n1 of the characters.", "start": 2310.69, "duration": 2.91}, {"text": "Just one character different.", "start": 2313.6, "duration": 1.94}, {"text": "First one gets deleted,\nlast character gets added.", "start": 2315.54, "duration": 3.44}, {"text": "So here's what we want.", "start": 2318.98, "duration": 1.0}, {"text": "Given a hash value-- maybe\nI should call this r.", "start": 2323.23, "duration": 4.73}, {"text": "It's not the hash function.", "start": 2327.96, "duration": 1.32}, {"text": "Give it a rolling hash value.", "start": 2331.82, "duration": 1.85}, {"text": "You might say, I'd like to be\nable to append a character.", "start": 2333.67, "duration": 3.82}, {"text": "I should say, r\nmaintains a string.", "start": 2337.49, "duration": 7.99}, {"text": "There's some string,\nlet's call it x.", "start": 2349.1, "duration": 4.64}, {"text": "And what r.append\nof c does is add", "start": 2353.74, "duration": 4.99}, {"text": "character c to the end of x.", "start": 2358.73, "duration": 3.985}, {"text": "And then we also\nwant an operation", "start": 2365.62, "duration": 1.84}, {"text": "which is-- you might call\nit pop left in Python.", "start": 2367.46, "duration": 2.7}, {"text": "I'm going to call it skip.", "start": 2370.16, "duration": 2.74}, {"text": "Shorter.", "start": 2372.9, "duration": 1.58}, {"text": "Delete the first character of x.", "start": 2374.48, "duration": 6.4}, {"text": "And assuming it's c.", "start": 2384.37, "duration": 8.32}, {"text": "So we can do this\nbecause over here,", "start": 2392.69, "duration": 2.68}, {"text": "what we want to do is\nadd this character, which", "start": 2395.37, "duration": 3.24}, {"text": "is like t of length of s.", "start": 2398.61, "duration": 3.35}, {"text": "And we want to\ndelete this character", "start": 2401.96, "duration": 1.77}, {"text": "from the front, which is t of 0.", "start": 2403.73, "duration": 2.35}, {"text": "Then we will get\nthe next strength.", "start": 2406.08, "duration": 4.045}, {"text": "And at all times, r--\nwhat's the point of this r?", "start": 2410.125, "duration": 5.075}, {"text": "You can say r-- let's\nsay open paren, close", "start": 2415.2, "duration": 3.17}, {"text": "paren-- this will\ngive you a hash value", "start": 2418.37, "duration": 3.66}, {"text": "of the current strength.", "start": 2422.03, "duration": 3.25}, {"text": "So this is basically h of\nx for some hash function", "start": 2425.28, "duration": 4.65}, {"text": "h, some reasonable\nhash function.", "start": 2429.93, "duration": 2.952}, {"text": "If we could do this\nand we could do", "start": 2432.882, "duration": 1.458}, {"text": "each of these operations\nin constant time,", "start": 2434.34, "duration": 3.05}, {"text": "then we can do string matching.", "start": 2437.39, "duration": 1.68}, {"text": "Let me tell you how.", "start": 2439.07, "duration": 3.14}, {"text": "This is called the Karp-Rabin\nstring matching algorithm.", "start": 2442.21, "duration": 3.32}, {"text": "And if it's not clear\nexactly what's allowed here,", "start": 2456.269, "duration": 2.491}, {"text": "you'll see it as we use it.", "start": 2458.76, "duration": 1.75}, {"text": "First thing I'd like to do is\ncompute the hash function of s.", "start": 2472.74, "duration": 2.76}, {"text": "I only need to do that\nonce, so I'll do it.", "start": 2475.5, "duration": 2.492}, {"text": "In this data structure, the\nonly thing you're allowed to do", "start": 2477.992, "duration": 2.458}, {"text": "is add characters.", "start": 2480.45, "duration": 0.86}, {"text": "Initially you have\nan empty string.", "start": 2481.31, "duration": 1.8}, {"text": "And so for each character\nin s I'll just append it,", "start": 2483.11, "duration": 2.66}, {"text": "and now rs gives me\na hash value of s.", "start": 2485.77, "duration": 4.74}, {"text": "OK?", "start": 2490.51, "duration": 1.37}, {"text": "Now, I'd like to get\nstarted and compute", "start": 2491.88, "duration": 5.46}, {"text": "the hash function of the\nfirst s characters of t.", "start": 2497.34, "duration": 3.14}, {"text": "So this would be t\nup to length of s.", "start": 2503.84, "duration": 4.41}, {"text": "And I'm going to call\nthis thing rt, that's", "start": 2511.65, "duration": 2.41}, {"text": "my rolling hash for t.", "start": 2514.06, "duration": 1.525}, {"text": "And append those characters.", "start": 2519.694, "duration": 1.166}, {"text": "So now rs is a\nrolling hash of s.", "start": 2520.86, "duration": 2.96}, {"text": "rt is a rolling hash of the\nfirst s characters in t.", "start": 2523.82, "duration": 4.114}, {"text": "So I should check\nwhether they're equal.", "start": 2527.934, "duration": 1.666}, {"text": "If they're not,\nshift over by one.", "start": 2529.6, "duration": 3.19}, {"text": "Add one character at the\nend, delete character", "start": 2532.79, "duration": 1.916}, {"text": "from the beginning.", "start": 2534.706, "duration": 1.274}, {"text": "I'm going to have to\ndo this many times.", "start": 2535.98, "duration": 2.99}, {"text": "So I guess technically,\nI need to check", "start": 2538.97, "duration": 4.39}, {"text": "whether these are equal first.", "start": 2543.36, "duration": 1.25}, {"text": "If they're equal, then we'll\ntalk about it in a moment.", "start": 2547.58, "duration": 3.472}, {"text": "The main thing I\nneed to do is this", "start": 2551.052, "duration": 1.458}, {"text": "for loop, which checks\nall of the other.", "start": 2552.51, "duration": 3.27}, {"text": "And all I need to do is throw\naway the first letter, which", "start": 2565.53, "duration": 4.72}, {"text": "I know is t of i\nminus length of s.", "start": 2570.25, "duration": 3.175}, {"text": "And add the next letter,\nwhich is going to be t of i.", "start": 2576.24, "duration": 3.73}, {"text": "And then after I do\nthat, I don't change hs", "start": 2584.66, "duration": 2.716}, {"text": "because that's fixed.", "start": 2587.376, "duration": 0.874}, {"text": "That's just-- or,\nsorry, I switched from h", "start": 2588.25, "duration": 2.15}, {"text": "to-- in my notes I have h.", "start": 2590.4, "duration": 3.46}, {"text": "I've been switching to r,\nso all those h's are r's.", "start": 2593.86, "duration": 3.755}, {"text": "Sorry about that.", "start": 2597.615, "duration": 2.825}, {"text": "So then if rs equals rt, then\npotentially that substring of t", "start": 2600.44, "duration": 15.97}, {"text": "matches s.", "start": 2616.41, "duration": 1.71}, {"text": "But it's potentially\nbecause we're hashing.", "start": 2618.12, "duration": 3.29}, {"text": "Things are only\ntrue in expectation.", "start": 2621.41, "duration": 3.42}, {"text": "There's some\nprobability of failure.", "start": 2624.83, "duration": 2.19}, {"text": "Just because the hash function\nof two strings comes out equal", "start": 2627.02, "duration": 3.8}, {"text": "doesn't mean the strings\nthemselves are equal,", "start": 2630.82, "duration": 2.11}, {"text": "because there are collisions.", "start": 2632.93, "duration": 1.98}, {"text": "Even distinct strings may map\nto the same slot in the table.", "start": 2634.91, "duration": 3.61}, {"text": "So what we do in this\nsituation is check", "start": 2638.52, "duration": 6.29}, {"text": "whether s equals t-- I did\nit slightly less conveniently", "start": 2644.81, "duration": 8.82}, {"text": "than before-- it's like i minus\nlength of s plus 1 to i plus 1.", "start": 2653.63, "duration": 9.47}, {"text": "Oh well.", "start": 2663.1, "duration": 0.69}, {"text": "It wasn't very\nbeautiful but it works.", "start": 2663.79, "duration": 5.0}, {"text": "So in this case, I'm going\nto check it character", "start": 2668.79, "duration": 2.31}, {"text": "by character.", "start": 2671.1, "duration": 1.71}, {"text": "OK?", "start": 2672.81, "duration": 2.03}, {"text": "If they're equal,\nthen we found a match.", "start": 2674.84, "duration": 4.49}, {"text": "So it's kind of OK that I spent\nall this time to check them.", "start": 2679.33, "duration": 3.207}, {"text": "In particular, if I'm just\nlooking for the first match--", "start": 2682.537, "duration": 2.333}, {"text": "like you're searching\nthrough a text document,", "start": 2684.87, "duration": 2.54}, {"text": "you just care about the first\nmatch-- then you're done.", "start": 2687.41, "duration": 3.25}, {"text": "So yeah, I spent order\ns time to do this,", "start": 2690.66, "duration": 3.834}, {"text": "but if they're equal it's\nsort of worth that effort.", "start": 2694.494, "duration": 2.166}, {"text": "I found the match.", "start": 2696.66, "duration": 2.1}, {"text": "If they're not\nequal, we basically", "start": 2698.76, "duration": 4.19}, {"text": "hope or we will\nengineer it so that this", "start": 2702.95, "duration": 4.21}, {"text": "happens with\nprobability at most 1/s.", "start": 2707.16, "duration": 2.61}, {"text": "If we can do that, then the\nexpected time here is constant.", "start": 2720.84, "duration": 3.935}, {"text": "So that would be good because\nthen, if skip and append", "start": 2733.91, "duration": 6.62}, {"text": "take constant time and this\nsort of double checking", "start": 2740.53, "duration": 4.359}, {"text": "only takes constant expected\ntime-- except when we find", "start": 2744.889, "duration": 2.291}, {"text": "matches and then\nwe're OK with it--", "start": 2747.18, "duration": 2.3}, {"text": "then this overall thing\nwill take linear time.", "start": 2749.48, "duration": 3.28}, {"text": "In fact, the proper thing would\nbe this is you pay s plus t,", "start": 2752.76, "duration": 9.81}, {"text": "then you also pay-- for each\nmatch that you want to report,", "start": 2762.57, "duration": 4.8}, {"text": "you pay length of s.", "start": 2767.37, "duration": 1.36}, {"text": "I'm not sure whether you\ncan get rid of that term.", "start": 2770.947, "duration": 2.083}, {"text": "But in particular, if you\njust care about one match,", "start": 2773.03, "duration": 2.166}, {"text": "this is linear time.", "start": 2775.196, "duration": 0.884}, {"text": "It's pretty cool.", "start": 2779.167, "duration": 1.083}, {"text": "There's one remaining\nquestion, which", "start": 2783.67, "duration": 1.61}, {"text": "is how do you build\nthis data structure?", "start": 2785.28, "duration": 3.12}, {"text": "Is the algorithm clear though?", "start": 2788.4, "duration": 2.3}, {"text": "I mean, I wrote it\nout in gory detail", "start": 2790.7, "duration": 1.57}, {"text": "so you can really\nsee what's happening,", "start": 2792.27, "duration": 1.625}, {"text": "also because you need to\ndo it in your problem set", "start": 2793.895, "duration": 2.175}, {"text": "so I give you as much code\nto work from as possible.", "start": 2796.07, "duration": 3.59}, {"text": "Question?", "start": 2799.66, "duration": 1.14}, {"text": "AUDIENCE: What is rs?", "start": 2800.8, "duration": 1.5}, {"text": "PROFESSOR: rs is going to\nrepresent a hash value of s.", "start": 2802.3, "duration": 6.8}, {"text": "You could just say h of s.", "start": 2809.1, "duration": 1.67}, {"text": "But what I like to show\nis that all you need", "start": 2810.77, "duration": 3.32}, {"text": "are these operations.", "start": 2814.09, "duration": 1.554}, {"text": "And so given a\ndata structure that", "start": 2815.644, "duration": 1.416}, {"text": "will compute a hash function,\ngiven the append operation,", "start": 2817.06, "duration": 4.56}, {"text": "what I did up here was just\nappend every letter of s", "start": 2821.62, "duration": 4.71}, {"text": "into this thing, and\nthen rs open paren,", "start": 2826.33, "duration": 2.64}, {"text": "close paren gives me\nthe hash function of s.", "start": 2828.97, "duration": 2.703}, {"text": "AUDIENCE: You said you\ncan do r.append over here,", "start": 2831.673, "duration": 2.041}, {"text": "but then you said rs--", "start": 2833.714, "duration": 1.976}, {"text": "PROFESSOR: Yeah.", "start": 2835.69, "duration": 0.89}, {"text": "So there are two rolling hashes.", "start": 2836.58, "duration": 1.56}, {"text": "One's called rs and\none's called rt.", "start": 2838.14, "duration": 4.36}, {"text": "This was an ADT and I didn't\nsay it at the beginning-- line", "start": 2842.5, "duration": 3.54}, {"text": "one I say rs equals a new\nrolling hash. rt equals", "start": 2846.04, "duration": 2.6}, {"text": "a new rolling hash.", "start": 2848.64, "duration": 1.25}, {"text": "Sorry, I should\nbind my variables.", "start": 2849.89, "duration": 2.684}, {"text": "So I'm using two\nof them because I", "start": 2852.574, "duration": 1.416}, {"text": "want to compare their\nvalues, like this.", "start": 2853.99, "duration": 2.71}, {"text": "Other questions?", "start": 2859.39, "duration": 2.7}, {"text": "It's actually a pretty big idea.", "start": 2862.09, "duration": 1.36}, {"text": "This is an algorithm from the\n'90s, so it's fairly recent.", "start": 2863.45, "duration": 5.12}, {"text": "And it's one of\nthe first examples", "start": 2871.769, "duration": 2.521}, {"text": "of really using randomization\nin a super cool way, other", "start": 2874.29, "duration": 3.83}, {"text": "than just hashing\nas a data structure.", "start": 2878.12, "duration": 1.95}, {"text": "All right.", "start": 2884.24, "duration": 0.55}, {"text": "So the remaining thing\nto do is figure out", "start": 2884.79, "duration": 3.61}, {"text": "how to build this ADT.", "start": 2888.4, "duration": 1.532}, {"text": "What's the data\nstructure that implements", "start": 2889.932, "duration": 1.708}, {"text": "this, spending constant time\nfor each of these operations.", "start": 2891.64, "duration": 3.375}, {"text": "Now, to tell you\nthe truth, doing", "start": 2904.37, "duration": 1.45}, {"text": "it depends on which hashing\nmethod you use, which hash", "start": 2905.82, "duration": 2.93}, {"text": "function you want to use.", "start": 2908.75, "duration": 2.166}, {"text": "I just erased the\nmultiplication method", "start": 2910.916, "duration": 1.624}, {"text": "because it's a pain to use\nthe multiplication method.", "start": 2912.54, "duration": 2.208}, {"text": "Though I'll bet you\ncould use it, actually.", "start": 2920.36, "duration": 2.54}, {"text": "That's an exercise\nfor you think about.", "start": 2922.9, "duration": 2.351}, {"text": "I'm going to use\nthe division method", "start": 2925.251, "duration": 1.499}, {"text": "because it's the\nsimplest hash function.", "start": 2926.75, "duration": 1.91}, {"text": "And it turns out, in this\nsetting it does work.", "start": 2928.66, "duration": 2.13}, {"text": "We're not going to\nprove that this is true.", "start": 2930.79, "duration": 2.97}, {"text": "This is going to be\ntrue in expectation.", "start": 2933.76, "duration": 3.1}, {"text": "Expected time.", "start": 2936.86, "duration": 0.775}, {"text": "But Karp and Rabin proved\nthat this running time", "start": 2942.11, "duration": 4.16}, {"text": "holds, even if you\njust use a simple hash", "start": 2946.27, "duration": 2.77}, {"text": "function of the\ndivision method where", "start": 2949.04, "duration": 2.53}, {"text": "m is chosen to be\na random prime.", "start": 2951.57, "duration": 2.185}, {"text": "Let's say about is big\nas-- let's say at least as", "start": 2958.8, "duration": 3.37}, {"text": "big as length of s.", "start": 2962.17, "duration": 3.88}, {"text": "The bigger you make it,\nthe higher probability this", "start": 2966.05, "duration": 2.29}, {"text": "is going to be true.", "start": 2968.34, "duration": 1.3}, {"text": "But length of s will\ngive you this on average.", "start": 2969.64, "duration": 4.844}, {"text": "So we're not going to\ntalk about in this class", "start": 2974.484, "duration": 1.916}, {"text": "how to find a random\nprime, but the algorithm", "start": 2976.4, "duration": 3.22}, {"text": "is choose a random number\nof about the right size", "start": 2979.62, "duration": 3.03}, {"text": "and check whether it's prime.", "start": 2982.65, "duration": 1.38}, {"text": "If it's not, do it again.", "start": 2984.03, "duration": 2.0}, {"text": "And by the prime number\ntheorem, after log end trials", "start": 2986.03, "duration": 4.07}, {"text": "you will find a prime.", "start": 2990.1, "duration": 1.679}, {"text": "And we're not going\nto talk about how", "start": 2991.779, "duration": 1.541}, {"text": "to check whether a number's\nprime, but it can be done.", "start": 2993.32, "duration": 4.55}, {"text": "All right.", "start": 2997.87, "duration": 0.61}, {"text": "So we're basically done.", "start": 2998.48, "duration": 3.74}, {"text": "The point is to look at-- if\nyou look at an append operation", "start": 3002.22, "duration": 8.41}, {"text": "and you think about how\nthis hash function changes", "start": 3010.63, "duration": 4.75}, {"text": "when you add a single character.", "start": 3015.38, "duration": 1.97}, {"text": "Oh, I should tell you.", "start": 3017.35, "duration": 3.12}, {"text": "We're going to treat the string\nx as a multi digit number.", "start": 3020.47, "duration": 5.48}, {"text": "This is the sort of\nprehash function.", "start": 3029.65, "duration": 1.57}, {"text": "And the base is the\nsize of your alphabet.", "start": 3036.48, "duration": 2.885}, {"text": "So if you're using\nAscii, it's 256.", "start": 3042.75, "duration": 3.17}, {"text": "If you're using some unique\ncode, it might be larger.", "start": 3045.92, "duration": 2.94}, {"text": "But whatever the size of your\ncharacters in your string,", "start": 3048.86, "duration": 3.89}, {"text": "then when I add a character,\nthis is like taking my number,", "start": 3052.75, "duration": 4.2}, {"text": "shifting it over by one,\nand then adding a new value.", "start": 3056.95, "duration": 3.71}, {"text": "So how do I shift over by one?", "start": 3060.66, "duration": 1.73}, {"text": "I multiply by a.", "start": 3062.39, "duration": 2.24}, {"text": "So if I have some value,\nsome current hash value u,", "start": 3064.63, "duration": 5.7}, {"text": "it changes to u\ntimes a-- or sorry,", "start": 3070.33, "duration": 3.11}, {"text": "this is the number\nrepresented by the string.", "start": 3073.44, "duration": 4.45}, {"text": "I multiply by a and then\nI add on the character.", "start": 3077.89, "duration": 2.57}, {"text": "Or, in Python you'd write\nord of the character.", "start": 3080.46, "duration": 3.16}, {"text": "That's the number associated\nwith that character.", "start": 3083.62, "duration": 4.24}, {"text": "That gives me the new string.", "start": 3087.86, "duration": 1.3}, {"text": "Very easy.", "start": 3089.16, "duration": 0.61}, {"text": "If I want to do is skip,\nit's slightly more annoying.", "start": 3089.77, "duration": 3.95}, {"text": "But skip means just\nannihilate this value.", "start": 3093.72, "duration": 3.57}, {"text": "And so it's like u goes to u\nminus the character times a", "start": 3097.29, "duration": 8.02}, {"text": "to the power size of u minus 1.", "start": 3105.31, "duration": 3.67}, {"text": "I have to shift this character\nover to that position", "start": 3108.98, "duration": 3.1}, {"text": "and then annihilated\nit with a minus sign.", "start": 3112.08, "duration": 1.75}, {"text": "You could also do x or.", "start": 3113.83, "duration": 2.51}, {"text": "And when I do this, I\njust think about how", "start": 3116.34, "duration": 2.48}, {"text": "the hash function is changing.", "start": 3118.82, "duration": 1.43}, {"text": "Everything is just modulo m.", "start": 3120.25, "duration": 2.29}, {"text": "So if I have some\nhash value here, r,", "start": 3122.54, "duration": 2.83}, {"text": "I take r times a plus\nord of c and I just", "start": 3125.37, "duration": 4.63}, {"text": "do that computation\nmodulo m, and I'll", "start": 3130.0, "duration": 3.21}, {"text": "get the new hash value.", "start": 3133.21, "duration": 1.93}, {"text": "Do the same thing down here,\nI'll get the new hash value.", "start": 3135.14, "duration": 3.49}, {"text": "So what r stores is\nthe current hash value.", "start": 3138.63, "duration": 4.1}, {"text": "And it stores a to the\npower length of u or length", "start": 3142.73, "duration": 5.08}, {"text": "of x, whatever you\nwant to call it.", "start": 3147.81, "duration": 2.39}, {"text": "I guess that would\nbe a little better.", "start": 3150.2, "duration": 3.406}, {"text": "And then it can do these\nin constant a number", "start": 3153.606, "duration": 1.874}, {"text": "of operations.", "start": 3155.48, "duration": 0.8}, {"text": "Just compute\neverything modulo m,", "start": 3156.28, "duration": 1.675}, {"text": "one multiplication,\none addition.", "start": 3157.955, "duration": 2.169}, {"text": "You can do append and\nskip, and then you", "start": 3160.124, "duration": 1.666}, {"text": "have the hash value instantly.", "start": 3161.79, "duration": 1.77}, {"text": "It's just stored.", "start": 3163.56, "duration": 1.26}, {"text": "And then you can\nmake all this work.", "start": 3164.82, "duration": 2.51}]