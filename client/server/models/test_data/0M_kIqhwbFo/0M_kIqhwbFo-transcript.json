[{"text": "The following\ncontent is provided", "start": 0.05, "duration": 1.72}, {"text": "under a Creative\nCommons license.", "start": 1.77, "duration": 2.24}, {"text": "Your support will help MIT\nOpenCourseWare continue", "start": 4.01, "duration": 2.85}, {"text": "to offer high quality\neducational resources for free.", "start": 6.86, "duration": 3.86}, {"text": "To make a donation or\nview additional materials", "start": 10.72, "duration": 2.61}, {"text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare", "start": 13.33, "duration": 3.877}, {"text": "at ocw.mit.edu.", "start": 17.207, "duration": 0.625}, {"text": "PROFESSOR: All right.", "start": 21.835, "duration": 0.875}, {"text": "Let's get started.", "start": 22.71, "duration": 2.27}, {"text": "Today we start a brand\nnew section of 006,", "start": 24.98, "duration": 2.75}, {"text": "which is hashing.", "start": 27.73, "duration": 1.89}, {"text": "Hashing is cool.", "start": 29.62, "duration": 0.81}, {"text": "It is probably the most used\nand common and important", "start": 30.43, "duration": 3.8}, {"text": "data structure and all\nof computer science.", "start": 34.23, "duration": 2.265}, {"text": "It's in, basically, every system\nyou've ever used, I think.", "start": 36.495, "duration": 5.365}, {"text": "And in particular,\nit's in Python", "start": 41.86, "duration": 2.36}, {"text": "as part of what makes\nPython fun to program in.", "start": 44.22, "duration": 2.106}, {"text": "And basically, every modern\nprogramming language has it.", "start": 46.326, "duration": 3.414}, {"text": "So today is about how to\nmake it actually happen.", "start": 49.74, "duration": 3.87}, {"text": "So what is it?", "start": 53.61, "duration": 1.05}, {"text": "It is usually\ncalled a dictionary.", "start": 57.23, "duration": 1.46}, {"text": "So this is an\nabstract data if you", "start": 61.96, "duration": 2.32}, {"text": "remember that term from\na couple lectures ago.", "start": 64.28, "duration": 2.965}, {"text": "It's kind of an old term,\nnot so common anymore,", "start": 73.08, "duration": 2.37}, {"text": "but it's useful to think about.", "start": 75.45, "duration": 2.89}, {"text": "So a dictionary is\na data structure,", "start": 78.34, "duration": 4.56}, {"text": "or it's a thing,\nthat can store items,", "start": 82.9, "duration": 4.0}, {"text": "and it can insert items, delete\nitems and search for items.", "start": 86.9, "duration": 2.495}, {"text": "So in general, it's going\nto be a set of items,", "start": 95.18, "duration": 5.05}, {"text": "each item has a key.", "start": 100.23, "duration": 1.13}, {"text": "And you can insert an item,\nyou can delete an item", "start": 107.72, "duration": 8.36}, {"text": "from the set, and you can\nsearch for a key, not an item.", "start": 116.08, "duration": 10.64}, {"text": "And the interesting\npart is the search.", "start": 126.72, "duration": 2.423}, {"text": "I think you know what\ninsert and delete do.", "start": 129.143, "duration": 1.791}, {"text": "So there are two outcomes\nto this kind of search.", "start": 140.36, "duration": 2.655}, {"text": "This is what I call\nan exact search.", "start": 143.015, "duration": 2.255}, {"text": "Either you find an item with a\ngiven key, or there isn't one,", "start": 145.27, "duration": 4.17}, {"text": "and then you just say\nkey error in Python.", "start": 149.44, "duration": 3.095}, {"text": "OK.", "start": 161.95, "duration": 0.5}, {"text": "This is a little\ndifferent from what", "start": 162.45, "duration": 1.699}, {"text": "we could do with\nbinary search trees.", "start": 164.149, "duration": 1.541}, {"text": "Binary search trees, if\nwe didn't find a key,", "start": 165.69, "duration": 2.0}, {"text": "we could find the next\nlarger and the next smaller", "start": 167.69, "duration": 3.21}, {"text": "successor and predecessor.", "start": 170.9, "duration": 1.761}, {"text": "With dictionaries you're\nnot allowed to do that,", "start": 172.661, "duration": 1.999}, {"text": "or you're not able to do that.", "start": 174.66, "duration": 1.49}, {"text": "And you're just\ninterested in the question", "start": 176.15, "duration": 1.75}, {"text": "does the key exist?", "start": 177.9, "duration": 1.03}, {"text": "And if so, give me the\nitem with that key.", "start": 178.93, "duration": 3.16}, {"text": "So we're assuming here that\nthe items have unique keys,", "start": 182.09, "duration": 2.9}, {"text": "no two items have the same key.", "start": 184.99, "duration": 2.372}, {"text": "And one way to\nenforce that is when", "start": 187.362, "duration": 1.458}, {"text": "you insert an item\nwith an existing key,", "start": 188.82, "duration": 2.61}, {"text": "it overwrites whatever\nkey was there.", "start": 191.43, "duration": 1.71}, {"text": "That's the Python behavior.", "start": 193.14, "duration": 1.93}, {"text": "So we'll assume that.", "start": 195.07, "duration": 3.48}, {"text": "Overwrite any existing key.", "start": 198.55, "duration": 7.1}, {"text": "And so, it's well\ndefined what search does.", "start": 211.73, "duration": 2.75}, {"text": "Either there's one\nitem with that key,", "start": 214.48, "duration": 1.636}, {"text": "or there's no item\nwith that key,", "start": 216.116, "duration": 1.374}, {"text": "and it tells you what\nthe situation is.", "start": 217.49, "duration": 3.77}, {"text": "OK.", "start": 221.26, "duration": 0.5}, {"text": "So one way to solve\ndictionaries is", "start": 221.76, "duration": 5.95}, {"text": "to use a balanced binary\nsearch tree like AVL trees.", "start": 227.71, "duration": 3.44}, {"text": "And so you can do all of these\noperations on log n time.", "start": 231.15, "duration": 3.56}, {"text": "I mean, you can ignore the\nfact that AVL trees give you", "start": 241.72, "duration": 2.5}, {"text": "more information\nwhen you do a search,", "start": 244.22, "duration": 1.98}, {"text": "and still does exact search.", "start": 246.2, "duration": 2.34}, {"text": "So that's one solution, but it\nturns out you can do better.", "start": 248.54, "duration": 4.15}, {"text": "And while last class was about,\nwell, in the comparison model", "start": 252.69, "duration": 3.42}, {"text": "the best way to sort is n log\nn and the best way to search", "start": 256.11, "duration": 4.01}, {"text": "is log n.", "start": 260.12, "duration": 1.45}, {"text": "Then we saw in the\nRAM model, where", "start": 261.57, "duration": 2.3}, {"text": "if you assume your items are\nintegers we can sort faster,", "start": 263.87, "duration": 3.73}, {"text": "sometimes we can\nsort in linear time.", "start": 267.6, "duration": 1.84}, {"text": "Today's lecture is about how to\nsearch faster than log n time.", "start": 269.44, "duration": 4.27}, {"text": "And we're going to get\ndown to constant time.", "start": 273.71, "duration": 3.97}, {"text": "No-- basically, no\nassumptions except, maybe,", "start": 277.68, "duration": 3.34}, {"text": "that your keys are integers.", "start": 281.02, "duration": 2.09}, {"text": "We'll be able to get\ndown to constant time", "start": 283.11, "duration": 2.339}, {"text": "with high probability.", "start": 285.449, "duration": 0.916}, {"text": "It's going to be a\nrandomized data structure.", "start": 288.89, "duration": 2.14}, {"text": "It's one of the few instances\nof randomization in 006,", "start": 291.03, "duration": 2.46}, {"text": "but it'll be pretty simple\nto analyze, so don't worry.", "start": 293.49, "duration": 2.77}, {"text": "But we're going to use\nsome probability today.", "start": 296.26, "duration": 3.072}, {"text": "Make it a little exciting.", "start": 299.332, "duration": 1.083}, {"text": "I think you know how\ndictionaries work in Python.", "start": 303.29, "duration": 2.18}, {"text": "In Python it's the\ndict data type.", "start": 305.47, "duration": 6.34}, {"text": "We've used it all\nover the place.", "start": 311.81, "duration": 2.79}, {"text": "The key things you can\ndo are lookup a key", "start": 314.6, "duration": 3.16}, {"text": "and-- so this is the\nanalog of search--", "start": 317.76, "duration": 6.34}, {"text": "you can set a key to a value.", "start": 324.1, "duration": 3.87}, {"text": "This is the analog of an insert.", "start": 327.97, "duration": 2.99}, {"text": "It overwrites\nwhatever was there.", "start": 330.96, "duration": 2.21}, {"text": "And what else?", "start": 333.17, "duration": 0.64}, {"text": "Delete.", "start": 333.81, "duration": 0.8}, {"text": "So you can delete\na particular key.", "start": 334.61, "duration": 3.52}, {"text": "OK.", "start": 342.114, "duration": 0.646}, {"text": "We'll usually use this\nnotation because it's", "start": 342.76, "duration": 1.833}, {"text": "more familiar and intuitive.", "start": 344.593, "duration": 1.747}, {"text": "But the big topic today\nis how do you actually", "start": 346.34, "duration": 2.35}, {"text": "implement these operations\nfor a dictionary, D?", "start": 348.69, "duration": 4.38}, {"text": "The one specific thing\nabout Python dictionaries", "start": 353.07, "duration": 3.29}, {"text": "is that an item is\nbasically a pair", "start": 356.36, "duration": 5.105}, {"text": "of two things, a\nkey and a value.", "start": 361.465, "duration": 3.915}, {"text": "And so, in particular,\nwhen you call d.items", "start": 365.38, "duration": 2.03}, {"text": "you get a whole bunch of ordered\npairs, a key and a value.", "start": 367.41, "duration": 3.87}, {"text": "And so the key is always--\nthe key of an item", "start": 371.28, "duration": 1.94}, {"text": "is always this first part.", "start": 373.22, "duration": 1.932}, {"text": "So it's well defined.", "start": 375.152, "duration": 0.983}, {"text": "OK.", "start": 380.035, "duration": 0.5}, {"text": "So that's Python dictionaries.", "start": 383.07, "duration": 5.05}, {"text": "So one obvious motivation\nfor building dictionaries", "start": 388.12, "duration": 4.41}, {"text": "is you need them in Python.", "start": 392.53, "duration": 2.45}, {"text": "And in fact, people\nuse them all the time.", "start": 394.98, "duration": 2.4}, {"text": "We used them in docdist.", "start": 397.38, "duration": 2.45}, {"text": "All of the fastest versions of\nthe document distance problem", "start": 399.83, "duration": 4.06}, {"text": "used dictionaries for counting\nwords, how many times each word", "start": 403.89, "duration": 4.19}, {"text": "occurs in a document, and\nfor computing inner products,", "start": 408.08, "duration": 3.39}, {"text": "for finding common words\nbetween two documents.", "start": 411.47, "duration": 3.17}, {"text": "And it's just it's the\nbest way to do things,", "start": 414.64, "duration": 2.395}, {"text": "it's the easiest way to do\nthings , and the fastest.", "start": 417.035, "duration": 3.432}, {"text": "As a result, dictionaries are\nbuilt into basically every", "start": 420.467, "duration": 2.333}, {"text": "modern programming language,\nPython, Perl, Ruby, JavaScript,", "start": 422.8, "duration": 4.18}, {"text": "Java, C++, C#.", "start": 426.98, "duration": 1.13}, {"text": "In modern versions, all have\nsome version of dictionaries.", "start": 428.11, "duration": 2.86}, {"text": "And they all run in,\nbasically, constant time", "start": 430.97, "duration": 2.82}, {"text": "using the stuff that's in\nthis lecture and the next two", "start": 433.79, "duration": 2.825}, {"text": "lectures.", "start": 436.615, "duration": 0.5}, {"text": "Let's see.", "start": 440.13, "duration": 1.17}, {"text": "It's also, in, basically,\nevery database.", "start": 441.3, "duration": 2.785}, {"text": "There are essentially two kinds\nof databases in the world,", "start": 446.894, "duration": 2.416}, {"text": "there are those\nthat use hashing,", "start": 449.31, "duration": 1.374}, {"text": "and there are those\nthat use search trees.", "start": 450.684, "duration": 2.116}, {"text": "Sometimes you need one.", "start": 452.8, "duration": 0.96}, {"text": "Sometimes you need the other.", "start": 453.76, "duration": 1.335}, {"text": "There are a lot of situations\nin databases where you just", "start": 455.095, "duration": 2.375}, {"text": "need hashing.", "start": 457.47, "duration": 1.612}, {"text": "So if you've ever\nused Berkeley DB,", "start": 459.082, "duration": 1.458}, {"text": "there's a hash\ntype of a database.", "start": 460.54, "duration": 3.91}, {"text": "So if things like, when\nyou go to Merriam-Webster,", "start": 464.45, "duration": 4.01}, {"text": "and you look up a\nword, how do you", "start": 468.46, "duration": 2.74}, {"text": "find the definition\nof that word?", "start": 471.2, "duration": 2.66}, {"text": "You use a hash table, you use\na dictionary, I should say.", "start": 473.86, "duration": 4.23}, {"text": "How do you-- when you\nspell check your document,", "start": 478.09, "duration": 4.01}, {"text": "how do you tell whether a\nword is correctly spelled?", "start": 482.1, "duration": 2.26}, {"text": "You look it up in a dictionary.", "start": 484.36, "duration": 1.434}, {"text": "If it's not correctly\nspelled, how", "start": 485.794, "duration": 1.416}, {"text": "do you find the closest\nrelated, correct spelling?", "start": 487.21, "duration": 4.31}, {"text": "You try tweaking\none the letters,", "start": 491.52, "duration": 1.375}, {"text": "and look it up in a dictionary\nand see if it's there.", "start": 492.895, "duration": 2.208}, {"text": "You do that for all possible\nletters, or maybe two letters.", "start": 495.103, "duration": 2.497}, {"text": "That is a state of the art\nway to do spelling correction.", "start": 497.6, "duration": 4.299}, {"text": "Just keep looking\nup in a dictionary.", "start": 501.899, "duration": 1.541}, {"text": "Because dictionaries\nare so fast you", "start": 503.44, "duration": 2.006}, {"text": "can afford to do things like\ntrial perturbations of letters.", "start": 505.446, "duration": 2.499}, {"text": "What else.", "start": 510.82, "duration": 1.219}, {"text": "In the old days, which\nmeans pre-Google,", "start": 512.039, "duration": 2.731}, {"text": "every search engine\non the web would", "start": 514.77, "duration": 3.26}, {"text": "have a dictionary that\nsays, for given word,", "start": 518.03, "duration": 3.23}, {"text": "give me all of the documents\ncontaining that word.", "start": 521.26, "duration": 2.86}, {"text": "Google doesn't do it that\nway, but that's another story.", "start": 524.12, "duration": 4.64}, {"text": "It's less fancy, actually.", "start": 528.76, "duration": 2.11}, {"text": "Or when you log\ninto a system, you", "start": 530.87, "duration": 2.09}, {"text": "type your username and password.", "start": 532.96, "duration": 1.98}, {"text": "You look in a dictionary\nthat stores a username", "start": 534.94, "duration": 2.822}, {"text": "and, associated\nwith that username,", "start": 537.762, "duration": 1.458}, {"text": "all the information\nof that user.", "start": 539.22, "duration": 1.737}, {"text": "Every time you log into a\nweb system, or whatever,", "start": 540.957, "duration": 2.083}, {"text": "it is going through\na dictionary.", "start": 543.04, "duration": 2.4}, {"text": "So they're all over the place.", "start": 545.44, "duration": 2.08}, {"text": "One of the original\napplications is", "start": 547.52, "duration": 1.81}, {"text": "in writing\nprogramming languages.", "start": 549.33, "duration": 1.882}, {"text": "Some of the first\ncomputer programs", "start": 551.212, "duration": 1.458}, {"text": "were programming languages,\nso you could actually", "start": 552.67, "duration": 2.406}, {"text": "program them in\na reasonable way.", "start": 555.076, "duration": 1.374}, {"text": "Whenever you type a variable\nname the computer doesn't", "start": 561.86, "duration": 3.637}, {"text": "really think about\nthat variable name,", "start": 565.497, "duration": 1.583}, {"text": "it wants to think about\nan address in memory.", "start": 567.08, "duration": 2.42}, {"text": "And so you've got to\ntranslate that variable name", "start": 569.5, "duration": 2.32}, {"text": "into a real, physical address\nin the machine, or a position", "start": 571.82, "duration": 4.52}, {"text": "on the stack, or whatever\nit is in real life.", "start": 576.34, "duration": 3.61}, {"text": "In the old days\nof Python, I guess", "start": 579.95, "duration": 2.0}, {"text": "this is pre-Python\n2 or so, 2.1, I", "start": 581.95, "duration": 3.6}, {"text": "don't remember the\nexact transition it was.", "start": 585.55, "duration": 2.84}, {"text": "In the interpreter,\nthere was the dictionary", "start": 588.39, "duration": 2.369}, {"text": "of all your global\nvariables, there's", "start": 590.759, "duration": 1.541}, {"text": "a dictionary of all\nyour local variables.", "start": 592.3, "duration": 2.12}, {"text": "And that was-- it\nwas right there.", "start": 594.42, "duration": 4.266}, {"text": "I mean you could\nmodify the dictionary,", "start": 598.686, "duration": 1.624}, {"text": "you could do crazy things.", "start": 600.31, "duration": 1.083}, {"text": "And all the\nvariables were there.", "start": 601.393, "duration": 2.127}, {"text": "And so they'd match the\nkey to the actual value", "start": 603.52, "duration": 2.53}, {"text": "stored in the variable.", "start": 606.05, "duration": 1.47}, {"text": "They don't do that anymore\nbecause it's a little slow,", "start": 607.52, "duration": 2.4}, {"text": "but-- and you could\ndo better in practice.", "start": 609.92, "duration": 2.099}, {"text": "But at the very least, when\nyou're compiling the thing,", "start": 612.019, "duration": 2.291}, {"text": "you need a dictionary.", "start": 614.31, "duration": 1.76}, {"text": "And then, later on, you can\ndo more efficient lookups.", "start": 616.07, "duration": 4.05}, {"text": "Let's see.", "start": 620.12, "duration": 0.54}, {"text": "On the internet there\nare hash tables all over,", "start": 623.58, "duration": 2.91}, {"text": "like in your router.", "start": 626.49, "duration": 2.24}, {"text": "Router needs to know\nall the machines that", "start": 628.73, "duration": 1.75}, {"text": "are connected to it.", "start": 630.48, "duration": 0.833}, {"text": "Each machine has an IP address,\nso when you get a packet in,", "start": 631.313, "duration": 2.562}, {"text": "and it says, deliver to\nthis IP address, you see,", "start": 633.875, "duration": 2.165}, {"text": "oh, is it in my dictionary\nof all the machines", "start": 636.04, "duration": 2.02}, {"text": "that are directly\nconnected to me?", "start": 638.06, "duration": 1.416}, {"text": "If so, send it there.", "start": 639.476, "duration": 1.473}, {"text": "If it's not then it has\nto find the right subnet.", "start": 640.949, "duration": 2.041}, {"text": "That's not quite a\ndictionary problem,", "start": 642.99, "duration": 1.583}, {"text": "a little more complicated.", "start": 644.573, "duration": 1.247}, {"text": "But for looking up local\nmachines, it's a dictionary.", "start": 645.82, "duration": 3.49}, {"text": "Routers use dictionaries because\nthey need to go really fast.", "start": 649.31, "duration": 2.62}, {"text": "They're getting a billion\npackets every second.", "start": 651.93, "duration": 3.52}, {"text": "Also, in the network\nstack of a machine,", "start": 655.45, "duration": 3.74}, {"text": "when you come in you\nget it packet delivered", "start": 659.19, "duration": 2.75}, {"text": "to a particular port, you need\nto say, oh, which application,", "start": 661.94, "duration": 3.04}, {"text": "or which socket is\nconnected to this port?", "start": 664.98, "duration": 1.9}, {"text": "All of these things\nare dictionaries.", "start": 666.88, "duration": 1.75}, {"text": "The point is they're\nin, basically,", "start": 668.63, "duration": 1.458}, {"text": "everything you've ever\nused, virtual memory,", "start": 670.088, "duration": 2.602}, {"text": "I mean, they're\nall over the place.", "start": 672.69, "duration": 2.37}, {"text": "There are also some more\nsubtle applications,", "start": 675.06, "duration": 1.875}, {"text": "where it is not obvious\nthat's it a dictionary,", "start": 676.935, "duration": 1.958}, {"text": "but still, we use\nthis idea of hashing", "start": 678.893, "duration": 1.757}, {"text": "we're going to talk about today.", "start": 680.65, "duration": 1.58}, {"text": "Like searching in a string.", "start": 682.23, "duration": 3.47}, {"text": "So when you hit-- I don't\nknow-- in your favorite editor,", "start": 690.35, "duration": 4.46}, {"text": "you do Control-F, or\nControl-S, or slash,", "start": 694.81, "duration": 2.04}, {"text": "or whatever your way of\nsearching for something", "start": 696.85, "duration": 2.15}, {"text": "is, and you type start typing.", "start": 699.0, "duration": 2.53}, {"text": "If your editor is\nclever, it will", "start": 701.53, "duration": 2.4}, {"text": "use hashing in order to\nsearch for that string.", "start": 703.93, "duration": 2.33}, {"text": "It's a faster way to do it.", "start": 706.26, "duration": 3.51}, {"text": "If you use grep, for example, in\nUnix it does it in a fancy way.", "start": 709.77, "duration": 4.64}, {"text": "Every time you do\na Google search", "start": 714.41, "duration": 1.83}, {"text": "it's essentially using this.", "start": 716.24, "duration": 1.91}, {"text": "It's solving this problem.", "start": 718.15, "duration": 1.16}, {"text": "I don't know what algorithm,\nbut we could guess.", "start": 719.31, "duration": 2.02}, {"text": "Using the algorithms we'll\ncover in next lecture.", "start": 721.33, "duration": 2.76}, {"text": "It wouldn't surprise me.", "start": 724.09, "duration": 2.56}, {"text": "Also, if you have\na couple strings", "start": 726.65, "duration": 2.01}, {"text": "and you want to know what they\nhave in common, how similar", "start": 728.66, "duration": 5.88}, {"text": "they are?", "start": 734.54, "duration": 0.844}, {"text": "Example, you have\ntwo DNA strings.", "start": 735.384, "duration": 1.416}, {"text": "You want to see how similar\nthey are, you use hashing.", "start": 736.8, "duration": 3.68}, {"text": "And you're going to do that\nin the next problem set, PS4,", "start": 740.48, "duration": 3.35}, {"text": "which goes out on Thursday.", "start": 743.83, "duration": 3.17}, {"text": "Also, for things like file\nand directory synchronization.", "start": 747.0, "duration": 4.99}, {"text": "So on Unix, if you rsync\nor unison, or, I guess,", "start": 758.87, "duration": 3.9}, {"text": "modern day-- these\ndays, Dropbox, MIT", "start": 762.77, "duration": 3.97}, {"text": "startup-- Whenever you're\nsynchronizing files between two", "start": 766.74, "duration": 2.84}, {"text": "locations, you use\nhashing to tell", "start": 769.58, "duration": 1.43}, {"text": "whether a file has changed,\nor whether a directory has", "start": 771.01, "duration": 2.25}, {"text": "changed.", "start": 773.26, "duration": 0.66}, {"text": "That's a big idea.", "start": 773.92, "duration": 3.02}, {"text": "Fairly modern idea.", "start": 776.94, "duration": 3.0}, {"text": "And also in\ncryptography-- this will", "start": 779.94, "duration": 2.27}, {"text": "be a topic of next\nTuesday's lecture.", "start": 782.21, "duration": 5.27}, {"text": "If you're transferring\na file and you", "start": 787.48, "duration": 2.04}, {"text": "want to check that you\nactually transferred that file,", "start": 789.52, "duration": 2.55}, {"text": "and there wasn't some person in\nthe middle corrupting your file", "start": 792.07, "duration": 3.602}, {"text": "and making it look like it\nwas what you wanted it to be,", "start": 795.672, "duration": 2.333}, {"text": "you use something called\ncryptographic hash functions,", "start": 798.005, "duration": 3.415}, {"text": "which [INAUDIBLE] will\ntalk about on Tuesday.", "start": 801.42, "duration": 3.0}, {"text": "So tons of motivation\nfor dictionaries.", "start": 804.42, "duration": 2.81}, {"text": "Let's actually do it,\nsee how they are done.", "start": 807.23, "duration": 5.61}, {"text": "We're going to start with sort\nof a very simple straw man,", "start": 815.63, "duration": 5.36}, {"text": "and then we're going to improve\nit until, by the end of today,", "start": 820.99, "duration": 3.099}, {"text": "we have a really good way\nto solve the dictionary", "start": 824.089, "duration": 2.041}, {"text": "problem in constant\ntime for operation.", "start": 826.13, "duration": 2.515}, {"text": "So the really simple approach\nis called a direct access table.", "start": 834.19, "duration": 2.79}, {"text": "So it's just a big\ntable, an array.", "start": 840.23, "duration": 5.22}, {"text": "You have-- the index into\nthe array is the key.", "start": 845.45, "duration": 8.89}, {"text": "So, store items in an\narray, indexed by key.", "start": 854.34, "duration": 13.19}, {"text": "And in fact, Python kind\nmakes you think about this", "start": 871.99, "duration": 2.21}, {"text": "because the Python notation\nfor accessing dictionaries", "start": 874.2, "duration": 2.32}, {"text": "is identical to the notation\nfor accessing arrays.", "start": 876.52, "duration": 3.6}, {"text": "But with arrays, the\nkeys are restricted", "start": 880.12, "duration": 1.69}, {"text": "to be non-negative integers,\n0 through n minus 1.", "start": 881.81, "duration": 3.347}, {"text": "So why not just\nimplement it that way?", "start": 885.157, "duration": 1.583}, {"text": "If your keys happen\nto be integers", "start": 886.74, "duration": 2.4}, {"text": "I could just store all my\nitems in a giant array.", "start": 889.14, "duration": 3.27}, {"text": "So if I just want to store\nan item here with key 2,", "start": 892.41, "duration": 3.975}, {"text": "call that, maybe, item\n2, I just put that there.", "start": 896.385, "duration": 3.745}, {"text": "If I want to store\nsomething with key 4", "start": 900.13, "duration": 2.88}, {"text": "I'll just put it there.", "start": 903.01, "duration": 1.55}, {"text": "Everything else is going to\nbe null, or none, or whatever.", "start": 904.56, "duration": 3.39}, {"text": "So lots of blank entries.", "start": 907.95, "duration": 1.34}, {"text": "Whatever keys I don't use I'll\njust put a null value there.", "start": 909.29, "duration": 4.09}, {"text": "Every key that I want to\nput into the dictionary", "start": 913.38, "duration": 2.62}, {"text": "I'll just store it at the\ncorresponding position.", "start": 916.0, "duration": 3.62}, {"text": "What's bad about this?", "start": 919.62, "duration": 1.1}, {"text": "Yeah.", "start": 925.06, "duration": 0.5}, {"text": "AUDIENCE: It's hard to associate\nsomething with just an integer.", "start": 925.56, "duration": 2.819}, {"text": "PROFESSOR: Hard to associate\nsomething with an integer.", "start": 928.379, "duration": 2.291}, {"text": "Good.", "start": 930.67, "duration": 0.5}, {"text": "That's one problem.", "start": 931.17, "duration": 2.19}, {"text": "There's actually two big\nproblems with this structure.", "start": 933.36, "duration": 2.74}, {"text": "I want both of them.", "start": 936.1, "duration": 1.48}, {"text": "So bad-- badness number one\nis keys may not be integers.", "start": 937.58, "duration": 10.46}, {"text": "Good.", "start": 960.021, "duration": 0.499}, {"text": "Another problem.", "start": 963.07, "duration": 1.684}, {"text": "Yeah.", "start": 964.754, "duration": 0.5}, {"text": "AUDIENCE: Possibility\nof collision.", "start": 965.254, "duration": 1.496}, {"text": "PROFESSOR: Possibility\nof collision.", "start": 966.75, "duration": 1.499}, {"text": "So here there's no collisions.", "start": 968.249, "duration": 1.291}, {"text": "We'll get to\ncollisions in a moment,", "start": 969.54, "duration": 1.5}, {"text": "but a collision\nis when two items", "start": 971.04, "duration": 1.98}, {"text": "go to the same\nslot in this table.", "start": 973.02, "duration": 3.31}, {"text": "And we defined the problem\nso there weren't collisions.", "start": 976.33, "duration": 2.85}, {"text": "We said whenever we insert\nitem with the same key you", "start": 979.18, "duration": 2.21}, {"text": "overwrite whatever is there.", "start": 981.39, "duration": 1.32}, {"text": "So collisions are OK.", "start": 982.71, "duration": 0.92}, {"text": "They will be a problem in a\nmoment, so save your answer.", "start": 983.63, "duration": 2.41}, {"text": "Yeah?", "start": 986.04, "duration": 0.5}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 986.54, "duration": 0.875}, {"text": "PROFESSOR: Running time?", "start": 989.511, "duration": 0.999}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 990.51, "duration": 1.56}, {"text": "PROFESSOR: For deletion?", "start": 992.07, "duration": 1.13}, {"text": "Actually, running time\nis going to be great.", "start": 993.2, "duration": 1.833}, {"text": "If I want to insert-- I\nmean, I do these operations", "start": 995.033, "duration": 2.827}, {"text": "but on array instead\nof a dictionary.", "start": 997.86, "duration": 2.04}, {"text": "So if I want insert I\njust put something there.", "start": 999.9, "duration": 2.53}, {"text": "If I want to delete I\njust set it to null.", "start": 1002.43, "duration": 2.05}, {"text": "If I want to search I just\ngo there and see is it null?", "start": 1004.48, "duration": 2.47}, {"text": "Yeah?", "start": 1006.95, "duration": 0.651}, {"text": "AUDIENCE: It's a\ngigantic memory hog", "start": 1007.601, "duration": 1.499}, {"text": "PROFESSOR: It's\ngigantic memory hog.", "start": 1009.1, "duration": 1.5}, {"text": "I like that phrasing.", "start": 1010.6, "duration": 1.235}, {"text": "Not always of course.", "start": 1017.75, "duration": 1.17}, {"text": "If it happens that your keys\nare-- the set of possible keys", "start": 1018.92, "duration": 4.18}, {"text": "is not too giant\nthen life is good.", "start": 1023.1, "duration": 3.37}, {"text": "Let's see If I cannot\nkill somebody today.", "start": 1026.47, "duration": 2.123}, {"text": "Oh yes.", "start": 1028.593, "duration": 1.266}, {"text": "Very good.", "start": 1029.859, "duration": 1.791}, {"text": "But if you have a\nlot of keys, you", "start": 1031.65, "duration": 1.84}, {"text": "need one slot in\nyour array per key.", "start": 1033.49, "duration": 4.359}, {"text": "That could be a lot.", "start": 1037.849, "duration": 1.441}, {"text": "Maybe your keys are\n64-bit integers.", "start": 1039.29, "duration": 4.63}, {"text": "Then you need 264 slots just\nto store one measly dictionary.", "start": 1043.92, "duration": 4.169}, {"text": "That's huge.", "start": 1048.089, "duration": 2.121}, {"text": "I guess there's also the\nrunning time of initialize that.", "start": 1050.21, "duration": 2.79}, {"text": "But at the very least,\nyou have huge space hog.", "start": 1053.0, "duration": 2.53}, {"text": "This is bad.", "start": 1055.53, "duration": 1.88}, {"text": "So we're going to fix both of\nthese problems one at a time.", "start": 1057.41, "duration": 3.41}, {"text": "First problem we're\ngoing to talk about", "start": 1060.82, "duration": 2.74}, {"text": "is what if your keys\naren't integers?", "start": 1063.56, "duration": 2.431}, {"text": "Because if your\nkeys aren't integers", "start": 1065.991, "duration": 1.499}, {"text": "you can't use this at all.", "start": 1067.49, "duration": 0.94}, {"text": "So lets at least get\nsomething that works.", "start": 1068.43, "duration": 1.749}, {"text": "And this is a notion\ncalled prehashing.", "start": 1078.62, "duration": 1.79}, {"text": "I guess different people\ncall it different things.", "start": 1083.157, "duration": 2.083}, {"text": "Unfortunately Python\ncalls it hash.", "start": 1085.24, "duration": 2.56}, {"text": "It's not hashing,\nit's prehashing.", "start": 1087.8, "duration": 3.91}, {"text": "Emphasized the \"pre\" here.", "start": 1091.71, "duration": 2.25}, {"text": "So prehash function\nmaps whatever keys", "start": 1093.96, "duration": 5.29}, {"text": "you have to\nnon-negative integers.", "start": 1099.25, "duration": 3.856}, {"text": "At this point we're not\nworrying about how big", "start": 1108.314, "duration": 1.916}, {"text": "those integers are.", "start": 1110.23, "duration": 0.791}, {"text": "They could be giant.", "start": 1111.021, "duration": 1.249}, {"text": "We're not going to fix the\nsecond problem til later.", "start": 1112.27, "duration": 2.65}, {"text": "First problem is if I have\nsome key, maybe it's a string,", "start": 1114.92, "duration": 2.89}, {"text": "it's whatever, it's an object,\nhow do I map it to some integer", "start": 1117.81, "duration": 4.872}, {"text": "so I could, at least\nin principle, put it", "start": 1122.682, "duration": 1.708}, {"text": "in a direct access table.", "start": 1124.39, "duration": 3.662}, {"text": "There's a theoretical\nanswer to how to do this,", "start": 1128.052, "duration": 1.958}, {"text": "and then there's the practical\nanswer. how to do this.", "start": 1130.01, "duration": 2.55}, {"text": "I'll start with\nthe mathematical.", "start": 1132.56, "duration": 3.15}, {"text": "In theory, I like this, keys\nare finite and discrete.", "start": 1135.71, "duration": 9.015}, {"text": "OK.", "start": 1148.011, "duration": 0.499}, {"text": "We know that anything\non the computer", "start": 1148.51, "duration": 2.07}, {"text": "could, ultimately, be written\ndown as a string of bits.", "start": 1150.58, "duration": 3.01}, {"text": "So a string of bits\nrepresents an integer.", "start": 1153.59, "duration": 2.815}, {"text": "So we're done.", "start": 1156.405, "duration": 1.135}, {"text": "So in theory, this is easy.", "start": 1164.16, "duration": 3.68}, {"text": "And we're going to\nassume in this class,", "start": 1167.84, "duration": 2.371}, {"text": "because it's sort\nof a theory class,", "start": 1170.211, "duration": 1.499}, {"text": "that this is what's happening.", "start": 1171.71, "duration": 1.492}, {"text": "At least for\nanalysis, we're always", "start": 1173.202, "duration": 1.458}, {"text": "going to analyze things as\nif this is what's happening.", "start": 1174.66, "duration": 2.38}, {"text": "Now in reality, people\ndon't always do this.", "start": 1177.04, "duration": 2.03}, {"text": "In particular-- I'll\ngo somewhere else.", "start": 1179.07, "duration": 4.99}, {"text": "In Python it's not\nquite so simple,", "start": 1184.06, "duration": 21.757}, {"text": "but at least you get\nto see what's going on.", "start": 1205.817, "duration": 1.833}, {"text": "There's a function called hash,\nwhich should be called prehash,", "start": 1207.65, "duration": 3.29}, {"text": "and it, given an\nobject, it produces", "start": 1210.94, "duration": 3.05}, {"text": "a non-- I'm not sure,\nactually, if it's non-negative.", "start": 1213.99, "duration": 2.59}, {"text": "It's not a big deal if it has\na minus sign because then you", "start": 1216.58, "duration": 3.14}, {"text": "could just use this and\nget rid of the sign.", "start": 1219.72, "duration": 2.05}, {"text": "But it maps every\nobject to an integer,", "start": 1221.77, "duration": 2.82}, {"text": "or every hashable\nobject, technically.", "start": 1224.59, "duration": 2.627}, {"text": "But pretty much\nanything can be mapped", "start": 1227.217, "duration": 1.583}, {"text": "to an integer, one\nway or another.", "start": 1228.8, "duration": 2.55}, {"text": "And so for example, if\nyou given it an integer", "start": 1231.35, "duration": 2.0}, {"text": "it just returns the integer.", "start": 1233.35, "duration": 1.69}, {"text": "So that's pretty easy.", "start": 1235.04, "duration": 1.18}, {"text": "If you give it a string\nit does something.", "start": 1236.22, "duration": 3.08}, {"text": "I don't know exactly\nwhat it does,", "start": 1239.3, "duration": 1.43}, {"text": "but there are some issues.", "start": 1240.73, "duration": 1.083}, {"text": "For example, hash of\nthis string, backslash 0B", "start": 1241.813, "duration": 9.855}, {"text": "is equal to the hash of\nbackslash 0 backslash 0C 64.", "start": 1251.668, "duration": 10.949}, {"text": "It's a little tricky\nto find these examples,", "start": 1262.617, "duration": 1.833}, {"text": "but they're out there.", "start": 1264.45, "duration": 1.69}, {"text": "And I guess, this is\nprobably the lowest one", "start": 1266.14, "duration": 2.25}, {"text": "in a certain measure.", "start": 1268.39, "duration": 2.25}, {"text": "So it's a concern.", "start": 1270.64, "duration": 1.822}, {"text": "In practice you have to be\ncareful about these things", "start": 1272.462, "duration": 2.208}, {"text": "because what you'd\nlike-- in an ideal world,", "start": 1274.67, "duration": 2.87}, {"text": "and in the theoretical world--\nthis prehash function of x,", "start": 1277.54, "duration": 8.44}, {"text": "if it equals the\nprehash function of y,", "start": 1285.98, "duration": 1.84}, {"text": "this should only\nhappen when x=y,", "start": 1287.82, "duration": 3.56}, {"text": "when they're the same thing.", "start": 1291.38, "duration": 1.25}, {"text": "And equals equal sense, I guess,\nwould be the technical version.", "start": 1295.45, "duration": 4.65}, {"text": "Sadly, in Python this\nis not quite true.", "start": 1300.1, "duration": 2.73}, {"text": "But mostly true.", "start": 1302.83, "duration": 1.13}, {"text": "Let's see.", "start": 1308.03, "duration": 2.39}, {"text": "If you define a custom\nobject, you may know this,", "start": 1310.42, "duration": 3.04}, {"text": "there is an __hash__\nmethod you can implement,", "start": 1313.46, "duration": 4.56}, {"text": "which tells Python what\nto do when you call hash", "start": 1318.02, "duration": 3.72}, {"text": "of your object.", "start": 1321.74, "duration": 0.74}, {"text": "If you don't, it\nuses the default", "start": 1322.48, "duration": 2.9}, {"text": "of id, which is the\nphysical location", "start": 1325.38, "duration": 2.68}, {"text": "of your object in memory.", "start": 1328.06, "duration": 1.099}, {"text": "So as long as your object\nisn't moving around in memory", "start": 1329.159, "duration": 2.291}, {"text": "this is a pretty\ngood hash function", "start": 1331.45, "duration": 1.68}, {"text": "because no two items occupy\nthe same space in memory.", "start": 1333.13, "duration": 4.72}, {"text": "So that's just implementation\nside of things.", "start": 1337.85, "duration": 3.58}, {"text": "Other implementation side\nof things is in Python,", "start": 1341.43, "duration": 6.58}, {"text": "well, there's this distinction\nbetween objects and keys,", "start": 1348.01, "duration": 3.06}, {"text": "I guess you would say.", "start": 1351.07, "duration": 0.95}, {"text": "You really don't want\nthis prehash function", "start": 1352.02, "duration": 1.96}, {"text": "to change value.", "start": 1353.98, "duration": 2.39}, {"text": "In, say, a direct access\ntable, if you store--", "start": 1356.37, "duration": 2.34}, {"text": "you take an item, you\ncompute the prehash function", "start": 1358.71, "duration": 2.55}, {"text": "of the key in there, and you\nthrow it in, and it says,", "start": 1361.26, "duration": 4.13}, {"text": "oh, prehash value is four.", "start": 1365.39, "duration": 2.225}, {"text": "Then you put it\nin position four.", "start": 1367.615, "duration": 1.375}, {"text": "If that value change, then when\nyou go to search for that key,", "start": 1368.99, "duration": 3.29}, {"text": "and you call prehash of that\nthing, and if it give you five,", "start": 1372.28, "duration": 2.5}, {"text": "you look in position five, and\nyou say, oh, it's not there.", "start": 1374.78, "duration": 2.79}, {"text": "So prehash really\nshould not change.", "start": 1377.57, "duration": 2.5}, {"text": "If you ever implement this\nfunction don't mess with it.", "start": 1380.07, "duration": 3.07}, {"text": "I mean, make sure it's\ndefined in such a way", "start": 1383.14, "duration": 2.12}, {"text": "that it doesn't\nchange over time.", "start": 1385.26, "duration": 1.71}, {"text": "Otherwise, you won't be able to\nfind your items in the table.", "start": 1386.97, "duration": 3.652}, {"text": "Python can't protect\nyou from that.", "start": 1390.622, "duration": 1.458}, {"text": "This is why, for example,\nif you have a list,", "start": 1395.32, "duration": 2.48}, {"text": "which is a mutable object, you\ncannot put it into a hash table", "start": 1397.8, "duration": 2.73}, {"text": "as a key value because it\nwould change over time.", "start": 1400.53, "duration": 4.84}, {"text": "Potentially, you'd append\nto the list, or whatever.", "start": 1405.37, "duration": 4.37}, {"text": "All right.", "start": 1409.74, "duration": 1.94}, {"text": "So hopefully you're\nreasonably happy with this.", "start": 1411.68, "duration": 2.24}, {"text": "You could also\nthink of it is we're", "start": 1413.92, "duration": 1.07}, {"text": "going to assume keys are\nnon-negative integers.", "start": 1414.99, "duration": 1.958}, {"text": "But in practice,\nanything you have you", "start": 1416.948, "duration": 1.807}, {"text": "can map to an integer,\none way or another.", "start": 1418.755, "duration": 4.015}, {"text": "The bigger problem\nin a certain sense,", "start": 1422.77, "duration": 1.61}, {"text": "or the more interesting\nproblem is reducing space.", "start": 1424.38, "duration": 4.4}, {"text": "So how do we do that?", "start": 1428.78, "duration": 1.08}, {"text": "This would be hashing.", "start": 1438.42, "duration": 1.32}, {"text": "This is sort of the magic\npart of today's lecture.", "start": 1443.88, "duration": 2.96}, {"text": "In case you're\nwondering, hashing", "start": 1446.84, "duration": 2.36}, {"text": "has nothing to do with hashish.", "start": 1449.2, "duration": 2.81}, {"text": "Hashish is a Arabic root word\nunrelated to the Germanic,", "start": 1452.01, "duration": 5.6}, {"text": "which is hachet, I believe.", "start": 1457.61, "duration": 2.61}, {"text": "Yeah.", "start": 1460.22, "duration": 0.68}, {"text": "Or hacheh-- I guess,\nsomething like that.", "start": 1460.9, "duration": 2.44}, {"text": "I'm not very good at German.", "start": 1463.34, "duration": 1.19}, {"text": "Which means hatchet.", "start": 1464.53, "duration": 1.38}, {"text": "OK", "start": 1465.91, "duration": 0.5}, {"text": "It's like you take your\nkey, and you cut it up", "start": 1466.41, "duration": 1.99}, {"text": "into little pieces, and you mix\nthem around and cut and dice,", "start": 1468.4, "duration": 2.66}, {"text": "and it's like cooking.", "start": 1471.06, "duration": 1.51}, {"text": "OK.", "start": 1472.57, "duration": 0.941}, {"text": "What?", "start": 1473.511, "duration": 0.499}, {"text": "AUDIENCE: Hash browns.", "start": 1474.01, "duration": 0.89}, {"text": "PROFESSOR: Hash\nbrowns, for example.", "start": 1474.9, "duration": 1.5}, {"text": "Yeah, same root.", "start": 1476.4, "duration": 1.881}, {"text": "OK.", "start": 1478.281, "duration": 0.499}, {"text": "It's like the only two English\nwords with that kind of hash.", "start": 1478.78, "duration": 2.831}, {"text": "OK.", "start": 1481.611, "duration": 0.499}, {"text": "In our case, it's\na verb, to hash.", "start": 1482.11, "duration": 3.02}, {"text": "It means to cut into\npieces and mix around.", "start": 1485.13, "duration": 2.83}, {"text": "OK.", "start": 1487.96, "duration": 0.5}, {"text": "That won't really be clear\nuntil towards the end of today's", "start": 1488.46, "duration": 2.67}, {"text": "lecture, but we\nwill eventually get", "start": 1491.13, "duration": 1.47}, {"text": "to the etymology of hashing.", "start": 1492.6, "duration": 2.54}, {"text": "Or, we've got the etymology,\nbut why it's, actually,", "start": 1495.14, "duration": 2.92}, {"text": "why we use that term.", "start": 1498.06, "duration": 1.76}, {"text": "All right.", "start": 1499.82, "duration": 0.55}, {"text": "So the big idea is we\ntake all possible keys", "start": 1500.37, "duration": 10.49}, {"text": "and we want to reduce them\ndown to some small, small set", "start": 1510.86, "duration": 3.115}, {"text": "of integers.", "start": 1513.975, "duration": 0.5}, {"text": "Let me draw a picture of that.", "start": 1543.7, "duration": 2.11}, {"text": "So we have this giant\nspace of all possible keys.", "start": 1555.64, "duration": 6.125}, {"text": "We'll call this key space.", "start": 1561.765, "duration": 1.295}, {"text": "It's like outer\nspace, basically.", "start": 1566.08, "duration": 2.15}, {"text": "It's giant.", "start": 1568.23, "duration": 2.56}, {"text": "And if we stored a\ndirect access table,", "start": 1570.79, "duration": 1.88}, {"text": "this would also be giant.", "start": 1572.67, "duration": 1.06}, {"text": "And we don't want to do that.", "start": 1573.73, "duration": 2.8}, {"text": "We'd like to somehow map\nusing a hash function h down", "start": 1576.53, "duration": 4.97}, {"text": "to some smaller set.", "start": 1581.5, "duration": 1.3}, {"text": "How do I want to draw this?", "start": 1582.8, "duration": 2.51}, {"text": "Like an array.", "start": 1585.31, "duration": 0.67}, {"text": "So we're going to have possible\nvalues 0 up to m minus 1.", "start": 1590.82, "duration": 6.14}, {"text": "m is a new thing.", "start": 1596.96, "duration": 1.38}, {"text": "It's going to be the\nsize of our hash table.", "start": 1598.34, "duration": 2.06}, {"text": "Let's call the hash table.", "start": 1600.4, "duration": 1.23}, {"text": "I think we'll call it t also.", "start": 1605.107, "duration": 3.093}, {"text": "And we'd somehow like to map--", "start": 1608.2, "duration": 3.03}, {"text": "All right.", "start": 1611.23, "duration": 0.5}, {"text": "So there's a giant space\nof all possible keys,", "start": 1611.73, "duration": 3.07}, {"text": "but then there's a subset\nof keys that are actually", "start": 1614.8, "duration": 3.1}, {"text": "stored in this set,\nin this dictionary.", "start": 1617.9, "duration": 5.41}, {"text": "At any moment in\ntime there's some set", "start": 1623.31, "duration": 1.85}, {"text": "of keys that are present.", "start": 1625.16, "duration": 2.57}, {"text": "That set changes,\nbut at any moment", "start": 1627.73, "duration": 2.56}, {"text": "there's some keys that\nare actually there.", "start": 1630.29, "duration": 2.49}, {"text": "k1, k2, k3, k4.", "start": 1632.78, "duration": 4.4}, {"text": "I'd like to map them to\npositions in this table.", "start": 1637.18, "duration": 3.71}, {"text": "So maybe I store k2-- or\nactually, item 2 would go here.", "start": 1640.89, "duration": 5.7}, {"text": "In particular, this is when\nh of k2, if it equals zero,", "start": 1646.59, "duration": 7.41}, {"text": "then you'd put item 2 there.", "start": 1654.0, "duration": 2.0}, {"text": "Item 3, let's say,\nit's at position-- wow,", "start": 1656.0, "duration": 3.78}, {"text": "3 would be a bit of a\ncoincidence, but what the hell.", "start": 1659.78, "duration": 2.46}, {"text": "Maybe h or k3 equals 3.", "start": 1662.24, "duration": 4.39}, {"text": "Then you'd put item 3 here.", "start": 1666.63, "duration": 1.4}, {"text": "OK.", "start": 1670.54, "duration": 0.5}, {"text": "You get the idea.", "start": 1671.04, "duration": 0.71}, {"text": "So these four items each\nhave a special position", "start": 1671.75, "duration": 2.43}, {"text": "in their table.", "start": 1674.18, "duration": 1.35}, {"text": "And the idea is we would\nlike to be, m to be around n.", "start": 1675.53, "duration": 7.35}, {"text": "n is the number of keys In\nthe dictionary right now.", "start": 1687.55, "duration": 11.73}, {"text": "So if we could achieve\nthat, the size of the table", "start": 1699.28, "duration": 2.355}, {"text": "was proportional to the\nnumber of keys being stored", "start": 1701.635, "duration": 2.125}, {"text": "in the dictionary, that would\nbe good news because then", "start": 1703.76, "duration": 3.21}, {"text": "the space is not\ngigantic and hoggish.", "start": 1706.97, "duration": 3.14}, {"text": "It would just be linear,\nwhich is optimal.", "start": 1710.11, "duration": 3.547}, {"text": "So if we want to store\nm things, maybe we'll", "start": 1713.657, "duration": 1.833}, {"text": "use 2m space, a 3m\nspace, but not much more.", "start": 1715.49, "duration": 3.14}, {"text": "How the heck are we going\nto define such a function h?", "start": 1721.74, "duration": 3.4}, {"text": "Well, that's the\nrest of the lecture.", "start": 1725.14, "duration": 2.42}, {"text": "But even before we\ndefine a function h,", "start": 1727.56, "duration": 1.664}, {"text": "do you see any\nproblems with this?", "start": 1729.224, "duration": 1.416}, {"text": "Yeah.", "start": 1735.58, "duration": 0.566}, {"text": "AUDIENCE: [INAUDIBLE].", "start": 1736.146, "duration": 0.916}, {"text": "PROFESSOR: Yeah.", "start": 1742.764, "duration": 0.666}, {"text": "This space over here, this\nis pigeonhole principle.", "start": 1743.43, "duration": 2.13}, {"text": "The number of slots for\nyour pigeons over here", "start": 1745.56, "duration": 2.01}, {"text": "is way smaller than the\nnumber of possible pigeons.", "start": 1747.57, "duration": 2.67}, {"text": "So there are going\nto be two keys that", "start": 1750.24, "duration": 2.87}, {"text": "map to the same slot\nin the hash table.", "start": 1753.11, "duration": 3.88}, {"text": "This is what we\ncall a collision.", "start": 1756.99, "duration": 1.375}, {"text": "Let's call this, I\ndon't know, ki, kj.", "start": 1761.19, "duration": 3.31}, {"text": "h of ki equals h of kj,\nbut the keys are different.", "start": 1768.047, "duration": 7.453}, {"text": "So ki does not equal kj,\nyet their hash functions", "start": 1775.5, "duration": 5.42}, {"text": "are the same, hash\nvalues are the same.", "start": 1780.92, "duration": 1.92}, {"text": "We call that a collision.", "start": 1782.84, "duration": 1.82}, {"text": "And that's guaranteed to\nhappen a lot, yet somehow,", "start": 1784.66, "duration": 4.33}, {"text": "we can still make this work.", "start": 1788.99, "duration": 2.107}, {"text": "That's the magic.", "start": 1791.097, "duration": 0.708}, {"text": "And that is going\nto be chaining.", "start": 1797.64, "duration": 1.71}, {"text": "We've done these guys.", "start": 1799.35, "duration": 2.73}, {"text": "Next up is a technique for\ndealing with collisions.", "start": 1802.08, "duration": 3.184}, {"text": "There are two techniques\nfor dealing with collisions", "start": 1805.264, "duration": 2.166}, {"text": "we're going to\ntalk about in 006.", "start": 1807.43, "duration": 2.332}, {"text": "One is called chaining,\nand next Tuesday, we'll", "start": 1809.762, "duration": 1.958}, {"text": "see another method\ncalled open addressing.", "start": 1811.72, "duration": 3.73}, {"text": "But let's start with chaining.", "start": 1815.45, "duration": 1.72}, {"text": "The idea with chaining a simple.", "start": 1821.22, "duration": 3.51}, {"text": "If you have multiple items\nhere all with the same-- that", "start": 1824.73, "duration": 3.67}, {"text": "hash to the same position,\njust store them as a list.", "start": 1828.4, "duration": 4.46}, {"text": "I'm going to draw\nit as a linked list.", "start": 1832.86, "duration": 2.19}, {"text": "I think I need a\nbig picture here.", "start": 1862.85, "duration": 3.838}, {"text": "So we have our nice universe,\nvarious keys that we actually", "start": 1887.71, "duration": 7.56}, {"text": "have present.", "start": 1895.27, "duration": 2.43}, {"text": "So these are the keys\nin the dictionary,", "start": 1897.7, "duration": 5.04}, {"text": "and this is all of key space.", "start": 1902.74, "duration": 1.54}, {"text": "These guys map to\nslots in the table.", "start": 1913.17, "duration": 3.0}, {"text": "Some of them might\nmap to the same value.", "start": 1916.17, "duration": 2.32}, {"text": "So let's say k1 and k2,\nsuppose they collide.", "start": 1918.49, "duration": 6.485}, {"text": "So they both go this slot.", "start": 1924.975, "duration": 1.645}, {"text": "What we're going to store\nhere is a linked list", "start": 1926.62, "duration": 4.61}, {"text": "that stores item 1,\nand stores a pointer", "start": 1931.23, "duration": 5.52}, {"text": "to the next item,\nwhich is item 2.", "start": 1936.75, "duration": 4.7}, {"text": "And that's the end of the list.", "start": 1941.45, "duration": 1.93}, {"text": "Or you could-- however\nyou want to draw a null.", "start": 1943.38, "duration": 3.78}, {"text": "So however many items\nthere are, we're", "start": 1947.16, "duration": 3.16}, {"text": "going to have a linked list\nof that length in that slot.", "start": 1950.32, "duration": 3.38}, {"text": "So in particular, if there's\njust one item, like say,", "start": 1953.7, "duration": 3.74}, {"text": "this k3 here, maybe it\njust maps to this slot.", "start": 1957.44, "duration": 4.99}, {"text": "And maybe that's all\nthat maps to that slot.", "start": 1962.43, "duration": 1.92}, {"text": "In that case, we just\nsay, follow this item 3,", "start": 1964.35, "duration": 3.98}, {"text": "and there's no other items.", "start": 1968.33, "duration": 2.04}, {"text": "Some slots are going\nto be completely empty.", "start": 1970.37, "duration": 2.31}, {"text": "There nothing there so you\njust store a null pointer.", "start": 1972.68, "duration": 3.76}, {"text": "That is hashing with chaining.", "start": 1976.44, "duration": 1.71}, {"text": "It's pretty simple,\nvery simple really.", "start": 1978.15, "duration": 4.2}, {"text": "The only question is why would\nyou expect it to be any good?", "start": 1982.35, "duration": 3.2}, {"text": "Because, in the worst case,\nif you fix your hash function", "start": 1985.55, "duration": 3.41}, {"text": "here, h, there's going to\nbe a whole bunch of keys", "start": 1988.96, "duration": 2.96}, {"text": "that all map to the same slot.", "start": 1991.92, "duration": 1.45}, {"text": "And so in the worst case, those\nare the keys that you insert,", "start": 1993.37, "duration": 2.96}, {"text": "and they all go here.", "start": 1996.33, "duration": 1.417}, {"text": "And then you have this\nfancy data structure.", "start": 1997.747, "duration": 1.833}, {"text": "And in the end, all you have is\na linked list of all n items.", "start": 1999.58, "duration": 3.52}, {"text": "So the worst case is theta n.", "start": 2003.1, "duration": 7.85}, {"text": "And this is going to be true for\nany hashing scheme, actually.", "start": 2010.95, "duration": 3.57}, {"text": "In the worst case,\nhashing sucks.", "start": 2014.52, "duration": 2.19}, {"text": "Yet in practice, it works\nreally, really well.", "start": 2016.71, "duration": 2.69}, {"text": "And the reason is\nrandomization, essentially,", "start": 2019.4, "duration": 2.56}, {"text": "that this hash function,\nunless you're really unlucky,", "start": 2021.96, "duration": 3.66}, {"text": "the hash function will\nnicely distribute your items,", "start": 2025.62, "duration": 2.65}, {"text": "and most of these lists\nwill have constant length.", "start": 2028.27, "duration": 4.43}, {"text": "We're going to prove\nthat under an assumption.", "start": 2032.7, "duration": 8.02}, {"text": "Well have to warm\nup a little bit.", "start": 2040.72, "duration": 1.66}, {"text": "But I'm also going to cop\nout a little m as you'll see.", "start": 2047.0, "duration": 2.739}, {"text": "So in 006 we're going to make\nan assumption called Simple", "start": 2062.96, "duration": 4.29}, {"text": "Uniform Hashing.", "start": 2067.25, "duration": 1.83}, {"text": "OK.", "start": 2069.08, "duration": 2.175}, {"text": "And this is an assumption,\nit's an unrealistic assumption.", "start": 2071.255, "duration": 4.595}, {"text": "I would go so far as to say\nit's false, a false assumption.", "start": 2075.85, "duration": 4.48}, {"text": "But it's really\nconvenient for analysis,", "start": 2080.33, "duration": 1.906}, {"text": "and it's going to\nmake it obvious", "start": 2082.236, "duration": 1.374}, {"text": "why chaining is a good idea.", "start": 2083.61, "duration": 1.97}, {"text": "Sadly, the assumption\nisn't quite true,", "start": 2085.58, "duration": 2.559}, {"text": "but it gives you a flavor.", "start": 2088.139, "duration": 1.83}, {"text": "If you want to see why\nhashing is actually good,", "start": 2089.969, "duration": 2.111}, {"text": "I'm going to hint at it\nat the end of lecture", "start": 2092.08, "duration": 1.875}, {"text": "but really should\ntake 6.046 Yeah.", "start": 2093.955, "duration": 1.656}, {"text": "AUDIENCE: [INAUDIBLE] question.", "start": 2095.611, "duration": 1.291}, {"text": "Is the hashing\nfunction [INAUDIBLE]?", "start": 2096.902, "duration": 2.28}, {"text": "Like, how do we know the\narray is still [INAUDIBLE]?", "start": 2099.182, "duration": 2.166}, {"text": "PROFESSOR: OK.", "start": 2101.348, "duration": 0.583}, {"text": "The hashing function-- I guess\nI didn't specify up here.", "start": 2101.931, "duration": 5.689}, {"text": "The hashing function maps\nyour universe to 0, 1,", "start": 2107.62, "duration": 6.54}, {"text": "up to m minus 1,\nThat's the definition.", "start": 2114.16, "duration": 3.36}, {"text": "So it's guaranteed to reduce the\nspace of keys to just m slots.", "start": 2117.52, "duration": 5.57}, {"text": "So your hashing function\nneeds to know what m is.", "start": 2123.09, "duration": 2.377}, {"text": "In reality there's not going\nto be one hashing function,", "start": 2125.467, "duration": 2.333}, {"text": "there's going to be 1 for each\nm, or at least one for each m.", "start": 2127.8, "duration": 2.869}, {"text": "And so, depending on\nhow big your table is,", "start": 2130.669, "duration": 1.791}, {"text": "you use the corresponding\nhash function.", "start": 2132.46, "duration": 1.877}, {"text": "Yeah, good question.", "start": 2134.337, "duration": 0.833}, {"text": "So the hash function\nis what does", "start": 2135.17, "duration": 1.375}, {"text": "the work of reducing\nyour key space down", "start": 2136.545, "duration": 2.565}, {"text": "to small set of slots.", "start": 2139.11, "duration": 1.62}, {"text": "So that's what's going\nto give us low space.", "start": 2140.73, "duration": 3.45}, {"text": "OK.", "start": 2144.18, "duration": 0.67}, {"text": "But now, how do we get low time?", "start": 2144.85, "duration": 2.156}, {"text": "Let me just state this\nassumption and get to business.", "start": 2147.006, "duration": 2.249}, {"text": "Simply, uniform hashing\nis, essentially,", "start": 2193.3, "duration": 2.21}, {"text": "two probabilistic assumptions.", "start": 2195.51, "duration": 2.54}, {"text": "The first one is uniformity.", "start": 2198.05, "duration": 3.31}, {"text": "If you take some\nkey in your space", "start": 2201.36, "duration": 2.71}, {"text": "that you want to store\nthe hash function", "start": 2204.07, "duration": 2.1}, {"text": "maps it to a uniform\nrandom choice.", "start": 2206.17, "duration": 3.06}, {"text": "This is, of course, is\nwhat you want to happen.", "start": 2209.23, "duration": 2.31}, {"text": "Each of these slots here is\nequally likely to be hashed to.", "start": 2211.54, "duration": 6.731}, {"text": "OK.", "start": 2218.271, "duration": 0.499}, {"text": "That's a good start.", "start": 2218.77, "duration": 1.25}, {"text": "But to do proper analysis,\nnot only do we uniformity,", "start": 2220.02, "duration": 3.53}, {"text": "we also need independence.", "start": 2223.55, "duration": 2.195}, {"text": "So not only is this true\nfor each key individually,", "start": 2225.745, "duration": 2.125}, {"text": "but it's true for all\nthe keys together.", "start": 2227.87, "duration": 2.34}, {"text": "So if key one maps to\na uniform random place,", "start": 2230.21, "duration": 3.29}, {"text": "no matter where it\ngoes, key two also", "start": 2233.5, "duration": 3.34}, {"text": "matches to a uniform\nrandom place.", "start": 2236.84, "duration": 1.43}, {"text": "And no matter\nwhere those two go,", "start": 2238.27, "duration": 1.374}, {"text": "key three maps to a\nuniform random place.", "start": 2239.644, "duration": 2.396}, {"text": "This really can't be true.", "start": 2242.04, "duration": 1.6}, {"text": "But if it's true, we can prove\nthat this takes constant time.", "start": 2243.64, "duration": 4.19}, {"text": "So let me do that.", "start": 2247.83, "duration": 1.67}, {"text": "So under this assumption,\nwe can analyze", "start": 2261.18, "duration": 4.48}, {"text": "hashing-- hashing with chaining\nis what this method is called.", "start": 2265.66, "duration": 5.74}, {"text": "So let's do it", "start": 2271.4, "duration": 5.0}, {"text": "I want to know-- I\ngot to cheat, sorry.", "start": 2276.4, "duration": 2.919}, {"text": "I got to remember the notation.", "start": 2279.319, "duration": 1.291}, {"text": "I don't have any\ngood notation here.", "start": 2283.69, "duration": 1.77}, {"text": "All right.", "start": 2285.46, "duration": 2.64}, {"text": "What I'd like to know is the\nexpected length of a chain.", "start": 2288.1, "duration": 4.865}, {"text": "OK.", "start": 2298.46, "duration": 0.5}, {"text": "Now this is if I have n keys\nthat are stored in the table,", "start": 2298.96, "duration": 6.2}, {"text": "and m slots in the\ntable, then what", "start": 2305.16, "duration": 4.06}, {"text": "is the expected\nlength of a chain?", "start": 2309.22, "duration": 2.81}, {"text": "Any suggestions.", "start": 2312.03, "duration": 1.101}, {"text": "Yeah.", "start": 2313.131, "duration": 0.499}, {"text": "AUDIENCE: 1 over m to the n.", "start": 2313.63, "duration": 2.24}, {"text": "PROFESSOR: 1 over m to the n?", "start": 2315.87, "duration": 1.61}, {"text": "That's going to be a\nprobability of something.", "start": 2317.48, "duration": 4.22}, {"text": "Not quite.", "start": 2321.7, "duration": 0.5}, {"text": "AUDIENCE: [INAUDIBLE]", "start": 2322.2, "duration": 1.17}, {"text": "PROFESSOR: That's\nbetween 0 and 1.", "start": 2323.37, "duration": 1.416}, {"text": "It's probably at least\none, or something.", "start": 2324.786, "duration": 2.314}, {"text": "Yeah.", "start": 2327.1, "duration": 0.755}, {"text": "AUDIENCE: m over n.", "start": 2327.855, "duration": 1.335}, {"text": "PROFESSOR: n over m, yeah.", "start": 2329.19, "duration": 1.946}, {"text": "It's really easy.", "start": 2334.63, "duration": 1.44}, {"text": "The chance of a key going to\na particular slot is 1 over m.", "start": 2336.07, "duration": 3.94}, {"text": "They're all independent, so\nit's 1 over m, plus 1 over m,", "start": 2340.01, "duration": 3.01}, {"text": "plus 1 over m, n times.", "start": 2343.02, "duration": 2.14}, {"text": "So it's n over m.", "start": 2345.16, "duration": 1.94}, {"text": "This is really easy when\nyou have independence.", "start": 2347.1, "duration": 3.63}, {"text": "Sadly, in the real world,\nyou don't have independence.", "start": 2350.73, "duration": 2.48}, {"text": "We're going to call\nthis thing alpha,", "start": 2353.21, "duration": 2.596}, {"text": "and it's also known as the\nload factor of the table.", "start": 2355.806, "duration": 5.754}, {"text": "So if it's one, n equals m.", "start": 2361.56, "duration": 3.4}, {"text": "And so the length\nof a chain is one.", "start": 2364.96, "duration": 2.69}, {"text": "If it's 10, then you have\n10 times as many elements", "start": 2367.65, "duration": 3.7}, {"text": "as you have slots.", "start": 2371.35, "duration": 0.78}, {"text": "But still, the expected\nlength of a chain is 10.", "start": 2372.13, "duration": 2.43}, {"text": "That's a constant.", "start": 2374.56, "duration": 1.1}, {"text": "It's OK.", "start": 2375.66, "duration": 0.81}, {"text": "If it's a 12, that's OK.", "start": 2376.47, "duration": 2.194}, {"text": "It means that you have a bigger\ntable than you have items.", "start": 2378.664, "duration": 2.416}, {"text": "As long as it's a constant,\nas long as we have-- I", "start": 2381.08, "duration": 4.13}, {"text": "erased it by now-- as\nlong as m is theta n,", "start": 2385.21, "duration": 4.607}, {"text": "this is going to be constant.", "start": 2389.817, "duration": 1.208}, {"text": "And so we need to\nmaintain this property.", "start": 2395.73, "duration": 1.98}, {"text": "But as long as you set your\ntable size to the right value,", "start": 2397.71, "duration": 2.58}, {"text": "to be roughly n, this\nwill be constant.", "start": 2400.29, "duration": 4.44}, {"text": "And so the running time of\nan operation, insert, delete,", "start": 2404.73, "duration": 8.17}, {"text": "and search-- Well,\nsearch is really", "start": 2412.9, "duration": 4.58}, {"text": "the hardest because when you\nwant to search for a key,", "start": 2417.48, "duration": 2.95}, {"text": "you map it into your table,\nthen you walk the linked list", "start": 2420.43, "duration": 4.27}, {"text": "and look for the key that\nyou're searching for.", "start": 2424.7, "duration": 1.992}, {"text": "Now is this the key\nyou're searching for?", "start": 2426.692, "duration": 1.708}, {"text": "No, it's not the key\nyou're searching for.", "start": 2428.4, "duration": 1.95}, {"text": "Is this the key\nyou're searching for?", "start": 2430.35, "duration": 1.607}, {"text": "Those are not the keys\nyou're searching for.", "start": 2431.957, "duration": 1.833}, {"text": "You keep going.", "start": 2433.79, "duration": 0.72}, {"text": "Either you find your\nkey or you don't.", "start": 2434.51, "duration": 2.14}, {"text": "But in the worst case, you\nhave to walk the entire list.", "start": 2436.65, "duration": 3.617}, {"text": "Sorry for the bad Star\nTrek reference-- Star Wars.", "start": 2440.267, "duration": 2.083}, {"text": "God.", "start": 2442.35, "duration": 2.76}, {"text": "I'm not awake.", "start": 2445.11, "duration": 0.82}, {"text": "All right.", "start": 2445.93, "duration": 2.44}, {"text": "In general, the running\ntime, in the worst case,", "start": 2448.37, "duration": 2.45}, {"text": "is 1 plus the length\nof your chain.", "start": 2450.82, "duration": 2.965}, {"text": "OK.", "start": 2456.33, "duration": 0.5}, {"text": "So it's going to\nbe 1 plus alpha.", "start": 2456.83, "duration": 2.51}, {"text": "Why do I write one?", "start": 2459.34, "duration": 1.63}, {"text": "Well, because alpha can be much\nsmaller than 1, in general.", "start": 2460.97, "duration": 3.96}, {"text": "And you always have\nto pay the cost", "start": 2464.93, "duration": 1.49}, {"text": "of computing the hash function.", "start": 2466.42, "duration": 1.39}, {"text": "We're going to assume\nthat takes constant time.", "start": 2467.81, "duration": 2.96}, {"text": "And then you have to\nfollow the first pointer.", "start": 2470.77, "duration": 2.43}, {"text": "So you always pay constant time,\nbut then you also pay alpha.", "start": 2473.2, "duration": 4.39}, {"text": "That's your expected life.", "start": 2477.59, "duration": 2.88}, {"text": "OK.", "start": 2480.47, "duration": 0.5}, {"text": "That's the analysis.", "start": 2480.97, "duration": 0.96}, {"text": "It's super simple.", "start": 2481.93, "duration": 1.15}, {"text": "If you assume Simple\nUniform Hashing,", "start": 2483.08, "duration": 2.78}, {"text": "it's clear, as long as your load\nfactor is constant, m theta n,", "start": 2485.86, "duration": 4.69}, {"text": "you get constant running\ntime for all your operations.", "start": 2490.55, "duration": 2.94}, {"text": "Life is good.", "start": 2493.49, "duration": 1.04}, {"text": "This is the intuition\nof why hashing works.", "start": 2494.53, "duration": 2.48}, {"text": "It's not really\nwhy hashing works.", "start": 2497.01, "duration": 2.13}, {"text": "But it's about as far as\nwe're going to get in 006.", "start": 2499.14, "duration": 4.036}, {"text": "I'm going to tell\nyou a little bit more", "start": 2503.176, "duration": 1.624}, {"text": "about why hashing is actually\ngood to practice and in theory.", "start": 2504.8, "duration": 4.58}, {"text": "What are we up to?", "start": 2526.82, "duration": 3.2}, {"text": "Last topic is hash functions.", "start": 2530.02, "duration": 2.72}, {"text": "The one remaining thing\nis how do I construct h?", "start": 2532.74, "duration": 3.64}, {"text": "How do I actually map from\nthis giant universe of keys", "start": 2536.38, "duration": 3.42}, {"text": "to this small set of slots in\nthe table, there's m of them?", "start": 2539.8, "duration": 5.161}, {"text": "I'm going to give you three hash\nfunctions, two of which are,", "start": 2549.26, "duration": 4.88}, {"text": "let's say, common practice, and\nthe third of which is actually", "start": 2554.14, "duration": 3.07}, {"text": "theoretically good.", "start": 2557.21, "duration": 1.5}, {"text": "So the first two are\nnot good theoretically.", "start": 2558.71, "duration": 2.22}, {"text": "You can prove that they're\nbad, but at least they", "start": 2560.93, "duration": 2.13}, {"text": "give you some\nflavor, and they're", "start": 2563.06, "duration": 2.13}, {"text": "still common in practice because\na lot of the time they're OK,", "start": 2565.19, "duration": 6.789}, {"text": "but you can't really\nprove much about them.", "start": 2571.979, "duration": 1.791}, {"text": "OK.", "start": 2576.49, "duration": 0.5}, {"text": "So first method, sort\nof the obvious one,", "start": 2576.99, "duration": 6.01}, {"text": "called the division method.", "start": 2583.0, "duration": 1.94}, {"text": "And if you have\na key, this could", "start": 2584.94, "duration": 1.88}, {"text": "be a giant key, huge\nuniverse of keys,", "start": 2586.82, "duration": 3.13}, {"text": "you just take that\nkey, modulo m,", "start": 2589.95, "duration": 4.115}, {"text": "that gives you a number\nbetween zero and m minus 1.", "start": 2594.065, "duration": 2.125}, {"text": "Done.", "start": 2596.19, "duration": 0.92}, {"text": "It's so easy.", "start": 2597.11, "duration": 2.432}, {"text": "I'm not going to\ntell you in detail", "start": 2599.542, "duration": 1.458}, {"text": "why this is a bad method.", "start": 2601.0, "duration": 1.66}, {"text": "Maybe you can think about it.", "start": 2602.66, "duration": 1.4}, {"text": "It's especially bad if m has\nsome common factors with k.", "start": 2604.06, "duration": 5.83}, {"text": "Like, let's say\nk is even always,", "start": 2609.89, "duration": 3.09}, {"text": "and m is even also\nbecause you say,", "start": 2612.98, "duration": 1.994}, {"text": "oh, I'd like a table the\nsize of power of two.", "start": 2614.974, "duration": 1.916}, {"text": "That seems natural.", "start": 2616.89, "duration": 1.079}, {"text": "Then that will be really\nbad because you'll", "start": 2617.969, "duration": 1.791}, {"text": "use only half the table.", "start": 2619.76, "duration": 1.89}, {"text": "There are lots of situations\nwhere this is bad.", "start": 2621.65, "duration": 2.41}, {"text": "In practice, it's pretty good.", "start": 2624.06, "duration": 2.58}, {"text": "If m is prime, you always\nchoose a prime table size,", "start": 2626.64, "duration": 2.796}, {"text": "so you don't have\nthose common factors.", "start": 2629.436, "duration": 1.624}, {"text": "And it's not very close to\na power of 2 or power of 10", "start": 2631.06, "duration": 3.55}, {"text": "because real world powers\nof 2's and 10's are common.", "start": 2634.61, "duration": 3.31}, {"text": "But it's very hackish, OK?", "start": 2637.92, "duration": 1.82}, {"text": "It works a lot of the\ntime but not always.", "start": 2639.74, "duration": 3.25}, {"text": "A cooler method-- I think\nit's cooler-- still,", "start": 2642.99, "duration": 4.58}, {"text": "you can't prove much\nabout it-- Division didn't", "start": 2647.57, "duration": 6.72}, {"text": "seem to work so great, so\nhow about multiplication?", "start": 2654.29, "duration": 3.0}, {"text": "What does that mean?", "start": 2657.29, "duration": 0.85}, {"text": "Multiply by m, that\nwouldn't be very good.", "start": 2658.14, "duration": 2.28}, {"text": "Now, it's a bit different.", "start": 2660.42, "duration": 4.37}, {"text": "We're going to take the key,\nmultiply it by an integer, a,", "start": 2664.79, "duration": 5.99}, {"text": "and then we're going to do\nthis crazy, crazy stuff.", "start": 2670.78, "duration": 4.22}, {"text": "Take it mod 2 to the w and\nthen shift it right, w minus r.", "start": 2675.0, "duration": 6.92}, {"text": "OK.", "start": 2681.92, "duration": 0.53}, {"text": "What is w?", "start": 2682.45, "duration": 1.44}, {"text": "We're assuming that\nwe're in a w-bit machine.", "start": 2683.89, "duration": 4.49}, {"text": "Remember way back in\nmodels of computation?", "start": 2688.38, "duration": 3.4}, {"text": "Your machine has a\nword size, it's w bits.", "start": 2691.78, "duration": 2.94}, {"text": "So let's suppose it's w bits.", "start": 2694.72, "duration": 1.73}, {"text": "So we have our key, k.", "start": 2696.45, "duration": 3.08}, {"text": "Here it is.", "start": 2699.53, "duration": 0.52}, {"text": "It's w bits long.", "start": 2700.05, "duration": 1.11}, {"text": "We take some number,\na-- think of a as being", "start": 2703.93, "duration": 3.41}, {"text": "a random integer among all\npossible w bit integers.", "start": 2707.34, "duration": 4.73}, {"text": "So it's got some zeros,\nit's got some ones.", "start": 2712.07, "duration": 5.07}, {"text": "And I multiply these.", "start": 2717.14, "duration": 1.81}, {"text": "What does multiplication\nmean in binary?", "start": 2718.95, "duration": 1.68}, {"text": "Well, I take one of these copies\nof k for each one that's here.", "start": 2720.63, "duration": 4.93}, {"text": "So I'm going to\ntake one copy here", "start": 2725.56, "duration": 2.0}, {"text": "because there's a one there.", "start": 2727.56, "duration": 1.76}, {"text": "I'm going to take one copy here\nbecause there's a one there.", "start": 2729.32, "duration": 3.24}, {"text": "And I'm going to\ntake one copy here", "start": 2732.56, "duration": 2.95}, {"text": "because there's a one there.", "start": 2735.51, "duration": 2.35}, {"text": "And on average, half\nof them will be ones.", "start": 2737.86, "duration": 3.13}, {"text": "So I have various copies of k,\nand then I just add them up.", "start": 2740.99, "duration": 5.16}, {"text": "And you know, stuff happens.", "start": 2746.15, "duration": 1.27}, {"text": "I get some gobbledygook here.", "start": 2747.42, "duration": 2.66}, {"text": "OK.", "start": 2750.08, "duration": 0.5}, {"text": "How big is it?", "start": 2750.58, "duration": 0.69}, {"text": "In general, it's two words long.", "start": 2751.27, "duration": 2.44}, {"text": "When I multiply two\nwords I get two words.", "start": 2753.71, "duration": 3.38}, {"text": "It could be twice\nas long, in general.", "start": 2757.09, "duration": 2.1}, {"text": "And what this business is doing\nis saying take the right word,", "start": 2759.19, "duration": 4.29}, {"text": "this right half here-- let\nthe right word in, I guess,", "start": 2763.48, "duration": 5.11}, {"text": "if you see vampire\nmovies-- and then shift", "start": 2768.59, "duration": 3.93}, {"text": "right-- this is a shift right\noperation-- by w minus r.", "start": 2772.52, "duration": 4.184}, {"text": "I didn't even say what r is.", "start": 2776.704, "duration": 1.166}, {"text": "But basically, what\nI want is these bits.", "start": 2777.87, "duration": 3.26}, {"text": "I want r bits here--\nthis is w bits.", "start": 2781.13, "duration": 3.65}, {"text": "I want the leftmost r bits\nof the rightmost w bits", "start": 2784.78, "duration": 4.478}, {"text": "because I shift right here\nand get rid of all these guys.", "start": 2789.258, "duration": 3.252}, {"text": "r-- I should say,\nm, is two to the r.", "start": 2792.51, "duration": 4.134}, {"text": "So I'm going to\nassume here I have", "start": 2796.644, "duration": 1.416}, {"text": "a table of size a power of\n2, and then this number will", "start": 2798.06, "duration": 4.31}, {"text": "be a number between\n0 and m minus 1.", "start": 2802.37, "duration": 5.07}, {"text": "OK.", "start": 2807.44, "duration": 0.5}, {"text": "Why does this work?", "start": 2807.94, "duration": 2.32}, {"text": "It's intuitive.", "start": 2810.26, "duration": 2.005}, {"text": "In practice it works quite\nwell because what you're", "start": 2812.265, "duration": 2.125}, {"text": "doing is taking a whole\nbunch of sort of randomly", "start": 2814.39, "duration": 2.7}, {"text": "shifted copies of k, adding\nthem up-- you get carries,", "start": 2817.09, "duration": 3.11}, {"text": "things get mixed\nup-- This is hashing.", "start": 2820.2, "duration": 2.49}, {"text": "This is-- you're taking\nk, sort of cutting it up", "start": 2822.69, "duration": 2.14}, {"text": "while you're shifting it around,\nadding things and they collide,", "start": 2824.83, "duration": 3.21}, {"text": "and weird stuff happens.", "start": 2828.04, "duration": 1.62}, {"text": "You sort of randomize stuff.", "start": 2829.66, "duration": 2.01}, {"text": "Out here, you don't\nget much randomization", "start": 2831.67, "duration": 1.77}, {"text": "because most-- like\nthe last bit could just", "start": 2833.44, "duration": 1.98}, {"text": "be this one bit of k.", "start": 2835.42, "duration": 1.5}, {"text": "But in the middle, everybody's\nkind of colliding together.", "start": 2836.92, "duration": 2.81}, {"text": "And so intuitively,\nyou're mixing", "start": 2839.73, "duration": 1.46}, {"text": "lots of things in the center.", "start": 2841.19, "duration": 1.46}, {"text": "You take those r bits,\nroughly, in the center.", "start": 2842.65, "duration": 2.66}, {"text": "That will be nicely mixed up.", "start": 2845.31, "duration": 2.24}, {"text": "And most of the time\nthis works well.", "start": 2847.55, "duration": 1.73}, {"text": "In practice it works well-- I\nhave some things written here.", "start": 2849.28, "duration": 4.67}, {"text": "a better be odd, otherwise\nyou're throwing away stuff.", "start": 2853.95, "duration": 3.43}, {"text": "And it should not be very\nclose to a power of 2.", "start": 2857.38, "duration": 2.6}, {"text": "But it should be in between 2\nto the r minus 1 and 2 to the r.", "start": 2859.98, "duration": 4.86}, {"text": "Cool.", "start": 2864.84, "duration": 2.24}, {"text": "One more.", "start": 2867.08, "duration": 0.5}, {"text": "Again, theoretically,\nthis can be bad.", "start": 2872.75, "duration": 2.48}, {"text": "And I leave it as an exercise\nto find situations, find", "start": 2875.23, "duration": 2.7}, {"text": "key values where this\ndoes not do a good job.", "start": 2877.93, "duration": 2.51}, {"text": "The cool method is\ncalled universal hashing.", "start": 2883.79, "duration": 3.75}, {"text": "This is something that's a\nbit beyond the scope of 006.", "start": 2891.12, "duration": 3.375}, {"text": "If you want to understand it\nbetter you should take 046.", "start": 2894.495, "duration": 2.945}, {"text": "But I'll give you the flavor and\nthe method, one of the methods.", "start": 2897.44, "duration": 3.997}, {"text": "There's actually\nmany ways to do this.", "start": 2901.437, "duration": 1.583}, {"text": "We see a mod m on the outside.", "start": 2913.69, "duration": 1.309}, {"text": "That's just division method just\nto make the number between 0", "start": 2914.999, "duration": 2.541}, {"text": "and a minus 1.", "start": 2917.54, "duration": 2.22}, {"text": "Here's our key.", "start": 2919.76, "duration": 1.485}, {"text": "And then there's\nthese numbers a and b.", "start": 2921.245, "duration": 1.625}, {"text": "These are going to be\nrandom numbers between 0", "start": 2922.87, "duration": 6.35}, {"text": "and p minus 1.", "start": 2929.22, "duration": 2.13}, {"text": "What's p?", "start": 2931.35, "duration": 1.14}, {"text": "Prime number bigger than\nthe size of the universe.", "start": 2932.49, "duration": 6.17}, {"text": "So it's a big prime number.", "start": 2938.66, "duration": 1.77}, {"text": "I think we know how\nto find prime numbers.", "start": 2940.43, "duration": 3.44}, {"text": "We don't know in this\nclass, but people", "start": 2943.87, "duration": 1.9}, {"text": "know how to find\nthe prime numbers.", "start": 2945.77, "duration": 1.97}, {"text": "So there's a subroutine\nhere, find a big prime number", "start": 2947.74, "duration": 2.237}, {"text": "bigger than your universe.", "start": 2949.977, "duration": 1.083}, {"text": "It's not too hard to do that.", "start": 2951.06, "duration": 1.208}, {"text": "We can do it in polynomial time.", "start": 2952.268, "duration": 3.101}, {"text": "That's just set up.", "start": 2955.369, "duration": 0.791}, {"text": "You do that once for\na given size table.", "start": 2956.16, "duration": 3.06}, {"text": "And then you choose two\nrandom numbers, a and b.", "start": 2959.22, "duration": 4.696}, {"text": "And then this is the\nhash function, a times k", "start": 2963.916, "duration": 1.874}, {"text": "plus b, mod p mod m.", "start": 2965.79, "duration": 3.19}, {"text": "OK.", "start": 2968.98, "duration": 0.5}, {"text": "What does this do?", "start": 2969.48, "duration": 3.11}, {"text": "It turns out-- here's\nthe interesting part.", "start": 2972.59, "duration": 3.22}, {"text": "For worst case keys, k1\nand k2, that are distinct,", "start": 2975.81, "duration": 9.45}, {"text": "the probability of h of k1\nequaling h of k2 is 1 over n.", "start": 2985.26, "duration": 11.39}, {"text": "So probability of two keys\nthat are different colliding", "start": 2996.65, "duration": 3.17}, {"text": "is 1 over m, for\nthe worst case keys.", "start": 2999.82, "duration": 3.252}, {"text": "What the heck does that mean?", "start": 3003.072, "duration": 1.208}, {"text": "What's the probability over?", "start": 3004.28, "duration": 1.49}, {"text": "Any suggestions?", "start": 3005.77, "duration": 2.62}, {"text": "What's random here?", "start": 3008.39, "duration": 3.06}, {"text": "AUDIENCE: a and b.", "start": 3011.45, "duration": 0.75}, {"text": "PROFESSOR: a and b.", "start": 3012.2, "duration": 0.89}, {"text": "This is the probability\nover a and b.", "start": 3013.09, "duration": 2.16}, {"text": "This is the probability over the\nchoice of your hash function.", "start": 3015.25, "duration": 3.1}, {"text": "So it's the worst case\ninputs, worst case insertions,", "start": 3018.35, "duration": 3.68}, {"text": "but random hash function.", "start": 3022.03, "duration": 2.7}, {"text": "As long as you choose\nyour random hash function,", "start": 3024.73, "duration": 2.0}, {"text": "the probability of\ncollision is 1 over m.", "start": 3026.73, "duration": 1.82}, {"text": "This is the ideal situation", "start": 3028.55, "duration": 2.58}, {"text": "And so you can prove, just\nlike we analyzed here--", "start": 3031.13, "duration": 3.01}, {"text": "It's a little more work.", "start": 3034.14, "duration": 1.0}, {"text": "It's in the notes.", "start": 3035.14, "duration": 0.77}, {"text": "You use linearity\nof expectation.", "start": 3035.91, "duration": 1.65}, {"text": "And you can prove, still,\nthat the expected length", "start": 3037.56, "duration": 2.14}, {"text": "of a chain-- the expected number\nof collisions that a key has", "start": 3039.7, "duration": 2.92}, {"text": "with another key is the load\nfactor, in the worst case,", "start": 3042.62, "duration": 6.1}, {"text": "but in expectation for\na given hash function.", "start": 3048.72, "duration": 2.782}, {"text": "So still, the expected\nlength of a chain,", "start": 3051.502, "duration": 1.708}, {"text": "and therefore, the\nexpected running time", "start": 3053.21, "duration": 2.19}, {"text": "of hashing with chaining,\nusing this hash function,", "start": 3055.4, "duration": 2.934}, {"text": "or this collection of hash\nfunctions, or a randomly chosen", "start": 3058.334, "duration": 2.416}, {"text": "one, is constant for\nconstant load factor.", "start": 3060.75, "duration": 2.7}, {"text": "And that's why hashing\nreally works in theory.", "start": 3063.45, "duration": 2.239}, {"text": "We're not going to go into\ndetails of this again.", "start": 3065.689, "duration": 2.041}, {"text": "Take 6.046 if you want to know.", "start": 3067.73, "duration": 1.93}, {"text": "But this should make you\nfeel more comfortable.", "start": 3069.66, "duration": 2.81}, {"text": "And we'll see other ways\ndo hashing next class.", "start": 3072.47, "duration": 3.02}]